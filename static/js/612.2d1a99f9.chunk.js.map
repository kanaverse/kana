{"version":3,"file":"static/js/612.2d1a99f9.chunk.js","mappings":"yDAAIA,E,2DACAC,EAAO,KA4CX,SAASC,IACP,IAIIC,EAJQH,EAAOI,OACdC,YAAY,CAAC,iBAAkB,YAC/BC,YAAY,iBAEOC,SACxB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BP,EAAYQ,UAAY,SAAAC,GACtB,IAAIC,EAAOV,EAAYC,OAGvBS,EAAKC,SAAQ,SAACC,UACLA,EAAEC,KACX,IAEAP,EAAQI,EACV,EAEAV,EAAYc,QAAU,SAAAL,GACpBF,EAAO,IAAIQ,MAAM,iDAADC,OAAkDP,EAAMQ,OAAOC,YACjF,CACF,GACF,CAEO,SAAeC,IAAU,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAKC,SAAjCF,IAFC,OAEDA,GAAAG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MALO,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACChC,EAAK,KAAD,SAAA8B,EAAAG,OAAA,SACHhC,KAAa,wBAAA6B,EAAAI,OAAA,GAAAN,EAAA,MACrBL,MAAA,KAAAC,UAAA,CAIM,SAAeW,EAAQC,EAAAC,GAAA,OAAAC,EAAAf,MAAC,KAADC,UAAA,CAyD7B,SAAAc,IAAA,OAAAA,GAAAb,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAzDM,SAAAY,EAAwBC,EAAIC,GAAM,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAArB,EAAAA,EAAAA,KAAAG,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAhB,KAAA,EACjChC,EAAK,KAAD,EAoDV,OAnDI0C,EAAQ3C,EAAOI,OAAOC,YAAY,CAAC,OAAQ,aAAc,aACzDuC,EAAM,IAAIpC,SAAQ,SAACC,EAASC,GAC9BiC,EAAMO,WAAa,SAACtC,GAClBH,EAAQ,KACV,EACAkC,EAAM1B,QAAU,SAACL,GACfF,EAAO,IAAIQ,MAAM,sCAADC,OAAuCsB,EAAE,qBAAAtB,OAAoBP,EAAMQ,OAAOC,YAC5F,CACF,IAEIwB,EAAaF,EAAMrC,YAAY,QAC/BwC,EAAaH,EAAMrC,YAAY,aAE/ByC,EAAUD,EAAWK,IAAIV,GACzBO,EAAS,IAAIxC,SAAQ,SAACC,EAASC,GACjCqC,EAAQpC,UAAY,SAAAC,GAClB,IAAIwC,EAAOL,EAAQ3C,OACC,qBAATgD,EACTA,EAAO,CAAEC,MAAO,EAAGZ,GAAIA,GAEvBW,EAAKC,QAGP,IAAIC,EAAc,IAAI9C,SAAQ,SAACC,EAASC,GACtC,IAAI6C,EAAaV,EAAWW,IAAI,CAAEf,GAAIA,EAAIgB,QAASf,EAAOA,SAC1Da,EAAW5C,UAAY,SAAAC,GACrBH,GAAQ,EACV,EACA8C,EAAWtC,QAAU,SAAAL,GACnBF,EAAO,IAAIQ,MAAM,uBAADC,OAAwBsB,EAAE,gBAAAtB,OAAeP,EAAMQ,OAAOC,YACxE,CACF,IAEIqC,EAAa,IAAIlD,SAAQ,SAACC,EAASC,GACrC,IAAI6C,EAAaT,EAAWU,IAAIJ,GAChCG,EAAW5C,UAAY,SAAAC,GACrBH,GAAQ,EACV,EACA8C,EAAWtC,QAAU,SAAAL,GACnBF,EAAO,IAAIQ,MAAM,oCAADC,OAAqCsB,EAAE,gBAAAtB,OAAeP,EAAMQ,OAAOC,YACrF,CACF,IAEAZ,EAAQD,QAAQmD,IAAI,CAACL,EAAaI,IACpC,EAEAX,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,+BAADC,OAAgCsB,EAAE,gBAAAtB,OAAeP,EAAMQ,OAAOC,YAChF,CACF,IAEA4B,EAAAhB,KAAA,GACMW,EAAI,KAAD,UAAAK,EAAAhB,KAAA,GACHe,EAAO,KAAD,UAAAC,EAAAf,OAAA,mCAAAe,EAAAd,OAAA,GAAAK,EAAA,MAEbhB,MAAA,KAAAC,UAAA,CAEM,SAAemC,EAAYC,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,EAAAzC,MAAC,KAADC,UAAA,CAqED,SAAjCwC,IAFC,OAEDA,GAAAvC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MArEO,SAAAsC,EAA4BzB,EAAI0B,EAAOnD,EAAOoD,GAAK,IAAAzB,EAAAC,EAAAyB,EAAAvB,EAAAwB,EAAAC,EAAAxB,EAAAyB,EAAA,OAAA7C,EAAAA,EAAAA,KAAAG,MAAA,SAAA2C,GAAA,cAAAA,EAAAzC,KAAAyC,EAAAxC,MAAA,cAAAwC,EAAAxC,KAAA,EAClDhC,EAAK,KAAD,EA8DV,OA7DI0C,EAAQ3C,EAAOI,OAAOC,YACxB,CAAC,WAAY,iBACb,aAEEuC,EAAM,IAAIpC,SAAQ,SAACC,EAASC,GAC9BiC,EAAMO,WAAa,SAACtC,GAClBH,EAAQ,KACV,EACAkC,EAAM1B,QAAU,SAACL,GACfF,EAAO,IAAIQ,MAAM,0CAADC,OAA2CsB,EAAE,qBAAAtB,OAAoBP,EAAMQ,OAAOC,YAChG,CACF,IAEIgD,EAAiB1B,EAAMrC,YAAY,YACnCwC,EAAaH,EAAMrC,YAAY,iBAE/BgE,EAAW,SAAAI,GACb,IAAIpB,EAAc,IAAI9C,SAAQ,SAACC,EAASC,GACtC,IAAI6C,EAAac,EAAeb,IAAI,CAAEf,GAAIiC,EAAQjB,QAASU,EAAMzB,SACjEa,EAAW5C,UAAY,SAAAC,GACrBH,GAAQ,EACV,EACA8C,EAAWtC,QAAU,SAAAL,GACnBF,EAAO,IAAIQ,MAAM,gCAADC,OAAiCuD,EAAM,gBAAAvD,OAAeP,EAAMQ,OAAOC,YACrF,CACF,IAEIsD,EAAY,IAAInE,SAAQ,SAACC,EAASC,GACpC,IAAI6C,EAAaT,EAAWU,IAAI,CAC9Bf,GAAIiC,EACJ1D,MAAOA,EACP4D,KAAMC,OAAO,IAAIC,MACjBV,MAAOA,IAETb,EAAW5C,UAAY,SAAAC,GACrBH,GAAQ,EACV,EACA8C,EAAWtC,QAAU,SAAAL,GACnBF,EAAO,IAAIQ,MAAM,oCAADC,OAAqCuD,EAAM,gBAAAvD,OAAeP,EAAMQ,OAAOC,YACzF,CACF,IAGA,MAAO,CAACqD,EAAQpB,EAAaqB,EAC/B,EAGW,OAAPlC,GACEM,EAAUD,EAAWvC,SACzBgE,EAAiB,IAAI/D,SAAQ,SAACC,EAASC,GACrCqC,EAAQpC,UAAY,SAAAC,GAClBH,EAAQ6D,EAASS,OAAOhC,EAAQ3C,OAAO4E,SACzC,EACAjC,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,qDAADC,OAAsDP,EAAMQ,OAAOC,YACrF,CACF,KAEAkD,EAAiBD,EAAS7B,GAG5BgC,EAAAxC,KAAA,GACmBsC,EAAe,KAAD,GAAvB,OAANC,EAAMC,EAAAQ,KAAAR,EAAAxC,KAAA,GACJW,EAAI,KAAD,UAAA6B,EAAAvC,OAAA,SACFsC,EAAO,IAAE,yBAAAC,EAAAtC,OAAA,GAAA+B,EAAA,MACjB1C,MAAA,KAAAC,UAAA,CAIM,SAAeyD,EAAQC,GAAA,OAAAC,EAAA5D,MAAC,KAADC,UAAA,CAqB7B,SAAA2D,IAAA,OAAAA,GAAA1D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MArBM,SAAAyD,EAAwB5C,GAAE,IAAAI,EAAAyC,EAAAlC,EAAA,OAAAzB,EAAAA,EAAAA,KAAAG,MAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,cAAAsD,EAAAtD,KAAA,EACzBhC,EAAK,KAAD,EAaR,OAZE4C,EAAa7C,EAAOI,OACrBC,YAAY,CAAC,QAAS,YACtBC,YAAY,QAEXgF,EAAe,IAAI9E,SAAQ,SAACC,EAASC,GACvC,IAAIqC,EAAUF,EAAWM,IAAIV,GAC7BM,EAAQpC,UAAY,SAAAC,GAClBH,OAA2B+E,IAAnBzC,EAAQ3C,OAAuB2C,EAAQ3C,OAAS,KAC1D,EACA2C,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,2BAADC,OAA4BsB,EAAE,kBAAAtB,OAAiBP,EAAMQ,OAAOC,YAC9E,CACF,IAAEkE,EAAAtD,KAAA,EAEeqD,EAAa,KAAD,EAG5B,OAFY,QADTlC,EAAImC,EAAAN,QAEN7B,EAAO,IAAIqC,WAAWrC,EAAc,UACrCmC,EAAArD,OAAA,SACMkB,GAAI,wBAAAmC,EAAApD,OAAA,GAAAkD,EAAA,MACZ7D,MAAA,KAAAC,UAAA,CAEM,SAAeiE,EAAYC,GAAA,OAAAC,EAAApE,MAAC,KAADC,UAAA,CAuBC,SAAnCmE,IAFC,OAEDA,GAAAlE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAvBO,SAAAiE,EAA4BpD,GAAE,IAAA4B,EAAAyB,EAAA1C,EAAA,OAAAzB,EAAAA,EAAAA,KAAAG,MAAA,SAAAiE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,cAAA8D,EAAA9D,KAAA,EAC7BhC,EAAK,KAAD,EAaR,OAZEoE,EAAiBrE,EAAOI,OACzBC,YAAY,CAAC,YAAa,YAC1BC,YAAY,YAEXwF,EAAc,IAAItF,SAAQ,SAACC,EAASC,GACtC,IAAIqC,EAAUsB,EAAelB,IAAIV,GACjCM,EAAQpC,UAAY,SAAAC,GAClBH,OAA2B+E,IAAnBzC,EAAQ3C,OAAuB2C,EAAQ3C,OAAS,KAC1D,EACA2C,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,+BAADC,OAAgCsB,EAAE,kBAAAtB,OAAiBP,EAAMQ,OAAOC,YAClF,CACF,IAAE0E,EAAA9D,KAAA,EAEe6D,EAAY,KAAD,EAG3B,OAFY,QADT1C,EAAI2C,EAAAd,QAEN7B,EAAO,IAAIqC,WAAWrC,EAAc,UACrC2C,EAAA7D,OAAA,SACMkB,GAAI,wBAAA2C,EAAA5D,OAAA,GAAA0D,EAAA,MACZrE,MAAA,KAAAC,UAAA,UAIcuE,EAAaC,GAAA,OAAAC,EAAA1E,MAAC,KAADC,UAAA,UAAAyE,IAU3B,OAV2BA,GAAAxE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA5B,SAAAuE,EAA6BpF,GAAC,IAAAqF,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA7E,EAAAA,EAAAA,KAAAG,MAAA,SAAA2E,GAAA,cAAAA,EAAAzE,KAAAyE,EAAAxE,MAAA,cAAAwE,EAAAxE,KAAA,EACPlB,EAAE,KAAD,EAAV,MAARqF,EAAQK,EAAAxB,gBACYyB,OAAK,CAAAD,EAAAxE,KAAA,SACvBoE,EAAc,GAAEC,GAAAK,EAAAA,EAAAA,GACJP,GAAQK,EAAAzE,KAAA,EAAAsE,EAAAM,IAAA,WAAAL,EAAAD,EAAAO,KAAAC,KAAC,CAADL,EAAAxE,KAAA,SACX,OADFuE,EAACD,EAAAQ,MAAAN,EAAAO,GACVX,EAAWI,EAAAxE,KAAA,GAAY+D,EAAcQ,GAAE,QAAAC,EAAAQ,GAAAR,EAAAxB,KAAAwB,EAAAO,GAA3BE,KAAIC,KAAAV,EAAAO,GAAAP,EAAAQ,IAAA,QAAAR,EAAAxE,KAAA,gBAAAwE,EAAAxE,KAAA,iBAAAwE,EAAAzE,KAAA,GAAAyE,EAAAW,GAAAX,EAAA,SAAAH,EAAAe,EAAAZ,EAAAW,IAAA,eAAAX,EAAAzE,KAAA,GAAAsE,EAAAgB,IAAAb,EAAAc,OAAC,IAAD,QAElBnB,EAAWC,EAAY,eAAAI,EAAAvE,OAAA,SAElBkE,GAAQ,yBAAAK,EAAAtE,OAAA,GAAAgE,EAAA,0BAChB3E,MAAA,KAAAC,UAAA,CAED,SAAS+F,EAAY/E,EAAII,EAAYC,GACnC,IAAIC,EAAUD,EAAWK,IAAIV,GAE7B,OAAO,IAAIjC,SAAQ,SAACC,EAASC,GAC3BqC,EAAQpC,UAAY,SAAAC,GAClB,IAAIwC,EAAOL,EAAQ3C,OACfqH,EAAWrE,EAAY,MAAI,EAC3BsE,EAAW,GAEE,IAAbD,GACFC,EAASR,KACP,IAAI1G,SAAQ,SAACC,EAASC,GACpB,IAAIqC,EAAUF,EAAW8E,OAAOlF,GAChCM,EAAQpC,UAAY,SAAAC,GAClBH,GAAQ,EACV,EACAsC,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,yBAADC,OAA0BsB,EAAE,kBAAAtB,OAAiBP,EAAMQ,OAAOC,YAC5E,CACF,KAGFqG,EAASR,KACP,IAAI1G,SAAQ,SAACC,EAASC,GACpB,IAAIqC,EAAUD,EAAW6E,OAAOlF,GAChCM,EAAQpC,UAAY,SAAAC,GAClBH,GAAQ,EACV,EACAsC,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,kCAADC,OAAmCsB,EAAE,kBAAAtB,OAAiBP,EAAMQ,OAAOC,YACrF,CACF,MAIFqG,EAASR,KACP,IAAI1G,SAAQ,SAACC,EAASC,GACpB0C,EAAKC,MAAQoE,EACb,IAAI1E,EAAUD,EAAWU,IAAIJ,GAC7BL,EAAQpC,UAAY,SAAAC,GAClBH,GAAQ,EACV,EACAsC,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,kCAADC,OAAmCsB,EAAE,gBAAAtB,OAAeP,EAAMQ,OAAOC,YACnF,CACF,KAIJZ,EAAQiH,EACV,EAEA3E,EAAQ9B,QAAU,SAAAL,GAChBgH,QAAQC,IAAIjH,GACZF,EAAO,IAAIQ,MAAM,oCAADC,OAAqCsB,EAAE,kBAAAtB,OAAiBP,EAAMQ,OAAOC,YACvF,CACF,GACF,CA6FC,SAAAyG,IAAA,OAAAA,GAAApG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MArEM,SAAAmG,EAA8BtF,GAAE,IAAAE,EAAAC,EAAAyB,EAAA2D,EAAAnF,EAAAoF,EAAAC,EAAAnF,EAAAoF,EAAA,OAAAxG,EAAAA,EAAAA,KAAAG,MAAA,SAAAsG,GAAA,cAAAA,EAAApG,KAAAoG,EAAAnG,MAAA,cAAAmG,EAAAnG,KAAA,EAC/BhC,EAAK,KAAD,EA+DV,OA9DI0C,EAAQ3C,EAAOI,OAAOC,YACxB,CAAC,WAAY,gBAAiB,OAAQ,aACtC,aAEEuC,EAAM,IAAIpC,SAAQ,SAACC,EAASC,GAC9BiC,EAAMO,WAAa,SAACtC,GAClBH,EAAQ,KACV,EACAkC,EAAM1B,QAAU,SAACL,GACfF,EAAO,IAAIQ,MAAM,4CAADC,OAA6CsB,EAAE,qBAAAtB,OAAoBP,EAAMQ,OAAOC,YAClG,CACF,IAEIgD,EAAiB1B,EAAMrC,YAAY,YACnC0H,EAAsBrF,EAAMrC,YAAY,iBACxCuC,EAAaF,EAAMrC,YAAY,QAC/B2H,EAAkBtF,EAAMrC,YAAY,aAEpC4H,EAAmB,IAAI1H,SAAQ,SAACC,EAASC,GAC3C,IAAIqC,EAAUsB,EAAesD,OAAOlF,GACpCM,EAAQpC,UAAY,SAAAC,GAClBH,GAAQ,EACV,EACAsC,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,6BAADC,OAA8BsB,EAAE,kBAAAtB,OAAiBP,EAAMQ,OAAOC,YAChF,CACF,IAGI0B,EAAUiF,EAAoB7E,IAAIV,GAClC0F,EAAe,IAAI3H,SAAQ,SAACC,EAASC,GACvCqC,EAAQpC,UAAY,SAAAC,GAIlB,IAHA,IAAIwC,EAAOL,EAAQ3C,OAEfiI,EAAc,GAClBC,EAAA,EAAAC,EAAgBC,OAAOC,OAAOrF,EAAY,MAAY,UAAEkF,EAAAC,EAAAvD,OAAAsD,IAAE,CAArD,IACuBI,EADjBC,EAACJ,EAAAD,GAAAM,GAAAjC,EAAAA,EAAAA,GACMgC,EAAS,OAAC,IAA1B,IAAAC,EAAAhC,MAAA8B,EAAAE,EAAA/B,KAAAC,MAA4B,CAAC,IAAlBQ,EAACoB,EAAA3B,MACVsB,EAAYnB,KAAKM,EAAYF,EAAM,GAAGzE,EAAYoF,GACpD,CAAC,OAAAY,GAAAD,EAAAvB,EAAAwB,EAAA,SAAAD,EAAAtB,GAAA,CACH,CAIA,IAAIwB,EAAU,IAAItI,SAAQ,SAACC,EAASC,GAClC,IAAIqC,EAAUiF,EAAoBL,OAAOlF,GACzCM,EAAQpC,UAAY,SAAAC,GAClBH,GAAQ,EACV,EACAsC,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,sCAADC,OAAuCsB,EAAE,kBAAAtB,OAAiBP,EAAMQ,OAAOC,YACzF,CACF,IAEAgH,EAAYnB,KAAK4B,GACjBrI,EAAQ4H,EACV,EAEAtF,EAAQ9B,QAAU,SAAAL,GAChBF,EAAO,IAAIQ,MAAM,wCAADC,OAAyCsB,EAAE,kBAAAtB,OAAiBP,EAAMQ,OAAOC,YAC3F,CACF,IAEA+G,EAAAnG,KAAA,GACMiG,EAAiB,KAAD,UAAAE,EAAAnG,KAAA,GAChB+D,EAAcmC,GAAc,KAAD,UAAAC,EAAAnG,KAAA,GAC3BW,EAAI,KAAD,UAAAwF,EAAAlG,OAAA,UACF,GAAI,yBAAAkG,EAAAjG,OAAA,GAAA4F,EAAA,MACZvG,MAAA,KAAAC,UAAA,C,IChaGsH,E,6BACA9I,EAAO,KAiCJ,SAAekD,EAAGd,GAAA,OAAA2G,EAAAxH,MAAC,KAADC,UAAA,CA4ExB,SAAAuH,IAAA,OAAAA,GAAAtH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MA5EM,SAAAC,EAAmBoH,GAAG,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/G,EAAAC,EAAAC,EAAA8G,EAAA1G,EAAA2G,EAAAlI,UAAA,OAAAE,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAA8B,OAA5BiH,EAAMS,EAAA3E,OAAA,QAAAQ,IAAAmE,EAAA,GAAAA,EAAA,GAAG,KAAMR,EAAKQ,EAAA3E,OAAA,QAAAQ,IAAAmE,EAAA,IAAAA,EAAA,GAAQ5H,EAAAE,KAAA,EACnDhC,EAAK,KAAD,KAELkJ,EAAM,CAADpH,EAAAE,KAAA,SAgBN,OAfEU,EAAQoG,EAAY3I,OAAOC,YAAY,CAAC,aAAc,YACtDqJ,EAAiB/G,EAAMrC,YAAY,aAEnCgJ,EAAa,IAAI9I,SAAQ,SAACC,EAASC,GACrC,IAAIkJ,EAAUF,EAAevG,IAAI8F,GACjCW,EAAQjJ,UAAY,SAAAC,QACK4E,IAAnBoE,EAAQxJ,OACVK,EAAQmJ,EAAQxJ,OAAOqD,SAEvBhD,EAAQ,KAEZ,EACAmJ,EAAQ3I,QAAU,SAAAL,GAChBF,EAAO,mCAADS,OAAoC8H,EAAG,MAAA9H,OAAKP,EAAMQ,OAAOC,WACjE,CACF,IAAEU,EAAAE,KAAA,GAEgBqH,EAAW,KAAD,GAAnB,GACK,QADVC,EAAKxH,EAAAkD,MACS,CAAAlD,EAAAE,KAAA,gBAAAF,EAAAG,OAAA,SACTqH,GAAK,QASf,OAHCC,EADY,MAAVN,EACIW,MAAMZ,GAENY,MAAMZ,EAAKC,GAClBnH,EAAAE,KAAA,GAEeuH,EAAI,KAAD,GAAZ,IAAHC,EAAG1H,EAAAkD,MACE6E,GAAG,CAAD/H,EAAAE,KAAA,eACH,IAAIf,MAAM,uBAAyB+H,EAAM,MAAQQ,EAAIM,OAAS,KAAK,KAAD,UAAAhI,EAAAE,KAAA,GAEvDwH,EAAIO,cAAc,KAAD,GAkCpC,OAlCItH,EAAMX,EAAAkD,KASNtC,EAAQoG,EAAY3I,OAAOC,YAAY,CAAC,aAAc,aAKtDuC,EAAM,IAAIpC,SAAQ,SAACC,EAASC,GAC9BiC,EAAMO,WAAa,SAACtC,GAClBH,EAAQ,KACV,EACAkC,EAAM1B,QAAU,SAACL,GACfF,EAAO,IAAIQ,MAAM,gCAADC,OAAiC8H,EAAG,qBAAA9H,OAAoBP,EAAMQ,OAAOC,YACvF,CACF,IAEIqI,EAAiB/G,EAAMrC,YAAY,aACnC0C,EAAS,IAAIxC,SAAQ,SAACC,EAASC,GACjC,IAAI6C,EAAamG,EAAelG,IAAI,CAAEyF,IAAKA,EAAKxF,QAASf,IACzDa,EAAW5C,UAAY,SAAAC,GACrBH,GAAQ,EACV,EACA8C,EAAWtC,QAAU,SAAAL,GACnBF,EAAO,IAAIQ,MAAM,mBAADC,OAAoB8H,EAAG,qBAAA9H,OAAoBP,EAAMQ,OAAOC,YAC1E,CACF,IAEAU,EAAAE,KAAA,GACMe,EAAO,KAAD,UAAAjB,EAAAE,KAAA,GACNW,EAAI,KAAD,UAAAb,EAAAG,OAAA,SACFQ,GAAM,yBAAAX,EAAAI,OAAA,GAAAN,EAAA,KACdmH,EAAAxH,MAAA,KAAAC,UAAA,C,qCCxGKwI,EAAQ,2CAA2C,SAC1CC,EAAa7H,GAAA,OAAA8H,EAAA3I,MAAC,KAADC,UAAA,UAAA0I,IAG3B,OAH2BA,GAAAzI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA5B,SAAAsC,EAA6B+E,GAAG,IAAAvG,EAAA,OAAAf,EAAAA,EAAAA,KAAAG,MAAA,SAAA2C,GAAA,cAAAA,EAAAzC,KAAAyC,EAAAxC,MAAA,cAAAwC,EAAAxC,KAAA,EACXmI,EAAcH,EAAQ,IAAMI,mBAAmBpB,IAAM,KAAD,EAA7D,OAANvG,EAAM+B,EAAAQ,KAAAR,EAAAvC,OAAA,SACH,IAAIuD,WAAW/C,IAAO,wBAAA+B,EAAAtC,OAAA,GAAA+B,EAAA,MAC9B1C,MAAA,KAAAC,UAAA,CA0BM,SAAS6I,EAAeC,EAAQC,GACrC,GAAKD,EAIL,GAAI7D,MAAM+D,QAAQF,GAAS,CAAC,IACEhE,EADHD,GAAAK,EAAAA,EAAAA,GACH4D,GAAM,IAA5B,IAAAjE,EAAAM,MAAAL,EAAAD,EAAAO,KAAAC,MAA8B,CAC5BwD,EADgB/D,EAAAQ,MACQyD,EAC1B,CAAC,OAAA3B,GAAAvC,EAAAe,EAAAwB,EAAA,SAAAvC,EAAAgB,GAAA,CACH,MAAO,GAAIiD,EAAOG,aAAelC,OAC/B,QAAAF,EAAA,EAAAqC,EAA6BnC,OAAOoC,QAAQL,GAAOjC,EAAAqC,EAAA3F,OAAAsD,IAAE,CAAhD,IAAAuC,GAAAC,EAAAA,EAAAA,GAAAH,EAAArC,GAAA,GAAUuC,EAAA,GACbP,EADsBO,EAAA,GACEL,EAC1B,MACK,GAAIO,YAAYC,OAAOT,GAAS,CACrC,KAAMA,EAAO7H,kBAAkBqI,aAC7B,KAAM,qDAERP,EAAMtD,KAAKqD,EAAO7H,OACpB,CACF,CAEO,SAASuI,EAAYC,GAC1BC,YAAY,CACVC,KAAK,GAADjK,OAAK+J,EAAI,WAEjB,CAEO,SAASG,EAAYH,EAAMI,GAChC,GAAmB,oBAARA,EACTH,YAAY,CACVC,KAAK,GAADjK,OAAK+J,EAAI,gBAEV,CACL,IAAIK,EAAe,GACnBjB,EAAegB,EAAMC,GACrBJ,YACE,CACEC,KAAK,GAADjK,OAAK+J,EAAI,SACbM,KAAMF,GAERC,EAEJ,CACF,CAEO,SAASE,EAAUL,EAAMvC,EAAK6C,GACnCP,YAAY,CACVC,KAAK,GAADjK,OAAKiK,EAAI,UACbI,KAAM,CACJG,OAAQ9C,EAAI+C,WACZF,MAAOA,IAGb,CAEO,SAASG,EAAoBC,EAASC,EAAaC,GAGxD,IAFA,IAAIxH,EAAS,CAAC,EACVyH,EAASD,EAASE,QACbC,EAAI,EAAGA,EAAIJ,EAAY/G,OAAQmH,IAAK,CAE3C,IADA,IAAIC,EAAU,CAAC,EACfC,EAAA,EAAAC,EAAyB9D,OAAOoC,QAAQkB,GAAQO,EAAAC,EAAAtH,OAAAqH,IAAE,CAA7C,IAAAE,GAAAzB,EAAAA,EAAAA,GAAAwB,EAAAD,GAAA,GAAOG,EAAGD,EAAA,GAAEE,EAAGF,EAAA,GAClBH,EAAQI,GAAOC,EAAIP,QAAQQ,QAAO,SAAC3L,EAAG4L,GAAC,OAAKV,EAAOU,IAAMR,CAAC,GAC5D,CACA3H,EAAOuH,EAAYI,IAAMC,CAC3B,CACA,OAAO5H,CACT,CAEO,SAASoI,EAAuBC,EAAYd,GACjD,IAC2BrD,EADvBlE,EAAS,CAAC,EAAEoE,GAAAjC,EAAAA,EAAAA,GACAoF,GAAW,IAA3B,IAAAnD,EAAAhC,MAAA8B,EAAAE,EAAA/B,KAAAC,MAA6B,CAC3BtC,EADUkE,EAAA3B,OACE,CAAC,CACf,CAAC,OAAA8B,GAAAD,EAAAvB,EAAAwB,EAAA,SAAAD,EAAAtB,GAAA,CAED,QAAAwF,EAAA,EAAAC,EAAyBvE,OAAOoC,QAAQiC,GAAWC,EAAAC,EAAA/H,OAAA8H,IACjD,IADG,IAAAE,GAAAlC,EAAAA,EAAAA,GAAAiC,EAAAD,GAAA,GAAON,EAAGQ,EAAA,GAAEP,EAAGO,EAAA,GACTb,EAAI,EAAGA,EAAIJ,EAAY/G,OAAQmH,IACtC3H,EAAOuH,EAAYI,IAAIK,GAAOC,EAAIN,GAItC,OAAO3H,CACT,CAEO,SAAeyI,EAAgBjJ,EAAAmB,GAAA,OAAA+H,EAAA1L,MAAC,KAADC,UAAA,CA0OrC,SAAAyL,IAAA,OAAAA,GAAAxL,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MA1OM,SAAAyD,EAAgClB,EAAO+G,GAAI,IAAAiC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjF,EAAA2C,EAAAuC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArC,EAAAsC,EAAAC,EAAA1C,EAAA2C,EAAAC,EAAAC,EAAAC,EAAApK,EAAAqK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAA,OAAAvO,EAAAA,EAAAA,KAAAG,MAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,UAE3CkC,EAAM+G,GAAMiF,QAAQ,CAAD5K,EAAAtD,KAAA,eAAAsD,EAAArD,OAAA,cACfsD,GAAS,UAGL,WAAT0F,EAAiB,CAAA3F,EAAAtD,KAAA,UACN,CAAC,GAEVmL,EAAS,CAAC,EAACC,GAAA1G,EAAAA,EAAAA,GACCxC,EAAM+G,GAAMkF,mBAAmBC,aAAW,IAA1D,IAAAhD,EAAAzG,MAAA0G,EAAAD,EAAAxG,KAAAC,MAAWyG,EAACD,EAAAvG,MACVqG,EAAOG,GAAKpJ,EAAM+G,GAAMkF,mBAAmBjN,IAAIoK,GAAG+C,cACnD,OAAAzH,GAAAwE,EAAAhG,EAAAwB,EAAA,SAAAwE,EAAA/F,GAAA,CAGD,IADIkG,EAAY,CAAC,EACjBC,EAAA,EAAAC,EAAqBlF,OAAOoC,QAC1BzG,EAAM+G,GAAMqF,2BACb9C,EAAAC,EAAA1I,OAAAyI,IAAE,CAAAE,GAAA7C,EAAAA,EAAAA,GAAA4C,EAAAD,GAAA,GAFSG,EAACD,EAAA,GAAEhF,EAACgF,EAAA,GAGVrC,EAAO,CAAC,EAACuC,GAAAlH,EAAAA,EAAAA,GACGgC,EAAE6H,eAAa,IAA/B,IAAA3C,EAAAjH,MAAAkH,EAAAD,EAAAhH,KAAAC,MAAWiH,EAACD,EAAA/G,MACNiH,EAAMrF,EAAE8H,OAAO1C,GACfrH,MAAM+D,QAAQuD,KAChB1C,EAAKyC,GAAKC,EAEb,OAAAnF,GAAAgF,EAAAxG,EAAAwB,EAAA,SAAAgF,EAAAvG,GAAA,CAEGZ,MAAM+D,QAAQ9B,EAAE+H,cAClBpF,EAAe,SAAI3C,EAAE+H,YAGvBlD,EAAUI,GAAKtC,CACjB,CAEI2C,EAAY,CAAC,EAACC,GAAAvH,EAAAA,EAAAA,GACFxC,EAAM+G,GAAMyF,uBAAuBH,eAAa,IAAhE,IAAAtC,EAAAtH,MAAAuH,EAAAD,EAAArH,KAAAC,MAAWiH,EAACI,EAAApH,MAEN6J,EADA5C,EAAM7J,EAAM+G,GAAMyF,uBAAuBF,OAAO1C,MAE5CS,EAAQqC,EAAe7C,EAAK,CAChCrK,KAAK,EACLmN,QAAQ,EACRC,QAAShD,IAEXE,EAAUF,GAAKS,EAElB,OAAA3F,GAAAqF,EAAA7G,EAAAwB,EAAA,SAAAqF,EAAA5G,GAAA,CAoBC,OAjBa,QADX2E,EAAS9H,EAAM+G,GAAM8F,qBAGnBJ,EADE5C,EAAM7J,EAAM+G,GAAM+F,aAAa/E,WAE7BsC,EAAQqC,EAAe7C,EAAK,CAChCrK,KAAK,EACLmN,QAAQ,EACRC,QAAS,cAEX9C,EAAqB,UAAIO,GAI7BhK,EAAS,CACP0M,UAAW/M,EAAM+G,GAAMkF,mBAAmBe,kBAC1CC,UAAWhE,EACXiE,MAAO7D,EACP8D,YAAarD,GACb1I,EAAArD,OAAA,SAEKsC,GAAM,WACK,wBAAT0G,EAA8B,CAAA3F,EAAAtD,KAAA,SAuBoB,OAtBvD6J,EAAU,CACZyF,KAAMpN,EAAM+G,GAAMsG,eAAeD,OACjCE,SAAUtN,EAAM+G,GAAMsG,eAAeC,WACrCC,WAAYvN,EAAM+G,GAAMsG,eAAeG,kBAAkB,IAGvDnN,EAAS,CAAC,EAGC,QAFXyH,EAAS9H,EAAc,OAAE6M,qBAG3B/E,EAAS,CAAC,WACVzH,EAAOoN,KAAO,CAAEC,QAAS/F,KAErB4C,EAAOvK,EAAc,OAAE8M,aAC3BzM,EAAOoN,KAAO/F,EAAoBC,EAASG,EAAQyC,IAGjDC,EAAS,CACX4C,KAAMpN,EAAM+G,GAAM4G,eAAeC,iBACjCN,SAAUtN,EAAM+G,GAAM4G,eAAeE,qBACrCN,WAAYvN,EAAM+G,GAAM4G,eAAeG,4BAA4B,IAErEzN,EAAOqI,WAAaD,EAAuB+B,EAAQ1C,GAAQ1G,EAAArD,OAAA,SAEpDsC,GAAM,WACK,wBAAT0G,EAA8B,CAAA3F,EAAAtD,KAAA,SAyBvC,IAxBI6J,EAAU,CACZyF,KAAMpN,EAAM+G,GAAMsG,eAAeD,OACjCE,SAAUtN,EAAM+G,GAAMsG,eAAeC,WACrCC,WAAYvN,EAAM+G,GAAMsG,eAAeU,aAAa,IAGlD1N,EAAS,CAAC,EAEC,QADXyH,EAAS9H,EAAc,OAAE6M,qBAE3B/E,EAAS,CAAC,WACVzH,EAAOoN,KAAO,CAAEC,QAAS/F,KAErB4C,EAAOvK,EAAc,OAAE8M,aAC3BzM,EAAOoN,KAAO/F,EAAoBC,EAASG,EAAQyC,IAGjDC,EAAS,CACX8C,SAAUtN,EAAM+G,GAAM4G,eAAeE,qBACrCN,WAAYvN,EAAM+G,GAAM4G,eAAeK,uBAAuB,IAEhE3N,EAAOqI,WAAaD,EAAuB+B,EAAQ1C,GAInD8C,EAAA,EAAAC,EAAqBxG,OAAOoC,QAAQpG,EAAOqI,YAAWkC,EAAAC,EAAAhK,OAAA+J,IAAEE,GAAAnE,EAAAA,EAAAA,GAAAkE,EAAAD,GAAA,GAA3CE,EAAA,GAAGA,EAAA,GACZsC,KAAOa,IACV,OAAA7M,EAAArD,OAAA,SAEMsC,GAAM,WACK,2BAAT0G,EAAiC,CAAA3F,EAAAtD,KAAA,SAoBiB,OAnBvD6J,EAAU,CACZyF,KAAMpN,EAAM+G,GAAMsG,eAAeD,OACjCE,SAAUtN,EAAM+G,GAAMsG,eAAeC,WACrCC,WAAYvN,EAAM+G,GAAMsG,eAAea,kBAGrC7N,EAAS,CAAC,EAEC,QADXyH,EAAS9H,EAAc,OAAE6M,qBAE3B/E,EAAS,CAAC,WACVzH,EAAOoN,KAAO,CAAEC,QAAS/F,KAErB4C,EAAOvK,EAAc,OAAE8M,aAC3BzM,EAAOoN,KAAO/F,EAAoBC,EAASG,EAAQyC,IAGjDC,EAAS,CACXtL,MAAOc,EAAM+G,GAAM4G,eAAeQ,mBAAmB,IAEvD9N,EAAOqI,WAAaD,EAAuB+B,EAAQ1C,GAAQ1G,EAAArD,OAAA,SAEpDsC,GAAM,WACK,mBAAT0G,EAAyB,CAAA3F,EAAAtD,KAAA,SAYyB,OAXvDqN,EAAY,EACdC,EAAc,MACVC,EAAcrL,EAAM+G,GAAMqH,kBAE9B/C,EAAY1O,SAAQ,SAACC,GACnBuO,GAAkB,GAALvO,CACf,IACAwO,EAAcC,EAAYtD,SAE1BoD,EAAYnL,EAAMqO,OAAOpC,mBAAmBe,kBAE1C3M,EAAS,CAAEiO,SAAUnD,EAAWoD,QAASnD,GAAahK,EAAArD,OAAA,SACnDsC,GAAM,WACK,sBAAT0G,EAA4B,CAAA3F,EAAAtD,KAAA,gBAAAsD,EAAArD,OAAA,SAC9B,CAAC,GAAC,WACS,sBAATgJ,EAA4B,CAAA3F,EAAAtD,KAAA,gBAAAsD,EAAArD,OAAA,SAC9B,CAAC,GAAC,WACS,yBAATgJ,EAA+B,CAAA3F,EAAAtD,KAAA,gBAAAsD,EAAArD,OAAA,SACjC,CAAC,GAAC,WACS,sBAATgJ,EAA4B,CAAA3F,EAAAtD,KAAA,SAMnC,OALEuC,GAAS,CACXmO,MAAOxO,EAAM+G,GAAM0H,eAAeD,QAClCE,KAAM1O,EAAM+G,GAAM0H,eAAeE,YACjCC,OAAQ5O,EAAM+G,GAAM0H,eAAeG,SACnCC,OAAQ7O,EAAM+G,GAAM0H,eAAeK,aACpC1N,EAAArD,OAAA,SACMsC,IAAM,WAEJ,YAAT0G,GACS,YAATA,GACS,eAATA,EAAqB,CAAA3F,EAAAtD,KAAA,SAOlB,OALC0N,GAAMxL,EAAM+G,GAAMgI,WAClBtD,GAAUD,GAAIwD,oBACdtD,GAAYF,GAAIyD,gBACpBxD,GAAQ9O,SAAQ,SAACC,EAAG4L,GAClBiD,GAAQjD,GAAK5L,EAAI8O,EACnB,IAAGtK,EAAArD,OAAA,SACI,CACL0N,QAASA,KACV,WACiB,uBAAT1E,EAA6B,CAAA3F,EAAAtD,KAAA,gBAAAsD,EAAArD,OAAA,SAC/B,CAAC,GAAC,WACS,qBAATgJ,EAA2B,CAAA3F,EAAAtD,KAAA,gBAAAsD,EAAArD,OAAA,SAC7B,CAAC,GAAC,WACS,mBAATgJ,EAAyB,CAAA3F,EAAAtD,KAAA,gBAAAsD,EAAArD,OAAA,SAC3B,CAAC,GAAC,WACS,SAATgJ,GAA4B,SAATA,EAAe,CAAA3F,EAAAtD,KAAA,iBAAAsD,EAAAtD,KAAA,GAC9BkC,EAAM+G,GAAM0H,eAAe,KAAD,UAAArN,EAAArD,OAAA,SAAAqD,EAAAN,MAAA,YACrB,mBAATiG,EAAyB,CAAA3F,EAAAtD,KAAA,iBAAAsD,EAAArD,OAAA,SAC3B,CAAC,GAAC,YACS,sBAATgJ,EAA4B,CAAA3F,EAAAtD,KAAA,iBAAAsD,EAAArD,OAAA,SAC9B,CAAC,GAAC,YACS,sBAATgJ,EAA4B,CAAA3F,EAAAtD,KAAA,UACM,OAAvC6N,GAAW3L,EAAM+G,GAAMmI,gBAAe9N,EAAArD,OAAA,SACnC,CAAE4N,SAAUA,GAAS5D,UAAS,YACnB,qBAAThB,EAA2B,CAAA3F,EAAAtD,KAAA,iBAAAsD,EAAArD,OAAA,SAC7B,CAAC,GAAC,YACS,mBAATgJ,EAAyB,CAAA3F,EAAAtD,KAAA,UACkB,KAChD,QADA8N,GAAU5L,EAAMmP,iBAAiBV,iBACjB,CAAArN,EAAAtD,KAAA,UAOlB,OANI+N,GAAU7L,EAAM+G,GAAMqI,cAAcxD,GAAQyD,KAMhDjO,EAAArD,OAAA,SACO8N,IAAO,gBAAAzK,EAAArD,OAAA,SAEP,CAAEuR,cAAe,CAAC,IAAG,SAAAlO,EAAAtD,KAAA,sBAEZ,sBAATiJ,EAA4B,CAAA3F,EAAAtD,KAAA,iBAAAsD,EAAArD,OAAA,SAC9B,CAAC,GAAC,YACS,2BAATgJ,EAAiC,CAAA3F,EAAAtD,KAAA,UAEgB,OADtDgO,GAAc9L,EAAMuP,uBAAuBC,yBAC3CzD,GAAO/L,EAAMuP,uBAAuBE,kBAAiBrO,EAAArD,OAAA,SAClD,CACL+N,YAAaA,GACbC,KAAM,CACJ2D,MAAO3D,GAAK2D,MACZC,aAAc5D,GAAK4D,aACnBC,MAAO7D,GAAK6D,MAAM7H,QAClB+D,YAAaC,GAAKD,YAAY/D,WAEjC,0BAAA3G,EAAApD,OAAA,GAAAkD,EAAA,MAEJ7D,MAAA,KAAAC,UAAA,CAEM,SAASmP,EAAc5C,GAC5B,OAAOtH,MAAM+D,QAAQuD,IAAQjD,YAAYC,OAAOgD,EAClD,CAEO,SAAS6C,EACd7C,GAEC,IACGvE,EADJuK,EAAAvS,UAAAuD,OAAA,QAAAQ,IAAA/D,UAAA,GAAAA,UAAA,GADkD,CAAC,EAACwS,EAAAD,EAAlDrQ,IAAAA,OAAG,IAAAsQ,GAAQA,EAAAC,EAAAF,EAAElD,OAAAA,OAAM,IAAAoD,GAAQA,EAAAC,EAAAH,EAAEjD,QAAAA,OAAO,IAAAoD,EAAG,KAAIA,EAG7C,GAAIvD,EAAc5C,GAAM,CACtBvE,EAAM2K,EAAAA,GAAsBpG,GAC5B,IAAMqG,EAAS,IAAIC,IAAItG,GACvBvE,EAAgB,WAAI4K,EAAOE,KAEtBF,EAAOE,MAAQ,GAAMzD,IAAQrH,EAAgB,YAAI+K,EAAAA,EAAAA,GAAIH,GAAQI,QAC9D9Q,IAAK8F,EAAW,MAAIuE,GAGJ,eAAhBvE,EAAU,MAAsB4K,EAAOE,MAAQ,KAAI9K,EAAU,KAAI,SAE9C,kBAAZsH,GAAwBA,aAAmBhM,UACpD0E,EAAU,KAAIsH,EAClB,CAEA,OAAOtH,CACT,CAhXA2K,EAAAA,GAA0BM,YAAYxK,GACtCyK,EAAAA,GAAsBzK,GACtBkK,EAAAA,GAA8BM,YAAYxK,GAE1CyK,EAAAA,GAAuB,eAAAC,GAAAlT,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOgT,EAAMC,EAAOC,GAAG,IAAA9L,EAAA+L,EAAAtS,EAAA,OAAAf,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,GAD7CgH,EAAM0L,EAAAA,KAA2B,IAAME,EACvCG,EAAO/K,EAAQ,IAAMI,mBAAmBpB,GAC/B,MAAT6L,GAAwB,MAAPC,EAAW,CAAAhT,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACXmI,EAAc4K,GAAM,KAAD,EAA5B,OAANtS,EAAMX,EAAAkD,KAAAlD,EAAAG,OAAA,SACH,IAAI+S,SAASvS,IAAO,cAAAX,EAAAG,OAAA,SAEpB2H,MAAMmL,EAAO,UAAYjQ,OAAO+P,GAAS,QAAU/P,OAAOgQ,KAAK,yBAAAhT,EAAAI,OAAA,GAAAN,EAAA,KAEzE,gBAAAS,EAAAuB,EAAAC,GAAA,OAAA8Q,EAAApT,MAAA,KAAAC,UAAE,CAAF,CATsB,IAWvBkT,EAAAA,GAAkB,eAAAO,GAAAxT,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAY,EAAOqS,GAAI,IAAA5L,EAAAvG,EAAA,OAAAf,EAAAA,EAAAA,KAAAG,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OACc,OAAtCgH,EAAM0L,EAAAA,KAAsB,IAAME,EAAI5R,EAAAhB,KAAA,EACvBmI,EAAcH,EAAQ,IAAMI,mBAAmBpB,IAAM,KAAD,EAA7D,OAANvG,EAAMO,EAAAgC,KAAAhC,EAAAf,OAAA,SACH,IAAI+S,SAASvS,IAAO,wBAAAO,EAAAd,OAAA,GAAAK,EAAA,KAC5B,gBAAAuB,GAAA,OAAAmR,EAAA1T,MAAA,KAAAC,UAAE,CAAF,CAJiB,IAMlB0T,EAAAA,EAA6BC,eAAelL,GAC5CkK,EAAAA,GAAuC,cAAIe,EAAAA,E,QCiEpC,IAAME,EAAO,wBAyDQ,GAAAlU,OAAMkU,EAAI,cACR,GAAAlU,OAAMkU,EAAI,eAnBjC,ICpHDC,EAAe,GAAAnU,OAAMkU,EAAI,cACzBE,EAAiB,GAAApU,OAAMkU,EAAI,eAE7BG,EAAa,KACbC,EAAa,CAAC,EACdC,GAAqB,CAAC,EACtBC,GAAe,KACfC,GAAqB,CAAC,EAE1B,SAASC,GAAcC,GACrB,GAAoB,QAAhBA,EAAKC,OACP,OAAO,IAAI3B,EAAAA,GACT0B,EAAKE,GACLF,EAAKG,QAAUH,EAAKG,QAAU,CAAC,GAE5B,GAAoB,iBAAhBH,EAAKC,OACd,OAAO,IAAI3B,EAAAA,GACT0B,EAAKI,IACLJ,EAAKzE,OAAS,KACdyE,EAAKxE,aAAe,KACpBwE,EAAKG,QAAUH,EAAKG,QAAU,CAAC,GAE5B,GAAoB,SAAhBH,EAAKC,OACd,OAAO,IAAI3B,EAAAA,GAAmB0B,EAAKE,GAAIF,EAAKG,QAAUH,EAAKG,QAAU,CAAC,GACjE,GAAoB,yBAAhBH,EAAKC,OACd,OAAO,IAAI3B,EAAAA,GACT0B,EAAKK,IACLL,EAAKG,QAAUH,EAAKG,QAAU,CAAC,GAE5B,GAAoB,cAAhBH,EAAKC,OACd,OAAO,IAAI3B,EAAAA,GACT0B,EAAKM,QACLN,EAAKO,QACLP,EAAKG,QAAUH,EAAKG,QAAU,CAAC,GAE5B,GAAoB,kBAAhBH,EAAKC,OACd,OAAO,IAAIZ,EAAAA,EACTW,EAAKrT,GACLqT,EAAKG,QAAUH,EAAKG,QAAU,CAAC,GAGjC,MAAM,IAAI/U,MAAM,mBAAqB4U,EAAKC,OAAS,IAEvD,CAEA,SAASO,GAAiBC,EAAST,GAEjC,IAC2CvP,EADvCiQ,EAAgB,CAAC,EAAElQ,GAAAK,EAAAA,EAAAA,GACP4P,EAAQE,MAAMjG,eAAa,IAA3C,IAAAlK,EAAAM,MAAAL,EAAAD,EAAAO,KAAAC,MAA6C,CAAC,IAAnC8G,EAACrH,EAAAQ,MACJ2P,EAAOH,EAAQE,MAAMhG,OAAO7C,GAC9BgD,EAAc8F,KAChBF,EAAc5I,GAAKiD,EAAe6F,EAAM,CACtC/S,KAAK,EACLmN,QAAQ,EACRC,QAASnD,IAEf,CAAC,OAAA/E,GAAAvC,EAAAe,EAAAwB,EAAA,SAAAvC,EAAAgB,GAAA,CACD,IAAIqP,EAAW,CACbF,MAAO,CACLG,QAASJ,EACTK,cAAeN,EAAQE,MAAMnG,iBAIjC,GAAoB,SAAhBwF,EAAKC,OAAmB,CAC1BY,EAAuB,aAAI,CAAC,EAC5B,IACqDjO,EADjDoO,EAAe,CAAC,EAAElO,GAAAjC,EAAAA,EAAAA,GACN4P,EAAsB,aAAE/F,eAAa,IAArD,IAAA5H,EAAAhC,MAAA8B,EAAAE,EAAA/B,KAAAC,MAAuD,CAAC,IAA7C8G,EAAClF,EAAA3B,MACJ2P,EAAOH,EAAsB,aAAE9F,OAAO7C,GACxCgD,EAAc8F,KAChBI,EAAalJ,GAAKiD,EAAe6F,EAAM,CACrC/S,KAAK,EACLmN,QAAQ,EACRC,QAASnD,IAGf,CAAC,OAAA/E,GAAAD,EAAAvB,EAAAwB,EAAA,SAAAD,EAAAtB,GAAA,CACDqP,EAAuB,aAAI,CACzBC,QAASE,EACTC,iBAAkBR,EAAsB,aAAEjG,eAC1C0G,SAAUtQ,MAAM+D,QAAQ8L,EAAsB,aAAE7F,YAEpD,MAAO,GAAoB,yBAAhBoF,EAAKC,QAEd,GADAY,EAA4B,kBAAI,CAAC,EAC7B,sBAAuBJ,EACzB,QAAAjO,EAAA,EAAAqC,EAAqBnC,OAAOoC,QAAQ2L,EAAQU,mBAAkB3O,EAAAqC,EAAA3F,OAAAsD,IAAE,CAA3D,IAE4BgF,EAF5BzC,GAAAC,EAAAA,EAAAA,GAAAH,EAAArC,GAAA,GAAOsF,EAAC/C,EAAA,GAAElC,EAACkC,EAAA,GACViM,EAAe,CAAC,EAAEzJ,GAAA1G,EAAAA,EAAAA,GACNgC,EAAE6H,eAAa,IAA/B,IAAAnD,EAAAzG,MAAA0G,EAAAD,EAAAxG,KAAAC,MAAiC,CAAC,IAAvB8G,EAACN,EAAAvG,MACJ2P,EAAO/N,EAAE8H,OAAO7C,GAClBgD,EAAc8F,KAChBI,EAAalJ,GAAKiD,EAAe6F,EAAM,CACrC/S,KAAK,EACLmN,QAAQ,EACRC,QAASnD,IAGf,CAAC,OAAA/E,GAAAwE,EAAAhG,EAAAwB,EAAA,SAAAwE,EAAA/F,GAAA,CACDqP,EAA4B,kBAAE/I,GAAK,CACjCgJ,QAASE,EACTC,iBAAkBpO,EAAE2H,eACpB0G,SAAUtQ,MAAM+D,QAAQ9B,EAAE+H,YAE9B,OAIF,GADAiG,EAA4B,kBAAI,CAAC,EAC7B,sBAAuBJ,EACzB,QAAAlK,EAAA,EAAAC,EAAqB9D,OAAOoC,QAAQ2L,EAAQU,mBAAkB5K,EAAAC,EAAAtH,OAAAqH,IAAE,CAA3D,IAE4ByB,EAF5BvB,GAAAzB,EAAAA,EAAAA,GAAAwB,EAAAD,GAAA,GAAOuB,EAACrB,EAAA,GAAE5D,EAAC4D,EAAA,GACVuK,EAAe,CAAC,EAAEjJ,GAAAlH,EAAAA,EAAAA,GACNgC,EAAE6H,eAAa,IAA/B,IAAA3C,EAAAjH,MAAAkH,EAAAD,EAAAhH,KAAAC,MAAiC,CAAC,IAAvB8G,EAACE,EAAA/G,MACJ2P,EAAO/N,EAAE8H,OAAO7C,GAClBgD,EAAc8F,KAChBI,EAAalJ,GAAKiD,EAAe6F,EAAM,CACrC/S,KAAK,EACLmN,QAAQ,EACRC,QAASnD,IAGf,CAAC,OAAA/E,GAAAgF,EAAAxG,EAAAwB,EAAA,SAAAgF,EAAAvG,GAAA,CACDqP,EAA4B,kBAAE/I,GAAK,CACjCgJ,QAASE,EACTC,iBAAkBpO,EAAE2H,eACpB0G,SAAUtQ,MAAM+D,QAAQ9B,EAAE+H,YAE9B,CAYJ,MARoB,SAAhBoF,EAAKC,OACPY,EAA0B,gBAAIJ,EAAQW,gBAEtB,yBAAhBpB,EAAKC,QACW,cAAhBD,EAAKC,SAELY,EAA+B,qBAAIJ,EAAQY,sBAEtCR,CACT,CAqDC,SAEcS,GAAetT,GAAA,OAAAuT,GAAA7V,MAAC,KAADC,UAAA,UAAA4V,KAS7B,OAT6BA,IAAA3V,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA9B,SAAA0V,EAA+BpM,GAAI,IAAA1G,EAAA,OAAA7C,EAAAA,EAAAA,KAAAG,MAAA,SAAAyV,GAAA,cAAAA,EAAAvV,KAAAuV,EAAAtV,MAAA,cAAAsV,EAAAvV,KAAA,EAAAuV,EAAAtV,KAAA,EAEZgL,EAAiBuI,EAAYtK,GAAM,KAAD,EAAjD1G,EAAM+S,EAAAtS,KAEVoG,EAAYH,EAAM1G,GAAQ+S,EAAAtV,KAAA,gBAAAsV,EAAAvV,KAAA,EAAAuV,EAAAvQ,GAAAuQ,EAAA,SAE1B3P,QAAQ4P,MAAKD,EAAAvQ,IACbyE,EAAUP,EAAIqM,EAAAvQ,IAAO,GAAM,yBAAAuQ,EAAApV,OAAA,GAAAmV,EAAA,mBAE9B9V,MAAA,KAAAC,UAAA,CAED,SAASgW,GAA4BC,EAAYC,GAC/C,IAAIC,EAWJ,OAVMF,KAAc9B,MAClBgC,EAAM,IAAIxD,EAAAA,GACRyD,KACAF,EAAeG,IAAI5L,UAGjB6L,aACJnC,GAAmB8B,GAAcE,GAG5BhC,GAAmB8B,EAC5B,CA7EAtD,EAAAA,IAA+B,SAAChJ,EAAMrK,EAAGyF,EAAGwR,GAC1C7M,YACE,CACEC,KAAMA,EAAO,QACbrK,EAAGA,EACHyF,EAAGA,EACHyR,UAAWD,GAEb,CAACjX,EAAE2B,OAAQ8D,EAAE9D,QAEjB,IAaA0R,EAAAA,GAAsB8D,GAwDtB,IAgEIC,GAhEEC,GAAgB,SAACV,GAAoC,IACrDW,EAD6BC,EAAU7W,UAAAuD,OAAA,QAAAQ,IAAA/D,UAAA,IAAAA,UAAA,GAE3C,GAAmB,cAAfiW,EACFW,EAAM7C,EAAWhD,OAAOvB,aAAa/E,aAChC,GAAIwL,EAAWa,WAAW,GAADpX,OAAIkU,EAAI,WAAW,CACjD,IACImD,EADSd,EAAWe,QAAQ,GAADtX,OAAIkU,EAAI,UAAU,IACvBqD,MAAM,KAC5B5M,EACF0J,EAAW,GAADrU,OACLqX,EAAa,GAAGG,cAAa,qBAChCnH,eAEoB,SAApBgH,EAAa,GACfH,EAAMvM,EAAQyF,OACe,aAApBiH,EAAa,GACtBH,EAAMvM,EAAQ2F,WACe,eAApB+G,EAAa,KACgB,QAAlCA,EAAa,GAAGG,cAClBN,EAAMvM,EAAQ6F,kBAAkB,GACW,QAAlC6G,EAAa,GAAGG,cACzBN,EAAMvM,EAAQoG,aAAa,GACgB,WAAlCsG,EAAa,GAAGG,gBACzBN,EAAMvM,EAAQuG,eAAe,IAGnC,MACEgG,EAAM7C,EAAWhD,OAAO7B,uBAAuBF,OAAOiH,GAOxD,OAJKY,IACHD,EAAM7C,EAAWoD,eAAeC,YAAYR,IAGvCA,EAAInM,OACb,EAEM2L,GAAY,WAChB,GAAqB,OAAjBlC,GAAuB,CACzBA,GAAe,IAAImD,EAAAA,GAMnB,IALA,IAKAhM,EAAA,EAAAC,EAAqBvE,OAAOoC,QALd,CACZ4I,IAAK,oBACLuF,IAAK,oBACLC,OAAQ,yBAEkClM,EAAAC,EAAA/H,OAAA8H,IAAE,CAAzC,IAAAE,GAAAlC,EAAAA,EAAAA,GAAAiC,EAAAD,GAAA,GAAOc,EAACZ,EAAA,GAAErE,EAACqE,EAAA,GACV7I,EAAQqR,EAAW7M,GACnBxE,EAAM8U,SACRtD,GAAauD,IAAItL,EAAGzJ,EAAMgV,wBAE9B,CACF,CACA,OAAOxD,EACT,EAaAyD,UAAY,SAAUC,GACpB,IAAAC,EAA0BD,EAAIzH,KAAtBxG,EAAIkO,EAAJlO,KAAM3H,EAAO6V,EAAP7V,QAIViI,GAAQ,EACZ,GAAa,SAATN,EAAiB,CACnBM,GAAQ,EACR,IAAI6N,EAAWC,KAAKC,MAAuC,EAAhCC,UAAUC,oBAA2B,GAC5DC,EAAYxF,EAAAA,GAAkB,CAAEyF,gBAAiBN,IAEjDO,EAAaF,EAAUG,MAAK,WAC9B,OAAO3F,EAAAA,IACT,IAEA0F,EAAWC,MAAK,SAAChZ,GACfyU,EAAazU,EACboK,YAAY,CACVC,KAAMA,EACNiO,IAAK,mCAET,IAEA,IAAIW,EJpUN/Z,EAAO,IAAIO,SAAQ,SAACC,IAElBT,EAASia,UAAUC,KAAK,SAAU,IAE3BC,gBAAkB,SAAC9S,GACxB,IAAI+S,EAAe/S,EAAEjG,OAAOhB,OAI5B,IACEga,EAAaC,kBAAkB,WACjC,CAAE,MAAOhT,GAAI,CACb,IACE+S,EAAaC,kBAAkB,gBACjC,CAAE,MAAOhT,GAAI,CACb,IACE+S,EAAaC,kBAAkB,OACjC,CAAE,MAAOhT,GAAI,CACb,IACE+S,EAAaC,kBAAkB,YACjC,CAAE,MAAOhT,GAAI,CAEb+S,EAAaE,kBAAkB,WAAY,CAAEC,QAAS,OACtDH,EAAaE,kBAAkB,gBAAiB,CAAEC,QAAS,OAC3DH,EAAaE,kBAAkB,OAAQ,CAAEC,QAAS,OAClDH,EAAaE,kBAAkB,YAAa,CAAEC,QAAS,MACzD,EAGAva,EAAOW,UAAY,WACjBF,EAAQP,IACV,EAEAF,EAAOiB,QAAU,WACfR,EAAQ,KACV,CACF,IIiSEuZ,EACGD,MAAK,SAACvV,GACU,OAAXA,GACF2G,YAAY,CACVC,KAAM,eACNI,KAAMhH,EACN6U,IAAK,+BAGX,IACCmB,OAAM,SAAChD,GACN5P,QAAQ4P,MAAMA,GACdrM,YAAY,CACVC,KAAM,eACNiO,IAAK,mCAET,IAEF,IAAIoB,GHvVO,OAATxa,IACFA,EAAO,IAAIO,SAAQ,SAACC,EAASC,IAE3BqI,EAAckR,UAAUC,KAAK,cAAe,IAEhCC,gBAAkB,SAAC9S,GAC7B,IAAIqT,EAAoBrT,EAAEjG,OAAOhB,OAIjC,IACEsa,EAAkBL,kBAAkB,YACtC,CAAE,MAAOhT,GAAI,CAEbqT,EAAkBJ,kBAAkB,YAAa,CAAEC,QAAS,OAC9D,EAEAxR,EAAYpI,UAAY,WACtBF,EAAQ,KACV,EAEAsI,EAAY9H,QAAU,WACpBP,EAAO,mCACT,CACF,KAGKT,GG6TLwa,EACGV,MAAK,SAACvV,GACL2G,YAAY,CACVC,KAAM,oBACNI,KAAMhH,EACN6U,IAAK,oCAET,IACCmB,OAAM,SAAChD,GACN5P,QAAQ4P,MAAMA,GACdrM,YAAY,CACVC,KAAM,oBACNiO,IAAK,wCAET,IAEF,IACE,IAAIsB,EAAWxF,EAAAA,EAA6ByF,oBAC5CzP,YAAY,CACVC,KAAM,sBACNI,KAAMmP,EACNtB,IAAK,sCAET,CAAE,MAAOxQ,GACPjB,QAAQ4P,MAAM3O,GACdsC,YAAY,CACVC,KAAM,sBACNiO,IAAK,kDAET,EAEAlB,GAAS3X,QAAQmD,IAAI,CAACiW,EAAWI,EAAWS,EAAWX,KAGpDC,MAAK,WACJ5O,YAAY,CACVC,KAAMA,EACNiO,IAAK,+BAET,IACCmB,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,GAGJ,MAAO,GAAa,QAATN,EACTM,GAAQ,EACRyM,GACG4B,MAAK,SAAChZ,GACL,IAAIyR,EAAS/O,EAAQ+O,OACjBxR,EAAQwR,EAAOxR,MAEnB,GAAc,OAAVA,EAAgB,CAGlB,IADA,IAAIoL,EAAU,CAAC,EACf2C,EAAA,EAAAC,EAAqBxG,OAAOoC,QAAQ5J,GAAM+N,EAAAC,EAAAhK,OAAA+J,IAAE,CAAvC,IAAAE,GAAAnE,EAAAA,EAAAA,GAAAkE,EAAAD,GAAA,GAAOnB,EAACqB,EAAA,GAAEtG,EAACsG,EAAA,GACV,QAAStG,GAAKA,EAAEkS,OAAOpF,EACzBrJ,EAAQwB,GAAK6H,EAAW9M,EAAEkS,KAE1BzO,EAAQwB,GAAKiI,GAAclN,GAE7ByD,EAAQwB,GAAGkN,WAAWnS,EAAEsN,QAC1B,CAGA,QAAA8E,EAAA,EAAAC,EAAqBxS,OAAOoC,QAAQ6K,GAAWsF,EAAAC,EAAAhW,OAAA+V,IAAE,CAA5C,IAAAE,GAAAnQ,EAAAA,EAAAA,GAAAkQ,EAAAD,GAAA,GAAOnN,EAACqN,EAAA,GAAGA,EAAA,GACZC,eACKzF,EAAW7H,EACpB,CAEA5M,EAAQoL,CACV,EA9HiB,WACvB,QAAAqB,EAAA,EAAAC,EAAqBlF,OAAOoC,QAAQgL,IAAmBnI,EAAAC,EAAA1I,OAAAyI,IAAE,CAApD,IAAAE,GAAA7C,EAAAA,EAAAA,GAAA4C,EAAAD,GAAA,GAAQE,EAAA,GAAGA,EAAA,GACZwN,MACJ,CAEAvF,GAAqB,CAAC,CACxB,CA0HQwF,GAEA,IAAIC,ECzVL,SAAgB7I,EAAQtJ,GAC7B,IAAImS,EAAYnS,EAGZoS,EAAc,SAACpQ,EAAMqQ,EAAKxU,GAC5B,GAAoB,oBAATA,EACT,MAAM,IAAI7F,MACR,yCAA2CgK,EAAO,IAAMqQ,EAAM,KAGlE,KAAMrQ,KAAQmQ,GACZ,MAAM,IAAIna,MAAM,0BAA4BgK,EAAO,KAErD,IAAI9J,EAASia,EAAUnQ,GACvB,KAAMqQ,KAAOna,GACX,MAAM,IAAIF,MACR,+BAAiCqa,EAAM,eAAiBrQ,EAAO,KAGnE9J,EAAOma,GAAOxU,CAChB,EAwBA,OAtBAuU,EAAY,SAAU,eAAgB9I,EAAOgJ,OAC7CF,EAAY,SAAU,SAAU9I,EAAOiJ,QAGvCrH,EAAAA,GAAgCiH,EAAWnS,EAAOwS,iBAAyB,QAC3EtH,EAAAA,GACEiH,EACAnS,EAAOyS,eAA4B,aAIQ,OAAzCN,EAAUO,mBAAmBC,SACZ,IAAIvH,IAAI,CACzB+G,EAAUO,mBAAmBE,WAC7BT,EAAUO,mBAAmBG,WAC7BV,EAAUO,mBAAmBI,gBAEdzH,MAAQ,IACvB8G,EAAUO,mBAAmBC,QAAU,MAIpCR,CACT,CD4SwBY,CAAiBzJ,EAAQ/O,EAAQyF,QACjDkL,EAAAA,GACeoB,EAAYxU,EAAOqa,EAAW,CACzCa,SAAUjR,EACVkR,UAAW/E,KAEZoD,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,GACJ,IACC8O,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SAEG,GAAa,SAATN,EAAiB,CAC1BM,GAAQ,EACR,IAAI0Q,EAAK3Y,EAAQ+O,OAAOxR,MAExB,GAAsC,SAAlCob,EAAG5T,OAAO6T,KAAKD,GAAI,IAAIrG,OAAmB,CAC5C,IAAIzO,EAAI8U,EAAG5T,OAAO6T,KAAKD,GAAI,IAAIvH,KAC/BsD,GACG4B,KAAI,eAAA7E,GAAAxT,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAY,EAAOzB,GAAC,IAAAub,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1Y,EAAAoI,EAAAuQ,EAAAC,EAAAC,EAAArR,EAAAsR,EAAAC,EAAAC,EAAAC,EAAAtU,EAAAc,EAAAyT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA9b,EAAAA,EAAAA,KAAAG,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OAEiC,OADvCqa,EAAS,IAAIoB,eACbnB,EAAYD,EAAOqB,kBAAkBrW,GAAErE,EAAAhB,KAAA,EACtB2b,IAAAA,UAAgBrB,GAAW,KAAD,EAChC,OADXC,EAAQvZ,EAAAgC,KAAAhC,EAAA+D,GACD6W,KAAI5a,EAAAhB,KAAA,EACTua,EAAS3H,KAAK,eAAeiJ,MAAM,UAAS,OAAA7a,EAAAgE,GAAAhE,EAAAgC,KADhDwX,EAAMxZ,EAAA+D,GAAQ+W,MAAK5W,KAAAlE,EAAA+D,GAAA/D,EAAAgE,IAInByV,EAAU,CAAC,EAACzZ,EAAAmE,IAAAzF,EAAAA,EAAAA,KAAA0a,KACAG,EAASxb,OAAK,YAAAiC,EAAA+a,GAAA/a,EAAAmE,MAAAN,KAAC,CAAD7D,EAAAhB,KAAA,SAAlB,KAADlB,EAACkC,EAAA+a,GAAAjX,OACJwR,WAAW,aAAa,CAADtV,EAAAhB,KAAA,gBAAAgB,EAAAhB,KAAA,GACPua,EAASxb,MAAMD,GAAG+c,MAAM,cAAc,KAAD,GAArD1R,EAAOnJ,EAAAgC,KACXyX,EAAQ3b,EAAE2X,MAAM,KAAK,IAAMtM,EAAQ,QAAAnJ,EAAAhB,KAAA,wBAAAgB,EAAAhB,KAAA,GAKpBmS,EAAAA,GACjBqI,GACA,SAACha,GAAE,OAAKia,EAAQja,EAAG,GACnB,CACE0B,MAAOqR,EACP0G,SAAUjR,EACVkR,UAAW/E,KAEb,KAAD,GARD5B,EAAUvS,EAAAgC,KAUJ0X,EAAQ,CACZsB,kBAAmBzI,EAAWyI,kBAAkBC,mBAG9CtB,EAAgB,GACpBtS,EAAemS,EAAO0B,WAAYvB,GAClCzR,YACE,CACEC,KAAM,mBACNI,KAAM,CACJ2S,WAAY1B,EAAO0B,WACnBxB,MAAOA,IAGXC,GAGEC,EAAW,CAAC,EACZrR,EAAO,CAAC,EACNsR,EAAYtH,EAAWhD,OAAO4L,gBAAerB,EAAA,EAAAC,EAC9BxU,OAAOoC,QAAQkS,GAAU,aAAAC,EAAAC,EAAAhY,QAAA,CAAA/B,EAAAhB,KAAA,SAA9B,OAA8Bgb,GAAAnS,EAAAA,EAAAA,GAAAkS,EAAAD,GAAA,GAAjCE,EAAA,GAAEtU,EAACsU,EAAA,GAAAha,EAAAhB,KAAA,GACE0G,EAAE0V,kBAAkB,CAAEC,OAAO,IAAQ,KAAD,GAEpD,IAFI7U,EAAGxG,EAAAgC,KAEPiY,EAAA,EAAAC,EAAoB,CAAC,MAAO,MAAO,UAASD,EAAAC,EAAAnY,OAAAkY,KAAjCE,EAAKD,EAAAD,MACDzT,IACNoT,EAASO,GAGZP,EAASO,GAAOlW,KAAKuC,EAAI2T,IAFzBP,EAASO,GAAS,CAAC3T,EAAI2T,KAK5B,QAAAL,IAAA9Z,EAAAhB,KAAA,iBAGH,IAAAob,EAAA,EAAAC,EAAqB9U,OAAOoC,QAAQiS,GAASQ,EAAAC,EAAAtY,OAAAqY,IAAEE,GAAAzS,EAAAA,EAAAA,GAAAwS,EAAAD,GAAA,GAAnCzP,EAAC2P,EAAA,GAAE5U,EAAC4U,EAAA,GACd/R,EAAKoC,GAAK+G,EAAAA,GAAgBhM,GAAG3D,OAG/BmG,YAAY,CACVC,KAAM,yBACNI,KAAMA,EACN6N,IAAK,oCACJ,yBAAApW,EAAAd,OAAA,GAAAK,EAAA,KACJ,gBAAAuB,GAAA,OAAAmR,EAAA1T,MAAA,KAAAC,UAAA,EAtEI,IAuEJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,GACJ,KAA6C,WAAlC0Q,EAAG5T,OAAO6T,KAAKD,GAAI,IAAIrG,QAChCoC,GACG4B,KAAI,eAAA/F,GAAAtS,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAsC,EAAOnD,GAAC,IAAA0B,EAAA8b,EAAAC,EAAA/B,EAAA,OAAA9a,EAAAA,EAAAA,KAAAG,MAAA,SAAA2C,GAAA,cAAAA,EAAAzC,KAAAyC,EAAAxC,MAAA,OACwB,OAAhCQ,EAAK2Z,EAAG5T,OAAO6T,KAAKD,GAAI,IAAIvH,KAAIpQ,EAAAxC,KAAA,EAEXiW,EAAqBzV,GAAI,KAAD,EAEF,OAFzC8b,EAAU9Z,EAAAQ,KACVuZ,EAAM,IAAIC,YACZhC,EAASoB,KAAKE,MAAMS,EAAIE,OAAOH,IAAY9Z,EAAAxC,KAAA,EAE5BmS,EAAAA,GACjBqI,EACAvE,EACA,CACE/T,MAAOqR,EACP0G,SAAUjR,EACVkR,UAAW/E,KAEb,KAAD,EARD5B,EAAU/Q,EAAAQ,KAAA,wBAAAR,EAAAtC,OAAA,GAAA+B,EAAA,KASX,gBAAAiB,GAAA,OAAA6O,EAAAxS,MAAA,KAAAC,UAAA,EAhBI,IAiBJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,GAGN,MAAO,GAAa,WAATN,EACT+M,GACG4B,KAAI,eAAA4E,GAAAjd,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAyD,EAAOtE,GAAC,IAAA2b,EAAAkC,EAAAC,EAAAC,EAAAnS,EAAA4P,EAAA,OAAA5a,EAAAA,EAAAA,KAAAG,MAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,OAQZ,OAPIya,EAAU,GACVkC,EAAQ,SAACG,EAAMhJ,EAAQlB,GACzB,IAAIpS,EAAKsC,OAAO2X,EAAQ1X,QAExB,OADA0X,EAAQxV,KAAK2N,EAAKnS,UACXD,CACT,EAEA8C,EAAAtD,KAAA,EACsBmS,EAAAA,GAA8BoB,EAAYoJ,GAAO,KAAD,EAKtE,IALIC,EAAStZ,EAAAN,MAGP6Z,EAAS,IAAIlB,MACZ/I,KAAK,cAAegJ,KAAKmB,UAAUH,IACjClS,EAAI,EAAGA,EAAI+P,EAAQ1X,OAAQ2H,IAClCmS,EAAOjK,KAAK,YAAc9P,OAAO4H,GAAI+P,EAAQ/P,IAC9C,OAAApH,EAAAtD,KAAA,GACqB6c,EAAOG,cAAc,CAAE7T,KAAM,eAAgB,KAAD,GAA9DmR,EAAShX,EAAAN,KACbkG,YACE,CACEC,KAAM,cACNI,KAAM+Q,EACNlD,IAAK,uCAEP,CAACkD,EAAU7Z,SACX,yBAAA6C,EAAApD,OAAA,GAAAkD,EAAA,KACH,gBAAAM,GAAA,OAAAgZ,EAAAnd,MAAA,KAAAC,UAAA,EA1BI,IA2BJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,eAATN,EACT+M,GACG4B,KAAI,eAAAmF,GAAAxd,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAiE,EAAO9E,GAAC,IAAAC,EAAAme,EAAAjR,EAAAC,EAAAiR,EAAA7C,EAAA,OAAA5a,EAAAA,EAAAA,KAAAG,MAAA,SAAAiE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,cAAA8D,EAAA9D,KAAA,EACMmS,EAAAA,GAAgCoB,EAAY,MAAO,CACnE6J,aAAa,IACZ,KAAD,EAFO,OAALre,EAAK+E,EAAAd,KAAAc,EAAA9D,KAAA,EAIcmS,EAAAA,GAA2BoB,EAAY,GAAI,CAChE6J,aAAa,IACZ,KAAD,EAFEF,EAAUpZ,EAAAd,KAAAiJ,GAAAvH,EAAAA,EAAAA,GAIEwY,GAAU,IAA1B,IAAAjR,EAAAtH,MAAAuH,EAAAD,EAAArH,KAAAC,MAAWQ,EAAC6G,EAAApH,MACV/F,EAAMkG,KAAKI,EACZ,OAAAuB,GAAAqF,EAAA7G,EAAAwB,EAAA,SAAAqF,EAAA5G,GAAA,QAAAvB,EAAA9D,KAAA,GACqBmS,EAAAA,GAAgBpT,GAAO,KAAD,GAAxCub,EAASxW,EAAAd,KAEbkG,YACE,CACEC,KAAM,iBACNI,KAAM+Q,EACNlD,IAAK,uCAEP,CAACkD,EAAU7Z,SACX,yBAAAqD,EAAA5D,OAAA,GAAA0D,EAAA,KACH,gBAAAI,GAAA,OAAAiZ,EAAA1d,MAAA,KAAAC,UAAA,EAtBI,IAuBJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,YAATN,EAAoB,CAE7B,IAAIhH,EAAQX,EAAQW,MACpB+T,GACG4B,KAAI,eAAAuF,GAAA5d,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAA2d,EAAOxe,GAAC,IAAA2b,EAAAkC,EAAAC,EAAAW,EAAA/C,EAAAha,EAAAgd,EAAA,OAAA9d,EAAAA,EAAAA,KAAAG,MAAA,SAAA4d,GAAA,cAAAA,EAAA1d,KAAA0d,EAAAzd,MAAA,OAEH,OADLya,EAAU,GACVkC,EAAK,eAAAe,GAAAje,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuE,EAAO4Y,EAAMhJ,EAAQlB,GAAI,IAAAnS,EAAAkd,EAAAnd,EAAA,OAAAd,EAAAA,EAAAA,KAAAG,MAAA,SAAA2E,GAAA,cAAAA,EAAAzE,KAAAyE,EAAAxE,MAAA,OAET,OAAtBS,EAASmS,EAAKnS,SAAQ+D,EAAAxE,KAAA,EACV4d,EAAAA,GAAand,GAAQ,KAAD,EAC+B,OAD/Dkd,EAAGnZ,EAAAxB,KACHxC,EAAK2I,EAAO,IAAMyJ,EAAKkK,OAAS,IAAMrc,EAAOsC,OAAS,IAAM4a,EAAGnZ,EAAAxE,KAAA,EAC7DiW,EAAiBzV,EAAIC,GAAQ,KAAD,EACjB,OAAjBga,EAAQxV,KAAKzE,GAAIgE,EAAAvE,OAAA,SACVO,GAAE,wBAAAgE,EAAAtE,OAAA,GAAAgE,EAAA,KACV,gBARQ2Z,EAAAC,EAAAC,GAAA,OAAAL,EAAAne,MAAA,KAAAC,UAAA,KAAAie,EAAAzd,KAAA,EAUamS,EAAAA,GAA8BoB,EAAYoJ,GAAO,KAAD,EAEpB,OAF9CC,EAASa,EAAAza,KACPua,EAAM,IAAIS,YACZxD,EAAS+C,EAAIU,OAAOrC,KAAKmB,UAAUH,IAAWa,EAAAzd,KAAA,EACnCiW,EAAqB,KAAMuE,EAAQoC,EAAWza,GAAO,KAAD,EAA7D,OAAF3B,EAAEid,EAAAza,KAAAya,EAAAzd,KAAA,GAEWiW,IAAqB,KAAD,GAAjCuH,EAAIC,EAAAza,KACRkG,YAAY,CACVC,KAAM,eACNI,KAAMiU,EACNpG,IAAI,uCAADlY,OAAyCsB,EAAE,OAC7C,yBAAAid,EAAAvd,OAAA,GAAAod,EAAA,KACJ,gBAAAY,GAAA,OAAAb,EAAA9d,MAAA,KAAAC,UAAA,EAvBI,IAwBJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,GAGJ,MAAO,GAAa,cAATN,EAAsB,CAE/B,IAAI3I,EAAKgB,EAAQhB,IJ1Sd,SAA6Bqd,GAAA,OAAAhY,EAAAtG,MAAC,KAADC,UAAA,EI2ShCyW,CACkBzV,GACfsX,KAAI,eAAAqG,GAAA1e,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAmG,EAAOvD,GAAM,IAAAib,EAAA,OAAA9d,EAAAA,EAAAA,KAAAG,MAAA,SAAAsG,GAAA,cAAAA,EAAApG,KAAAoG,EAAAnG,MAAA,cAAAmG,EAAAnG,KAAA,EACAiW,IAAqB,KAAD,EAAjCuH,EAAIrX,EAAAnD,KACRkG,YAAY,CACVC,KAAM,eACNI,KAAMiU,EACNpG,IAAI,qCAADlY,OAAuCsB,EAAE,OAC3C,wBAAA2F,EAAAjG,OAAA,GAAA4F,EAAA,KACJ,gBAAAsY,GAAA,OAAAD,EAAA5e,MAAA,KAAAC,UAAA,EAPI,IAQJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,GACJ,MAAO,GAAa,sBAATN,EACT+M,GAAO4B,KAAI,eAAAuG,GAAA5e,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAA2e,EAAOxf,GAAC,IAAAyK,EAAAgV,EAAA3D,EAAA4D,EAAAC,EAAAC,EAAAhY,EAAAiY,EAAAnX,EAAAoX,EAAAC,EAAA1D,EAAA2D,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAxf,EAAAA,EAAAA,KAAAG,MAAA,SAAAsf,GAAA,cAAAA,EAAApf,KAAAof,EAAAnf,MAAA,OACduJ,EAAO,CAAC,EAAC4V,EAAApf,KAAA,EAEPwe,EAAU,EACV3D,EAAW,CAAC,EAAC4D,EAAA,EAAAC,EAEIlY,OAAOoC,QAAQnH,EAAQ+O,OAAOxR,OAAM,YAAAyf,EAAAC,EAAA1b,QAAA,CAAAoc,EAAAnf,KAAA,SAAzC,GAAyC0e,GAAA7V,EAAAA,EAAAA,GAAA4V,EAAAD,GAAA,GAA5CE,EAAA,KACP,QADShY,EAACgY,EAAA,KACA,CAAAS,EAAAnf,KAAA,SACe,GAAvB2e,EAAKnL,EAAW9M,EAAEkS,OAGpBnU,MAAM+D,QAAQhH,EAAQwS,UACtBxS,EAAQwS,QAAQjR,OAASwb,GAAO,CAAAY,EAAAnf,KAAA,SAEQ,OAAxC2e,EAAG9F,WAAWrX,EAAQwS,QAAQuK,IAAUY,EAAAnf,KAAA,GAExB2e,EAAGvC,kBAAkB,CAAEC,OAAO,IAAQ,KAAD,GAErD,IAFI7U,EAAG2X,EAAAnc,KAEP4b,EAAA,EAAAC,EAAoB,CAAC,MAAO,MAAO,UAASD,EAAAC,EAAA9b,OAAA6b,KAAjCzD,EAAK0D,EAAAD,MACDpX,IACNoT,EAASO,GAGZP,EAASO,GAAOlW,KAAKuC,EAAI2T,IAFzBP,EAASO,GAAS,CAAC3T,EAAI2T,KAK5B,QAGLoD,IAAU,QAAAC,IAAAW,EAAAnf,KAAA,gBAGZ,IAAA8e,EAAA,EAAAC,EAAqBxY,OAAOoC,QAAQiS,GAASkE,EAAAC,EAAAhc,OAAA+b,IAAEE,GAAAnW,EAAAA,EAAAA,GAAAkW,EAAAD,GAAA,GAAnCnT,EAACqT,EAAA,IAAEtY,EAACsY,EAAA,IACRjc,SAAWvB,EAAQwS,QAAQjR,OAC/BwG,EAAKoC,GAAK,EAEVpC,EAAKoC,GAAK+G,EAAAA,GAAgBhM,GAAG3D,OAEhCoc,EAAAnf,KAAA,iBAAAmf,EAAApf,KAAA,GAAAof,EAAApa,GAAAoa,EAAA,SAEDxZ,QAAQ4P,MAAK4J,EAAApa,IACbwE,EAAKzB,OAAS,QACdyB,EAAKG,OAASyV,EAAApa,GAAE4E,WAAW,QAG7BT,YAAY,CACVC,KAAM,yBACNI,KAAMA,EACN6N,IAAK,oCACJ,yBAAA+H,EAAAjf,OAAA,GAAAoe,EAAA,mBACJ,gBAAAc,GAAA,OAAAf,EAAA9e,MAAA,KAAAC,UAAE,CAAF,CAlDU,SAmDN,GAAa,oBAAT2J,EACT+M,GACG4B,KAAI,eAAAuH,GAAA5f,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAA2f,EAAOxgB,GAAC,IAAAyK,EAAAY,EAAAmK,EAAAiL,EAAAC,EAAAC,EAAA9T,EAAAjF,EAAAgZ,EAAA,OAAAhgB,EAAAA,EAAAA,KAAAG,MAAA,SAAA8f,GAAA,cAAAA,EAAA5f,KAAA4f,EAAA3f,MAAA,OACRuJ,EAAO,CAAC,EAACoW,EAAA5f,KAAA,EAGPoK,EAAU,CAAC,EACXmK,EAAU,CAAC,EAACiL,EAAA,EAAAC,EACKjZ,OAAOoC,QAAQnH,EAAQ+O,OAAOxR,OAAM,YAAAwgB,EAAAC,EAAAzc,QAAA,CAAA4c,EAAA3f,KAAA,SAAzC,GAAyCyf,GAAA5W,EAAAA,EAAAA,GAAA2W,EAAAD,GAAA,GAA7C5T,EAAC8T,EAAA,KACP,QADS/Y,EAAC+Y,EAAA,KACA,CAAAE,EAAA3f,KAAA,YACN0G,EAAEkS,OAAOpF,EAAW,CAADmM,EAAA3f,KAAA,SACc,OAArCwT,EAAW9M,EAAEkS,KAAOhF,GAAclN,GAAGiZ,EAAA3f,KAAA,GACHwT,EAAW9M,EAAEkS,KAAKtE,QAAQ,CAC1D+H,OAAO,IACN,KAAD,GAFF5I,GAAmB/M,EAAEkS,KAAI+G,EAAA3c,KAAA,QAI3BmH,EAAQwB,GAAK6H,EAAW9M,EAAEkS,KAC1BtE,EAAQ3I,GAAK0I,GAAiBZ,GAAmB/M,EAAEkS,KAAMlS,GAAGiZ,EAAA3f,KAAA,iBAI/B,OAFzB0f,EAAc9L,GAAclN,GAChCyD,EAAQwB,GAAK+T,EAAYC,EAAA5a,GACZsP,GAAgBsL,EAAA3f,KAAA,GACrBmK,EAAQwB,GAAG2I,QAAQ,CAAE+H,OAAO,IAAO,QAAAsD,EAAA3a,GAAA2a,EAAA3c,KAAA2c,EAAAxa,GACzCuB,EAFF4N,EAAQ3I,IAAE,EAAAgU,EAAA5a,IAAA4a,EAAA3a,GAAA2a,EAAAxa,IAAA,QAAAoa,IAAAI,EAAA3f,KAAA,gBAOduJ,EAAKzB,OAAS,UACdyB,EAAKqW,QAAUtL,EAEfqL,EAAA3f,KAAA,iBAAA2f,EAAA5f,KAAA,GAAA4f,EAAA5D,GAAA4D,EAAA,SAEAha,QAAQ4P,MAAKoK,EAAA5D,IACbxS,EAAKzB,OAAS,QACdyB,EAAKG,OAASiW,EAAA5D,GAAEpS,WAAW,QAG7BT,YAAY,CACVC,KAAM,uBACNI,KAAMA,EACN6N,IAAK,kCACJ,yBAAAuI,EAAAzf,OAAA,GAAAof,EAAA,mBACJ,gBAAAO,GAAA,OAAAR,EAAA9f,MAAA,KAAAC,UAAA,EAzCI,IA0CJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SAGG,GAAa,0BAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACL,IAIIyK,EAAMuW,EAJNC,EAAYve,EAAQue,UACpBC,EAAWxe,EAAQwe,SACnBvK,EAAajU,EAAQiU,WAGzB,GAAIpC,IAAoBoC,EACtBqK,EAAUvM,EAAWlC,iBAAiB4O,cACpCze,EAAQ0e,KACR1e,EAAQ2e,OAGV5W,EAAO4I,EAAAA,GACL2N,EAAQ/R,QAAQiS,GAChBF,EAAQI,KACRH,OAEG,CACL,IAAIrK,EAAiBmB,EAAAA,GAAgBV,GAAcV,IAGnDqK,EADUtK,GAA4BC,EAAYC,GACpCuK,cACZvK,EAAe0K,OAAOC,QAAQ7e,EAAQ0e,MACtCxK,EAAe0K,OAAOC,QAAQ7e,EAAQ2e,QAExC5W,EAAO4I,EAAAA,GACL2N,EAAQ/R,QAAQiS,GAChBF,EAAQI,KACRH,EAEJ,CAEA,IAAIpF,EAAgB,GACpBtS,EAAekB,EAAMoR,GACrBzR,YACE,CACEC,KAAM,wBACNI,KAAMA,EACN6N,IAAK,yCAEPuD,EAEJ,IACCpC,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,4BAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACL,IAAIihB,EAAYve,EAAQue,UACpBvY,EAAM+L,EAAWyI,kBAAkBiE,cACrCze,EAAQ0e,KACR1e,EAAQ2e,OAEN5W,EAAO4I,EAAAA,GACT3K,EAAa,QAAEhG,EAAQwe,UACvBxY,EAAI0Y,KACJH,GAGEpF,EAAgB,GACpBtS,EAAekB,EAAMoR,GACrBzR,YACE,CACEC,KAAM,0BACNI,KAAMA,EACN6N,IAAK,2CAEPuD,EAEJ,IACCpC,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SAGG,GAAa,yBAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACL,IAIIyK,EACAuW,EALAQ,EAAU9e,EAAQ8e,QAClBP,EAAYve,EAAQue,UACpBC,EAAWxe,EAAQwe,SACnBvK,EAAajU,EAAQiU,WAGzB,GAAIpC,IAAoBoC,EACtBqK,EAAUvM,EAAWlC,iBAAiBV,eAAeqP,GACrDzW,EAAO4I,EAAAA,GAA2B2N,EAASQ,EAASP,OAC/C,CACL,IAAIrK,EAAiBmB,EAAAA,GAAgBV,GAAcV,IAGnDqK,EAFUtK,GAA4BC,EAAYC,GAEpC/E,eAAeqP,GAG7BzW,EAAO4I,EAAAA,GACL2N,EACApK,EAAe0K,OAAOC,QAAQC,GAC9BP,EAEJ,CAEA,IAAIpF,EAAgB,GACpBtS,EAAekB,EAAMoR,GACrBzR,YACE,CACEC,KAAM,uBACNI,KAAMA,EACN6N,IAAK,yCAEPuD,EAEJ,IACCpC,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,sBAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACL,IAIIsX,EAJAmK,EAAU/e,EAAQgf,KAClBR,EAAWxe,EAAQwe,SAEjBS,EAAS7K,GAAUoK,GAEzB,GAAiB,QAAbA,EACF5J,EAAMqK,EAAOvf,IAAI8e,GAAUU,IAAIH,QAC1B,GAAiB,QAAbP,EACT5J,EAAMqK,EAAOvf,IAAI8e,GAAUU,IAAIH,OAC1B,IAAiB,WAAbP,EAGT,MAAM,IAAI/gB,MAAM,yBAA2B+gB,EAAW,KAFtD5J,EAAMqK,EAAOvf,IAAI8e,GAAUU,IAAIH,EAGjC,CAEArX,YACE,CACEC,KAAM,oBACNI,KAAM,CACJiX,KAAMD,EACNI,KAAMvK,GAERgB,IAAK,qCAEP,CAAChB,EAAI3V,QAET,IACC8X,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,yBAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACLyU,EAAWyI,kBAAkB4E,aAC3Bpf,EAAQhB,GACRgB,EAAQqf,WAEV3X,YAAY,CACVC,KAAM,uBACNiO,IAAK,wCAET,IACCmB,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,2BAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACL,IAAIghB,EAAUvM,EAAWyI,kBAAkBrL,aACzCnP,EAAQ8e,SACR9e,EAAQwe,UACNzW,EAAO4I,EAAAA,GAA2B2N,EAAS,EAAGte,EAAQue,WAEtDpF,EAAgB,GACpBtS,EAAekB,EAAMoR,GACrBzR,YACE,CACEC,KAAM,+BACNI,KAAMA,EACN6N,IAAK,2CAEPuD,EAEJ,IACCpC,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,wBAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACLyU,EAAWyI,kBAAkB8E,gBAAgBtf,EAAQhB,GACvD,IACC+X,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,gBAATN,EACT+M,GACG4B,KAAI,eAAAiJ,GAAAthB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAqhB,EAAOliB,GAAC,OAAAY,EAAAA,EAAAA,KAAAG,MAAA,SAAAohB,GAAA,cAAAA,EAAAlhB,KAAAkhB,EAAAjhB,MAAA,cAAAihB,EAAAjhB,KAAA,EACNuT,EAAW2N,KAAKC,UAAU,KAAD,EACpB,OADoBF,EAAAlc,GAC/BqE,EAAW6X,EAAAjhB,KAAA,EAAeuT,EAAW2N,KAAKvQ,eAAc,OAAAsQ,EAAAjc,GAAAic,EAAAje,MAAA,EAAAie,EAAAlc,IAA5C,OAAMkc,EAAAjc,IAAA,wBAAAic,EAAA/gB,OAAA,GAAA8gB,EAAA,KACnB,gBAAAI,GAAA,OAAAL,EAAAxhB,MAAA,KAAAC,UAAA,EAHI,IAIJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,gBAATN,EACT+M,GACG4B,KAAI,eAAAuJ,GAAA5hB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAA2hB,EAAOxiB,GAAC,OAAAY,EAAAA,EAAAA,KAAAG,MAAA,SAAA0hB,GAAA,cAAAA,EAAAxhB,KAAAwhB,EAAAvhB,MAAA,cAAAuhB,EAAAvhB,KAAA,EACNuT,EAAWiO,KAAKL,UAAU,KAAD,EACpB,OADoBI,EAAAxc,GAC/BqE,EAAWmY,EAAAvhB,KAAA,EAAeuT,EAAWiO,KAAK7Q,eAAc,OAAA4Q,EAAAvc,GAAAuc,EAAAve,MAAA,EAAAue,EAAAxc,IAA5C,OAAMwc,EAAAvc,IAAA,wBAAAuc,EAAArhB,OAAA,GAAAohB,EAAA,KACnB,gBAAAG,GAAA,OAAAJ,EAAA9hB,MAAA,KAAAC,UAAA,EAHI,IAIJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,kBAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACL,IACIsX,EAAK7T,EADLmf,EAAQlgB,EAAQiU,WAKpB,GAFAW,EAAMD,GAAcuL,IAASlgB,EAAQ6U,YAEjCvN,YAAYC,OAAOqN,GACrB7T,EAAS,CACP4G,KAAM,QACN3C,OAAQ4P,EAAInM,aAET,CACL,IAAI0X,EAAY,GACZC,EAAW,CAAC,EACZC,EAAU,IAAIC,WAAW1L,EAAIrT,QACjCqT,EAAI2L,KAAI,SAACjjB,EAAG4L,GACJ5L,KAAK8iB,IACTA,EAAS9iB,GAAK6iB,EAAU5e,OACxB4e,EAAU1c,KAAKnG,IAEjB+iB,EAAQnX,GAAKkX,EAAS9iB,EACxB,IAEAyD,EAAS,CACP4G,KAAM,SACN6Y,MAAOH,EACPzB,OAAQuB,EAEZ,CAEA,IAAIM,EAAY,GAChB5Z,EAAe9F,EAAQ0f,GACvB/Y,YACE,CACEC,KAAM,gBACNI,KAAM,CACJkM,WAAYiM,EACZlb,OAAQjE,GAEV6U,IAAK,gCAEP6K,EAEJ,IACC1J,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,6BAATN,EACT+M,GACG4B,KAAI,eAAAoK,GAAAziB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAwiB,EAAOrjB,GAAC,IAAA2W,EAAAsK,EAAAO,EAAA0B,EAAAI,EAAAnT,EAAAoT,EAAA3M,EAAAC,EAAA2M,EAAAC,EAAAC,EAAAC,EAAA,OAAA/iB,EAAAA,EAAAA,KAAAG,MAAA,SAAA6iB,GAAA,cAAAA,EAAA3iB,KAAA2iB,EAAA1iB,MAAA,OACNyV,EAAmCjU,EAAnCiU,WAAYsK,EAAuBve,EAAvBue,UAAWO,EAAY9e,EAAZ8e,QACzB0B,EAAQjC,EAAUM,QAAQ,KAE1BhN,IAAoBoC,EAOtBrM,EAAY,2BANLmK,EAAW9B,uBAAuBkR,kBACvCpP,EAAWlC,iBAAiBV,eAAoB,IAChD2P,EACAP,EAAU9V,MAAM,EAAG+X,GACnBjC,EAAU9V,MAAM+X,EAAQ,KAGjB1O,IAAsBmC,GAC3B2M,EACF7O,EAAWyI,kBAAkB4G,sBAAsBtC,GACjDrR,EAAYsE,EAAWoD,eACxBkM,sBACA3T,kBAECmT,EAAkB,IAAI7e,WAAWyL,GACrCmT,EAAYL,KAAI,SAACjjB,GAAC,OAAKujB,EAAgBS,IAAI,CAAC,GAAIhkB,EAAE,IAC9C4W,EAAiBmB,EAAAA,GAAgBwL,GAEjC1M,EAAMH,GAA4BC,EAAYC,GAC9C4M,EAAe3M,EAAIhF,eAAoB,IAQ3CvH,EAAY,2BANLmK,EAAW9B,uBAAuBkR,kBACvCL,EACA5M,EAAe0K,OAAOC,QAAQ,GAC9BN,EAAU9V,MAAM,EAAG+X,GACnBjC,EAAU9V,MAAM+X,EAAQ,OAItBtM,EAAiBmB,EAAAA,GAAgBV,GAAcV,IAE/CE,EAAMH,GAA4BC,EAAYC,GAC9C4M,EAAe3M,EAAIhF,eAAoB,IAQ3CvH,EAAY,2BANLmK,EAAW9B,uBAAuBkR,kBACvCL,EACA5M,EAAe0K,OAAOC,QAAQC,GAC9BP,EAAU9V,MAAM,EAAG+X,GACnBjC,EAAU9V,MAAM+X,EAAQ,MAG3B,wBAAAU,EAAAxiB,OAAA,GAAAiiB,EAAA,KACF,gBAAAY,GAAA,OAAAb,EAAA3iB,MAAA,KAAAC,UAAA,EA/CI,IAgDJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,+BAATN,EACT+M,GACG4B,KAAI,eAAAkL,GAAAvjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAsjB,EAAOnkB,GAAC,IAAA2W,EAAAsK,EAAAG,EAAAC,EAAA6B,EAAAlC,EAAAwC,EAAA5M,EAAAC,EAAAuN,EAAA,OAAAxjB,EAAAA,EAAAA,KAAAG,MAAA,SAAAsjB,GAAA,cAAAA,EAAApjB,KAAAojB,EAAAnjB,MAAA,OACNyV,EAAuCjU,EAAvCiU,WAAYsK,EAA2Bve,EAA3Bue,UAAWG,EAAgB1e,EAAhB0e,KAAMC,EAAU3e,EAAV2e,MAC/B6B,EAAQjC,EAAUM,QAAQ,KAE1BhN,IAAoBoC,GAClBqK,EAAUvM,EAAWlC,iBAAiB4O,cAAcC,EAAMC,GAO9D/W,EAAY,6BANLmK,EAAW9B,uBAAuBkR,kBACvC7C,EAAQ/R,QAAa,IACrB+R,EAAQI,KACRH,EAAU9V,MAAM,EAAG+X,GACnBjC,EAAU9V,MAAM+X,EAAQ,MAGjB1O,IAAsBmC,GAC3B6M,EAAe/O,EAAWyI,kBAAkBiE,cAC9CC,EACAC,GAQF/W,EAAY,6BANLmK,EAAW9B,uBAAuBkR,kBACvCL,EAAavU,QAAa,IAC1B,EACAgS,EAAU9V,MAAM,EAAG+X,GACnBjC,EAAU9V,MAAM+X,EAAQ,OAItBtM,EAAiBmB,EAAAA,GAAgBV,GAAcV,IAE/CE,EAAMH,GAA4BC,EAAYC,GAE9CoK,EAAUnK,EAAIsK,cAChBvK,EAAe0K,OAAOC,QAAQ7e,EAAQ0e,MACtCxK,EAAe0K,OAAOC,QAAQ7e,EAAQ2e,QASxC/W,EAAY,6BANLmK,EAAW9B,uBAAuBkR,kBACvC7C,EAAQ/R,QAAa,IACrB+R,EAAQI,KACRH,EAAU9V,MAAM,EAAG+X,GACnBjC,EAAU9V,MAAM+X,EAAQ,MAG3B,wBAAAmB,EAAAjjB,OAAA,GAAA+iB,EAAA,KACF,gBAAAG,GAAA,OAAAJ,EAAAzjB,MAAA,KAAAC,UAAA,EA3CI,IA4CJ+Y,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,qBAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACL,IAAMkjB,EAAUxgB,EAAVwgB,MAIN5Y,EAAY,mBADVmK,EAAW9B,uBAAuB4R,qBAAqBrB,GAE3D,IACCzJ,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,0BAATN,EACT+M,GACG4B,MAAK,SAAChZ,GACL,IAKIghB,EAASwD,EALPtB,EAAoDxgB,EAApDwgB,MAAO1B,EAA6C9e,EAA7C8e,QAAS7K,EAAoCjU,EAApCiU,WAAYuK,EAAwBxe,EAAxBwe,SAAUD,EAAcve,EAAdue,UAExCxW,EACFgK,EAAW9B,uBAAuB8R,uBAAuBvB,GAI3D,GAAI3O,IAAoBoC,EACtBqK,EAAUvM,EAAWlC,iBAAiBV,eAAeqP,GACrDsD,EAAcnR,EAAAA,GAA2B2N,EAASQ,EAASP,QACtD,GAAIzM,IAAsBmC,EAC/BqK,EAAUvM,EAAWyI,kBAAkBrL,aAAanP,EAAQ8e,SAC1D9e,EAAQwe,UAEVsD,EAAcnR,EAAAA,GACZ2N,EACA,EACAte,EAAQue,eAEL,CACL,IAAIrK,EAAiBmB,EAAAA,GAAgBV,GAAcV,IAGnDqK,EAFUtK,GAA4BC,EAAYC,GAEpC/E,eAAeqP,GAG7BsD,EAAcnR,EAAAA,GACZ2N,EACApK,EAAe0K,OAAOC,QAAQC,GAC9BP,EAEJ,CAOA,IALA,IAAI8B,EAAUyB,EAAYE,SACvBzB,KAAI,SAACjjB,EAAG4L,GAAC,OAAMnB,EAAKka,SAAS3kB,GAAK4L,GAAK,GAAG,IAC1CD,QAAO,SAAC3L,GAAC,OAAY,MAAPA,CAAU,IAEvB4kB,EAAuB,CAAC,EAC5BC,EAAA,EAAAC,EAAqBrd,OAAOoC,QAAQ2a,GAAYK,EAAAC,EAAA7gB,OAAA4gB,IAAE,CAA7C,IAAAE,GAAAhb,EAAAA,EAAAA,GAAA+a,EAAAD,GAAA,GAAOhY,EAACkY,EAAA,GAAEnd,EAACmd,EAAA,GACdH,EAAqB/X,GAAKjF,EACvBqb,KAAI,SAACjjB,EAAG4L,GAAC,OAAMmX,EAAQ4B,SAAS/Y,GAAK5L,GAAK,GAAG,IAC7C2L,QAAO,SAAC3L,GAAC,OAAY,MAAPA,CAAU,GAC7B,CAEAsK,EAAY,wBAAyBsa,EACvC,IACCnL,OAAM,SAAC3R,GACNjB,QAAQ4P,MAAM3O,GACd4C,EAAUL,EAAMvC,EAAK6C,EACvB,SACG,GAAa,0BAATN,EAAkC,CAC3C,IAAMsM,EAAwBjU,EAAxBiU,WAAY6K,EAAY9e,EAAZ8e,QACdniB,EAAS,CAAEqT,cAAe,CAAC,GAC3B1D,EAAU,KACd,GAAIuF,IAAoBoC,EACtB3H,EAAUyF,EAAWlC,iBAAiBV,oBACjC,GAAI2C,IAAsBmC,EAC/B3H,EAAUyF,EAAWyI,kBAAkBrL,aAAa2P,OAC/C,CAGLxS,EADU0H,GAA4BC,EADjBoB,EAAAA,GAAgBV,GAAcV,KAErC9E,cAChB,CACgB,OAAZ7C,GAAoB,QAASA,IAC/B3P,EAASoV,EAAWuQ,eAAexS,cAAcxD,EAAa,MAEhE1E,EAAY,wBAAyBjL,EACvC,MACEwH,QAAQ4P,MAAM,SAADrW,OAAUiK,EAAI,iBAC3BK,EAAUL,EAAK,SAADjK,OAAWiK,EAAI,gBAAgBM,EAEjD,C,GEzsCIsa,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB1gB,IAAjB2gB,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CACjDzjB,GAAIyjB,EACJ/N,QAAQ,EACRiO,QAAS,CAAC,GAUX,OANAE,EAAoBJ,GAAU/e,KAAKkf,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG3EI,EAAOlO,QAAS,EAGTkO,EAAOD,OACf,CAGAH,EAAoBM,EAAID,EAGxBL,EAAoBllB,EAAI,WAGvB,IAAIylB,EAAsBP,EAAoBQ,OAAEjhB,EAAW,CAAC,IAAI,IAAI,MAAM,WAAa,OAAOygB,EAAoB,KAAO,IAEzH,OADAO,EAAsBP,EAAoBQ,EAAED,EAE7C,E,WCrCA,IAAIE,EAAW,GACfT,EAAoBQ,EAAI,SAASrmB,EAAQumB,EAAUC,EAAIC,GACtD,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASpa,EAAI,EAAGA,EAAI+Z,EAAS1hB,OAAQ2H,IAAK,CACrCga,EAAWD,EAAS/Z,GAAG,GACvBia,EAAKF,EAAS/Z,GAAG,GACjBka,EAAWH,EAAS/Z,GAAG,GAE3B,IAJA,IAGIqa,GAAY,EACPC,EAAI,EAAGA,EAAIN,EAAS3hB,OAAQiiB,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAare,OAAO6T,KAAK4J,EAAoBQ,GAAGS,OAAM,SAAS1a,GAAO,OAAOyZ,EAAoBQ,EAAEja,GAAKma,EAASM,GAAK,IAChKN,EAASQ,OAAOF,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbN,EAASS,OAAOxa,IAAK,GACrB,IAAIya,EAAIR,SACEphB,IAAN4hB,IAAiBhnB,EAASgnB,EAC/B,CACD,CACA,OAAOhnB,CArBP,CAJCymB,EAAWA,GAAY,EACvB,IAAI,IAAIla,EAAI+Z,EAAS1hB,OAAQ2H,EAAI,GAAK+Z,EAAS/Z,EAAI,GAAG,GAAKka,EAAUla,IAAK+Z,EAAS/Z,GAAK+Z,EAAS/Z,EAAI,GACrG+Z,EAAS/Z,GAAK,CAACga,EAAUC,EAAIC,EAwB/B,C,IC5BAZ,EAAoBpf,EAAI,SAASwf,GAChC,IAAIgB,EAAShB,GAAUA,EAAOiB,WAC7B,WAAa,OAAOjB,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAJ,EAAoBsB,EAAEF,EAAQ,CAAE9Z,EAAG8Z,IAC5BA,CACR,ECNApB,EAAoBsB,EAAI,SAASnB,EAASoB,GACzC,IAAI,IAAIhb,KAAOgb,EACXvB,EAAoBwB,EAAED,EAAYhb,KAASyZ,EAAoBwB,EAAErB,EAAS5Z,IAC5EhE,OAAOkf,eAAetB,EAAS5Z,EAAK,CAAEmb,YAAY,EAAMxkB,IAAKqkB,EAAWhb,IAG3E,ECPAyZ,EAAoB3e,EAAI,CAAC,EAGzB2e,EAAoB5e,EAAI,SAASugB,GAChC,OAAOpnB,QAAQmD,IAAI6E,OAAO6T,KAAK4J,EAAoB3e,GAAGugB,QAAO,SAASngB,EAAU8E,GAE/E,OADAyZ,EAAoB3e,EAAEkF,GAAKob,EAASlgB,GAC7BA,CACR,GAAG,IACJ,ECPAue,EAAoB6B,EAAI,SAASF,GAEhC,MAAO,aAAeA,EAAU,IAAM,CAAC,IAAM,WAAW,IAAM,WAAW,IAAM,WAAW,IAAM,WAAW,IAAM,WAAW,IAAM,YAAYA,GAAW,WAC1J,ECHA3B,EAAoB8B,SAAW,SAASH,GAGxC,ECJA3B,EAAoB+B,EAAI,WACvB,GAA0B,kBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAO9gB,GACR,GAAsB,kBAAX+gB,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBnC,EAAoBwB,EAAI,SAASY,EAAKC,GAAQ,OAAO9f,OAAO+f,UAAUC,eAAerhB,KAAKkhB,EAAKC,EAAO,ECCtGrC,EAAoBmB,EAAI,SAAShB,GACX,qBAAXqC,QAA0BA,OAAOC,aAC1ClgB,OAAOkf,eAAetB,EAASqC,OAAOC,YAAa,CAAE3hB,MAAO,WAE7DyB,OAAOkf,eAAetB,EAAS,aAAc,CAAErf,OAAO,GACvD,ECNAkf,EAAoB0C,IAAM,SAAStC,GAGlC,OAFAA,EAAOuC,MAAQ,GACVvC,EAAOwC,WAAUxC,EAAOwC,SAAW,IACjCxC,CACR,ECJAJ,EAAoB6C,EAAI,S,WCAxB7C,EAAoB9Z,EAAI4c,KAAKC,SAAW,aAIxC,IAAIC,EAAkB,CACrB,IAAK,GAkBNhD,EAAoB3e,EAAEqF,EAAI,SAASib,EAASlgB,GAEvCuhB,EAAgBrB,IAElBsB,cAAcjD,EAAoB6C,EAAI7C,EAAoB6B,EAAEF,GAG/D,EAEA,IAAIuB,EAAqBJ,KAAuB,iBAAIA,KAAuB,kBAAK,GAC5EK,EAA6BD,EAAmBjiB,KAAKmiB,KAAKF,GAC9DA,EAAmBjiB,KAzBA,SAAS0K,GAC3B,IAAI+U,EAAW/U,EAAK,GAChB0X,EAAc1X,EAAK,GACnB2X,EAAU3X,EAAK,GACnB,IAAI,IAAIsU,KAAYoD,EAChBrD,EAAoBwB,EAAE6B,EAAapD,KACrCD,EAAoBM,EAAEL,GAAYoD,EAAYpD,IAIhD,IADGqD,GAASA,EAAQtD,GACdU,EAAS3hB,QACdikB,EAAgBtC,EAAS6C,OAAS,EACnCJ,EAA2BxX,EAC5B,C,eCtBA,IAAI3P,EAAOgkB,EAAoBllB,EAC/BklB,EAAoBllB,EAAI,WACvB,OAAOP,QAAQmD,IAAI,CAAC,IAAI,IAAI,KAAKqgB,IAAIiC,EAAoB5e,EAAG4e,IAAsBlM,KAAK9X,EACxF,C,ICF0BgkB,EAAoBllB,G","sources":["workers/KanaDBHandler.js","workers/DownloadsDBHandler.js","workers/helpers.js","utils/utils.js","workers/scran.worker.js","workers/translate.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["var kanaDB;\nvar init = null;\n\nexport function initialize() {\n  init = new Promise((resolve) => {\n    // initialize database on worker creation\n    kanaDB = indexedDB.open(\"KanaDB\", 2);\n\n    kanaDB.onupgradeneeded = (e) => {\n      var kanaDBClient = e.target.result;\n\n      // Currently purging all existing stores when the version is updated.\n      // At some point we may add a more sophisticated upgrade mechanism.\n      try {\n        kanaDBClient.deleteObjectStore(\"analysis\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"analysis_meta\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"file\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"file_meta\");\n      } catch (e) {}\n\n      kanaDBClient.createObjectStore(\"analysis\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"analysis_meta\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"file\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"file_meta\", { keyPath: \"id\" });\n    };\n\n    // Send existing stored analyses, if available.\n    kanaDB.onsuccess = () => {\n      resolve(get_records());\n    };\n\n    kanaDB.onerror = () => {\n      resolve(null);\n    };\n  });\n\n  return init;\n}\n\nfunction get_records() {\n  let store = kanaDB.result\n      .transaction([\"analysis_meta\"], \"readonly\")\n      .objectStore(\"analysis_meta\");\n\n  var allAnalysis = store.getAll();\n  return new Promise((resolve, reject) => {\n    allAnalysis.onsuccess = event => {\n      let vals = allAnalysis.result;\n\n      // no need to transfer the files themselves.\n      vals.forEach((x) => {\n        delete x.files;\n      }); \n\n      resolve(vals);\n    };\n  \n    allAnalysis.onerror = event => {\n      reject(new Error(`failed to query the analysis store in KanaDB: ${event.target.errorCode}`));\n    };\n  });\n}\n\nexport async function getRecords() {\n  await init;\n  return get_records();\n}\n\n/** Functions to save content **/\n\nexport async function saveFile(id, buffer) {\n  await init;\n  let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error when saving file ${id} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let file_store = trans.objectStore(\"file\");\n  let meta_store = trans.objectStore(\"file_meta\");\n\n  let request = meta_store.get(id);\n  let saving = new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      let meta = request.result;\n      if (typeof meta === \"undefined\") {\n        meta = { count: 1, id: id };\n      } else {\n        meta.count++;\n      }\n\n      var data_saving = new Promise((resolve, reject) => {\n        var putrequest = file_store.put({ id: id, payload: buffer.buffer });\n        putrequest.onsuccess = event => {\n          resolve(true);\n        };\n        putrequest.onerror = event => {\n          reject(new Error(`failed to save file ${id} in KanaDB: ${event.target.errorCode}`));\n        };\n      });\n\n      var ref_saving = new Promise((resolve, reject) => {\n        var putrequest = meta_store.put(meta);\n        putrequest.onsuccess = event => {\n          resolve(true);\n        };\n        putrequest.onerror = event => {\n          reject(new Error(`failed to save metadata for file ${id} in KanaDB: ${event.target.errorCode}`));\n        };\n      });\n\n      resolve(Promise.all([data_saving, ref_saving]));\n    };\n\n    request.onerror = event => {\n      reject(new Error(`failed to retrieve metadata ${id} in KanaDB: ${event.target.errorCode}`));\n    };\n  });\n\n  // Only await after attaching all event handlers.\n  await fin;\n  await saving;\n  return;\n}\n\nexport async function saveAnalysis(id, state, files, title) {\n  await init;\n  let trans = kanaDB.result.transaction(\n    [\"analysis\", \"analysis_meta\"],\n    \"readwrite\"\n  );\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error when saving analysis ${id} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let analysis_store = trans.objectStore(\"analysis\");\n  let meta_store = trans.objectStore(\"analysis_meta\");\n\n  let callback = new_id => {\n    var data_saving = new Promise((resolve, reject) => {\n      var putrequest = analysis_store.put({ id: new_id, payload: state.buffer });\n      putrequest.onsuccess = event => {\n        resolve(true);\n      };\n      putrequest.onerror = event => {\n        reject(new Error(`failed to save analysis file ${new_id} in KanaDB: ${event.target.errorCode}`));\n      };\n    });\n\n    var id_saving = new Promise((resolve, reject) => {\n      var putrequest = meta_store.put({\n        id: new_id,\n        files: files,\n        time: Number(new Date()),\n        title: title,\n      });\n      putrequest.onsuccess = event => {\n        resolve(true);\n      };\n      putrequest.onerror = event => {\n        reject(new Error(`failed to save analysis metadata ${new_id} in KanaDB: ${event.target.errorCode}`));\n      };\n    });\n\n    // DO NOT await the promises here!\n    return [new_id, data_saving, id_saving];\n  };\n\n  let output_promise;\n  if (id === null) {\n    let request = meta_store.getAll();\n    output_promise = new Promise((resolve, reject) => {\n      request.onsuccess = event => {\n        resolve(callback(String(request.result.length)));\n      };\n      request.onerror = event => {\n        reject(new Error(`failed to list existing analysis store in KanaDB: ${event.target.errorCode}`));\n      };\n    });\n  } else {\n    output_promise = callback(id);\n  }\n\n  // Only await after attaching all event handlers.\n  let output = await output_promise;\n  await fin;\n  return output[0];\n}\n\n/** Functions to load content **/\n\nexport async function loadFile(id) {\n  await init;\n  let file_store = kanaDB.result\n    .transaction([\"file\"], \"readonly\")\n    .objectStore(\"file\");\n\n  let meta_promise = new Promise((resolve, reject) => {\n    let request = file_store.get(id);\n    request.onsuccess = event => {\n      resolve(request.result !== undefined ? request.result : null);\n    };\n    request.onerror = event => {\n      reject(new Error(`failed to retrieve file ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  });\n\n  var meta = await meta_promise;\n  if (meta !== null) {\n    meta = new Uint8Array(meta[\"payload\"]);\n  }\n  return meta;\n}\n\nexport async function loadAnalysis(id) {\n  await init;\n  let analysis_store = kanaDB.result\n    .transaction([\"analysis\"], \"readonly\")\n    .objectStore(\"analysis\");\n\n  let ana_promise = new Promise((resolve, reject) => {\n    let request = analysis_store.get(id);\n    request.onsuccess = event => {\n      resolve(request.result !== undefined ? request.result : null);\n    };\n    request.onerror = event => {\n      reject(new Error(`failed to retrieve analysis ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  });\n\n  var meta = await ana_promise;\n  if (meta !== null) {\n    meta = new Uint8Array(meta[\"payload\"]);\n  }\n  return meta;\n}\n\n/** Functions to remove content **/\n\nasync function superResolver(x) {\n  let resolved = await x;\n  if (resolved instanceof Array) {\n    let replacement = [];\n    for (const y of resolved) {\n      replacement.push(await superResolver(y));\n    }\n    resolved = replacement;\n  }\n  return resolved;\n}\n\nfunction remove_file(id, file_store, meta_store) {\n  let request = meta_store.get(id);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      let meta = request.result;\n      var refcount = meta[\"count\"] - 1;\n      var promises = [];\n\n      if (refcount === 0) {\n        promises.push(\n          new Promise((resolve, reject) => {\n            let request = file_store.delete(id);\n            request.onsuccess = event => {\n              resolve(true);\n            };\n            request.onerror = event => {\n              reject(new Error(`failed to remove file ${id} from KanaDB: ${event.target.errorCode}`));\n            };\n          })\n        );\n    \n        promises.push(\n          new Promise((resolve, reject) => {\n            let request = meta_store.delete(id);\n            request.onsuccess = event => {\n              resolve(true);\n            };\n            request.onerror = event => {\n              reject(new Error(`failed to remove file metadata ${id} from KanaDB: ${event.target.errorCode}`));\n            };\n          })\n        );\n  \n      } else {\n        promises.push(\n          new Promise((resolve, reject) => {\n            meta.count = refcount;\n            let request = meta_store.put(meta);\n            request.onsuccess = event => {\n              resolve(true);\n            };\n            request.onerror = event => {\n              reject(new Error(`failed to update file metadata ${id} in KanaDB: ${event.target.errorCode}`));\n            };\n          })\n        );\n      }\n\n      resolve(promises);\n    };\n\n    request.onerror = event => {\n      console.log(event);\n      reject(new Error(`failed to retrieve file metadata ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  });\n}\n\nexport async function removeFile(id) {\n  await init;\n  let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error when removing file ${id} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let file_store = trans.objectStore(\"file\");\n  let meta_store = trans.objectStore(\"file_meta\");\n  let removal = remove_file(id, file_store, meta_store);\n\n  // Only await after attaching all event handlers.\n  await superResolver(removal);\n  await fin;\n  return;\n}\n\nexport async function removeAnalysis(id) {\n  await init;\n  let trans = kanaDB.result.transaction(\n    [\"analysis\", \"analysis_meta\", \"file\", \"file_meta\"],\n    \"readwrite\"\n  );\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error when removing analysis ${id} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let analysis_store = trans.objectStore(\"analysis\");\n  let analysis_meta_store = trans.objectStore(\"analysis_meta\");\n  let file_store = trans.objectStore(\"file\");\n  let file_meta_store = trans.objectStore(\"file_meta\");\n\n  let analysis_removal = new Promise((resolve, reject) => {\n    let request = analysis_store.delete(id);\n    request.onsuccess = event => {\n      resolve(true);\n    };\n    request.onerror = event => {\n      reject(new Error(`failed to delete analysis ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  })\n\n  // Removing all files as well.\n  let request = analysis_meta_store.get(id);\n  let file_removal = new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      let meta = request.result;\n\n      let my_promises = [];\n      for (const v of Object.values(meta[\"files\"][\"datasets\"])) {\n        for (const f of v[\"files\"]) {\n          my_promises.push(remove_file(f[\"id\"], file_store, file_meta_store));\n        }\n      }\n\n      // And THEN removing the analysis metadata, because otherwise\n      // we wouldn't know what the files were, obviously!\n      let deleted = new Promise((resolve, reject) => {\n        let request = analysis_meta_store.delete(id);\n        request.onsuccess = event => {\n          resolve(true);\n        };\n        request.onerror = event => {\n          reject(new Error(`failed to delete analysis metadata ${id} from KanaDB: ${event.target.errorCode}`));\n        };\n      })\n\n      my_promises.push(deleted);\n      resolve(my_promises);\n    };\n\n    request.onerror = event => {\n      reject(new Error(`failed to retrieve analysis metadata ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  });\n\n  // Only await after attaching all event handlers.\n  await analysis_removal;\n  await superResolver(file_removal);\n  await fin;\n  return true;\n}\n","var DownloadsDB;\nvar init = null;\n\nexport function initialize() {\n  if (init === null) {\n    init = new Promise((resolve, reject) => {\n      // initialize database on worker creation\n      DownloadsDB = indexedDB.open(\"DownloadsDB\", 3);\n\n      DownloadsDB.onupgradeneeded = (e) => {\n        var DownloadsDBClient = e.target.result;\n\n        // Currently purging all existing stores when the version is updated.\n        // At some point we may add a more sophisticated upgrade mechanism.\n        try {\n          DownloadsDBClient.deleteObjectStore(\"downloads\");\n        } catch (e) {}\n\n        DownloadsDBClient.createObjectStore(\"downloads\", { keyPath: \"url\" });\n      };\n\n      DownloadsDB.onsuccess = () => {\n        resolve(null);\n      };\n\n      DownloadsDB.onerror = () => {\n        reject(\"failed to initialize DownloadsDB\");\n      };\n    });\n  }\n\n  return init;\n}\n\nexport async function get(url, params = null, force = false) {\n  await init;\n\n  if (!force) {\n    let trans = DownloadsDB.result.transaction([\"downloads\"], \"readonly\");\n    let download_store = trans.objectStore(\"downloads\");\n\n    var data_check = new Promise((resolve, reject) => {\n      var already = download_store.get(url);\n      already.onsuccess = event => {\n        if (already.result !== undefined) {\n          resolve(already.result.payload);\n        } else {\n          resolve(null);\n        }\n      };\n      already.onerror = event => {\n        reject(`failed to query DownloadsDB for ${url}: ${event.target.errorCode}`);\n      };\n    });\n\n    var found = await data_check;\n    if (found !== null) {\n      return found;\n    }\n  }\n\n  var req;\n  if (params == null) {\n    req = fetch(url);\n  } else {\n    req = fetch(url, params);\n  }\n\n  var res = await req;\n  if (!res.ok) {\n    throw new Error(\"failed to download '\" + url + \"' (\" + res.status + \")\");\n  }\n  var buffer = await res.arrayBuffer();\n\n  // Technically, this isn't quite right, because we need to close the read\n  // transaction before opening the write transaction; multiple queries to\n  // the same URL from different workers could cause multiple downloads if\n  // they each miss each other's read check. But oh well; the auto-commit\n  // of IDB transactions means that it's hard to do any better. (Specifically,\n  // we can't do an async fetch while the transaction is still open, because\n  // it just closes before the fetch is done.)\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readwrite\");\n\n  // The Promise's function should evaluate immediately\n  // (see https://stackoverflow.com/questions/35177230/are-promises-lazily-evaluated) \n  // so the callbacks should be attached to the transaction before we return to the event loop.\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error for saving ${url} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let download_store = trans.objectStore(\"downloads\");\n  let saving = new Promise((resolve, reject) => {\n    var putrequest = download_store.put({ url: url, payload: buffer });\n    putrequest.onsuccess = event => {\n      resolve(true);\n    };\n    putrequest.onerror = event => {\n      reject(new Error(`failed to cache ${url} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  // Stack all awaits here, AFTER event handlers have been attached.\n  await saving;\n  await fin;\n  return buffer;\n}\n\nexport async function remove(url) {\n  await init;\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readwrite\");\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error for removing ${url} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let download_store = trans.objectStore(\"downloads\")\n  let removal = new Promise((resolve, reject) => {\n    let request = download_store.delete(url);\n    request.onsuccess = event => {\n      resolve(true);\n    };\n    request.onerror = event => {\n      reject(new Error(`failed to remove ${url} from DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  // Only await after attaching event handlers.\n  await removal;\n  await fin;\n  return;\n}\n","import * as bakana from \"bakana\";\nimport * as gesel from \"gesel\";\nimport * as remotes from \"bakana-remotes\";\nimport * as downloads from \"./DownloadsDBHandler.js\";\n\n// Evade CORS problems and enable caching.\nconst proxy = \"https://cors-proxy.aaron-lun.workers.dev\";\nasync function proxyAndCache(url) {\n  let buffer = await downloads.get(proxy + \"/\" + encodeURIComponent(url));\n  return new Uint8Array(buffer);\n}\n\nbakana.CellLabellingState.setDownload(proxyAndCache);\ngesel.setGeneDownload(proxyAndCache);\nbakana.RnaQualityControlState.setDownload(proxyAndCache);\n\ngesel.referenceDownload(async (file, start, end) => {\n  let url = gesel.referenceBaseUrl() + \"/\" + file;\n  let full = proxy + \"/\" + encodeURIComponent(url);\n  if (start == null && end == null) {\n    let buffer = await downloads.get(full);\n    return new Response(buffer);\n  } else {\n    return fetch(full + \"?start=\" + String(start) + \"&end=\" + String(end));\n  }\n});\n\ngesel.geneDownload(async (file) => {\n  let url = gesel.geneBaseUrl() + \"/\" + file;\n  let buffer = await downloads.get(proxy + \"/\" + encodeURIComponent(url));\n  return new Response(buffer);\n});\n\nremotes.ExperimentHubDataset.setDownloadFun(proxyAndCache);\nbakana.availableReaders[\"ExperimentHub\"] = remotes.ExperimentHubDataset;\n\nexport function extractBuffers(object, store) {\n  if (!object) {\n    return;\n  }\n\n  if (Array.isArray(object)) {\n    for (const element of object) {\n      extractBuffers(element, store);\n    }\n  } else if (object.constructor == Object) {\n    for (const [key, element] of Object.entries(object)) {\n      extractBuffers(element, store);\n    }\n  } else if (ArrayBuffer.isView(object)) {\n    if (!(object.buffer instanceof ArrayBuffer)) {\n      throw \"only ArrayBuffers should be in the message payload\";\n    }\n    store.push(object.buffer);\n  }\n}\n\nexport function postAttempt(step) {\n  postMessage({\n    type: `${step}_START`,\n  });\n}\n\nexport function postSuccess(step, info) {\n  if (typeof info == \"undefined\") {\n    postMessage({\n      type: `${step}_CACHE`,\n    });\n  } else {\n    var transferable = [];\n    extractBuffers(info, transferable);\n    postMessage(\n      {\n        type: `${step}_DATA`,\n        resp: info,\n      },\n      transferable\n    );\n  }\n}\n\nexport function postError(type, err, fatal) {\n  postMessage({\n    type: `${type}_ERROR`,\n    resp: {\n      reason: err.toString(),\n      fatal: fatal,\n    },\n  });\n}\n\nexport function splitMetricsByBlock(metrics, blockLevels, blockIds) {\n  var output = {};\n  var blocks = blockIds.slice();\n  for (var b = 0; b < blockLevels.length; b++) {\n    let current = {};\n    for (const [key, val] of Object.entries(metrics)) {\n      current[key] = val.slice().filter((x, i) => blocks[i] == b);\n    }\n    output[blockLevels[b]] = current;\n  }\n  return output;\n}\n\nexport function splitThresholdsByBlock(thresholds, blockLevels) {\n  var output = {};\n  for (const x of blockLevels) {\n    output[x] = {};\n  }\n\n  for (const [key, val] of Object.entries(thresholds)) {\n    for (var b = 0; b < blockLevels.length; b++) {\n      output[blockLevels[b]][key] = val[b];\n    }\n  }\n\n  return output;\n}\n\nexport async function fetchStepSummary(state, step) {\n  // do not send any response to UI if they have not changed\n  if (!state[step].changed) {\n    return undefined;\n  }\n\n  if (step === \"inputs\") {\n    let output = {};\n\n    let ngenes = {};\n    for (const a of state[step].fetchCountMatrix().available()) {\n      ngenes[a] = state[step].fetchCountMatrix().get(a).numberOfRows();\n    }\n\n    let gene_info = {};\n    for (const [k, v] of Object.entries(\n      state[step].fetchFeatureAnnotations()\n    )) {\n      let info = {};\n      for (const c of v.columnNames()) {\n        let col = v.column(c);\n        if (Array.isArray(col)) {\n          info[c] = col;\n        }\n      }\n\n      if (Array.isArray(v.rowNames())) {\n        info[\"rownames\"] = v.rowNames();\n      }\n\n      gene_info[k] = info;\n    }\n\n    let cell_info = {};\n    for (const c of state[step].fetchCellAnnotations().columnNames()) {\n      let col = state[step].fetchCellAnnotations().column(c);\n      if (isArrayOrView(col)) {\n        const ksumm = describeColumn(col, {\n          all: false,\n          unique: true,\n          colname: c,\n        });\n        cell_info[c] = ksumm;\n      }\n    }\n\n    var blocks = state[step].fetchBlockLevels();\n    if (blocks !== null) {\n      const col = state[step].fetchBlock().slice();\n      if (isArrayOrView(col)) {\n        const ksumm = describeColumn(col, {\n          all: false,\n          unique: true,\n          colname: \"__batch__\",\n        });\n        cell_info[\"__batch__\"] = ksumm;\n      }\n    }\n\n    output = {\n      num_cells: state[step].fetchCountMatrix().numberOfColumns(),\n      num_genes: ngenes,\n      genes: gene_info,\n      annotations: cell_info,\n    };\n\n    return output;\n  } else if (step === \"rna_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().subsetProportions(0),\n    };\n\n    let output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      sums: state[step].fetchFilters().thresholdsSums(),\n      detected: state[step].fetchFilters().thresholdsDetected(),\n      proportion: state[step].fetchFilters().thresholdsSubsetProportions(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    return output;\n  } else if (step === \"adt_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().subsetTotals(0),\n    };\n\n    var output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      detected: state[step].fetchFilters().thresholdsDetected(),\n      proportion: state[step].fetchFilters().thresholdsSubsetTotals(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    // We don't use sums for filtering but we do report it in the metrics,\n    // so we just add some NaNs to the thresholds for consistency.\n    for (const [k, v] of Object.entries(output.thresholds)) {\n      v.sums = NaN;\n    }\n\n    return output;\n  } else if (step === \"crispr_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().maxProportions(),\n    };\n\n    let output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      count: state[step].fetchFilters().thresholdsMaxCount(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    return output;\n  } else if (step === \"cell_filtering\") {\n    let remaining = 0,\n      discard_vec = null;\n    const discardBuff = state[step].fetchDiscards();\n    if (discardBuff) {\n      discardBuff.forEach((x) => {\n        remaining += x == 0;\n      });\n      discard_vec = discardBuff.slice();\n    } else {\n      remaining = state.inputs.fetchCountMatrix().numberOfColumns();\n    }\n    let output = { retained: remaining, discard: discard_vec };\n    return output;\n  } else if (step === \"rna_normalization\") {\n    return {};\n  } else if (step === \"adt_normalization\") {\n    return {};\n  } else if (step === \"crispr_normalization\") {\n    return {};\n  } else if (step === \"feature_selection\") {\n    let output = {\n      means: state[step].fetchResults().means(),\n      vars: state[step].fetchResults().variances(),\n      fitted: state[step].fetchResults().fitted(),\n      resids: state[step].fetchResults().residuals(),\n    };\n    return output;\n  } else if (\n    step === \"rna_pca\" ||\n    step === \"adt_pca\" ||\n    step === \"crispr_pca\"\n  ) {\n    let pcs = state[step].fetchPCs();\n    var var_exp = pcs.varianceExplained();\n    var total_var = pcs.totalVariance();\n    var_exp.forEach((x, i) => {\n      var_exp[i] = x / total_var;\n    });\n    return {\n      var_exp: var_exp,\n    };\n  } else if (step === \"combine_embeddings\") {\n    return {};\n  } else if (step === \"batch_correction\") {\n    return {};\n  } else if (step === \"neighbor_index\") {\n    return {};\n  } else if (step === \"tsne\" || step === \"umap\") {\n    return await state[step].fetchResults();\n  } else if (step === \"kmeans_cluster\") {\n    return {};\n  } else if (step === \"snn_graph_cluster\") {\n    return {};\n  } else if (step === \"choose_clustering\") {\n    var clusters = state[step].fetchClusters();\n    return { clusters: clusters.slice() };\n  } else if (step === \"marker_detection\") {\n    return {};\n  } else if (step === \"cell_labelling\") {\n    let markers = state.marker_detection.fetchResults();\n    if (\"RNA\" in markers) {\n      let results = state[step].computeLabels(markers.RNA);\n      // for (const [k, v] of Object.entries(results.per_reference)) { // TODO: return scores.\n      //   results.per_reference[k] = v.map(x => x.best);\n      // }\n      // if (\"integrated\" in results) {\n      //   results.integrated = results.integrated.map(x => x.best);\n      // }\n      return results;\n    } else {\n      return { per_reference: {} };\n    }\n  } else if (step === \"custom_selections\") {\n    return {};\n  } else if (step === \"feature_set_enrichment\") {\n    let collections = state.feature_set_enrichment.fetchCollectionDetails();\n    let sets = state.feature_set_enrichment.fetchSetDetails();\n    return {\n      collections: collections,\n      sets: {\n        names: sets.names,\n        descriptions: sets.descriptions,\n        sizes: sets.sizes.slice(),\n        collections: sets.collections.slice(),\n      },\n    };\n  }\n}\n\nexport function isArrayOrView(col) {\n  return Array.isArray(col) || ArrayBuffer.isView(col);\n}\n\nexport function describeColumn(\n  col,\n  { all = false, unique = false, colname = null } = {}\n) {\n  let res;\n  if (isArrayOrView(col)) {\n    res = bakana.summarizeArray(col);\n    const uqVals = new Set(col);\n    res[\"num_unique\"] = uqVals.size;\n\n    if ((uqVals.size <= 50) & unique) res[\"__unique__\"] = [...uqVals].sort();\n    if (all) res[\"_all_\"] = col;\n\n    // if type is continous and unique values is less than 50, type is both\n    if (res[\"type\"] === \"continuous\" && uqVals.size <= 50) res[\"type\"] = \"both\";\n\n    if (typeof colname === \"string\" || colname instanceof String)\n      res[\"name\"] = colname;\n  }\n\n  return res;\n}\n","import { randomColor } from \"randomcolor\";\n\nexport const getColors = (data) => {\n  const palette = {\n    1: [\"#1b9e77\"],\n    2: [\"#1b9e77\", \"#d95f02\"],\n    3: [\"#1b9e77\", \"#d95f02\", \"#7570b3\"],\n    4: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\"],\n    5: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\"],\n    6: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\", \"#e6ab02\"],\n    7: [\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#7570b3\",\n      \"#e7298a\",\n      \"#66a61e\",\n      \"#e6ab02\",\n      \"#a6761d\",\n    ],\n    8: [\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#7570b3\",\n      \"#e7298a\",\n      \"#66a61e\",\n      \"#e6ab02\",\n      \"#a6761d\",\n      \"#666666\",\n    ],\n    9: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n    ],\n    10: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n    ],\n    11: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n      \"#ffff99\",\n    ],\n    12: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n      \"#ffff99\",\n      \"#b15928\",\n    ],\n  };\n\n  let cluster_count = Math.max(...data) + 1;\n  let cluster_colors = null;\n  if (cluster_count > Object.keys(palette).length) {\n    cluster_colors = randomColor({\n      luminosity: \"dark\",\n      count: cluster_count + 1,\n    });\n  } else {\n    cluster_colors = palette[cluster_count.toString()];\n  }\n\n  return cluster_colors;\n};\n\nexport function isObject(object) {\n  return typeof object === \"object\" && Array.isArray(object) === false;\n}\n\nexport const code = \"K@𝜂a#$c3ll\";\n\n// this function is from https://developer.mozilla.org/en-US/docs/Glossary/Base64\nexport function utf8_to_b64(str) {\n  return window.btoa(unescape(encodeURIComponent(str)));\n}\n\nexport function generateUID(resource) {\n  let base = `${resource.format}`;\n  switch (resource.format) {\n    case \"SummarizedExperiment\":\n      base += `::${resource.rds.name}::${resource.rds.lastModified}::${resource.rds.size}`;\n      return utf8_to_b64(base);\n    case \"MatrixMarket\":\n      for (let key of [\"genes\", \"mtx\", \"annotations\"]) {\n        if (resource[key]) {\n          base += `::${resource[key].name}::${resource[key].lastModified}::${resource[key].size}`;\n        }\n      }\n      return utf8_to_b64(base);\n    case \"10X\":\n    case \"H5AD\":\n      base += `::${resource.h5.name}::${resource.h5.lastModified}::${resource.h5.size}`;\n      return utf8_to_b64(base);\n    case \"ExperimentHub\":\n      base += `::${resource.id}`;\n      return utf8_to_b64(base);\n    case \"ZippedArtifactdb\":\n      base += `::${resource.zipname}::${resource.zipfile}`;\n      return utf8_to_b64(base);\n    case \"ZippedADB\":\n      base += `::${resource.zipname}::${resource.zipfile}`;\n      return utf8_to_b64(base);\n    default:\n      throw Error(`format: ${resource.format} does not exist`);\n      break;\n  }\n}\n\nexport const MODALITIES = [\"RNA\", \"ADT\", \"CRISPR\"];\n\nexport const getMinMax = (arr) => {\n  var max = -Number.MAX_VALUE,\n    min = Number.MAX_VALUE;\n  arr.forEach(function (x) {\n    if (max < x) {\n      max = x;\n    }\n    if (min > x) {\n      min = x;\n    }\n  });\n  return [min, max];\n};\n\nexport const defaultColor = \"#5F6B7C\";\n\nexport const default_cluster = `${code}::CLUSTERS`;\nexport const default_selection = `${code}::SELECTION`;\n\nexport const getComputedCols = (cols) => {\n  return Object.keys(cols)\n    .filter(\n      (x) =>\n        cols[x].name === default_cluster ||\n        ((cols[x].name.startsWith(code) || cols[x].name === \"__batch__\") &&\n          cols[x].type !== \"continuous\" &&\n          (cols[x][\"type\"] === \"both\" ||\n            (cols[x][\"type\"] === \"categorical\" &&\n              cols[x][\"truncated\"] === false)))\n    )\n    .filter((x) => !cols[x].name.replace(`${code}::`, \"\").startsWith(\"QC\"));\n};\n\nexport const showComputedSection = (cols, custom) => {\n  return getComputedCols(cols).length > 0 || Object.keys(custom).length > 0;\n};\n\nexport const getSuppliedCols = (cols) => {\n  return Object.keys(cols).filter(\n    (x) =>\n      !cols[x].name.startsWith(code) &&\n      cols[x].name !== \"__batch__\" &&\n      cols[x].type !== \"continuous\" &&\n      (cols[x][\"type\"] === \"both\" ||\n        (cols[x][\"type\"] === \"categorical\" && cols[x][\"truncated\"] === false))\n  );\n};\n\nexport const resetApp = () => {\n  window.location.reload();\n};\n","import * as bakana from \"bakana\";\nimport * as scran from \"scran.js\";\nimport * as kana_db from \"./KanaDBHandler.js\";\nimport * as gesel from \"gesel\";\nimport * as hashwasm from \"hash-wasm\";\nimport * as remotes from \"bakana-remotes\";\nimport * as downloads from \"./DownloadsDBHandler.js\";\nimport JSZip from \"jszip\";\n\nimport * as translate from \"./translate.js\";\nimport {\n  extractBuffers,\n  postAttempt,\n  postSuccess,\n  postError,\n  fetchStepSummary,\n  describeColumn,\n  isArrayOrView,\n} from \"./helpers.js\";\nimport { code } from \"../utils/utils.js\";\n/***************************************/\n\nconst default_cluster = `${code}::CLUSTERS`;\nconst default_selection = `${code}::SELECTION`;\n\nlet superstate = null;\nlet preflights = {};\nlet preflights_summary = {};\nlet cache_matrix = null;\nlet cache_anno_markers = {};\n\nfunction createDataset(args) {\n  if (args.format === \"10X\") {\n    return new bakana.TenxHdf5Dataset(\n      args.h5,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"MatrixMarket\") {\n    return new bakana.TenxMatrixMarketDataset(\n      args.mtx,\n      args.genes || null,\n      args.annotations || null,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"H5AD\") {\n    return new bakana.H5adDataset(args.h5, args.options ? args.options : {});\n  } else if (args.format === \"SummarizedExperiment\") {\n    return new bakana.SummarizedExperimentDataset(\n      args.rds,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"ZippedADB\") {\n    return new bakana.ZippedArtifactdbDataset(\n      args.zipname,\n      args.zipfile,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"ExperimentHub\") {\n    return new remotes.ExperimentHubDataset(\n      args.id,\n      args.options ? args.options : {}\n    );\n  } else {\n    throw new Error(\"unknown format '\" + args.format + \"'\");\n  }\n}\n\nfunction summarizeDataset(summary, args) {\n  // TODO: figure out a way to deal with nested dataframes later\n  let cells_summary = {};\n  for (const k of summary.cells.columnNames()) {\n    const kcol = summary.cells.column(k);\n    if (isArrayOrView(kcol))\n      cells_summary[k] = describeColumn(kcol, {\n        all: true,\n        unique: true,\n        colname: k,\n      });\n  }\n  let tmp_meta = {\n    cells: {\n      columns: cells_summary,\n      numberOfCells: summary.cells.numberOfRows(),\n    },\n  };\n\n  if (args.format === \"H5AD\") {\n    tmp_meta[\"all_features\"] = {};\n    let tmod_summary = {};\n    for (const k of summary[\"all_features\"].columnNames()) {\n      const kcol = summary[\"all_features\"].column(k);\n      if (isArrayOrView(kcol)) {\n        tmod_summary[k] = describeColumn(kcol, {\n          all: true,\n          unique: true,\n          colname: k,\n        });\n      }\n    }\n    tmp_meta[\"all_features\"] = {\n      columns: tmod_summary,\n      numberOfFeatures: summary[\"all_features\"].numberOfRows(),\n      rownames: Array.isArray(summary[\"all_features\"].rowNames()),\n    };\n  } else if (args.format === \"SummarizedExperiment\") {\n    tmp_meta[\"modality_features\"] = {};\n    if (\"modality_features\" in summary) {\n      for (const [k, v] of Object.entries(summary.modality_features)) {\n        let tmod_summary = {};\n        for (const k of v.columnNames()) {\n          const kcol = v.column(k);\n          if (isArrayOrView(kcol)) {\n            tmod_summary[k] = describeColumn(kcol, {\n              all: true,\n              unique: true,\n              colname: k,\n            });\n          }\n        }\n        tmp_meta[\"modality_features\"][k] = {\n          columns: tmod_summary,\n          numberOfFeatures: v.numberOfRows(),\n          rownames: Array.isArray(v.rowNames()),\n        };\n      }\n    }\n  } else {\n    tmp_meta[\"modality_features\"] = {};\n    if (\"modality_features\" in summary) {\n      for (const [k, v] of Object.entries(summary.modality_features)) {\n        let tmod_summary = {};\n        for (const k of v.columnNames()) {\n          const kcol = v.column(k);\n          if (isArrayOrView(kcol)) {\n            tmod_summary[k] = describeColumn(kcol, {\n              all: true,\n              unique: true,\n              colname: k,\n            });\n          }\n        }\n        tmp_meta[\"modality_features\"][k] = {\n          columns: tmod_summary,\n          numberOfFeatures: v.numberOfRows(),\n          rownames: Array.isArray(v.rowNames()),\n        };\n      }\n    }\n  }\n\n  if (args.format === \"H5AD\") {\n    tmp_meta[\"all_assay_names\"] = summary.all_assay_names;\n  } else if (\n    args.format === \"SummarizedExperiment\" ||\n    args.format === \"ZippedADB\"\n  ) {\n    tmp_meta[\"modality_assay_names\"] = summary.modality_assay_names;\n  }\n  return tmp_meta;\n}\n\nbakana.setVisualizationAnimate((type, x, y, iter) => {\n  postMessage(\n    {\n      type: type + \"_iter\",\n      x: x,\n      y: y,\n      iteration: iter,\n    },\n    [x.buffer, y.buffer]\n  );\n});\n\nfunction linkKanaDb(collected) {\n  return async (type, file) => {\n    let buffer = file.buffer();\n    var md5 = await hashwasm.md5(buffer);\n    var id = type + \"_\" + file.name() + \"_\" + buffer.length + \"_\" + md5;\n    await kana_db.saveFile(id, buffer);\n    collected.push(id);\n    return id;\n  };\n}\n\nbakana.setResolveLink(kana_db.loadFile);\n\nasync function unserializeAllSteps(contents) {\n  const h5path = \"serialized_out.h5\";\n\n  let output;\n  try {\n    let loader = await bakana.parseKanaFile(contents, h5path);\n    let loaded_state = await bakana.loadAnalysis(h5path, loader, {\n      finishFun: postSuccess,\n    });\n\n    if (superstate !== null) {\n      await bakana.freeAnalysis(superstate);\n    }\n    superstate = loaded_state;\n\n    output = {\n      parameters: translate.toUI(bakana.retrieveParameters(superstate)),\n      other: {\n        custom_selections: superstate.custom_selections.fetchSelections(),\n      },\n    };\n  } finally {\n    bakana.callScran((scran) => scran.removeFile(h5path));\n  }\n\n  return output;\n}\n\nasync function postStepSummary(step) {\n  try {\n    let output = await fetchStepSummary(superstate, step);\n\n    postSuccess(step, output);\n  } catch (err) {\n    console.error(err);\n    postError(step, err, true);\n  }\n}\n\nfunction getMarkerStandAloneForAnnot(annotation, annotation_vec) {\n  let mds;\n  if (!(annotation in cache_anno_markers)) {\n    mds = new bakana.MarkerDetectionStandalone(\n      getMatrix(),\n      annotation_vec.ids.slice()\n    );\n\n    mds.computeAll();\n    cache_anno_markers[annotation] = mds;\n  }\n\n  return cache_anno_markers[annotation];\n}\n\nconst getAnnotation = (annotation, unfiltered = false) => {\n  let vec;\n  if (annotation === \"__batch__\") {\n    vec = superstate.inputs.fetchBlock().slice();\n  } else if (annotation.startsWith(`${code}::QC::`)) {\n    let metric = annotation.replace(`${code}::QC::`, \"\");\n    let split_metric = metric.split(\"_\");\n    let metrics =\n      superstate[\n        `${split_metric[0].toLowerCase()}_quality_control`\n      ].fetchMetrics();\n\n    if (split_metric[1] === \"sums\") {\n      vec = metrics.sums();\n    } else if (split_metric[1] === \"detected\") {\n      vec = metrics.detected();\n    } else if (split_metric[1] === \"proportion\") {\n      if (split_metric[0].toLowerCase() === \"rna\") {\n        vec = metrics.subsetProportions(0);\n      } else if (split_metric[0].toLowerCase() === \"adt\") {\n        vec = metrics.subsetTotals(0);\n      } else if (split_metric[0].toLowerCase() === \"crispr\") {\n        vec = metrics.maxProportions(0);\n      }\n    }\n  } else {\n    vec = superstate.inputs.fetchCellAnnotations().column(annotation);\n  }\n\n  if (!unfiltered) {\n    vec = superstate.cell_filtering.applyFilter(vec);\n  }\n\n  return vec.slice();\n};\n\nconst getMatrix = () => {\n  if (cache_matrix === null) {\n    cache_matrix = new scran.MultiMatrix();\n    let mapping = {\n      RNA: \"rna_normalization\",\n      ADT: \"adt_normalization\",\n      CRISPR: \"crispr_normalization\",\n    };\n    for (const [k, v] of Object.entries(mapping)) {\n      let state = superstate[v];\n      if (state.valid()) {\n        cache_matrix.add(k, state.fetchNormalizedMatrix());\n      }\n    }\n  }\n  return cache_matrix;\n};\n\nconst resetMarkerState = () => {\n  for (const [k, v] of Object.entries(cache_anno_markers)) {\n    v.free();\n  }\n\n  cache_anno_markers = {};\n};\n\n/***************************************/\n\nvar loaded;\nonmessage = function (msg) {\n  const { type, payload } = msg.data;\n\n  // console.log(\"WORKER::RCV::\", type, payload);\n\n  let fatal = false;\n  if (type === \"INIT\") {\n    fatal = true;\n    let nthreads = Math.round((navigator.hardwareConcurrency * 2) / 3);\n    let back_init = bakana.initialize({ numberOfThreads: nthreads });\n\n    let state_init = back_init.then(() => {\n      return bakana.createAnalysis();\n    });\n\n    state_init.then((x) => {\n      superstate = x;\n      postMessage({\n        type: type,\n        msg: \"Success: analysis state created\",\n      });\n    });\n\n    let kana_init = kana_db.initialize();\n    kana_init\n      .then((output) => {\n        if (output !== null) {\n          postMessage({\n            type: \"KanaDB_store\",\n            resp: output,\n            msg: \"Success: KanaDB initialized\",\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n        postMessage({\n          type: \"KanaDB_ERROR\",\n          msg: \"Error: Cannot initialize KanaDB\",\n        });\n      });\n\n    let down_init = downloads.initialize();\n    down_init\n      .then((output) => {\n        postMessage({\n          type: \"DownloadsDB_store\",\n          resp: output,\n          msg: \"Success: DownloadsDB initialized\",\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        postMessage({\n          type: \"DownloadsDB_ERROR\",\n          msg: \"Error: Cannot initialize DownloadsDB\",\n        });\n      });\n\n    try {\n      let ehub_ids = remotes.ExperimentHubDataset.availableDatasets();\n      postMessage({\n        type: \"ExperimentHub_store\",\n        resp: ehub_ids,\n        msg: \"Success: ExperimentHub initialized\",\n      });\n    } catch (err) {\n      console.error(err);\n      postMessage({\n        type: \"ExperimentHub_ERROR\",\n        msg: \"Error: Cannot access datasets in ExperimentHub\",\n      });\n    }\n\n    loaded = Promise.all([back_init, kana_init, down_init, state_init]);\n\n    loaded\n      .then(() => {\n        postMessage({\n          type: type,\n          msg: \"Success: bakana initialized\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** RUNNING AN ANALYSIS *******************/\n  } else if (type === \"RUN\") {\n    fatal = true;\n    loaded\n      .then((x) => {\n        let inputs = payload.inputs;\n        let files = inputs.files;\n\n        if (files !== null) {\n          // Extracting existing datasets from the preflights.\n          let current = {};\n          for (const [k, v] of Object.entries(files)) {\n            if (\"uid\" in v && v.uid in preflights) {\n              current[k] = preflights[v.uid];\n            } else {\n              current[k] = createDataset(v);\n            }\n            current[k].setOptions(v.options);\n          }\n\n          // Cleaning out the preflight datasets that weren't used.\n          for (const [k, v] of Object.entries(preflights)) {\n            v.clear();\n            delete preflights[k];\n          }\n\n          files = current;\n        }\n\n        resetMarkerState();\n\n        let formatted = translate.fromUI(inputs, payload.params);\n        bakana\n          .runAnalysis(superstate, files, formatted, {\n            startFun: postAttempt,\n            finishFun: postStepSummary,\n          })\n          .catch((err) => {\n            console.error(err);\n            postError(type, err, fatal);\n          });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n    /**************** LOADING EXISTING ANALYSES *******************/\n  } else if (type === \"LOAD\") {\n    fatal = true;\n    let fs = payload.inputs.files;\n\n    if (fs[Object.keys(fs)[0]].format === \"kana\") {\n      let f = fs[Object.keys(fs)[0]].file;\n      loaded\n        .then(async (x) => {\n          const reader = new FileReaderSync(); // eslint-disable-line\n          const zipbuffer = reader.readAsArrayBuffer(f);\n          const unzipped = await JSZip.loadAsync(zipbuffer);\n          let config = JSON.parse(\n            await unzipped.file(\"config.json\").async(\"string\")\n          );\n\n          let buffers = {};\n          for (const x in unzipped.files) {\n            if (x.startsWith(\"datasets/\")) {\n              let current = await unzipped.files[x].async(\"uint8array\");\n              buffers[x.split(\"/\")[1]] = current;\n            }\n          }\n\n          // This re-runs the entire analysis, so throw startFun/finishFun callbacks here.\n          superstate = await bakana.unserializeConfiguration(\n            config,\n            (id) => buffers[id],\n            {\n              state: superstate,\n              startFun: postAttempt,\n              finishFun: postStepSummary,\n            }\n          );\n\n          const other = {\n            custom_selections: superstate.custom_selections.fetchSelections(),\n          };\n\n          var transferrable = [];\n          extractBuffers(config.parameters, transferrable);\n          postMessage(\n            {\n              type: \"loadedParameters\",\n              resp: {\n                parameters: config.parameters,\n                other: other,\n              },\n            },\n            transferrable\n          );\n\n          let features = {};\n          let resp = {};\n          const loaded_ds = superstate.inputs.fetchDatasets();\n          for (const [k, v] of Object.entries(loaded_ds)) {\n            let res = await v.previewPrimaryIds({ cache: true });\n\n            for (const i_mod of [\"RNA\", \"ADT\", \"CRISPR\"]) {\n              if (i_mod in res) {\n                if (!features[i_mod]) {\n                  features[i_mod] = [res[i_mod]];\n                } else {\n                  features[i_mod].push(res[i_mod]);\n                }\n              }\n            }\n          }\n\n          for (const [k, v] of Object.entries(features)) {\n            resp[k] = gesel.intersect(v).length;\n          }\n\n          postMessage({\n            type: \"PREFLIGHT_OPTIONS_DATA\",\n            resp: resp,\n            msg: \"Success: PREFLIGHT_OPTIONS done\",\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n          postError(type, err, fatal);\n        });\n    } else if (fs[Object.keys(fs)[0]].format === \"kanadb\") {\n      loaded\n        .then(async (x) => {\n          var id = fs[Object.keys(fs)[0]].file;\n\n          const jsonbuffer = await kana_db.loadAnalysis(id);\n          const dec = new TextDecoder();\n          let config = JSON.parse(dec.decode(jsonbuffer));\n\n          superstate = await bakana.unserializeConfiguration(\n            config,\n            kana_db.loadFile,\n            {\n              state: superstate,\n              startFun: postAttempt,\n              finishFun: postStepSummary,\n            }\n          );\n        })\n        .catch((err) => {\n          console.error(err);\n          postError(type, err, fatal);\n        });\n    }\n    /**************** SAVING EXISTING ANALYSES *******************/\n  } else if (type === \"EXPORT\") {\n    loaded\n      .then(async (x) => {\n        let buffers = [];\n        let saver = (name, format, file) => {\n          let id = String(buffers.length);\n          buffers.push(file.buffer());\n          return id;\n        };\n\n        // Returns a configuration object.\n        let collected = await bakana.serializeConfiguration(superstate, saver);\n\n        // Let's zip it all up!\n        const zipper = new JSZip();\n        zipper.file(\"config.json\", JSON.stringify(collected));\n        for (var i = 0; i < buffers.length; i++) {\n          zipper.file(\"datasets/\" + String(i), buffers[i]);\n        }\n        let zipbuffer = await zipper.generateAsync({ type: \"uint8array\" });\n        postMessage(\n          {\n            type: \"exportState\",\n            resp: zipbuffer,\n            msg: \"Success: application state exported\",\n          },\n          [zipbuffer.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"EXPORT_RDS\") {\n    loaded\n      .then(async (x) => {\n        let files = await bakana.saveSingleCellExperiment(superstate, \"sce\", {\n          forceBuffer: true,\n        });\n\n        let gene_files = await bakana.saveGenewiseResults(superstate, \"\", {\n          forceBuffer: true,\n        });\n\n        for (const f of gene_files) {\n          files.push(f);\n        }\n        let zipbuffer = await bakana.zipFiles(files);\n\n        postMessage(\n          {\n            type: \"exportRDSState\",\n            resp: zipbuffer,\n            msg: \"Success: application state exported\",\n          },\n          [zipbuffer.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"SAVEKDB\") {\n    // save analysis to inbrowser indexedDB\n    var title = payload.title;\n    loaded\n      .then(async (x) => {\n        let buffers = [];\n        let saver = async (name, format, file) => {\n          // basically linkKanaDb with an extra arg.\n          let buffer = file.buffer();\n          var md5 = await hashwasm.md5(buffer);\n          var id = type + \"_\" + file.name() + \"_\" + buffer.length + \"_\" + md5;\n          await kana_db.saveFile(id, buffer);\n          buffers.push(id);\n          return id;\n        };\n\n        let collected = await bakana.serializeConfiguration(superstate, saver);\n        const enc = new TextEncoder();\n        let config = enc.encode(JSON.stringify(collected));\n        let id = await kana_db.saveAnalysis(null, config, collected, title);\n\n        let recs = await kana_db.getRecords();\n        postMessage({\n          type: \"KanaDB_store\",\n          resp: recs,\n          msg: `Success: Saved analysis to browser (${id})`,\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** KANADB EVENTS *******************/\n  } else if (type === \"REMOVEKDB\") {\n    // remove a saved analysis\n    var id = payload.id;\n    kana_db\n      .removeAnalysis(id)\n      .then(async (output) => {\n        let recs = await kana_db.getRecords();\n        postMessage({\n          type: \"KanaDB_store\",\n          resp: recs,\n          msg: `Success: Removed file from cache (${id})`,\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"PREFLIGHT_OPTIONS\") {\n    loaded.then(async (x) => {\n      let resp = {};\n      try {\n        let counter = 0;\n        let features = {};\n\n        for (const [k, v] of Object.entries(payload.inputs.files)) {\n          if (\"uid\" in v) {\n            let ds = preflights[v.uid];\n\n            if (\n              Array.isArray(payload.options) &&\n              payload.options.length > counter\n            ) {\n              ds.setOptions(payload.options[counter]);\n\n              let res = await ds.previewPrimaryIds({ cache: true });\n\n              for (const i_mod of [\"RNA\", \"ADT\", \"CRISPR\"]) {\n                if (i_mod in res) {\n                  if (!features[i_mod]) {\n                    features[i_mod] = [res[i_mod]];\n                  } else {\n                    features[i_mod].push(res[i_mod]);\n                  }\n                }\n              }\n            }\n          }\n          counter++;\n        }\n\n        for (const [k, v] of Object.entries(features)) {\n          if (v.length !== payload.options.length) {\n            resp[k] = 0;\n          } else {\n            resp[k] = gesel.intersect(v).length;\n          }\n        }\n      } catch (e) {\n        console.error(e);\n        resp.status = \"ERROR\";\n        resp.reason = e.toString();\n      }\n\n      postMessage({\n        type: \"PREFLIGHT_OPTIONS_DATA\",\n        resp: resp,\n        msg: \"Success: PREFLIGHT_OPTIONS done\",\n      });\n    });\n  } else if (type === \"PREFLIGHT_INPUT\") {\n    loaded\n      .then(async (x) => {\n        let resp = {};\n        try {\n          // Registering the UIDs of each new dataset.\n          let current = {};\n          let summary = {};\n          for (const [k, v] of Object.entries(payload.inputs.files)) {\n            if (\"uid\" in v) {\n              if (!(v.uid in preflights)) {\n                preflights[v.uid] = createDataset(v);\n                preflights_summary[v.uid] = await preflights[v.uid].summary({\n                  cache: true,\n                });\n              }\n              current[k] = preflights[v.uid];\n              summary[k] = summarizeDataset(preflights_summary[v.uid], v);\n            } else {\n              let tmp_dataset = createDataset(v);\n              current[k] = tmp_dataset;\n              summary[k] = summarizeDataset(\n                await current[k].summary({ cache: true }),\n                v\n              );\n            }\n          }\n\n          resp.status = \"SUCCESS\";\n          resp.details = summary;\n          // resp.details = await bakana.validateAnnotations(current, { cache: true });\n          // i guess iterate through each dataset and call summary\n        } catch (e) {\n          console.error(e);\n          resp.status = \"ERROR\";\n          resp.reason = e.toString();\n        }\n\n        postMessage({\n          type: \"PREFLIGHT_INPUT_DATA\",\n          resp: resp,\n          msg: \"Success: PREFLIGHT_INPUT done\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** VERSUS MODE *******************/\n  } else if (type === \"computeVersusClusters\") {\n    loaded\n      .then((x) => {\n        let rank_type = payload.rank_type;\n        let modality = payload.modality;\n        let annotation = payload.annotation;\n\n        let resp, raw_res;\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.computeVersus(\n            payload.left,\n            payload.right\n          );\n\n          resp = bakana.formatMarkerResults(\n            raw_res.results[modality],\n            raw_res.left,\n            rank_type\n          );\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          raw_res = mds.computeVersus(\n            annotation_vec.levels.indexOf(payload.left),\n            annotation_vec.levels.indexOf(payload.right)\n          );\n          resp = bakana.formatMarkerResults(\n            raw_res.results[modality],\n            raw_res.left,\n            rank_type\n          );\n        }\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"computeVersusClusters\",\n            resp: resp,\n            msg: \"Success: COMPUTE_VERSUS_CLUSTERS done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeVersusSelections\") {\n    loaded\n      .then((x) => {\n        let rank_type = payload.rank_type;\n        let res = superstate.custom_selections.computeVersus(\n          payload.left,\n          payload.right\n        );\n        let resp = bakana.formatMarkerResults(\n          res[\"results\"][payload.modality],\n          res.left,\n          rank_type\n        );\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"computeVersusSelections\",\n            resp: resp,\n            msg: \"Success: COMPUTE_VERSUS_SELECTIONS done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** OTHER EVENTS FROM UI *******************/\n  } else if (type === \"getMarkersForCluster\") {\n    loaded\n      .then((x) => {\n        let cluster = payload.cluster;\n        let rank_type = payload.rank_type;\n        let modality = payload.modality;\n        let annotation = payload.annotation;\n        let resp;\n        let raw_res;\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.fetchResults()[modality];\n          resp = bakana.formatMarkerResults(raw_res, cluster, rank_type);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          raw_res = mds.fetchResults()[modality];\n          // cache_anno_markers[annotation][modality];\n\n          resp = bakana.formatMarkerResults(\n            raw_res,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type\n          );\n        }\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"setMarkersForCluster\",\n            resp: resp,\n            msg: \"Success: GET_MARKERS_FOR_CLUSTER done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getGeneExpression\") {\n    loaded\n      .then((x) => {\n        let row_idx = payload.gene;\n        let modality = payload.modality;\n\n        const matrix = getMatrix(modality);\n        let vec;\n        if (modality === \"RNA\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else if (modality === \"ADT\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else if (modality === \"CRISPR\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else {\n          throw new Error(\"unknown feature type '\" + modality + \"'\");\n        }\n\n        postMessage(\n          {\n            type: \"setGeneExpression\",\n            resp: {\n              gene: row_idx,\n              expr: vec,\n            },\n            msg: \"Success: GET_GENE_EXPRESSION done\",\n          },\n          [vec.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeCustomMarkers\") {\n    loaded\n      .then((x) => {\n        superstate.custom_selections.addSelection(\n          payload.id,\n          payload.selection\n        );\n        postMessage({\n          type: \"computeCustomMarkers\",\n          msg: \"Success: COMPUTE_CUSTOM_MARKERS done\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getMarkersForSelection\") {\n    loaded\n      .then((x) => {\n        let raw_res = superstate.custom_selections.fetchResults(\n          payload.cluster\n        )[payload.modality];\n        let resp = bakana.formatMarkerResults(raw_res, 1, payload.rank_type);\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"setMarkersForCustomSelection\",\n            resp: resp,\n            msg: \"Success: GET_MARKERS_FOR_SELECTION done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"removeCustomMarkers\") {\n    loaded\n      .then((x) => {\n        superstate.custom_selections.removeSelection(payload.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"animateTSNE\") {\n    loaded\n      .then(async (x) => {\n        await superstate.tsne.animate();\n        postSuccess(\"tsne\", await superstate.tsne.fetchResults());\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"animateUMAP\") {\n    loaded\n      .then(async (x) => {\n        await superstate.umap.animate();\n        postSuccess(\"umap\", await superstate.umap.fetchResults());\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getAnnotation\") {\n    loaded\n      .then((x) => {\n        let annot = payload.annotation;\n        let vec, output;\n\n        vec = getAnnotation(annot, !!payload.unfiltered);\n\n        if (ArrayBuffer.isView(vec)) {\n          output = {\n            type: \"array\",\n            values: vec.slice(),\n          };\n        } else {\n          let uniq_vals = [];\n          let uniq_map = {};\n          let indices = new Int32Array(vec.length);\n          vec.map((x, i) => {\n            if (!(x in uniq_map)) {\n              uniq_map[x] = uniq_vals.length;\n              uniq_vals.push(x);\n            }\n            indices[i] = uniq_map[x];\n          });\n\n          output = {\n            type: \"factor\",\n            index: indices,\n            levels: uniq_vals,\n          };\n        }\n\n        let extracted = [];\n        extractBuffers(output, extracted);\n        postMessage(\n          {\n            type: \"setAnnotation\",\n            resp: {\n              annotation: annot,\n              values: output,\n            },\n            msg: \"Success: GET_ANNOTATION done\",\n          },\n          extracted\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeFeaturesetSummary\") {\n    loaded\n      .then(async (x) => {\n        let { annotation, rank_type, cluster } = payload;\n        let index = rank_type.indexOf(\"-\");\n        let resp;\n        if (default_cluster === annotation) {\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            superstate.marker_detection.fetchResults()[\"RNA\"],\n            cluster,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        } else if (default_selection === annotation) {\n          let sel_indices =\n            superstate.custom_selections.fetchSelectionIndices(cluster);\n          let num_cells = superstate.cell_filtering\n            .fetchFilteredMatrix()\n            .numberOfColumns();\n\n          let arr_sel_indices = new Uint8Array(num_cells);\n          sel_indices.map((x) => arr_sel_indices.set([1], x));\n          let annotation_vec = scran.factorize(arr_sel_indices);\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          let anno_markers = mds.fetchResults()[\"RNA\"];\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers,\n            annotation_vec.levels.indexOf(1),\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          let anno_markers = mds.fetchResults()[\"RNA\"];\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeFeaturesetVSSummary\") {\n    loaded\n      .then(async (x) => {\n        let { annotation, rank_type, left, right } = payload;\n        let index = rank_type.indexOf(\"-\");\n        let resp;\n        if (default_cluster === annotation) {\n          let raw_res = superstate.marker_detection.computeVersus(left, right);\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            raw_res.results[\"RNA\"],\n            raw_res.left,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        } else if (default_selection === annotation) {\n          let anno_markers = superstate.custom_selections.computeVersus(\n            left,\n            right\n          );\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers.results[\"RNA\"],\n            0,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          let raw_res = mds.computeVersus(\n            annotation_vec.levels.indexOf(payload.left),\n            annotation_vec.levels.indexOf(payload.right)\n          );\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            raw_res.results[\"RNA\"],\n            raw_res.left,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getFeatureScores\") {\n    loaded\n      .then((x) => {\n        let { index } = payload;\n\n        let resp =\n          superstate.feature_set_enrichment.computePerCellScores(index);\n        postSuccess(\"setFeatureScores\", resp);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getFeatureGeneIndices\") {\n    loaded\n      .then((x) => {\n        let { index, cluster, annotation, modality, rank_type } = payload;\n\n        let resp =\n          superstate.feature_set_enrichment.fetchFeatureSetIndices(index);\n\n        let raw_res, marker_resp;\n\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.fetchResults()[modality];\n          marker_resp = bakana.formatMarkerResults(raw_res, cluster, rank_type);\n        } else if (default_selection === annotation) {\n          raw_res = superstate.custom_selections.fetchResults(payload.cluster)[\n            payload.modality\n          ];\n          marker_resp = bakana.formatMarkerResults(\n            raw_res,\n            1,\n            payload.rank_type\n          );\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          raw_res = mds.fetchResults()[modality];\n          // cache_anno_markers[annotation][modality];\n\n          marker_resp = bakana.formatMarkerResults(\n            raw_res,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type\n          );\n        }\n\n        let indices = marker_resp.ordering\n          .map((x, i) => (resp.includes(x) ? i : -100))\n          .filter((x) => x !== -100);\n\n        let filtered_marker_resp = {};\n        for (const [k, v] of Object.entries(marker_resp)) {\n          filtered_marker_resp[k] = v\n            .map((x, i) => (indices.includes(i) ? x : -100))\n            .filter((x) => x !== -100);\n        }\n\n        postSuccess(\"setFeatureGeneIndices\", filtered_marker_resp);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeCellAnnotation\") {\n    let { annotation, cluster } = payload;\n    let result = { per_reference: {} };\n    let markers = null;\n    if (default_cluster === annotation) {\n      markers = superstate.marker_detection.fetchResults();\n    } else if (default_selection === annotation) {\n      markers = superstate.custom_selections.fetchResults(cluster);\n    } else {\n      let annotation_vec = scran.factorize(getAnnotation(annotation));\n      let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n      markers = mds.fetchResults();\n    }\n    if (markers !== null && \"RNA\" in markers) {\n      result = superstate.cell_labelling.computeLabels(markers[\"RNA\"]);\n    }\n    postSuccess(\"computeCellAnnotation\", result);\n  } else {\n    console.error(`Type: ${type} not defined`);\n    postError(type, `Type: ${type} not defined`, fatal);\n  }\n};\n","/*****************************************************\n * This file is intended to be vendored into kanapi,\n * so you shouldn't add too many dependencies here.\n * The canonical version of the file is expected to\n * live at src/workers/translate.js in the kana repo.\n *****************************************************/\n\nimport * as bakana from \"bakana\";\n\nconst mappings = {\n  quality_control: {\n    use_mito_default: [\"qc\", \"qc-usemitodefault\"],\n    mito_prefix: [\"qc\", \"qc-mito\"],\n    nmads: [\"qc\", \"qc-nmads\"],\n    skip: [\"qc\", \"skip\"],\n  },\n  adt_quality_control: {\n    nmads: [\"adt_qualitycontrol\", \"nmads\"],\n    min_detected_drop: [\"adt_qualitycontrol\", \"min_detected_drop\"],\n    igg_prefix: [\"adt_qualitycontrol\", \"igg_prefix\"],\n    skip: [\"adt_qualitycontrol\", \"skip\"],\n  },\n  adt_normalization: {\n    num_pcs: [\"adt_normalization\", \"num_pcs\"],\n    num_clusters: [\"adt_normalization\", \"num_clusters\"],\n  },\n  feature_selection: {\n    span: [\"fSelection\", \"fsel-span\"],\n  },\n  pca: {\n    num_hvgs: [\"pca\", \"pca-hvg\"],\n    num_pcs: [\"pca\", \"pca-npc\"],\n  },\n  adt_pca: {\n    num_pcs: [\"adt_pca\", \"num_pcs\"],\n  },\n  combine_embeddings: {\n    weights: [\"combine_embeddings\", \"weights\"],\n  },\n  cell_labelling: {\n    references: null,\n    automatic: true,\n    species: [],\n    gene_id_column: null,\n    gene_id_type: \"ENSEMBL\",\n  },\n  batch_correction: {\n    // method is handled by configureBatchCorrection.\n    num_neighbors: [\"batch_correction\", \"num_neighbors\"],\n  },\n  choose_clustering: {\n    method: [\"cluster\", \"clus-method\"],\n  },\n  // Neighbor indexing is handled by configureApproximateNeighbors.\n  tsne: {\n    perplexity: [\"tsne\", \"tsne-perp\"],\n    iterations: [\"tsne\", \"tsne-iter\"],\n    animate: [\"tsne\", \"animate\"],\n  },\n  umap: {\n    num_neighbors: [\"umap\", \"umap-nn\"],\n    num_epochs: [\"umap\", \"umap-epochs\"],\n    min_dist: [\"umap\", \"umap-min_dist\"],\n    animate: [\"umap\", \"animate\"],\n  },\n  kmeans_cluster: {\n    k: [\"cluster\", \"kmeans-k\"],\n  },\n  snn_graph_cluster: {\n    k: [\"cluster\", \"clus-k\"],\n    scheme: [\"cluster\", \"clus-scheme\"],\n    resolution: [\"cluster\", \"clus-res\"],\n  },\n  // cell_labelling: {\n  //   human_references: [\"annotateCells\", \"annotateCells-human_references\"],\n  //   mouse_references: [\"annotateCells\", \"annotateCells-mouse_references\"],\n  // },\n};\n\nexport function fromUI(inputs, params) {\n  let formatted = params;\n\n  // Replacing all 1:1 mappings.\n  let safeReplace = (step, par, value) => {\n    if (typeof value == \"undefined\") {\n      throw new Error(\n        \"cannot assign undefined parameter to '\" + step + \".\" + par + \"'\"\n      );\n    }\n    if (!(step in formatted)) {\n      throw new Error(\"unknown analysis step '\" + step + \"'\");\n    }\n    let target = formatted[step];\n    if (!(par in target)) {\n      throw new Error(\n        \"unknown analysis parameter '\" + par + \"' for step '\" + step + \"'\"\n      );\n    }\n    target[par] = value;\n  };\n\n  safeReplace(\"inputs\", \"block_factor\", inputs.batch);\n  safeReplace(\"inputs\", \"subset\", inputs.subset);\n\n  // Special handling for multi-step parameters.\n  bakana.configureBatchCorrection(formatted, params.batch_correction[\"method\"]);\n  bakana.configureApproximateNeighbors(\n    formatted,\n    params.neighbor_index[\"approximate\"]\n  );\n\n  // Simplify the combine_embeddings if we see it is all equal.\n  if (formatted.combine_embeddings.weights !== null) {\n    let uniq_weights = new Set([\n      formatted.combine_embeddings.rna_weight,\n      formatted.combine_embeddings.adt_weight,\n      formatted.combine_embeddings.crispr_weight,\n    ]);\n    if (uniq_weights.size <= 1) {\n      formatted.combine_embeddings.weights = null;\n    }\n  }\n\n  return formatted;\n}\n\nexport function toUI(params) {\n  // Setting all 1:1 mappings.\n  let safeExtract = (step, par) => {\n    if (!(step in params)) {\n      throw new Error(\n        \"no available step '\" + step + \"' in the supplied parameters\"\n      );\n    }\n\n    let curstep = params[step];\n    if (!(par in curstep)) {\n      throw new Error(\n        \"no available parameter '\" + par + \"' in step '\" + step + \"'\"\n      );\n    }\n\n    return curstep[par];\n  };\n\n  let reversed = {\n    inputs: {\n      batch: safeExtract(\"inputs\", \"sample_factor\"),\n      subset: safeExtract(\"inputs\", \"subset\"),\n    },\n  };\n\n  for (const [step, spars] of Object.entries(mappings)) {\n    for (const [par, target] of Object.entries(spars)) {\n      if (!(target[0] in reversed)) {\n        reversed[target[0]] = {};\n      }\n\n      let currev = reversed[target[0]];\n      if (target[1] in currev) {\n        throw new Error(\n          \"duplicate entry for parameter '\" + target[0] + \".\" + target[1] + \"'\"\n        );\n      }\n      currev[target[1]] = safeExtract(step, par);\n    }\n  }\n\n  // Mopping up the rest.\n  reversed.batch_correction.method = bakana.guessBatchCorrectionConfig(params);\n  reversed.ann = {\n    approximate: bakana.guessApproximateNeighborsConfig(params),\n  };\n\n  // Converting it into a dictionary for easier consumption by the UI.\n  if (reversed.combine_embeddings.weights === null) {\n    reversed.combine_embeddings.weights = {};\n  }\n\n  return reversed;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [660,169,797], function() { return __webpack_require__(9612); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"169\":\"8c752ea1\",\"484\":\"d8ef0c13\",\"660\":\"d55d8ac4\",\"797\":\"54e661c6\",\"909\":\"47ea1647\",\"933\":\"fd568621\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t612: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([660,169,797].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["kanaDB","init","get_records","allAnalysis","result","transaction","objectStore","getAll","Promise","resolve","reject","onsuccess","event","vals","forEach","x","files","onerror","Error","concat","target","errorCode","getRecords","_getRecords","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","saveFile","_x","_x2","_saveFile","_callee2","id","buffer","trans","fin","file_store","meta_store","request","saving","_context2","oncomplete","get","meta","count","data_saving","putrequest","put","payload","ref_saving","all","saveAnalysis","_x3","_x4","_x5","_x6","_saveAnalysis","_callee3","state","title","analysis_store","callback","output_promise","output","_context3","new_id","id_saving","time","Number","Date","String","length","sent","loadFile","_x7","_loadFile","_callee4","meta_promise","_context4","undefined","Uint8Array","loadAnalysis","_x8","_loadAnalysis","_callee5","ana_promise","_context5","superResolver","_x9","_superResolver","_callee6","resolved","replacement","_iterator","_step","y","_context6","Array","_createForOfIteratorHelper","s","n","done","value","t0","t1","push","call","t2","e","f","finish","remove_file","refcount","promises","delete","console","log","_removeAnalysis","_callee8","analysis_meta_store","file_meta_store","analysis_removal","file_removal","_context8","my_promises","_i","_Object$values","Object","values","_step2","v","_iterator2","err","deleted","DownloadsDB","_get","url","params","force","_trans","_download_store","data_check","found","req","res","download_store","_args","already","fetch","ok","status","arrayBuffer","proxy","proxyAndCache","_proxyAndCache","downloads","encodeURIComponent","extractBuffers","object","store","isArray","constructor","_Object$entries","entries","_Object$entries$_i","_slicedToArray","ArrayBuffer","isView","postAttempt","step","postMessage","type","postSuccess","info","transferable","resp","postError","fatal","reason","toString","splitMetricsByBlock","metrics","blockLevels","blockIds","blocks","slice","b","current","_i2","_Object$entries2","_Object$entries2$_i","key","val","filter","i","splitThresholdsByBlock","thresholds","_i3","_Object$entries3","_Object$entries3$_i","fetchStepSummary","_fetchStepSummary","_output","ngenes","_iterator3","_step3","a","gene_info","_i4","_Object$entries4","_Object$entries4$_i","k","_iterator4","_step4","c","col","cell_info","_iterator5","_step5","_c","_col2","_ksumm","_col","ksumm","_output2","bids","listed","_metrics","_bids","_listed","_i5","_Object$entries5","_Object$entries5$_i","_metrics2","_output3","_bids2","_listed2","remaining","discard_vec","discardBuff","_output4","_output5","pcs","var_exp","total_var","clusters","markers","results","collections","sets","changed","fetchCountMatrix","available","numberOfRows","fetchFeatureAnnotations","columnNames","column","rowNames","fetchCellAnnotations","isArrayOrView","describeColumn","unique","colname","fetchBlockLevels","fetchBlock","num_cells","numberOfColumns","num_genes","genes","annotations","sums","fetchMetrics","detected","proportion","subsetProportions","data","default","fetchFilters","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","subsetTotals","thresholdsSubsetTotals","NaN","maxProportions","thresholdsMaxCount","fetchDiscards","inputs","retained","discard","means","fetchResults","vars","variances","fitted","resids","residuals","fetchPCs","varianceExplained","totalVariance","fetchClusters","marker_detection","computeLabels","RNA","per_reference","feature_set_enrichment","fetchCollectionDetails","fetchSetDetails","names","descriptions","sizes","_ref3","_ref3$all","_ref3$unique","_ref3$colname","bakana","uqVals","Set","size","_toConsumableArray","sort","setDownload","gesel","_ref","file","start","end","full","Response","_ref2","remotes","setDownloadFun","code","default_cluster","default_selection","superstate","preflights","preflights_summary","cache_matrix","cache_anno_markers","createDataset","args","format","h5","options","mtx","rds","zipname","zipfile","summarizeDataset","summary","cells_summary","cells","kcol","tmp_meta","columns","numberOfCells","tmod_summary","numberOfFeatures","rownames","modality_features","all_assay_names","modality_assay_names","postStepSummary","_postStepSummary","_callee16","_context16","error","getMarkerStandAloneForAnnot","annotation","annotation_vec","mds","getMatrix","ids","computeAll","iter","iteration","kana_db","loaded","getAnnotation","vec","unfiltered","startsWith","split_metric","replace","split","toLowerCase","cell_filtering","applyFilter","scran","ADT","CRISPR","valid","add","fetchNormalizedMatrix","onmessage","msg","_msg$data","nthreads","Math","round","navigator","hardwareConcurrency","back_init","numberOfThreads","state_init","then","kana_init","indexedDB","open","onupgradeneeded","kanaDBClient","deleteObjectStore","createObjectStore","keyPath","catch","down_init","DownloadsDBClient","ehub_ids","availableDatasets","uid","setOptions","_i6","_Object$entries6","_Object$entries6$_i","clear","free","resetMarkerState","formatted","safeReplace","par","batch","subset","batch_correction","neighbor_index","combine_embeddings","weights","rna_weight","adt_weight","crispr_weight","translate","startFun","finishFun","fs","keys","reader","zipbuffer","unzipped","config","buffers","other","transferrable","features","loaded_ds","_i7","_Object$entries7","_Object$entries7$_i","_i8","_arr","i_mod","_i9","_Object$entries8","_Object$entries8$_i","_k7","_v3","FileReaderSync","readAsArrayBuffer","JSZip","JSON","async","parse","t3","custom_selections","fetchSelections","parameters","fetchDatasets","previewPrimaryIds","cache","jsonbuffer","dec","TextDecoder","decode","_ref4","saver","collected","zipper","name","stringify","generateAsync","_ref5","gene_files","_f","forceBuffer","_ref6","_callee7","enc","recs","_context7","_ref7","md5","hashwasm","_x11","_x12","_x13","TextEncoder","encode","_x10","_ref8","_x14","_ref9","_callee9","counter","_i10","_Object$entries9","_Object$entries9$_i","ds","_i11","_arr2","_i12","_Object$entries10","_Object$entries10$_i","_k8","_v4","_context9","_x15","_ref10","_callee10","_i13","_Object$entries11","_Object$entries11$_i","tmp_dataset","_context10","details","_x16","raw_res","rank_type","modality","computeVersus","left","right","levels","indexOf","cluster","row_idx","gene","matrix","row","expr","addSelection","selection","removeSelection","_ref11","_callee11","_context11","tsne","animate","_x17","_ref12","_callee12","_context12","umap","_x18","annot","uniq_vals","uniq_map","indices","Int32Array","map","index","extracted","_ref13","_callee13","sel_indices","arr_sel_indices","anno_markers","_annotation_vec","_mds","_anno_markers","_context13","computeEnrichment","fetchSelectionIndices","fetchFilteredMatrix","set","_x19","_ref14","_callee14","_raw_res","_context14","_x20","computePerCellScores","marker_resp","fetchFeatureSetIndices","ordering","includes","filtered_marker_resp","_i14","_Object$entries12","_Object$entries12$_i","cell_labelling","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","getter","__esModule","d","definition","o","defineProperty","enumerable","chunkId","reduce","u","miniCssF","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","p","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}