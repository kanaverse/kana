{"version":3,"file":"static/js/316.1b18c5fe.chunk.js","mappings":"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","sources":["../node_modules/papaparse/papaparse.min.js","../node_modules/randomcolor/randomColor.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticAccess.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticFieldDescriptor.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecGet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecSet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/bakana-remotes/src/utils.js","../node_modules/bakana-remotes/src/ExperimentHub.js","../node_modules/artifactdb/src/packId.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/artifactdb/src/HttpError.js","../node_modules/artifactdb/src/globalRequestHeaders.js","../node_modules/artifactdb/src/getFile.js","../node_modules/artifactdb/src/getFileMetadata.js","../node_modules/bakana-remotes/src/CollaboratorDB.js","../node_modules/bakana/browser/readers/10x.js","../node_modules/bakana/browser/readers/ArtifactDB-abstract.js","../node_modules/bakana/browser/readers/abstract/file.js","../node_modules/bakana/browser/readers/mtx.js","../node_modules/bakana/browser/readers/utils/abstract/stream.js","../node_modules/bakana/browser/readers/utils/extract.js","../node_modules/bakana/browser/readers/utils/features.js","../node_modules/bakana/browser/steps/abstract/worker_parent.js","../node_modules/bakana/browser/steps/adt_normalization.js","../node_modules/bakana/browser/steps/adt_pca.js","../node_modules/bakana/browser/steps/adt_quality_control.js","../node_modules/bakana/browser/steps/batch_correction.js","../node_modules/bakana/browser/steps/cell_filtering.js","../node_modules/bakana/browser/steps/choose_clustering.js","../node_modules/bakana/browser/steps/combine_embeddings.js","../node_modules/bakana/browser/steps/crispr_normalization.js","../node_modules/bakana/browser/steps/crispr_pca.js","../node_modules/bakana/browser/steps/crispr_quality_control.js","../node_modules/bakana/browser/steps/feature_selection.js","../node_modules/bakana/browser/steps/kmeans_cluster.js","../node_modules/bakana/browser/steps/marker_detection.js","../node_modules/bakana/browser/steps/neighbor_index.js","../node_modules/bakana/browser/steps/rna_normalization.js","../node_modules/bakana/browser/steps/rna_pca.js","../node_modules/bakana/browser/steps/rna_quality_control.js","../node_modules/bakana/browser/steps/snn_graph_cluster.js","../node_modules/bakana/browser/steps/tsne.js","../node_modules/bakana/browser/steps/umap.js","../node_modules/bakana/browser/steps/utils/abstract/workers_parent.js","../node_modules/bakana/browser/steps/utils/general.js","../node_modules/bakana/browser/steps/utils/markers.js","../node_modules/bakana/browser/steps/utils/normalization.js","../node_modules/bioconductor/src/AllGenerics.js","../node_modules/bioconductor/src/Annotated.js","../node_modules/bioconductor/src/DataFrame.js","../node_modules/bioconductor/src/DenseMatrix.js","../node_modules/bioconductor/src/GRanges.js","../node_modules/bioconductor/src/GroupedGRanges.js","../node_modules/bioconductor/src/IRanges.js","../node_modules/bioconductor/src/InternalList.js","../node_modules/bioconductor/src/RangedSummarizedExperiment.js","../node_modules/bioconductor/src/SingleCellExperiment.js","../node_modules/bioconductor/src/SummarizedExperiment.js","../node_modules/bioconductor/src/Vector.js","../node_modules/bioconductor/src/clone-utils.js","../node_modules/bioconductor/src/miscellaneous.js","../node_modules/bioconductor/src/overlap-utils.js","../node_modules/bioconductor/src/utils.js","../node_modules/gesel/src/fetchAllCollections.js","../node_modules/gesel/src/fetchAllGenes.js","../node_modules/gesel/src/fetchAllSets.js","../node_modules/gesel/src/fetchEmbeddings.js","../node_modules/gesel/src/fetchGenesForAllSets.js","../node_modules/gesel/src/fetchGenesForSet.js","../node_modules/gesel/src/fetchSetsForAllGenes.js","../node_modules/gesel/src/fetchSetsForGene.js","../node_modules/gesel/src/fetchSingleCollection.js","../node_modules/gesel/src/fetchSingleSet.js","../node_modules/gesel/src/mapGenesByIdentifier.js","../node_modules/gesel/src/reindexGenesForAllSets.js","../node_modules/gesel/src/reindexSetsForAllGenes.js","../node_modules/gesel/src/searchSetText.js","../node_modules/scran.js/browser/MultiMatrix.js","../node_modules/scran.js/browser/ScranMatrix.js","../node_modules/scran.js/browser/abstract/realize.js","../node_modules/scran.js/browser/aggregateAcrossCells.js","../node_modules/scran.js/browser/block.js","../node_modules/scran.js/browser/cbind.js","../node_modules/scran.js/browser/chooseHVGs.js","../node_modules/scran.js/browser/clusterKmeans.js","../node_modules/scran.js/browser/clusterSNNGraph.js","../node_modules/scran.js/browser/factorize.js","../node_modules/scran.js/browser/filterCells.js","../node_modules/scran.js/browser/findNearestNeighbors.js","../node_modules/scran.js/browser/groupedSizeFactors.js","../node_modules/scran.js/browser/guessFeatures.js","../node_modules/scran.js/browser/hypergeometricTest.js","../node_modules/scran.js/browser/initializeSparseMatrix.js","../node_modules/scran.js/browser/internal/computePerCellQcFilters.js","../node_modules/scran.js/browser/internal/computePerCellQcMetrics.js","../node_modules/scran.js/browser/internal/pack_strings.js","../node_modules/scran.js/browser/labelCells.js","../node_modules/scran.js/browser/logNormCounts.js","../node_modules/scran.js/browser/mnnCorrect.js","../node_modules/scran.js/browser/modelGeneVar.js","../node_modules/scran.js/browser/perCellAdtQcMetrics.js","../node_modules/scran.js/browser/perCellCrisprQcMetrics.js","../node_modules/scran.js/browser/perCellRnaQcMetrics.js","../node_modules/scran.js/browser/quickAdtSizeFactors.js","../node_modules/scran.js/browser/rds.js","../node_modules/scran.js/browser/runPCA.js","../node_modules/scran.js/browser/runTSNE.js","../node_modules/scran.js/browser/scaleByNeighbors.js","../node_modules/scran.js/browser/scoreFeatureSet.js","../node_modules/scran.js/browser/scoreMarkers.js","../node_modules/scran.js/browser/subset.js","../node_modules/scran.js/browser/suggestAdtQcFilters.js","../node_modules/scran.js/browser/suggestCrisprQcFilters.js","../node_modules/scran.js/browser/suggestRnaQcFilters.js","../node_modules/scran.js/browser/utils.js","../node_modules/scran.js/browser/wasm.js","../node_modules/wasmarrays.js/src/create.js","../node_modules/wasmarrays.js/src/derived.js","../node_modules/wasmarrays.js/src/subset.js","../node_modules/wasmarrays.js/src/view.js"],"sourcesContent":["/* @license\nPapa Parse\nv5.4.1\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=f.IS_PAPA_WORKER||!1,a={},u=0,b={parse:function(e,t){var r=(t=t||{}).dynamicTyping||!1;J(r)&&(t.dynamicTypingFunction=r,r={});if(t.dynamicTyping=r,t.transform=!!J(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var i=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(r=f.URL||f.webkitURL||null,i=s.toString(),b.BLOB_URL||(b.BLOB_URL=r.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",i,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var r,i;return t.onmessage=_,t.id=u++,a[t.id]=t}();return i.userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=J(t.step),t.chunk=J(t.chunk),t.complete=J(t.complete),t.error=J(t.error),delete t.worker,void i.postMessage({input:e,config:t,workerId:i.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?(e=function(e){if(65279===e.charCodeAt(0))return e.slice(1);return e}(e),n=t.download?new l(t):new p(t)):!0===e.readable&&J(e.read)&&J(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,r=!1,i=null,o=!1;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(r=t.skipEmptyLines);\"string\"==typeof t.newline&&(y=t.newline);\"string\"==typeof t.quoteChar&&(s=t.quoteChar);\"boolean\"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");i=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s);(\"boolean\"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(o=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\\-@\\t\\r].*$/)}();var u=new RegExp(Q(s),\"g\");\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,r);if(\"object\"==typeof e[0])return h(i||Object.keys(e[0]),e,r)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||i),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],r);throw new Error(\"Unable to serialize unrecognized input\");function h(e,t,r){var i=\"\";\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(i+=m),i+=v(e[a],a);0<t.length&&(i+=y)}for(var o=0;o<t.length;o++){var u=n?e.length:t[o].length,h=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(r&&!n&&(h=\"greedy\"===r?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===r&&n){for(var d=[],l=0;l<u;l++){var c=s?e[l]:l;d.push(t[o][c])}h=\"\"===d.join(\"\").trim()}if(!h){for(var p=0;p<u;p++){0<p&&!f&&(i+=m);var g=n&&s?e[p]:p;i+=v(t[o][g],p)}o<t.length-1&&(!r||0<u&&!f)&&(i+=y)}}return i}function v(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var r=!1;o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0);var i=e.toString().replace(u,a);return(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var r=0;r<t.length;r++)if(-1<e.indexOf(t[r]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=E,b.ParserHandle=r,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var r=o.config||{},u=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)u.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},r)})}),e(),this;function e(){if(0!==u.length){var e,t,r,i,n=u[0];if(J(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,r=n.inputElem,i=s.reason,void(J(o.error)&&o.error({name:e},t,r,i));if(\"skip\"===s.action)return void h();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void h()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){J(a)&&a(e,n.file,n.inputElem),h()},b.parse(n.file,n.instanceConfig)}else J(o.complete)&&o.complete()}function h(){u.splice(0,1),e()}}}function h(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new r(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&J(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=i.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(J(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!J(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){J(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var i;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),h.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(i=new XMLHttpRequest,this._config.withCredentials&&(i.withCredentials=this._config.withCredentials),n||(i.onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)),i.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)i.setRequestHeader(t,e[t])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;i.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+r)}try{i.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===i.status&&this._chunkError()}},this._chunkLoaded=function(){4===i.readyState&&(i.status<200||400<=i.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:i.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(i),this.parseChunk(i.responseText)))},this._chunkError=function(e){var t=i.statusText||e;this._sendError(new Error(t))}}function c(e){var i,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),h.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((i=new FileReader).onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var r=i.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:r}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function p(e){var r;h.call(this,e=e||{}),this.stream=function(e){return r=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=r.substring(0,t),r=r.substring(t)):(e=r,r=\"\"),this._finished=!r,this.parseChunk(e)}}}function g(e){h.call(this,e=e||{});var t=[],r=!0,i=!1;this.pause=function(){h.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){h.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){i&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):r=!0},this._streamData=v(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),i=!0,this._streamData(\"\")},this),this._streamCleanUp=v(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function r(m){var a,o,u,i=Math.pow(2,53),n=-i,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,h=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,t=this,r=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(J(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;r+=e.data.length,m.preview&&r>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){return c&&u&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),u=!1),m.skipEmptyLines&&(c.data=c.data.filter(function(e){return!y(e)})),_()&&function(){if(!c)return;function e(e,t){J(m.transformHeader)&&(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var r,i=m.header?{}:[];for(r=0;r<e.length;r++){var n=r,s=e[r];m.header&&(n=r>=l.length?\"__parsed_extra\":l[r]),m.transform&&(s=m.transform(s,n)),s=v(n,s),\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+r,f+t):r<l.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+r,f+t)),i}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function v(e,t){return r=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[r]&&(m.dynamicTyping[r]=m.dynamicTypingFunction(r)),!0===(m.dynamicTyping[r]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<i)return!0}return!1}(t)?parseFloat(t):h.test(t)?new Date(t):\"\"===t?null:t):t;var r}function k(e,t,r,i){var n={type:e,code:t,message:r};void 0!==i&&(n.row=i),c.errors.push(n)}this.parse=function(e,t,r){var i=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var r=new RegExp(Q(t)+\"([^]*?)\"+Q(t),\"gm\"),i=(e=e.replace(r,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1<n.length&&n[0].length<i[0].length;if(1===i.length||s)return\"\\n\";for(var a=0,o=0;o<i.length;o++)\"\\n\"===i[o][0]&&a++;return a>=i.length/2?\"\\r\\n\":\"\\r\"}(e,i)),u=!1,m.delimiter)J(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,r,i,n){var s,a,o,u;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var h=0;h<n.length;h++){var f=n[h],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:i,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(r&&y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===u||u<l)&&1.99<l&&(a=d,s=f,u=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(u=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&&m.header&&s.preview++,a=e,o=new E(s),c=o.parse(a,t,r),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=J(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,J(m.complete)&&m.complete(c),a=\"\"}}function Q(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(j){var z,M=(j=j||{}).delimiter,P=j.newline,U=j.comments,q=j.step,N=j.preview,B=j.fastMode,K=z=void 0===j.quoteChar||null===j.quoteChar?'\"':j.quoteChar;if(void 0!==j.escapeChar&&(K=j.escapeChar),(\"string\"!=typeof M||-1<b.BAD_DELIMITERS.indexOf(M))&&(M=\",\"),U===M)throw new Error(\"Comment character same as delimiter\");!0===U?U=\"#\":(\"string\"!=typeof U||-1<b.BAD_DELIMITERS.indexOf(U))&&(U=!1),\"\\n\"!==P&&\"\\r\"!==P&&\"\\r\\n\"!==P&&(P=\"\\n\");var W=0,H=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=M.length,s=P.length,a=U.length,o=J(q),u=[],h=[],f=[],d=W=0;if(!i)return L();if(j.header&&!t){var l=i.split(P)[0].split(M),c=[],p={},g=!1;for(var _ in l){var m=l[_];J(j.transformHeader)&&(m=j.transformHeader(m,_));var y=m,v=p[m]||0;for(0<v&&(g=!0,y=m+\"_\"+v),p[m]=v+1;c.includes(y);)y=y+\"_\"+v;c.push(y)}if(g){var k=i.split(P);k[0]=c.join(M),i=k.join(P)}}if(B||!1!==B&&-1===i.indexOf(z)){for(var b=i.split(P),E=0;E<b.length;E++){if(f=b[E],W+=f.length,E!==b.length-1)W+=P.length;else if(r)return L();if(!U||f.substring(0,a)!==U){if(o){if(u=[],I(f.split(M)),F(),H)return L()}else I(f.split(M));if(N&&N<=E)return u=u.slice(0,N),L(!0)}}return L()}for(var w=i.indexOf(M,W),R=i.indexOf(P,W),C=new RegExp(Q(K)+Q(z),\"g\"),S=i.indexOf(z,W);;)if(i[W]!==z)if(U&&0===f.length&&i.substring(W,W+a)===U){if(-1===R)return L();W=R+s,R=i.indexOf(P,W),w=i.indexOf(M,W)}else if(-1!==w&&(w<R||-1===R))f.push(i.substring(W,w)),W=w+e,w=i.indexOf(M,W);else{if(-1===R)break;if(f.push(i.substring(W,R)),D(R+s),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0)}else for(S=W,W++;;){if(-1===(S=i.indexOf(z,S+1)))return r||h.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:u.length,index:W}),T();if(S===n-1)return T(i.substring(W,S).replace(C,z));if(z!==K||i[S+1]!==K){if(z===K||0===S||i[S-1]!==K){-1!==w&&w<S+1&&(w=i.indexOf(M,S+1)),-1!==R&&R<S+1&&(R=i.indexOf(P,S+1));var O=A(-1===R?w:Math.min(w,R));if(i.substr(S+1+O,e)===M){f.push(i.substring(W,S).replace(C,z)),i[W=S+1+O+e]!==z&&(S=i.indexOf(z,W)),w=i.indexOf(M,W),R=i.indexOf(P,W);break}var x=A(R);if(i.substring(S+1+x,S+1+x+s)===P){if(f.push(i.substring(W,S).replace(C,z)),D(S+1+x+s),w=i.indexOf(M,W),S=i.indexOf(z,W),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0);break}h.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:u.length,index:W}),S++}}else S++}return T();function I(e){u.push(e),d=W}function A(e){var t=0;if(-1!==e){var r=i.substring(S+1,e);r&&\"\"===r.trim()&&(t=r.length)}return t}function T(e){return r||(void 0===e&&(e=i.substring(W)),f.push(e),W=n,I(f),o&&F()),L()}function D(e){W=e,I(f),f=[],R=i.indexOf(P,W)}function L(e){return{data:u,errors:h,meta:{delimiter:M,linebreak:P,aborted:H,truncated:!!e,cursor:d+(t||0)}}}function F(){q(L()),u=[],h=[]}},this.abort=function(){H=!0},this.getCharIndex=function(){return W}}function _(e){var t=e.data,r=a[t.workerId],i=!1;if(t.error)r.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){i=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(J(r.userStep)){for(var s=0;s<t.results.data.length&&(r.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!i);s++);delete t.results}else J(r.userChunk)&&(r.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!i&&m(t.workerId,t.results)}function m(e,t){var r=a[e];J(r.userComplete)&&r.userComplete(t),r.terminate(),delete a[e]}function y(){throw new Error(\"Not implemented.\")}function w(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var r in e)t[r]=w(e[r]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function J(e){return\"function\"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var r=b.parse(t.input,t.config);r&&f.postMessage({workerId:b.WORKER_ID,results:r,finished:!0})}}),(l.prototype=Object.create(h.prototype)).constructor=l,(c.prototype=Object.create(h.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(h.prototype)).constructor=g,b});","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [18,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [46,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [62,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [178, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [257, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [282, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {\n  if (receiver !== classConstructor) {\n    throw new TypeError(\"Private static access of wrong provenance\");\n  }\n}","export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {\n  if (descriptor === undefined) {\n    throw new TypeError(\"attempted to \" + action + \" private static field before its declaration\");\n  }\n}","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","import classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nexport default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  return method;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nexport default function _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import * as bioc from \"bioconductor\";\n\nexport function cloneCached(x, cached) {\n    return (cached ? bioc.CLONE(x) : x);\n}\n\n/**\n * A representation of a matrix of expression values, where the values are hosted on the Wasm heap for easier compute via [**scran.js**](https://github.com/jkanche/scran.js).\n * See [here](https://jkanche.github.io/scran.js/ScranMatrix.html) for more details.\n *\n * @external ScranMatrix\n */ \n\n/**\n * A representation of multiple {@linkplain external:ScranMatrix ScranMatrix} objects, where each object contains data for the same cells but across a different feature space, e.g., for different data modalities.\n * See [here](https://jkanche.github.io/scran.js/MultiMatrix.html) for more details.\n *\n * @external MultiMatrix\n */ \n\n\n/**\n * A DataFrame from the [**bioconductor**](https://github.com/LTLA/bioconductor.js) package, where each column is represented by some arbitrary vector-like object.\n * See [here](https://ltla.github.io/bioconductor.js/DataFrame.html) for more details.\n *\n * @external DataFrame\n */ \n\n/**\n * Representation of a file that is agnostic to the environment (Node.js or browser) or the nature of the contents (buffer or file path).\n * See [here](https://ltla.github.io/bakana/SimpleFile.html) for more details.\n *\n * @external SimpleFile\n */ \n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as bakana from \"bakana\";\nimport * as utils from \"./utils.js\";\n\nconst baseUrl = \"https://experimenthub.bioconductor.org/fetch\";\n\nconst registry = {\n    \"zeisel-brain\": { \"counts\": \"2596\", \"coldata\": \"2598\", \"rowdata\": \"2597\" }, // corresponding to EH2580, 2582 and 2581, for whatever reason.\n    \"segerstolpe-pancreas\": { \"counts\": \"2591\", \"coldata\": \"2593\", \"rowdata\": \"2592\" }, // corresponding to EH2575, 2577 and 2576.\n    \"nestorowa-hsc\": { \"counts\": \"2710\", \"ncol\": 1920 }, // corresponding to EH2694; the coldata doesn't contain much that's useful here.\n    \"aztekin-tail\": { \"counts\": \"3124\", \"coldata\": \"3125\" }, // corresponding to EH3108 and 3109.\n    \"wu-kidney\": { \"counts\": \"3594\", \"coldata\": \"3595\" }, // corresponding to EH3558 and 3559.\n    \"zilionis-mouse-lung\": { \"counts\": \"3478\", \"coldata\": \"3479\" } // corresponding to EH3462 and 3463.\n};\n\nfunction check_class(handle, accepted, base) {\n    if (!(handle instanceof scran.RdsS4Object)) {\n        throw new Error(\"expected an S4 object\");\n    }\n\n    for (const [k, v] of Object.entries(accepted)) {\n        if (handle.className() == k && handle.packageName() == v) {\n            return;\n        }\n    }\n    throw new Error(\"object is not a \" + base + \" or one of its recognized subclasses\");\n}\n\nfunction load_listData_names(lhandle) {\n    let ndx = lhandle.findAttribute(\"names\");\n    if (ndx < 0) {\n        return null;\n    }\n\n    let nhandle;\n    let names;\n    try {\n        nhandle = lhandle.attribute(ndx);\n        names = nhandle.values();\n    } catch(e) {\n        throw new Error(\"failed to load listData names; \" + e.message);\n    } finally {\n        scran.free(nhandle);\n    }\n\n    if (names.length != lhandle.length()) {\n        throw new Error(\"expected names to have same length as listData\");\n    }\n    return names;\n}\n\nfunction populate_list_columns(lhandle, output) {\n    let colnames = load_listData_names(lhandle);\n    if (colnames == null) {\n        throw new Error(\"expected the listData list to be named\");\n    }\n    let columns = {};\n\n    for (var i = 0; i < lhandle.length(); i++) {\n        let curhandle;\n        try {\n            curhandle = lhandle.load(i);\n            if (curhandle instanceof scran.RdsVector && !(curhandle instanceof scran.RdsGenericVector)) {\n                let curcol = curhandle.values();\n                columns[colnames[i]] = curcol;\n                output.nrow = curcol.length;\n            }\n        } finally {\n            scran.free(curhandle);\n        }\n    }\n\n    output.columns = columns;\n    return;\n}\n\nfunction load_data_frame(handle) {\n    let output = {};\n\n    if (handle.type() == \"S4\") {\n        check_class(handle, { \"DFrame\": \"S4Vectors\", \"DataFrame\": \"S4Vectors\" }, \"DFrame\");\n\n        // Loading the atomic columns.\n        let lhandle;\n        try {\n            lhandle = handle.attribute(\"listData\");\n            if (!(lhandle instanceof scran.RdsGenericVector)) {\n                throw new Error(\"listData slot should be a generic list\");\n            }\n            populate_list_columns(lhandle, output);\n        } catch(e) {\n            throw new Error(\"failed to retrieve data from DataFrame's listData; \" + e.message);\n        } finally {\n            scran.free(lhandle);\n        }\n    } else {\n        if (handle.type() != \"vector\") {\n            throw new Error(\"expected a data.frame or DataFrame instance\");\n        }\n        populate_list_columns(handle, output);\n    }\n\n    // Loading the row names.\n    let rnhandle;\n    try {\n        let rndx = handle.findAttribute(\"rownames\");\n        if (rndx >= 0) {\n            rnhandle = handle.attribute(rndx);\n            if (rnhandle instanceof scran.RdsStringVector) {\n                output.row_names = rnhandle.values();\n                output.nrow = output.row_names.length;\n            }\n        }\n    } catch(e) {\n        throw new Error(\"failed to retrieve row names from DataFrame; \" + e.message);\n    } finally {\n        scran.free(rnhandle);\n    }\n\n    // Loading the number of rows.\n    if (!(\"nrow\" in output)) {\n        let nrhandle;\n        try {\n            nrhandle = handle.attribute(\"nrows\");\n            if (!(nrhandle instanceof scran.RdsIntegerVector)) {\n                throw new Error(\"expected an integer vector as the 'nrows' slot\");\n            }\n            let NR = nrhandle.values();\n            if (NR.length != 1) {\n                throw new Error(\"expected an integer vector of length 1 as the 'nrows' slot\");\n            }\n            output.nrow = NR[0];\n        } catch (e) {\n            throw new Error(\"failed to retrieve nrows from DataFrame; \" + e.message);\n        } finally {\n            scran.free(nrhandle);\n        }\n    }\n\n    return output;\n}\n\nfunction extract_matrix_rownames(handle) {\n    let idx;\n\n    if (handle.type() == \"S4\") {\n        check_class(handle, { \"dgCMatrix\": \"Matrix\", \"dgTMatrix\": \"Matrix\" }, \"Matrix\");\n        idx = handle.findAttribute(\"Dimnames\");\n    } else {\n        idx = handle.findAttribute(\"dimnames\");\n    }\n\n    if (idx < 0) {\n        throw new Error(\"count matrix does not have dimnames\");\n    }\n\n    let dimhandle;\n    let firsthandle;\n    let output;\n    \n    try {\n        dimhandle = handle.attribute(idx);\n        if (dimhandle.type() != \"vector\" && dimhandle.size() != 2) {\n            throw new Error(\"dimnames of the count matrix should be a list of length 2\");\n        }\n\n        firsthandle = dimhandle.load(0);\n        if (firsthandle.type() != \"string\") {\n            throw new Error(\"expected a character vector in the first dimnames\");\n        }\n\n        output = firsthandle.values();\n    } finally {\n        scran.free(dimhandle);\n        scran.free(firsthandle);\n    }\n\n    return output;\n}\n\n/**\n * Dataset derived from a SummarizedExperiment-like representation on Bioconductor's [ExperimentHub](https://bioconductor.org/packages/ExperimentHub).\n */\nexport class ExperimentHubDataset {\n    #id;\n\n    #rowdata;\n    #coldata;\n\n    #counts_handle;\n    #counts_loaded;\n\n    // We should _know_ which experiments correspond to which modality for each\n    // dataset in our registry, so there's no need to provide options for that.\n    // However, we might not know how to choose an appropriate primary\n    // identifier for combining datasets, hence these options.\n    #options;\n\n    /****************************************\n     ****************************************/\n\n    static #downloadFun = async url => {\n        let resp = await fetch(url);\n        if (!resp.ok) {\n            throw new Error(\"failed to fetch content at \" + url + \" (\" + resp.status + \")\");\n        }\n        return new Uint8Array(await resp.arrayBuffer());\n    }\n\n    /** \n     * @param {function} fun - Function that accepts a URL string and downloads the resource,\n     * returning a Uint8Array of its contents.\n     * Alternatively, on Node.js, the funciton may return a string containing the path to the downloaded resource.\n     * @return {function} Previous setting of the download function.\n     */\n    static setDownloadFun(fun) {\n        let previous = ExperimentHubDataset.#downloadFun;\n        ExperimentHubDataset.#downloadFun = fun;\n        return previous;\n    }\n\n    /****************************************\n     ****************************************/\n\n    /**\n     * @return {Array} Array of strings containing identifiers of available datasets.\n     * @static\n     */\n    static availableDatasets() {\n        return Object.keys(registry);\n    }\n\n    /**\n     * @param {string} id - Identifier of a dataset to load.\n     * This should be a string in {@linkcode ExperimentHubDataset.availableDatasets availableDatasets}.\n     */\n    constructor(id) {\n        this.#id = id;\n        if (!(this.#id in registry)) {\n            throw new Error(\"unrecognized identifier '\" + this.#id + \"' for ExperimentHub-based datasets\");\n        }\n\n        this.#options = ExperimentHubDataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode ExperimentHubDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            primaryRnaFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode ExperimentHubDataset#load load} (but not {@linkcode ExperimentHubDataset#summary summary}).\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"ExperimentHub\";\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode ExperimentHubDataset#load load} or {@linkcodeExperimentHubDataset#annotations annotations}. \n     */\n    clear() {\n        scran.free(this.#counts_handle);\n        scran.free(this.#counts_loaded);\n        this.#counts_handle = null;\n        this.#counts_loaded = null;\n        this.#rowdata = null;\n        this.#coldata = null;\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return { \"id\": this.#id, \"options\": this.options() };\n    }\n\n    async #counts() {\n        if (this.#counts_handle !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n        let counts_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.counts);\n        try {\n            this.#counts_loaded = scran.readRds(counts_deets);\n            this.#counts_handle = this.#counts_loaded.value();\n        } catch(e) {\n            scran.free(this.#counts_handle);\n            scran.free(this.#counts_loaded);\n            throw e;\n        }\n    }\n\n    async #features() {\n        if (this.#rowdata !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n\n        if (\"rowdata\" in details) {\n            let rowdata_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.rowdata);\n\n            let rowdata_load;\n            let rowdata_handle;\n            try {\n                rowdata_load = scran.readRds(rowdata_deets);\n                rowdata_handle = rowdata_load.value();\n                let rowdata = load_data_frame(rowdata_handle);\n                let names = rowdata.row_names;\n\n                let output = {};\n                if (names) {\n                    output.id = names;\n                }\n\n                for (const [k, v] of Object.entries(rowdata.columns)) {\n                    if (k.match(/^sym/)) {\n                        output[k] = v;\n                    }\n                }\n\n                if (Object.keys(output).length == 0) {\n                    throw new Error(\"no acceptable feature identifiers found in the rowData DataFrame\");\n                }\n                this.#rowdata = new bioc.DataFrame(output);\n            } finally {\n                scran.free(rowdata_handle);\n                scran.free(rowdata_load);\n            }\n            return;\n        }\n\n        // Otherwise we pull the details from the counts.\n        await this.#counts();\n        let ids = extract_matrix_rownames(this.#counts_handle);\n        this.#rowdata = new bioc.DataFrame({ id: ids });\n    }\n\n    async #cells() {\n        if (this.#coldata !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n        if (\"coldata\" in details) {\n            let coldata_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.coldata);\n\n            let coldata_load;\n            let coldata_handle; \n            let cd_df;\n            try {\n                coldata_load = scran.readRds(coldata_deets);\n                coldata_handle = coldata_load.value();\n                cd_df = load_data_frame(coldata_handle);\n            } finally {\n                scran.free(coldata_handle);\n                scran.free(coldata_load);\n            }\n\n            this.#coldata = new bioc.DataFrame(cd_df.columns, { numberOfRows: cd_df.nrow });\n        } else {\n            this.#coldata = new bioc.DataFrame({}, { numberOfRows: details.ncol });\n        }\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode ExperimentHubDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { cells: utils.cloneCached(this.#coldata, cache) };\n        let my_rd = utils.cloneCached(this.#rowdata, cache);\n        output.modality_features = { \"RNA\": my_rd };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #fetchPrimaryId(curfeat) {\n        let id = this.#options.primaryRnaFeatureIdColumn;\n        if ((typeof id == \"string\" && curfeat.hasColumn(id)) || (typeof id == \"number\" && id < curfeat.numberOfColumns())) {\n            return { RNA: curfeat.column(id) };\n        } else {\n            return { RNA: curfeat.rowNames() };\n        }\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode ExperimentHubDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n        let preview = this.#fetchPrimaryId(this.#rowdata);\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an integer array containing the feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode ExperimentHubDataset#defaults defaults} or with {@linkcode ExperimentHubDataset#setOptions setOptions}.\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#counts();\n\n        let output = {\n            cells: utils.cloneCached(this.#coldata, cache)\n        };\n\n        // Hard-coding the fact that we're dealing with RNA here, as all\n        // registry entries are currently RNA-only anyway.\n        let details = registry[this.#id];\n        try {\n            output.matrix = new scran.MultiMatrix;\n            let counts = scran.initializeSparseMatrixFromRds(this.#counts_handle, { consume: !cache });\n\n            output.matrix.add(\"RNA\", counts.matrix);\n            output.row_ids = { \"RNA\": counts.row_ids };\n\n            let perm_features = bioc.SLICE(this.#rowdata, counts.row_ids);\n            output.features = { \"RNA\": perm_features };\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        output.primary_ids = this.#fetchPrimaryId(output.features.RNA);\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        const enc = new TextEncoder;\n        let buffer = enc.encode(this.#id);\n\n        // Storing it as a string in the buffer.\n        let output = {\n            type: \"id\",\n            file: new bakana.SimpleFile(buffer, { name: \"id\" })\n        };\n\n        return {\n            files: [ output ],\n            options: this.options()\n        }\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode ExperimentHubDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {ExperimentHubDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        let args = {};\n\n        // This should contain 'id'.\n        for (const x of files) {\n            const dec = new TextDecoder;\n            args[x.type] = dec.decode(x.file.buffer());\n        }\n\n        if (!(\"id\" in args)) {\n            throw new Error(\"expected a file of type 'id' when unserializing ExperimentHub dataset\"); \n        }\n        return new ExperimentHubDataset(args.id, options);\n    }\n}\n","/**\n * Create an ArtifactDB resource ID from its components.\n *\n * @param {string} project - Name of the project.\n * This should not contain `\":\"`.\n * @param {string} path - Path to the resource inside the project.\n * @param {string|number} version - Version of the project.\n * This should not contain `\"@\"`.\n *\n * @return {string} A full ArtifactDB identifier for the resource.\n */\nexport function packId(project, path, version) {\n    return project + \":\" + path + \"@\" + String(version);\n}\n\n/**\n * Split an AritfactDB resource ID into its components.\n *\n * @param {string} id - The full ArtifactDB identifier for a resource.\n * This should follow the format of `<PROJECT>:<PATH>@<VERSION>`,\n * where `<PROJECT>` should not contain `:` and `<VERSION>` should not contain `@`.\n *\n * @return {object} Object containing `project`, `path` and `version` strings - see {@linkcode packId} for details.\n */\nexport function unpackId(id) {\n    let i1 = id.indexOf(\":\");\n    if (i1 < 0) {\n        throw new Error(\"could not identify project from 'id'\");\n    } else if (i1 == 0) {\n        throw new Error(\"'id' should not have an empty project\");\n    }\n\n    let i2 = id.lastIndexOf(\"@\");\n    if (i2 < 0) {\n        throw new Error(\"could not identify version from 'id'\");\n    } else if (i2 == id.length - 1) {\n        throw new Error(\"'id' should not have an empty version\");\n    }\n\n    if (i2 < i1) {\n        throw new Error(\"could not identify version from 'id'\");\n    } else if (i1 +1 == i2){\n        throw new Error(\"'id' should not have an empty path\");\n    }\n\n    return {\n        project: id.slice(0, i1),\n        path: id.slice(i1+1, i2),\n        version: id.slice(i2+1)\n    };\n}\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * Representation of a HTTP response error.\n * The error message is captured in `message` as usual, but the HTTP status code may also be retrieved via the `statusCode` property.\n */\nexport class HttpError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.statusCode = code;\n    }\n}\n\nexport async function checkHttpResponse(res, msg) {\n    if (res.ok) {\n        return;\n    }\n\n    let info = await res.json();\n    if (info.status == \"error\") {\n        throw new HttpError(msg + \"; \" + info.reason, res.status);\n    } \n\n    throw new HttpError(msg, res.status);\n}\n","/**\n * Headers to be attached to all HTTP requests using the default functions (typically based on `fetch`).\n * Keys are the header names while values are the header contents.\n * This is mainly used to set the `Authorization` header for authentication.\n */\nexport var globalRequestHeaders = {};\n\nexport function quickGet(url) {\n    return fetch(url, { headers: globalRequestHeaders });\n}\n\nexport function quickPutJson(url, body) {\n    let opt = { \n        method: \"PUT\", \n        headers: { ...globalRequestHeaders }\n    };\n\n    if (body) {\n        opt.headers[\"Content-Type\"] = \"application/json\";\n        opt.body = JSON.stringify(body);\n    }\n\n    return fetch(url, opt);\n}\n","import * as err from \"./HttpError.js\";\nimport * as gh from \"./globalRequestHeaders.js\";\n\n/**\n * Download a file from an ArtifactDB REST API.\n *\n * @param {string} baseUrl - Base URL of the REST API.\n * @param {string} id - The full ArtifactDB identifier of the resource of interest.\n * @param {object} [options={}] - Optional parameters.\n * @param {?function} [options.downloadFun=null] - Function that accepts a single string containing a URL and returns the resource at that URL.\n * The return value may be of any type but is generally expected to be either an ArrayBuffer/Uint8Array of the file contents or (for Node.js only) a string to a path containing the file contents.\n * By default, a request is performed using `getFun` and an ArrayBuffer is returned containing the contents of the file.\n * @param {?function} [options.getFun=null] - Function that accepts a single string containing a URL and returns a Response object.\n * Only used when `downloadFun` is not provided.\n * Defaults to the in-built `fetch` function with {@linkcode globalRequestHeaders}.\n *\n * @return {string|ArrayBuffer} Depending on `downloadFun`, either the contents of the file or a path to the file.\n * @async\n */\nexport async function getFile(baseUrl, id, { downloadFun = null, getFun = null } = {}) {\n    let out = baseUrl + \"/files/\" + encodeURIComponent(id);\n\n    if (downloadFun === null) {\n        if (getFun === null) {\n            getFun = gh.quickGet;\n        }\n        downloadFun = async x => {\n            let res = await getFun(x);\n            await err.checkHttpResponse(res, \"failed to retrieve file for '\" + id + \"'\");\n            return await res.arrayBuffer();\n        };\n    }\n\n    return await downloadFun(out);\n}\n","import * as err from \"./HttpError.js\";\nimport * as gh from \"./globalRequestHeaders.js\";\n\n/**\n * Get a file's metadata from an ArtifactDB REST API.\n *\n * @param {string} baseUrl - Base URL of the REST API.\n * @param {string} id - The full ArtifactDB identifier of the resource of interest.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.followLink=true] - Whether to follow links from redirection schemas.\n * @param {boolean} [options.raw=false] - Whether to download the raw metadata from S3.\n * This is slower but avoids some loss of information due to Elasticsearch transformations.\n * @param {?function} [options.getFun=null] - Function that accepts a single string containing a URL and returns a Response object (or a promise resolving to a Response).\n * Defaults to the in-built `fetch` function with {@linkcode globalRequestHeaders}.\n *\n * @return {Object} Object containing the metadata for this file artifact.\n * This is guaranteed to contain at least the following properties:\n *\n * - `$schema`, a string specifying the schema for this metadata document.\n * - `path`, a string specifying the relative path of the file inside the project.\n * - `_extra`, an object containing extra metadata about this resource from the ArtifactDB instance.\n *\n * @async\n */\nexport async function getFileMetadata(baseUrl, id, { followLink = true, raw = false, getFun = null } = {}) {\n    let out = baseUrl + \"/files/\" + encodeURIComponent(id) + \"/metadata\";\n\n    let options = []\n    if (followLink) {\n        options.push(\"follow_link=true\");\n    }\n    if (raw) {\n        options.push(\"raw=true\")\n    }\n    if (options.length) {\n        out += \"?\" + options.join(\"&\");\n    }\n\n    if (getFun === null) {\n        getFun = gh.quickGet;\n    }\n    let res = await getFun(out);\n    await err.checkHttpResponse(res, \"failed to retrieve metadata for '\" + id + \"'\");\n\n    return await res.json();\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as bakana from \"bakana\";\nimport * as adb from \"artifactdb\";\nimport * as utils from \"./utils.js\";\n\nconst baseUrl = \"https://collaboratordb.aaron-lun.workers.dev\";\n\nvar getFun = null;\nvar downloadFun = null;\n\nclass CollaboratordbNavigator {\n    #project;\n    #version;\n\n    constructor(project, version) {\n        this.#project = project;\n        this.#version = version;\n    }\n\n    async file(path) {\n        let id = adb.packId(this.#project, path, this.#version);\n        return await adb.getFile(baseUrl, id, { getFun: getFun, downloadFun: downloadFun });\n    }\n\n    async metadata(path) {\n        let id = adb.packId(this.#project, path, this.#version);\n        return await adb.getFileMetadata(baseUrl, id, { getFun: getFun });\n    }\n};\n\n/**\n * Dataset derived from a SummarizedExperiment in [CollaboratorDB](https://github.com/CollaboratorDB).\n * This extends the [AbstractArtifactdbDataset](https://kanaverse.github.io/bakana/AbstractArtifactdbDataset.html) class.\n */\nexport class CollaboratordbDataset extends bakana.AbstractArtifactdbDataset {\n    /** \n     * @param {?function} fun - Function that accepts a URL string and downloads the resource,\n     * returning a Uint8Array of the file contents.\n     * Alternatively, on Node.js, the function may return a string containing a file path to the downloaded resource.\n     * \n     * Alternatively `null`, to reset the function to its default value.\n     * See [`getFile`](https://artifactdb.github.io/artifactdb.js/global.html#getFile) for details.\n     * @return {?function} Previous setting of the download function.\n     */\n    static setDownloadFun(fun) {\n        let previous = downloadFun;\n        downloadFun = fun;\n        return previous;\n    }\n\n    /** \n     * @param {?function} fun - Function that accepts a URL string and performs a GET to return a Response object,\n     * see [`getFileMetadata`](https://artifactdb.github.io/artifactdb.js/global.html#getFileMetadata) for details.\n     * \n     * Alternatively `null`, to reset the function to its default value.\n     * @return {?function} Previous setting of the GET function.\n     */\n    static setGetFun(fun) {\n        let previous = getFun;\n        getFun = fun;\n        return previous;\n    }\n\n    /****************************************\n     ****************************************/\n\n    #id;\n    #unpacked;\n\n    /**\n     * @param {string} id - Identifier of a SummarizedExperiment in CollaboratorDB.\n     */\n    constructor(id) {\n        let unpacked = adb.unpackId(id);\n        super(unpacked.path, new CollaboratordbNavigator(unpacked.project, unpacked.version));\n        this.#id = id;\n        this.#unpacked = unpacked;\n        return;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"CollaboratorDB\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return { \n            \"id\": this.#id, \n            \"options\": this.options()\n        };\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        const enc = new TextEncoder;\n        let buffer = enc.encode(this.#id);\n\n        // Storing it as a string in the buffer.\n        let output = {\n            type: \"id\",\n            file: new bakana.SimpleFile(buffer, { name: \"id\" })\n        };\n\n        return {\n            files: [ output ],\n            options: this.options()\n        }\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode CollaboratordbDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {CollaboratordbDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        let args = {};\n\n        // This should contain 'id'.\n        for (const x of files) {\n            const dec = new TextDecoder;\n            args[x.type] = dec.decode(x.file.buffer());\n        }\n\n        if (!(\"id\" in args)) {\n            throw new Error(\"expected a file of type 'id' when unserializing CollaboratorDB dataset\"); \n        }\n        return new CollaboratordbDataset(args.id, options);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X HDF5 feature-barcode matrix format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices) for details.\n */\nexport class TenxHdf5Dataset { \n    #h5_file;\n    #h5_path;\n    #h5_flush;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"h5\", file: fun(this.#h5_file) }];\n        let options = this.options();\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} h5File - Contents of a HDF5 file in the 10X feature-barcode format.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     */\n    constructor(h5File) {\n        if (h5File instanceof afile.SimpleFile) {\n            this.#h5_file = h5File;\n        } else {\n            this.#h5_file = new afile.SimpleFile(h5File);\n        }\n\n        this.#options = TenxHdf5Dataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxHdf5Dataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxHdf5Dataset#load load} (but not {@linkcode TenxHdf5Dataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * If `null` or the string is not present among the feature types, no RNA features are to be loaded.\n     *\n     * If no feature type information is available in the dataset, all features are considered to be genes by default.\n     * This behavior can also be explicitly requested by setting this argument to the only non-`null` value among all `featureType*Name` parameters.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * If `null` or the string is not present among the feature types, no ADT features are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be ADTs.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * If `null` or the string is not present among the feature types, no guides are to be loaded.\n     * \n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be guides.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #instantiate() {\n        if (this.#h5_path !== null) {\n            return;\n        }\n\n        let info = scran.realizeFile(this.#h5_file.content());\n        this.#h5_path = info.path;\n        this.#h5_flush = info.flush;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxHdf5Dataset#load load} or {@linkcodeTenxHdf5Dataset#summary summary}. \n     */\n    clear() {\n        if (typeof this.#h5_flush == \"function\") {\n            this.#h5_flush();\n        }\n        this.#h5_flush = null;\n        this.#h5_path = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"10X\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let handle = new scran.H5File(this.#h5_path);\n        if (!(\"matrix\" in handle.children) || handle.children[\"matrix\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix' group at the top level of the file\");\n        }\n        let mhandle = handle.open(\"matrix\");\n\n        if (!(\"features\" in mhandle.children) || mhandle.children[\"features\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix/features' group containing the feature annotation\");\n        }\n        let fhandle = mhandle.open(\"features\");\n\n        let ids = eutils.extractHDF5Strings(fhandle, \"id\");\n        if (ids == null) {\n            throw new Error(\"expected a 'matrix/features/id' string dataset containing the feature IDs\");\n        }\n        let feats = new bioc.DataFrame({ id: ids }); // build it piece-by-piece for a well-defined ordering.\n\n        let names = eutils.extractHDF5Strings(fhandle, \"name\");\n        if (names !== null) {\n            feats.$setColumn(\"name\", names);\n        }\n\n        let ftype = eutils.extractHDF5Strings(fhandle, \"feature_type\");\n        if (ftype !== null) {\n            feats.$setColumn(\"type\", ftype);\n        }\n\n        this.#raw_features = feats;\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let details = scran.extractHDF5MatrixDetails(this.#h5_path, \"matrix\");\n        this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: details.columns });\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    summary({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxHdf5Dataset#load load} but the order of values may be different.\n     */\n    previewPrimaryIds({ cache = false } = {}) {\n        this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxHdf5Dataset#defaults defaults} or with {@linkcode TenxHdf5Dataset#setOptions setOptions}.\n     *\n     * If the feature annotation lacks information about the feature types, it is assumed that all features are genes, i.e., only the RNA modality is present.\n     */\n    load({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let loaded = scran.initializeSparseMatrixFromHDF5(this.#h5_path, \"matrix\"); // collection gets handled inside splitScranMatrixAndFeatures.\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\");\n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxHdf5Dataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxHdf5Dataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"h5\") {\n            throw new Error(\"expected exactly one file of type 'h5' for 10X HDF5 unserialization\");\n        }\n        let output = new TenxHdf5Dataset(files[0].file);\n        output.setOptions(output);\n        return output;\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**\n * Any class that satisfies the ArtifactdbProjectNavigator contract, so called as it is intended to \"navigate\" an ArtifactDB project directory.\n * This should provide the following methods:\n * \n * - `metadata(p)`, a (possibly async) method that accepts a string `p` containing a relative path to a resource inside an ArtifactDB project directory,\n *   and returns an object containing the metadata for that object.\n *   Any redirections should be resolved by this method.\n *\n *   Note that {@linkplain AbstractArtifactdbDataset} will automatically cache the outputs of all `metadata()` calls between any invocations of {@linkcode AbstractArtifactdbDataset#clear clear},\n *   to improve efficiency when repeatedly accessing the same metadata.\n *   The same applies to {@linkplain AbstractArtifactdbResult}.\n * - `file(p)`, a (possibly async) method that accepts a string `p` containing a relative path inside a project directory and returns the contents of the file at that path.\n *   The return value should typically be a Uint8Array; on Node.js, methods may alternatively return a string containing a path to the file on the local file system.\n *   The method does not need to handle redirections from `p`.\n *\n * Optionally, the ArtifactdbProjectNavigator class may implement a `clear()` method to remove any cached content.\n * This will be called by {@linkcode AbstractArtifactdbDataset#clear AbstractArtifactdbDataset.clear} and  {@linkcode AbstractArtifactdbResult#clear AbstractArtifactdbResult.clear}.\n *\n * @typedef ArtifactdbProjectNavigator\n */\n\n/**************************\n ******* Internals ********\n **************************/\n\nasync function load_data_frame(info, navigator) {\n    if (typeof info == \"string\") {\n        info = await navigator.metadata(info);\n    }\n    let contents = await navigator.file(info.path);\n\n    let colnames;\n    let columns;\n    let rownames = null;\n\n    if (info[\"$schema\"].startsWith(\"csv_data_frame/\")) {\n        // TODO: replace with comservatory parser.\n        let parsed = await eutils.readTable2(contents, { delim: \",\" });\n        colnames = parsed.shift();\n\n        columns = new Array(colnames.length);\n        for (var i = 0; i < columns.length; i++) {\n            let current = [];\n            for (const x of parsed) {\n                current.push(x[i]);\n            }\n            columns[i] = current;\n        }\n\n        if (info.data_frame.row_names) {\n            rownames = columns.shift();\n            colnames.shift();\n        }\n\n        // Mutating the type... this doesn't quite handle NAs and NaNs properly, but whatever.\n        for (var i = 0; i < columns.length; i++) {\n            let type = info.data_frame.columns[i].type;\n            if (type == \"integer\") {\n                columns[i] = new Int32Array(columns[i]);\n            } else if (type == \"number\") {\n                columns[i] = new Float64Array(columns[i]);\n            } else if (type == \"boolean\") {\n                columns[i] = columns[i].map(x => x == \"true\");\n            }\n        }\n\n    } else if (info[\"$schema\"].startsWith(\"hdf5_data_frame/\")) {\n        let out = scran.realizeFile(contents);\n        try {\n            let handle = new scran.H5File(out.path);\n            let ghandle = handle.open(info.hdf5_data_frame.group);\n\n            colnames = ghandle.open(\"column_names\", { load: true }).values;\n            if (info.data_frame.row_names) {\n                rownames = ghandle.open(\"row_names\", { load: true }).values;\n            }\n\n            columns = [];\n            let chandle = ghandle.open(\"data\");\n            for (var i = 0; i < colnames.length; i++) {\n                if (!(String(i) in chandle.children)) {\n                    columns.push(null);\n                    continue;\n                }\n\n                let dhandle = chandle.open(String(i), { load: true });\n                let current = dhandle.values;\n\n                let type = info.data_frame.columns[i];\n                if (type == \"integer\") {\n                    if (current instanceof Float64Array || current instanceof Float32Array) {\n                        current = new Int32Array(current);\n                    }\n\n                } else if (type == \"number\") {\n                    if (!(current instanceof Float64Array) && !(current instanceof Float32Array)) {\n                        current = new Float64Array(current);\n                    }\n\n                } else if (type == \"boolean\") {\n                    let replacement = new Array(current.length);\n                    for (var i = 0; i < current.length; i++) {\n                        if (current[i] == -2147483648) {\n                            replacement[i] = null;\n                        } else {\n                            replacement[i] = current[i] != 0\n                        }\n                    }\n                    current = replacement;\n\n                } else if (type == \"string\" || type == \"date\") {\n                    if (\"missing-value-placeholder\" in dhandle.attributes) {\n                        let placeholder = dhandle.readAttribute(\"missing-value-placeholder\").values[0];\n                        for (var i = 0; i < current.length; i++) {\n                            if (current[i] == placeholder) {\n                                current[i] = null;\n                            }\n                        }\n                    }\n                }\n\n                columns.push(current);\n            }\n        } finally {\n            out.flush();\n        }\n\n    } else {\n        throw new Error(\"unknown data_frame schema type '\" + info[\"$schema\"] + \"'\");\n    }\n\n    let new_columns = {};\n    let new_colnames = [];\n    for (var i = 0; i < columns.length; i++) {\n        if (info.data_frame.columns[i].type === \"other\") {\n            let nest_meta = await navigator.metadata(info.data_frame.columns[i].resource.path);\n            try {\n                new_columns[colnames[i]] = await load_data_frame(nest_meta, navigator);\n                new_colnames.push(colnames[i]);\n            } catch (e) {\n                console.warn(e);\n            }\n        } else {\n            new_columns[colnames[i]] = columns[i];\n            new_colnames.push(colnames[i]);\n        }\n    }\n\n    return new bioc.DataFrame(new_columns, { \n        columnOrder: new_colnames, \n        rowNames: rownames, \n        numberOfRows: info.data_frame.dimensions[0] \n    });\n}\n\nconst main_experiment_name = \"\";\n\nasync function extract_all_features(path, navigator) {\n    let extract_features = async se_meta => {\n        if (\"row_data\" in se_meta.summarized_experiment) {\n            let row_path = se_meta.summarized_experiment.row_data.resource.path;\n            return await load_data_frame(row_path, navigator);\n        } else {\n            return new bioc.DataFrame({}, { numberOfRows: se_meta.summarized_experiment.dimensions[0] });\n        }\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let output = {};\n    output[main_experiment_name] = await extract_features(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                output[alt.name] = await extract_features(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return output;\n}\n\nasync function extract_all_assay_names(path, navigator) {\n    let extract_assay_names = se_meta => {\n        let output = [];\n        for (const ass of se_meta.summarized_experiment.assays) {\n            output.push(ass.name);\n        }\n        return output;\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let assays = {};\n    assays[main_experiment_name] = extract_assay_names(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                assays[alt.name] = extract_assay_names(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return assays;\n}\n\n// This specifically loads the log-counts created by the dumper.\n// TODO: replace this with chihaya.js.\nasync function extract_logcounts(handle, navigator) {\n    if (handle.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (handle.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (Math.abs(handle.open(\"value\", { load: true }).values[0] - Math.log(2)) > 0.00000001) {\n        return null;\n    }\n    if (handle.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (handle.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n\n    let ghandle2 = handle.open(\"seed\");\n    if (ghandle2.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle2.readAttribute(\"delayed_operation\").values[0] !== \"unary math\") {\n        return null;\n    }\n    if (ghandle2.open(\"method\", { load: true }).values[0] !== \"log1p\") {\n        return null;\n    }\n\n    let ghandle3 = ghandle2.open(\"seed\");\n    if (ghandle3.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle3.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (ghandle3.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (ghandle3.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n    if (ghandle3.open(\"along\", { load: true }).values[0] !== 1) {\n        return null;\n    }\n    let sf = ghandle3.open(\"value\", { load: true }).values;\n\n    let ahandle = ghandle3.open(\"seed\");\n    if (ahandle.readAttribute(\"delayed_type\").values[0] !== \"array\") {\n        return null;\n    }\n    if (ahandle.readAttribute(\"delayed_array\").values[0] !== \"custom alabaster local array\") {\n        return null;\n    }\n    let path = ahandle.open(\"path\", { load: true }).values[0];\n\n    let mat;\n    let output = {};\n    try {\n        mat = await extract_assay_raw(path, navigator, false); // don't force it to be integer, but we don't mind if it is.\n        output.matrix = scran.logNormCounts(mat.matrix, { sizeFactors: sf, center: false });\n        output.row_ids = mat.row_ids;\n    } finally {\n        scran.free(mat.matrix);\n    }\n                \n    return output;\n}\n\nasync function extract_assay(meta, assay, navigator, forceInteger) {\n    if (typeof assay == \"string\") {\n        var counter = 0;\n        for (const ass of meta.summarized_experiment.assays) {\n            if (ass.name == assay) {\n                assay = counter;\n                break;\n            }\n            counter++;\n        }\n        if (counter == meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay '\" + assay + \"' not found\");\n        }\n    } else {\n        if (assay >= meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay \" + String(assay) + \" out of range\");\n        }\n    }\n\n    let asspath = meta.summarized_experiment.assays[assay].resource.path;\n    return extract_assay_raw(asspath, navigator, forceInteger);\n}\n\nasync function extract_assay_raw(asspath, navigator, forceInteger) {\n    let assmeta = await navigator.metadata(asspath);\n    let contents = await navigator.file(assmeta.path);\n    let output;\n\n    let schema = assmeta[\"$schema\"];\n    let is_dense = schema.startsWith(\"hdf5_dense_array/\");\n    let is_sparse = schema.startsWith(\"hdf5_sparse_matrix/\");\n\n    if (is_dense || is_sparse) {\n        let name = (is_sparse ?  assmeta.hdf5_sparse_matrix.group : assmeta.hdf5_dense_array.dataset);\n        let stuff = scran.realizeFile(contents);\n        try {\n            output = scran.initializeSparseMatrixFromHDF5(stuff.path, name, { forceInteger });\n        } finally {\n            stuff.flush();\n        }\n\n    } else if (assmeta[\"$schema\"].startsWith(\"hdf5_delayed_array/\")) {\n        let stuff = scran.realizeFile(contents);\n        try {\n            let fhandle = new scran.H5File(stuff.path);\n            let ghandle = fhandle.open(assmeta.hdf5_delayed_array.group);\n\n            // TODO: replace with calls to chihaya.js.\n            output = await extract_logcounts(ghandle, navigator);\n            if (output == null) {\n                throw new Error(\"currently only supporting bakana-generated log-counts for delayed arrays\");\n            }\n        } finally {\n            stuff.flush();\n        }\n\n    } else {\n        throw new Error(\"array schema '\" + assmeta[\"$schema\"] + \"' is currently not supported\");\n    }\n\n    return output;\n}\n\nasync function extract_other_data(other_path, navigator) {\n    let othermeta = await navigator.metadata(other_path);\n    if (!othermeta[\"$schema\"].startsWith(\"json_simple_list/\")) {\n        throw new Error(\"currently only support JSON-formatted lists in the 'other_data'\");\n    }\n\n    let contents = await navigator.file(othermeta.path);\n    let ofile = new afile.SimpleFile(contents, { name: \"list.json\" });\n    let unpacked = eutils.unpackText(ofile.buffer(), { compression: (othermeta.json_simple_list.compression == \"gzip\" ? \"gz\" : \"none\") });\n    let parsed = JSON.parse(unpacked);\n    return extract_list_data_internal(parsed);\n}\n\nfunction extract_list_data_internal(obj) {\n    if (!(\"type\" in obj)) {\n        throw new Error(\"non-standard JSON object for 'json_simple_list' schema\");\n    }\n\n    if (obj.type == \"number\") {\n        if (obj.values instanceof Array) {\n            let output = new Float64Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? Number.NaN : x) \n            });\n            return output;\n        } else {\n            return (obj.values == null ? Number.NaN : obj.values);\n        }\n\n    } else if (obj.type == \"integer\") {\n        if (obj.values instanceof Array) {\n            let output = new Int32Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? -2147483648 : x) \n            });\n            return output;\n        } else {\n            return obj.values;\n        }\n\n    } else if (obj.type == \"boolean\" || obj.type == \"string\") {\n        return obj.values;\n\n    } else if (obj.type == \"list\") {\n        if (\"names\" in obj) {\n            let output = {};\n            for (var i = 0; i < obj.values.length; i++) {\n                output[obj.names[i]] = extract_list_data_internal(obj.values[i]);\n            }\n            return output;\n        } else {\n            let output = [];\n            for (var i = 0; i < obj.values.length; i++) {\n                output.push(extract_list_data_internal(obj.values[i]));\n            }\n            return output;\n        }\n\n    } else if (obj.type == \"nothing\") {\n        return null;\n\n    } else {\n        console.warn(\"JSON simple list containing type '\" + obj.type + \"' is not yet supported\");\n        return null;\n    }\n}\n\n/***********************\n ******* Cacher ********\n ***********************/\n\n// As we'll be using the metadata often, we cache it at this level. This\n// removes the burden of caching on the implementation of the navigator. \nclass MetadataCacheWrapper {\n    #navigator;\n    #metadata_cache;\n\n    constructor(nav) {\n        this.#navigator = nav;\n        this.#metadata_cache = {};\n    }\n\n    clear() {\n        this.#metadata_cache = {};\n        if (\"clear\" in this.#navigator) {\n            this.#navigator.clear();\n        }\n    }\n\n    async metadata(path) {\n        if (path in this.#metadata_cache) {\n            return this.#metadata_cache[path];\n        } else {\n            let content = await this.#navigator.metadata(path);\n            this.#metadata_cache[path] = content;\n            return content;\n        }\n    }\n\n    file(path) {\n        return this.#navigator.file(path);\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n * Subclasses should define `abbreviate()` and `serialize()` methods, as well as the static `format()` and `unserialize()` methods - \n * see the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md) for more details.\n */\nexport class AbstractArtifactdbDataset {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbDataset.defaults();\n\n        // Don't call this.clear() here. We don't want to clear the navigator's\n        // cache at this point, as the navigator might contain some cached\n        // values when passed to the constructor. We should respect any caches\n        // until we're specifically told to discard it with clear() or cache =\n        // false in load() or summary().\n        this.#reset_local_caches();\n        return;\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            rnaCountAssay: 0, \n            adtCountAssay: 0, \n            crisprCountAssay: 0,\n            rnaExperiment: \"\", \n            adtExperiment: \"Antibody Capture\", \n            crisprExperiment: \"CRISPR Guide Capture\",\n            primaryRnaFeatureIdColumn: null, \n            primaryAdtFeatureIdColumn: null,\n            primaryCrisprFeatureIdColumn: null \n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbDataset#load load} (but not {@linkcode AbstractArtifactdbDataset#summary summary}).\n     * @param {string|number} [options.rnaCountAssay] - Name or index of the assay containing the RNA count matrix.\n     * @param {string|number} [options.adtCountAssay] - Name or index of the assay containing the ADT count matrix.\n     * @param {string|number} [options.crisprCountAssay] - Name or index of the assay containing the CRISPR count matrix.\n     * @param {?(string|number)} [options.rnaExperiment] - Name or index of the alternative experiment containing gene expression data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     * @param {?(string|number)} [options.adtExperiment] - Name or index of the alternative experiment containing ADT data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     * @param {?(string|number)} [options.crisprExperiment] - Name or index of the alternative experiment containing CRISPR guide data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     * @param {?(string|number)} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbDataset#load load} or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator)\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode AbstractArtifactdbDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n\n        let fmapping = {\n            RNA: this.#options.rnaExperiment, \n            ADT: this.#options.adtExperiment, \n            CRISPR: this.#options.crisprExperiment \n        };\n\n        let preview = futils.extractRemappedPrimaryIds(this.#raw_features, fmapping, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode AbstractArtifactdbDataset#defaults defaults} or with {@linkcode AbstractArtifactdbDataset#setOptions setOptions}.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#options.rnaExperiment, assay: this.#options.rnaCountAssay },\n            ADT: { exp: this.#options.adtExperiment, assay: this.#options.adtCountAssay },\n            CRISPR: { exp: this.#options.crisprExperiment, assay: this.#options.crisprCountAssay }\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let altmap = {};\n        let alts = [];\n        if (\"single_cell_experiment\" in full_meta) {\n            alts = full_meta.single_cell_experiment.alternative_experiments;\n            for (const alt of alts) {\n                altmap[alt.name] = alt.resource.path;\n            }\n        }\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let meta = null;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        meta = full_meta;\n                    } else {\n                        if (!(v.exp in altmap)) {\n                            continue;\n                        }\n                        meta = await this.#navigator.metadata(altmap[v.exp]);\n                    }\n                } else {\n                    if (v.exp >= alts.length) {\n                        continue;\n                    }\n                    name = alts[v.exp].name;\n                    meta = await this.#navigator.metadata(alts[v.exp].resource.path);\n                }\n\n                let loaded = await extract_assay(meta, v.assay, this.#navigator, true);\n                output.matrix.add(k, loaded.matrix);\n                output.features[k] = bioc.SLICE(this.#raw_features[name], loaded.row_ids);\n            }\n\n            output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentDatasetBase = AbstractArtifactdbDataset;\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n */\nexport class AbstractArtifactdbResult {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n    #raw_other;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbResult.defaults();\n\n        // Don't call clear() here, see comments above in the Dataset constructor.\n        this.#reset_local_caches();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbResults#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return { \n            primaryAssay: 0,\n            isPrimaryNormalized: true,\n            reducedDimensionNames: null\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbResult#load load} (but not {@linkcode AbstractArtifactdbResult#summary summary}.\n     * @param {object|string|number} [options.primaryAssay] - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     * @param {object|boolean} [options.isPrimaryNormalized] - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     * @param {?Array} [options.reducedDimensionNames] - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setOptions(options) {\n        // Cloning to avoid pass-by-reference links.\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = bioc.CLONE(v);\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#raw_other = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbResult#load load} or {@linkcode AbstractArtifactdbResult#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    async #other() {\n        if (this.#raw_other !== null) {\n            return;\n        }\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"other_data\" in full_meta.summarized_experiment) {\n            let other_path = full_meta.summarized_experiment.other_data.resource.path;\n            this.#raw_other = await extract_other_data(other_path, this.#navigator);\n        } else {\n            this.#raw_other = {};\n        }\n        return;\n    }\n\n    async #get_all_reddim_names(rd_meta, store) {\n        for (const red of rd_meta) {\n            let redmeta = await this.#navigator.metadata(red.resource.path);\n            if (redmeta[\"$schema\"].startsWith(\"hdf5_dense_array/\") && redmeta.array.dimensions.length == 2) {\n                store.push(red.name);\n            }\n        }\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async \n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator),\n            reduced_dimension_names: [],\n            other_metadata: this.#raw_other\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta) {\n            let reddim_meta = full_meta.single_cell_experiment.reduced_dimensions;\n            await this.#get_all_reddim_names(reddim_meta, output.reduced_dimension_names);\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {},\n            other_metadata: this.#raw_other\n        };\n\n        // Fetch the reduced dimensions first.\n        {\n            let reddims = this.#options.reducedDimensionNames;\n            let reddim_meta = full_meta.single_cell_experiment.reduced_dimensions;\n\n            if (reddims == null) {\n                reddims = [];\n                await this.#get_all_reddim_names(reddim_meta, reddims);\n            }\n\n            if (reddims.length > 0) {\n                let redmap = {};\n                for (const red of reddim_meta) {\n                    redmap[red.name] = red.resource.path;\n                }\n\n                for (const k of reddims) {\n                    let redmeta = await this.#navigator.metadata(redmap[k]); // this should be only HDF5 dense matrices.\n                    let dims = redmeta.array.dimensions;\n                    let redcontents = await this.#navigator.file(redmeta.path); \n\n                    let realized = scran.realizeFile(redcontents);\n                    let acquired = [];\n                    try {\n                        let fhandle = new scran.H5File(realized.path);\n                        let dhandle = fhandle.open(redmeta.hdf5_dense_array.dataset, { load: true });\n                        let contents = dhandle.values;\n                        for (var d = 0; d < dims[1]; d++) {\n                            acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n                        }\n                    } finally {\n                        realized.flush();\n                    }\n\n                    output.reduced_dimensions[k] = acquired;\n                }\n            }\n        }\n\n        // Now fetching the assay matrix.\n        {\n            let altmap = {};\n            if (\"single_cell_experiment\" in full_meta) {\n                for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n                    altmap[alt.name] = alt.resource.path;\n                }\n            }\n\n            try {\n                for (const [k, v] of Object.entries(this.#raw_features)) {\n                    let curassay = this.#options.primaryAssay;\n                    if (typeof curassay == \"object\") {\n                        if (k in curassay) {\n                            curassay = curassay[k];\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    let curnormalized = this.#options.isPrimaryNormalized;\n                    if (typeof curnormalized == \"object\") {\n                        if (k in curnormalized) {\n                            curnormalized = curnormalized[k];\n                        } else {\n                            curnormalized = true;\n                        }\n                    }\n\n                    let meta;\n                    if (k === \"\") {\n                        meta = full_meta;\n                    } else {\n                        meta = await this.#navigator.metadata(altmap[k]);\n                    }\n\n                    let loaded = await extract_assay(meta, curassay, this.#navigator, !curnormalized);\n                    output.matrix.add(k, loaded.matrix);\n\n                    if (!curnormalized) {\n                        let normed = scran.logNormCounts(loaded.matrix, { allowZeros: true });\n                        output.matrix.add(k, normed);\n                    }\n\n                    if (loaded.row_ids !== null) {\n                        output.features[k] = bioc.SLICE(this.#raw_features[k], loaded.row_ids);\n                    } else {\n                        output.features[k] = this.#raw_features[k];\n                    }\n                }\n\n            } catch (e) {\n                scran.free(output.matrix);\n                throw e;\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentResultBase = AbstractArtifactdbResult;\n","export class SimpleFile {\n    #mode;\n    #buffer;\n    #file;\n    #name;\n\n    constructor(x, { name = null } = {}) {\n        if (x instanceof File) {\n            this.#mode = \"file\";\n            this.#file = x;\n            if (name === null) {\n                name = x.name;\n            }\n            this.#name = name;\n        } else if (x instanceof Uint8Array) {\n            this.#mode = \"buffer\";\n            this.#buffer = x; \n            if (name === null) {\n                throw new Error(\"'name' must be provided for Uint8Array inputs in SimpleFile constructor\");\n            }\n            this.#name = name;\n        } else {\n            throw new Error(\"unknown type '\" + typeof(x) + \"' for SimpleFile constructor\");\n        }\n    }\n\n    buffer({ copy = false } = {}) {\n        if (this.#mode == \"file\") {\n            let reader = new FileReaderSync();\n            let b = reader.readAsArrayBuffer(this.#file);\n            return new Uint8Array(b);\n        } else {\n            if (copy) {\n                return this.#buffer.slice();\n            } else {\n                return this.#buffer;\n            }\n        }\n    }\n\n    size() {\n        if (this.#mode == \"file\") {\n            return this.#file.size;\n        } else {\n            return this.#buffer.length;\n        }\n    }\n\n    name() {\n        return this.#name;\n    }\n\n    content({ copy = false } = {}) {\n        return this.buffer({ copy: copy });\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X Matrix Market format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/matrices) for details.\n */\nexport class TenxMatrixMarketDataset {\n    #matrix_file;\n    #feature_file;\n    #barcode_file;\n\n    #dimensions;\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"mtx\", file: fun(this.#matrix_file) }];\n\n        if (this.#feature_file !== null) {\n            files.push({ type: \"genes\", file: fun(this.#feature_file) });\n        }\n\n        if (this.#barcode_file !== null) {\n            files.push({ type: \"annotations\", file: fun(this.#barcode_file) });\n        }\n\n        let options = this.options(); \n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} matrixFile - A Matrix Market file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {?(SimpleFile|string|Uint8Array|File)} featureFile - Contents of a feature annotation file.\n     * If `null`, it is assumed that no file was available.\n     * @param {?(SimpleFile|string|Uint8Array|File)} barcodeFile - Contents of a barcode annotation file.\n     * If `null`, it is assumed that no file was available.\n     */\n    constructor(matrixFile, featureFile, barcodeFile, { \n        featureTypeRnaName = \"Gene Expression\", \n        featureTypeAdtName = \"Antibody Capture\", \n        featureTypeCrisprName = \"CRISPR Guide Capture\", \n        primaryRnaFeatureIdColumn = 0, \n        primaryAdtFeatureIdColumn = 0,\n        primaryCrisprFeatureIdColumn = 0\n    } = {}) {\n        if (matrixFile instanceof afile.SimpleFile) {\n            this.#matrix_file = matrixFile;\n        } else {\n            this.#matrix_file = new afile.SimpleFile(matrixFile);\n        }\n\n        if (featureFile instanceof afile.SimpleFile || featureFile == null) {\n            this.#feature_file = featureFile;\n        } else {\n            this.#feature_file = new afile.SimpleFile(featureFile);\n        }\n\n        if (barcodeFile instanceof afile.SimpleFile || barcodeFile == null) {\n            this.#barcode_file = barcodeFile;\n        } else {\n            this.#barcode_file = new afile.SimpleFile(barcodeFile);\n        }\n\n        this.#options = TenxMatrixMarketDataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxMatrixMarketDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxMatrixMarketDataset#load load} (but not {@linkcode TenxMatrixMarketDataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * If `null` or the string is not present among the feature types, no RNA features are to be loaded.\n     *\n     * If no feature type information is available in the dataset, all features are considered to be genes by default.\n     * This behavior can be explicitly requested by setting this argument to the only non-`null` value among all `featureType*Name` parameters.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * If `null` or the string is not present among the feature types, no ADT features are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be ADTs.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * If `null` or the string is not present among the feature types, no guides are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be guides.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxMatrixMarketDataset#load load} or {@linkcodeTenxMatrixMarketDataset#summary summary}. \n     */\n    clear() {\n        this.#dimensions = null;\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"MatrixMarket\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate(args) {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #fetch_dimensions() {\n        if (this.#dimensions !== null) {\n            return;\n        }\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let headers = scran.extractMatrixMarketDimensions(this.#matrix_file.content(), { \"compressed\": is_gz });\n        this.#dimensions = [headers.rows, headers.columns];\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        let NR = this.#dimensions[0];\n        if (this.#feature_file == null) {\n            this.#raw_features = new bioc.DataFrame({}, { numberOfRows: NR });\n            return;\n        }\n\n        let fname = this.#feature_file.name();\n        var is_gz = fname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#feature_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        if (parsed.length == NR + 1) {\n            // If it seems to have a header, we just use that directly.\n            let output = {};\n            let headers = parsed.shift();\n            headers.forEach((x, i) => {\n                output[x] = parsed.map(y => y[i]);\n            });\n            this.#raw_features = output;\n            return;\n        }\n\n        // Otherwise, we assume it's standard 10X CellRanger output, without a header.\n        if (parsed.length !== NR) {\n            throw new Error(\"number of matrix rows is not equal to the number of rows in '\" + fname + \"'\");\n        } \n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        let output = new bioc.DataFrame({}, { numberOfRows: NR }); // build it piece-by-piece for a well-defined order.\n        output.$setColumn(\"id\", ids);\n        output.$setColumn(\"name\", symb);\n\n        if (parsed[0].length > 2) {\n            let types = [];\n            parsed.forEach(x => { types.push(x[2]); });\n            output.$setColumn(\"type\", types);\n        }\n\n        this.#raw_features = output;\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        if (this.#barcode_file == null) {\n            this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: this.#dimensions[1] });\n            return;\n        }\n\n        let bname = this.#barcode_file.name();\n        var is_gz = bname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#barcode_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        // Check if a header is present or not. Standard 10X output doesn't have a \n        // header but we'd like to support some kind of customization.\n        let diff = this.#dimensions[1] - parsed.length;\n        let headers;\n        if (diff == 0) {\n            headers = parsed[0]; // whatever, just using the first row. Hope it's unique enough!\n        } else if (diff == -1) {\n            headers = parsed.shift();\n        } else {\n            throw new Error(\"number of matrix columns is not equal to the number of rows in '\" + bname + \"'\");\n        }\n\n        let annotations = {}\n        headers.forEach((x, i) => {\n            annotations[x] = parsed.map(y => y[i]);\n        });\n\n        for (const [k, v] of Object.entries(annotations)) {\n            let conv = eutils.promoteToNumber(v);\n            if (conv !== null) {\n                annotations[k] = conv;\n            }\n        }\n\n        this.#raw_cells = new bioc.DataFrame(annotations);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxMatrixMarketDataset#load load} but the order of values may be different.\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRIPSR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxMatrixMarketDataset#defaults defaults} or with {@linkcode TenxMatrixMarketDataset#setOptions setOptions}.\n     *\n     * If the feature annotation file is absent or if it lacks a third column for the feature types,\n     * `load()` will assume that all features are genes (i.e., only the RNA modality is present).\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let loaded = scran.initializeSparseMatrixFromMatrixMarket(this.#matrix_file.content(), { \"compressed\": is_gz });\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\"); \n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    async serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxMatrixMarketDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxMatrixMarketDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        let args = {};\n        for (const x of files) {\n            if (x.type in args) {\n                throw new Error(\"duplicate file of type '\" + x.type + \"' detected during MatrixMarket unserialization\");\n            }\n            args[x.type] = x.file;\n        }\n\n        if (!(\"mtx\" in args)) {\n            throw new Error(\"expected file of type 'mtx' for during MatrixMarket unserialization\");\n        }\n\n        let feat = null;\n        if (\"genes\" in args) {\n            feat = args.genes;\n        }\n\n        let barcode = null;\n        if (\"annotations\" in args) {\n            barcode = args.annotations;\n        }\n\n        let output = new TenxMatrixMarketDataset(args.mtx, feat, barcode);\n        output.setOptions(options);\n        return output;\n    }\n}\n","export function stream(file, chunkSize, callback, resolve, reject) {\n    reject(\"no support for file paths in the browser context\");\n}\n\nexport function peek(file, n) {\n    throw new Error(\"no support for file paths in the browser context\");\n}\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\nimport * as astream from \"./abstract/stream.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function extractHDF5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (content.type !== \"String\") {\n        return null;\n    }\n\n    return content.load();\n}\n\n/**\n * Summarize an array, typically corresponding to a single column of per-cell annotation.\n * This can be used as part of a preflight response in a Reader.\n *\n * @param {Array|TypedArray} array - Per-cell annotation array of length equal to the number of cells for a given matrix.\n * An Array is treated as categorical data and should contain strings, while TypedArrays are treated as continuous data.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.limit=50] - Maximum number of unique values to report for categorical `x`.\n *\n * @return {object} Object containing `type`, a string indicating whether `array` was categorical or continuous.\n *\n * If `\"categorical\"`, the object will contain `values`, an array of unique values up to the length specified by `limit`.\n * It will also contain `truncated`, a boolean indicating whether the actual number of unique values exceeds `limit`.\n *\n * If `\"continuous\"`, the object will contain the numbers `min` and `max` specifying the minimum and maximum value in `x`, respectively.\n * `min` or `max` may be negative or positive infinity, respectively, if there is no bound on one or both ends.\n * If `min > max`, all values in `array` are `NaN`s such that no bound can be found.\n */\nexport function summarizeArray(array, { limit = 50 } = {}) {\n    if (array instanceof Array) {\n        let chosen = Array.from(new Set(array));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        array.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\nfunction guess_compression(x, compression) {\n    if (compression !== null) {\n        return compression;\n    }\n\n    let buffer;\n    if (x instanceof Uint8Array) {\n        buffer = x;\n    } else {\n        buffer = astream.peek(x, 3);\n    }\n\n    // Compare against magic words for auto-detection.\n    if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n        return 'gz';\n    }\n\n    return 'none';\n}\n\nexport function unpackText(buffer, { compression = null } = {}) {\n    compression = guess_compression(buffer, compression);\n    let txt = (compression === \"gz\" ? pako.ungzip(buffer) : buffer);\n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\nfunction merge_bytes(leftovers, decoder) {\n    let total = 0;\n    for (const x of leftovers) {\n        total += x.length;\n    }\n\n    let combined = new Uint8Array(total);\n    total = 0;\n    for (const x of leftovers) {\n        combined.set(x, total);\n        total += x.length;\n    }\n\n    return decoder.decode(combined);\n}\n\nasync function stream_callback(x, compression, chunkSize, callback) {\n    // Force the input to be either a Uint8Array or a file path string.\n    if (typeof x == \"string\") {\n        ;\n    } else if (x instanceof Uint8Array) {\n        ;\n    } else if (x instanceof afile.SimpleFile) {\n        x = x.content();\n    } else {\n        x = (new afile.SimpleFile(x, { name: \"dummy\" })).content();\n    }\n\n    if (guess_compression(x, compression) == \"gz\") {\n        await (new Promise((resolve, reject) => {\n            let gz = new pako.Inflate({ chunkSize: chunkSize });\n            gz.onData = callback;\n            gz.onEnd = status => {\n                if (status) {\n                    reject(\"gzip decompression failed; \" + gz.msg);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            if (typeof x == \"string\") {\n                astream.stream(x, chunkSize, chunk => gz.push(chunk), null, reject);\n            } else {\n                gz.push(x);\n            }\n        }));\n        return;\n    }\n\n    // Remaining possibilities are uncompressed.\n    if (typeof x == \"string\") {\n        await (new Promise((resolve, reject) => astream.stream(x, chunkSize, callback, resolve, reject)));\n        return;\n    }\n\n    callback(x);\n    return;\n}\n\n/**\n * Read lines of text from a file, possibly with decompression.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {number} [options.chunkSize=65536] - Chunk size in bytes to use for file reading (if `x` is a file path) and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string.\n * @async \n */\nexport async function readLines2(x, { compression = null, chunkSize = 65536 } = {}) {\n    const dec = new TextDecoder;\n    let leftovers = [];\n    let lines = [];\n\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk[i] == 10) { // i.e., ASCII newline.\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    lines.push(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    lines.push(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        lines.push(merge_bytes(leftovers, dec));\n    }\n\n    return lines;    \n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readTable(buffer, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n * This assumes that newlines represent the end of each row of the table, i.e., there cannot be newlines inside quoted strings.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {string} [options.delim=\"\\t\"] - Delimiter between fields.\n * @param {number} [options.chunkSize=1048576] - Chunk size in bytes to use for file reading (if `x` is a path), parsing of rows, and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of length equal to the number of lines in `buffer`.\n * Each entry is an array of strings, containing the `delim`-separated fields for its corresponding line.\n *\n * @async\n */\nexport async function readTable2(x, { compression = null, delim = \"\\t\", chunkSize = 1048576 } = {}) {\n    const dec = new TextDecoder;\n\n    let rows = [];\n    let parse = (str) => {\n        let out = ppp.parse(str, { delimiter: delim });\n        if (out.meta.aborted) {\n            let msg = \"failed to parse delimited file\";\n            for (const e of out.errors) {\n                msg += \"; \" + e.message;\n            }\n            throw new Error(msg);\n        }\n        for (const x of out.data) {\n            rows.push(x);\n        }\n    };\n\n    let leftovers = [];\n    let size_left = 0;\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            // We assume that all newlines are end-of-rows, i.e., there are no\n            // newlines inside quoted strings. Under this assumption, we can\n            // safely chunk the input stream based on newlines, parse each\n            // chunk, and then combine the parsing results together. To avoid\n            // too many parsing calls, we accumulate buffers until we hit \n            // the chunkSize and then we decode + parse them altogether.\n            if (chunk[i] == 10 && (i - last) + size_left >= chunkSize) {\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    parse(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    parse(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n                size_left = 0;\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n            size_left += chunk.length - last;\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        let combined = merge_bytes(leftovers, dec);\n        parse(combined);\n        if (combined[combined.length - 1] == \"\\n\") { // guaranteed to have non-zero length, by virtue of how 'leftovers' is filled.\n            rows.pop();            \n        }\n    }\n\n    return rows;    \n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\n\nfunction create_solo_default_object(value, modality) {\n    let output = {};\n    output[modality] = value;\n    return output;\n}\n\nexport function reportFeatures(rawFeatures, typeField) {\n    if (rawFeatures.hasColumn(typeField)) {\n        let by_type = bioc.presplitFactor(rawFeatures.column(typeField));\n        let copy = rawFeatures.removeColumn(typeField);\n        return bioc.SPLIT(copy, by_type);\n    } else {\n        return create_solo_default_object(rawFeatures, \"\");\n    }\n}\n\nfunction is_subset_noop(indices, full_length) {\n    if (indices.length != full_length) {\n        return false;\n    }\n    for (var i = 0; i < full_length; i++) {\n        if (i !== indices[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction renameByModality(input, featureTypeMapping) {\n    let output = {};\n    for (const [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null && v in input) {\n            output[k] = input[v];\n        }\n    }\n    return output;\n}\n\nfunction splitByModality(features, typeField, featureTypeMapping) {\n    let by_type = bioc.presplitFactor(features.column(typeField));\n    if (featureTypeMapping === null) {\n        return by_type;\n    }\n    return renameByModality(by_type, featureTypeMapping);\n}\n\nfunction findUnnamedDefault(featureTypeMapping, featureTypeDefault) {\n    let found = null;\n    let multiple = false;\n    for (const [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null) {\n            if (found !== null) {\n                multiple = true;\n            }\n            found = k;\n        }\n    }\n\n    if (found === null || multiple) {\n        return featureTypeDefault;\n    } else {\n        return found;\n    }\n}\n\nexport function extractSplitPrimaryIds(features, typeField, featureTypeMapping, featureTypeDefault, primary) {\n    if (typeField !== null && features.hasColumn(typeField)) {\n        let by_type = splitByModality(features, typeField, featureTypeMapping);\n        for (const [k, v] of Object.entries(by_type)) {\n            let col = extractPrimaryIdColumn(k, features, primary);\n            by_type[k] = bioc.SLICE(col, v);\n        }\n        return by_type;\n    }\n\n    // Seeing if any featureTypeMapping is set to the unnamed string.\n    let new_default = findUnnamedDefault(featureTypeMapping, featureTypeDefault);\n    let output = {};\n    output[new_default] = extractPrimaryIdColumn(new_default, features, primary);\n    return output;\n}\n\nexport function splitScranMatrixAndFeatures(loaded, rawFeatures, typeField, featureTypeMapping, featureTypeDefault) {\n    let output = { matrix: new scran.MultiMatrix };\n\n    try {\n        let out_mat = loaded.matrix;\n        output.matrix.add(\"\", out_mat);\n\n        let current_features;\n        if (loaded.row_ids !== null) {\n            current_features = bioc.SLICE(rawFeatures, loaded.row_ids);\n        } else {\n            current_features = bioc.CLONE(rawFeatures, { deepCopy: false }); // because we're deleting a column.\n        }\n\n        if (typeField !== null && current_features.hasColumn(typeField)) {\n            let by_type = splitByModality(current_features, typeField, featureTypeMapping);\n            let type_keys = Object.keys(by_type);\n            let skip_subset = is_subset_noop(type_keys[0], out_mat.numberOfRows());\n\n            if (type_keys.length > 1 || !skip_subset) {\n                let replacement = new scran.MultiMatrix({ store: scran.splitRows(out_mat, by_type) });\n                scran.free(output.matrix);\n                output.matrix = replacement;\n            } else {\n                output.matrix.rename(\"\", type_keys[0]);\n            }\n\n            delete current_features[typeField];\n            output.features = bioc.SPLIT(current_features, by_type);\n\n        } else {\n            output.matrix.rename(\"\", featureTypeDefault);\n            output.features = create_solo_default_object(current_features, featureTypeDefault);\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction extractPrimaryIdColumn(modality, modality_features, primary) {\n    if (!(modality in primary)) {\n        throw new Error(\"modality '\" + modality + \"' has no primary key identifier\");  \n    }\n    let id = primary[modality];\n\n    if ((typeof id == \"string\" && modality_features.hasColumn(id)) || (typeof id == \"number\" && id < modality_features.numberOfColumns())) {\n        return modality_features.column(id);\n    } \n\n    return modality_features.rowNames();\n}\n\nexport function extractPrimaryIds(features, primary) {\n    let output = {};\n    for (const [k, v] of Object.entries(features)) {\n        output[k] = extractPrimaryIdColumn(k, v, primary);\n    }\n    return output;\n}\n\nexport function extractRemappedPrimaryIds(features, featureTypeMapping, primary) {\n    let renamed = renameByModality(features, featureTypeMapping);\n    return extractPrimaryIds(renamed, primary);\n}\n","/**\n * Webpack (or something in kana's build system) specifically recognizes the\n * hard-coded path in this 'new Worker(new URL(...))' pattern. This is why we\n * have hard-coded creators for the workers rather than allowing callers to\n * pass in the URL as a variable, as that doesn't pack the worker's JS.\n */\n\nexport function createTsneWorker() {\n    return new Worker(new URL(\"../tsne.worker.js\", import.meta.url), { type: \"module\" });\n}\n\nexport function createUmapWorker() {\n    return new Worker(new URL(\"../umap.worker.js\", import.meta.url), { type: \"module\" });\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`groupedSizeFactors`](https://kanaverse.github.io/scran.js/global.html#groupedSizeFactors) \n * and [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.sf_buffer);\n        utils.freeCache(this.#cache.centered_sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"ADT\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized ADT values,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the ADT-derived size factor for each cell in the (QC-filtered) dataset.\n     * This is available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sf_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sf_buffer.length, \"Float64Array\", this.#cache, \"centered_sf_buffer\");\n            scran.centerSizeFactors(this.#cache.sf_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n        var block = this.#filter.fetchFilteredBlock();\n\n        var buffer = this.#cache.sf_buffer;\n        if (buffer.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.remove_bias - Whether to remove composition bias between cell subpopulations.\n     * This is done by clustering cells and computing median-based size factors between the average pseudo-cells for each cluster.\n     * Users can set this to `false` to speed up the compute.\n     * @param {number} parameters.num_pcs - Number of PCs to use for creating a low-dimensional embedding for clustering.\n     * Only used if `remove_bias = true`.\n     * @param {number} parameters.num_clusters - Number of clusters to create with k-means clustering.\n     * Only used if `remove_bias = true`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        const { num_pcs, num_clusters } = parameters;\n        let remove_bias = true;\n        if (\"remove_bias\" in parameters) {\n            remove_bias = parameters.remove_bias;\n        }\n\n        this.changed = false;\n\n        if (this.#qc.changed || \n            this.#filter.changed || \n            remove_bias !== this.#parameters.remove_bias ||\n            (\n                remove_bias &&\n                (\n                    num_pcs !== this.#parameters.num_pcs || \n                    num_clusters != this.#parameters.num_clusters\n                ) \n            )\n        ) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n                let total_buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"total_buffer\");\n                var block = this.#filter.fetchFilteredBlock();\n                var sf_buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"sf_buffer\");\n\n                if (remove_bias) {\n                    scran.quickAdtSizeFactors(mat, { \n                        totals: total_buffer, \n                        block: block, \n                        buffer: sf_buffer, \n                        numberOfPCs: num_pcs, \n                        numberOfClusters: num_clusters \n                    });\n                } else {\n                    scran.centerSizeFactors(total_buffer, { buffer: sf_buffer, block: block });\n                }\n\n                this.changed = true;\n            }\n\n        } \n\n        this.#parameters.remove_bias = remove_bias;\n        this.#parameters.num_pcs = num_pcs;\n        this.#parameters.num_clusters = num_clusters;\n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n           remove_bias: true,\n           num_pcs: 25,\n           num_clusters: 20\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    let cache = {};\n    let parameters = AdtNormalizationState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\");\n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.num_clusters = phandle.open(\"num_clusters\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n            \n            if (\"size_factors\" in rhandle.children) {\n                let sf = rhandle.open(\"size_factors\", { load: true }).values;\n                cache.sf_buffer = scran.createFloat64WasmArray(sf.length);\n                cache.sf_buffer.set(sf);\n            }\n\n            output = new AdtNormalizationState(qc, filter, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.sf_buffer);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtNormalizationState(qc, filter, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized ADT matrix,\n     * available after running {@linkcode AdtPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = AdtPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new AdtPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new AdtPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * Results of computing per-cell ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellAdtQcMetricsResults.html) for details.\n *\n * @external PerCellAdtQcMetricsResults\n */\n\n/**\n * Suggested filters for the ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestAdtQcFiltersResults.html) for details.\n *\n * @external SuggestAdtQcFiltersResults\n */\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellAdtQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellAdtQcMetrics)\n * and [`suggestAdtQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestAdtQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"ADT\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestAdtQcFiltersResults} Result of filtering on the ADT-derived QC metrics.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellAdtQcMetricsResults} ADT-derived QC metrics,\n     * available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            automatic: true,\n            tag_id_column: null,\n            igg_prefix: \"IgG\",\n            nmads: 3,\n            min_detected_drop: 0.1\n        };\n    }\n\n    static configureFeatureParameters(lower_igg, annotations) {\n        let counter = val => {\n            let n = 0;\n            val.forEach(x => {\n                if (x.toLowerCase().startsWith(lower_igg)) {\n                    n++;\n                }\n            });\n            return n;\n        };\n\n        let best_key = null;\n        let best = 0;\n\n        let rn = annotations.rowNames();\n        if (rn !== null) {\n            best = counter(rn);\n        }\n\n        for (const key of annotations.columnNames()) {\n            let latest = counter(annotations.column(key));\n            if (latest > best) {\n                best_key = key;\n                best = latest;\n            }\n        }\n\n        return best_key;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * \n     * @param {object} parameters - Parameter object, equivalent to the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotations. \n     * Specifically, `tag_id_column` is set to the column with the most matches to `igg_prefix`.\n     * @param {?(string|number)} parameters.tag_id_column - Name or index of the column of the feature annotations that contains the tag identifiers.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.igg_prefix - Prefix of the identifiers for isotype controls.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * @param {number} parameters.min_detected_drop - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { igg_prefix, nmads, min_detected_drop } = parameters;\n        this.changed = false;\n\n        let automatic;\n        let tag_id_column; \n        if (\"automatic\" in parameters) {\n            automatic = parameters.automatic;\n            tag_id_column = parameters.tag_id_column;\n        } else {\n            automatic = true;\n            tag_id_column = null;\n        }\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            igg_prefix !== this.#parameters.igg_prefix ||\n            (!automatic && tag_id_column !== this.#parameters.tag_id_column)\n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var tag_info = this.#inputs.fetchFeatureAnnotations()[\"ADT\"];\n                var subsets = utils.allocateCachedArray(tag_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (igg_prefix !== null) {\n                    var lower_igg = igg_prefix.toLowerCase();\n                    let key = tag_id_column;\n                    if (automatic) {\n                        key = AdtQualityControlState.configureFeatureParameters(lower_igg, tag_info);\n                    }\n\n                    let val = (key == null ? tag_info.rowNames() : tag_info.column(key));\n                    if (val !== null) {\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => { \n                            if (x.toLowerCase().startsWith(lower_igg)) {\n                                sub_arr[i] = 1;                        \n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"ADT\");\n                this.#cache.metrics = scran.perCellAdtQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.tag_id_column = tag_id_column;\n        this.#parameters.igg_prefix = igg_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads || min_detected_drop !== this.#parameters.min_detected_drop) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestAdtQcFilters(this.#cache.metrics, { numberOfMADs: nmads, minDetectedDrop: min_detected_drop, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n            this.#parameters.min_detected_drop = min_detected_drop;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = AdtQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.igg_prefix = phandle.open(\"igg_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n        parameters.min_detected_drop = phandle.open(\"min_detected_drop\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellAdtQcMetricsResults(detected.length, 1);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n                let igg_total = mhandle.open(\"igg_total\", { load: true }).values;\n                cache.metrics.subsetTotals(0, { fillable: true }).set(igg_total);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n                let thresholds_igg_total = thandle.open(\"igg_total\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestAdtQcFiltersResults(1, thresholds_detected.length);\n                cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n                cache.filters.thresholdsSubsetTotals(0, { fillable: true }).set(thresholds_igg_total);\n            }\n\n            output = new AdtQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the [`mnnCorrect`](https://kanaverse.github.io/scran.js/global.html#mnnCorrect) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the batch-corrected embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode BatchCorrectionState#compute compute}.\n     */\n    fetchCorrected() {\n        return this.#cache.corrected;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfCells() {\n        return this.#combined.fetchNumberOfCells();\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#combined.fetchNumberOfDimensions();\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `batch_correction` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * If `\"mnn\"`, it is recommended that upstream PCA steps (i.e., {@linkplain RnaPcaState} and {@linkplain AdtPcaState}) use `block_method = \"weight\"`.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use during MNN correction.\n     * @param {boolean} parameters.approximate - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { method, num_neighbors, approximate} = parameters;\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (method == \"mnn\" && block !== null);\n\n        if (this.changed || method !== this.#parameters.method || num_neighbors !== this.#parameters.num_neighbors || approximate !== this.#parameters.approximate) { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchCombined();\n                let corrected = utils.allocateCachedArray(pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs, block, { \n                    k: num_neighbors, \n                    buffer: corrected, \n                    numberOfCells: this.#combined.fetchNumberOfCells(), \n                    numberOfDims: this.#combined.fetchNumberOfDimensions(), \n                    approximate: approximate \n                });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                this.#cache.corrected = this.#combined.fetchCombined().view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters.method = method;\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, combined) {\n    let cache = {};\n    let parameters = BatchCorrectionState.defaults();\n    let output;\n    \n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.method = phandle.open(\"method\", { load: true }).values[0];\n        parameters.num_neighbors = phandle.open(\"num_neighbors\", { load: true }).values[0];\n        parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"corrected\" in rhandle.children) {\n                let corrected = rhandle.open(\"corrected\", { load: true }).values;\n                cache.corrected = scran.createFloat64WasmArray(corrected.length);\n                cache.corrected.set(corrected);\n            } else {\n                // Creating a view from the upstream combined state.\n                let pcs = combined.fetchCombined();\n                cache.corrected = pcs.view();\n            }\n\n            output = new BatchCorrectionState(filter, combined, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.corrected);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        let ghandle = handle.open(\"pca\");\n\n        let rhandle = ghandle.open(\"results\");\n        if (\"corrected\" in rhandle.children) {\n            let corrected = rhandle.open(\"corrected\", { load: true }).values;\n            let corbuffer = utils.allocateCachedArray(corrected.length, \"Float64Array\", cache, \"corrected\");\n            corbuffer.set(corrected);\n        } else {\n            cache.corrected = combined.fetchCombined().view();\n        }\n\n        output = new BatchCorrectionState(filter, combined, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as rna_qc_module from \"./rna_quality_control.js\";\nimport * as adt_qc_module from \"./adt_quality_control.js\";\nimport * as crispr_qc_module from \"./crispr_quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction find_usable_upstream_states(qc_states, in_use) {\n    let tmp = utils.findValidUpstreamStates(qc_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (in_use[k]) {\n            to_use.push(qc_states[k]);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells,\n * based on metrics and thresholds computed in {@linkplain RnaQualityControlState} and friends.\n * It wraps the [`filterCells`](https://kanaverse.github.io/scran.js/global.html#filterCells) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * For multi-modal datasets, this can combine quality calls from all valid modalities; \n * a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        if (!(qc_states.RNA instanceof rna_qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc_states.RNA' should be a RnaQualityControlState object\");\n        }\n        if (!(qc_states.ADT instanceof adt_qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc_states.ADT' should be a AdtQualityControlState object\");\n        }\n        if (!(qc_states.CRISPR instanceof crispr_qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc_states.CRISPR' should be a CrisprQualityControlState object\");\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing the filtered and normalized matrices for all modalities,\n     * available after running {@linkcode CellFilteringState#compute compute}.\n     */\n    fetchFilteredMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Int32WasmArray} Array of length equal to the number of cells after filtering, \n     * containing the block assignment for each cell.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    /**\n     * @return {?Uint8WasmArray} Combined discard vector, i.e., an array of length equal to the number of cells in the dataset,\n     * indicating whether each cell should be removed.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null`, if no upstream filtering steps were performed.\n     */\n    fetchDiscards() {\n        if (\"discard_buffer\" in this.#cache) {\n            return this.#cache.discard_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n\n        let inputs = this.#inputs.fetchCountMatrix();\n        for (const a of inputs.available()) {\n            let src = inputs.get(a);\n\n            let sub;\n            if (\"discard_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.discard_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"discard_buffer\" in this.#cache) {\n                // Filtering on the block. Might as well force a load of the\n                // matrix, it'll be needed once we have the blocks anyway.\n                let filtered_ncols = this.fetchFilteredMatrix().numberOfColumns();\n                let bcache = utils.allocateCachedArray(filtered_ncols, \"Int32Array\", this.#cache, \"block_buffer\");\n                scran.filterBlock(block, this.#cache.discard_buffer, { buffer: bcache });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.use_rna - Whether to use the RNA-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_adt - Whether to use the ADT-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_crispr - Whether to use the CRISPR-derived QC metrics for filtering.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { use_rna, use_adt, use_crispr } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        if (this.#parameters.use_rna !== use_rna || this.#parameters.use_adt !== use_adt || this.#parameters.use_crispr !== use_crispr) {\n            this.#parameters.use_rna = use_rna;\n            this.#parameters.use_adt = use_adt;\n            this.#parameters.use_crispr = use_crispr;\n            this.changed = true;\n        }\n\n        let to_use = find_usable_upstream_states(this.#qc_states, { RNA: use_rna, ADT: use_adt, CRISPR: use_crispr });\n        if (!this.changed) {\n            for (const u of to_use) {\n                if (u.changed) {\n                    this.changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.changed) {\n            if (to_use.length > 0) {\n                let first = to_use[0].fetchDiscards();\n\n                if (to_use.length > 1) {\n                    // A discard signal in any modality causes the cell to be removed. \n                    let disc_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"discard_buffer\");\n                    disc_buffer.fill(0);\n\n                    let disc_arr = disc_buffer.array();\n                    for (const u of to_use) {\n                        u.fetchDiscards().forEach((y, i) => { disc_arr[i] |= y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    utils.freeCache(this.#cache.discard_buffer);\n                    this.#cache.discard_buffer = first.view();\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.discard_buffer);\n                delete this.#cache.discard_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n    }\n\n    static defaults() {\n        return {\n            use_rna: true,\n            use_adt: true,\n            use_crispr: true\n        };\n    }\n\n    /**\n     * Apply the same filter to an array of data for each cell in the unfiltered dataset.\n     * This is typically used to filter the columns of {@linkcode InputsState#fetchCellAnnotations InputsState.fetchCellAnnotations} for downstream use.\n     * (See the {@linkcode CellFilteringState#undoFilter undoFilter} method for the reverse operation.)\n     * Any calls to this method should be done after running {@linkcode CellFilteringState#compute compute}.\n     *\n     * @param {Array|TypedArray} Any array-like object of length equal to the number of cells in the unfiltered dataset.\n     * \n     * @return {Array|TypedArray} An array-like object of the same type as `x`,\n     * where all elements corresponding to low-quality cells have been discarded.\n     * This will have number of columns equal to that of {@linkcode CellFilteringState#fetchFilteredMatrix fetchFilteredMatrix}.\n     */\n    applyFilter(x) {\n        let expect_len = this.#inputs.fetchCountMatrix().numberOfColumns();\n        if (expect_len != x.length) {\n            throw new Error(\"length of 'x' should be equal to the number of cells in the unfiltered dataset\");\n        }\n\n        if (!(\"discard_buffer\" in this.#cache)) {\n            return x.slice(); // making a copy.\n        } else {\n            let discard = this.#cache.discard_buffer.array();\n            return x.filter((y, i) => !discard[i]);\n        }\n    }\n\n    /**\n     * Undo the effect of filtering on an array of column indices on the filtered matrix, so that they now refer to column indices on the unfiltered matrix.\n     * This is primarily useful for adjusting indices from downstream steps like {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices}.\n     * The output of this function can be combined with {@linkcode InputsState#undoSubset InputsState.undoSubset} to obtain column indices on the original matrix,\n     * which can be used in other contexts, e.g., like {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the unfiltered matrix.\n     */\n    undoFilter(indices) {\n        let max_index = this.fetchFilteredMatrix().numberOfColumns();\n        for (const x of indices) {\n            if (x < 0 || x >= max_index) {\n                throw new Error(\"entries of 'indices' should be less than the number of cells in the filtered dataset\");\n            }\n        }\n\n        if (!('discard_buffer' in this.#cache)) {\n            return;\n        }\n\n        let keep = [];\n        this.#cache.discard_buffer.forEach((x, i) => {\n            if (x == 0) {\n                keep.push(i);\n            }\n        });\n\n        indices.forEach((x, i) => {\n            indices[i] = keep[x];\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, qc_states) {\n    let parameters = CellFilteringState.defaults();\n    let cache = {};\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            if (\"parameters\" in ghandle.children) {\n                let phandle = ghandle.open(\"parameters\");\n                if (\"use_rna\" in phandle.children) {\n                    parameters.use_rna = phandle.open(\"use_rna\", { load: true }).values[0] > 0;\n                    parameters.use_adt = phandle.open(\"use_adt\", { load: true }).values[0] > 0;\n                    parameters.use_crispr = phandle.open(\"use_crispr\", { load: true }).values[0] > 0;\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"discards\" in rhandle.children) {\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n            }\n        } \n\n        if (!(\"discard_buffer\" in cache)) {\n            let to_use = find_usable_upstream_states(qc_states, { RNA: parameters.use_rna, ADT: parameters.use_adt, CRISPR: parameters.use_crispr });\n\n            if (to_use.length == 1) {\n                // We figure out which upstream QC state contains the discard vector\n                // and create a view on it so that our discard_buffer checks work properly.\n                // (v1 and earlier also implicitly falls in this category.)\n                cache.discard_buffer = to_use[0].fetchDiscards().view();\n            } else if (to_use.length == 0) {\n                // No-op; we don't need to define discard_buffer.\n                ;\n            } else {\n                throw new Error(\"no more than one upstream QC state should be valid if 'discards' is not available\");\n            }\n        }\n\n        output = new CellFilteringState(inputs, qc_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.discard_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings from {@linkplain KmeansClusterState} and {@linkplain SnnGraphClusterState}, respectively.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode ChooseClusteringState#compute compute}.\n     */\n    fetchClusters() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClusters();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClusters();\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - Clustering method to use, either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { method } = parameters;\n        this.changed = true;\n        \n        if (method == this.#parameters.method) {\n            if (method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters.method = method;\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, snn, kmeans) {\n    let ghandle = handle.open(\"choose_clustering\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            method: phandle.open(\"method\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    return new ChooseClusteringState(snn, kmeans, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_pca_module from \"./rna_pca.js\";\nimport * as adt_pca_module from \"./adt_pca.js\";\nimport * as crispr_pca_module from \"./crispr_pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\nfunction find_nonzero_upstream_states(pca_states, weights) {\n    let tmp = utils.findValidUpstreamStates(pca_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (weights[k] > 0) {\n            to_use.push(k);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the [`scaleByNeighbors`](https://kanaverse.github.io/scran.js/global.html#scaleByNeighbors) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        if (!(pca_states.RNA instanceof rna_pca_module.RnaPcaState)) {\n            throw new Error(\"'pca_states.RNA' should be an RnaPcaState object\");\n        }\n        if (!(pca_states.ADT instanceof adt_pca_module.AdtPcaState)) {\n            throw new Error(\"'pca_states.ADT' should be an AdtPcaState object\");\n        }\n        if (!(pca_states.CRISPR instanceof crispr_pca_module.CrisprPcaState)) {\n            throw new Error(\"'pca_states.CRISPR' should be an CrisprPcaState object\");\n        }\n        this.#pca_states = pca_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the combined embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchCombined() {\n        return this.#cache.combined_buffer;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfCells() {\n        return this.#cache.num_cells;\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#cache.total_dims;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return { \n            rna_weight: 1,\n            adt_weight: 1,\n            crispr_weight: 0,\n            approximate: true\n        };\n    }\n\n    static createPcsView(cache, upstream) {\n        utils.freeCache(cache.combined_buffer);\n        cache.combined_buffer = upstream.principalComponents({ copy: \"view\" }).view();\n        cache.num_cells = upstream.numberOfCells();\n        cache.total_dims = upstream.numberOfPCs();\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.rna_weight - Relative weight of the RNA embeddings.\n     * @param {number} parameters.adt_weight - Relative weight of the ADT embeddings.\n     * @param {number} parameters.crispr_weight - Relative weight of the CRISPR embeddings.\n     * @param {boolean} parameters.approximate - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { rna_weight, adt_weight, crispr_weight, approximate } = parameters;\n        this.changed = false;\n\n        for (const v of Object.values(this.#pca_states)) {\n            if (v.changed) {\n                this.changed = true;\n                break;\n            }\n        }\n\n        if (approximate !== this.#parameters.approximate) {\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        if (rna_weight !== this.#parameters.rna_weight || adt_weight !== this.#parameters.adt_weight || crispr_weight !== this.#parameters.crispr_weight) {\n            this.#parameters.rna_weight = rna_weight;\n            this.#parameters.adt_weight = adt_weight;\n            this.#parameters.crispr_weight = crispr_weight;\n            this.changed = true;\n        }\n\n        if (this.changed) { \n            const weights = { RNA: rna_weight, ADT: adt_weight, CRISPR: crispr_weight };\n            let to_use = find_nonzero_upstream_states(this.#pca_states, weights);\n\n            if (to_use.length > 1) {\n                let weight_arr = to_use.map(x => weights[x]);\n                let collected = [];\n                let total = 0;\n                let ncells = null;\n\n                for (const k of to_use) {\n                    let curpcs = this.#pca_states[k].fetchPCs();\n                    collected.push(curpcs.principalComponents({ copy: \"view\" }));\n                    if (ncells == null) {\n                        ncells = curpcs.numberOfCells();\n                    } else if (ncells !== curpcs.numberOfCells()) {\n                        throw new Error(\"number of cells should be consistent across all embeddings\");\n                    }\n                    total += curpcs.numberOfPCs();\n                }\n\n                let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: approximate });\n                this.#cache.num_cells = ncells;\n                this.#cache.total_dims = total;\n\n            } else {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                this.constructor.createPcsView(this.#cache, pcs);\n            }\n        }\n\n        // Updating all parameters anyway. This requires us to take ownership\n        // of 'weights' to avoid pass-by-reference shenanigans.\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca_states) {\n    let cache = {};\n    let parameters = CombineEmbeddingsState.defaults();\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            {\n                let phandle = ghandle.open(\"parameters\");\n                parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n                if ('weights' in phandle.children) { // v2.0\n                    let whandle = phandle.open(\"weights\");\n                    if (\"RNA\" in whandle.children) {\n                        parameters.rna_weight = whandle.open(\"RNA\", { load: true }).values[0];\n                    }\n                    if (\"ADT\" in whandle.children) {\n                        parameters.adt_weight = whandle.open(\"ADT\", { load: true }).values[0];\n                    }\n                    if (\"CRISPR\" in whandle.children) {\n                        parameters.crispr_weight = whandle.open(\"CRISPR\", { load: true }).values[0];\n                    }\n                } else {\n                    parameters.rna_weight = phandle.open(\"rna_weight\", { load: true }).values[0];\n                    parameters.adt_weight = phandle.open(\"adt_weight\", { load: true }).values[0];\n                    parameters.crispr_weight = phandle.open(\"crispr_weight\", { load: true }).values[0];\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"combined\" in rhandle.children) {\n                let phandle = rhandle.open(\"combined\", { load: true });\n                cache.num_cells = phandle.shape[0];\n                cache.total_dims = phandle.shape[1];\n\n                let vals = phandle.values;\n                cache.combined_buffer = scran.createFloat64WasmArray(vals.length);\n                cache.combined_buffer.set(vals);\n            }\n        }\n\n        if (!(\"combined_buffer\" in cache)) {\n            // This only happens if there was only one upstream PCA state; in which case, \n            // we figure out which upstream PCA state contains the PC vector\n            // and create a view on it so that our fetchPCs() works properly.\n            // (v1 and earlier also implicitly falls in this category.)\n            const weights = { RNA: parameters.rna_weight, ADT: parameters.adt_weight, CRISPR: parameters.crispr_weight };\n            let to_use = find_nonzero_upstream_states(pca_states, weights);\n\n            if (to_use.length != 1) {\n                throw new Error(\"only one upstream PCA state should be valid with non-zero weight if 'combined' is not available\");\n            }\n\n            let pcs = pca_states[to_use[0]].fetchPCs();\n            CombineEmbeddingsState.createPcsView(cache, pcs);\n        }\n\n        output = new CombineEmbeddingsState(pca_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.combined_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./crispr_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"crispr_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered CRISPR count matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc' should be a CrisprQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.centered_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized CRISPR abundances,\n     * available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the CRISPR-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"CRISPR\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n                this.changed = true;\n            }\n        } \n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        let rhandle = ghandle.createGroup(\"results\"); \n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new CrisprNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"crispr_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise CRISPR abundance data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm' should be a CrisprNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized CRISPR abundance matrix,\n     * available after running {@linkcode CrisprPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = CrisprPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new CrisprPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new CrisprPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"crispr_quality_control\";\n\n/**\n * Results of computing per-cell CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellCrisprQcMetricsResults.html) for details.\n *\n * @external PerCellCrisprQcMetricsResults\n */\n\n/**\n * Suggested filters for the CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestCrisprQcFiltersResults.html) for details.\n *\n * @external SuggestCrisprQcFiltersResults\n */\n\n/**\n * This step applies quality control on the CRISPR guide count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellCrisprQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellCrisprQcMetrics)\n * and [`suggestCrisprQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestCrisprQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestCrisprQcFiltersResults} Result of filtering on the CRISPR-derived QC metrics.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellCrisprQcMetricsResults} CRISPR-derived QC metrics,\n     * available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            nmads: 3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold on the maximum count. \n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { nmads } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var mat = this.#inputs.fetchCountMatrix().get(\"CRISPR\");\n                this.#cache.metrics = scran.perCellCrisprQcMetrics(mat);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestCrisprQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = CrisprQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellCrisprQcMetricsResults(detected.length);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n\n                let max_prop = mhandle.open(\"max_proportion\", { load: true }).values;\n                cache.metrics.maxProportions({ fillable: true }).set(max_prop);\n\n                let max_index = mhandle.open(\"max_index\", { load: true }).values;\n                cache.metrics.maxIndex({ fillable: true }).set(max_index);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_max_count = thandle.open(\"max_count\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestCrisprQcFiltersResults(thresholds_max_count.length);\n                cache.filters.thresholdsMaxCount({ fillable: true }).set(thresholds_max_count);\n            }\n\n            output = new CrisprQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback if the results aren't available. \n        output = new CrisprQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\n\n/**\n * Results of per-gene variance modelling,\n * see [here](https://kanaverse.github.io/scran.js/ModelGeneVarResults.html) for details.\n *\n * @external ModelGeneVarResults\n */\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the [`modelGeneVar`](https://kanaverse.github.io/scran.js/global.html#modelGeneVar) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:ModelGeneVarResults} Variance modelling results,\n     * available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.results;\n    }\n\n    /**\n     * @return {Float64Array} Array of length equal to the number of genes,\n     * containing the sorted residuals after fitting a mean-dependent trend to the variances.\n     * Available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n \n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { span } = parameters;\n        this.changed = false;\n        \n        if (this.#norm.changed || span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            if (this.valid()) {\n                let mat = this.#norm.fetchNormalizedMatrix();\n                let block = this.#filter.fetchFilteredBlock();\n                this.#cache.results = scran.modelGeneVar(mat, { span: span, block: block });\n\n                this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n                this.#cache.sorted_residuals.sort();\n\n                this.changed = true;\n            }\n\n            this.#parameters.span = span;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, permuter, filter, norm) {\n    let ghandle = handle.open(\"feature_selection\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            span: phandle.open(\"span\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"means\" in rhandle.children) {\n            // Possibly permuting it to match the new permutation order;\n            // see 'unserialize' in 'inputs.js'.\n            let reloaded = {};\n            for (const key of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n                let value = rhandle.open(key, { load: true }).values;\n                reloaded[key] = permuter(value);\n            }\n\n            cache.results = scran.emptyModelGeneVarResults(reloaded.means.length, 1);\n            cache.results.means({ fillable: true }).set(reloaded.means);\n            cache.results.variances({ fillable: true }).set(reloaded.vars);\n            cache.results.fitted({ fillable: true }).set(reloaded.fitted);\n            cache.results.residuals({ fillable: true }).set(reloaded.resids);\n\n            cache.sorted_residuals = cache.results.residuals({ copy: true });\n            cache.sorted_residuals.sort();\n        }\n    }\n\n    return new FeatureSelectionState(filter, norm, parameters, cache);\n}\n\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\n/**\n * This step performs k-means clustering on the PCs, \n * wrapping the [`clusterKmeans`](https://kanaverse.github.io/scran.js/global.html#clusterKmeans) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode KmeansClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchCorrected();\n                this.#cache.raw = scran.clusterKmeans(pcs, k, { \n                    numberOfDims: this.#correct.fetchNumberOfDimensions(),\n                    numberOfCells: this.#correct.fetchNumberOfCells(),\n                    initMethod: \"pca-part\" \n                });\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let parameters = {\n        k: 10\n    };\n    let cache = {};\n\n    // Protect against old analysis states that don't have kmeans_cluster.\n    if (\"kmeans_cluster\" in handle.children) {\n        let ghandle = handle.open(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.k = phandle.open(\"k\", { load: true }).values[0];\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            if (\"clusters\" in rhandle.children) {\n                let clusters = rhandle.open(\"clusters\", { load: true }).values;\n                cache.raw = scran.emptyClusterKmeansResults(clusters.length, parameters.k, pca.fetchNumberOfDimensions());\n                cache.raw.clusters({ fillable: true }).set(clusters);\n            }\n        }\n    }\n\n    return new KmeansClusterState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * Results of marker detection,\n * see [here](https://www.kanaverse.github.io/scran.js/ScoreMarkersResults.html) for details.\n *\n * @external ScoreMarkersResults\n */\n\n/*********************\n ***** Internals *****\n *********************/\n\nfunction _free_results(cache) {\n    for (const v of Object.values(cache.raw)) {\n        utils.freeCache(v);\n    }\n    cache.raw = {};\n    markers.freeVersusResults(cache.versus);\n    delete cache.versus;\n}\n\nfunction _computeVersus(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n    let cache_info = markers.locateVersusCache(left, right, cache);\n    let left_index = (cache_info.left_small ? 0 : 1);\n    let right_index = (cache_info.left_small ? 1 : 0);\n\n    if (cache_info.run) {\n        let new_clusters = [];\n        let keep = [];\n        let leftfound = false, rightfound = false;\n        clusters.forEach((x, i) => {\n            if (x == left) {\n                new_clusters.push(left_index);\n                keep.push(i);\n                leftfound = true;\n            } else if (x == right) {\n                new_clusters.push(right_index);\n                keep.push(i);\n                rightfound = true;\n            }\n        });\n\n        if (!leftfound || !rightfound) {\n            throw new Error(\"non-zero entries should be present for both requested clusters in versus mode\");\n        }\n\n        markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n    }\n\n    return { \n        results: cache_info.cached,\n        left: left_index,\n        right: right_index\n    };\n}\n\n/*****************\n ***** State *****\n *****************/\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * The clustering is obtained from the upstream {@linkplain ChooseClusteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        _free_results(this.#cache);\n    }\n\n    /**\n     * Obtain the marker detection results for all modalities.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object where each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all clusters.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * Parameters used to compute the results.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `marker_detection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.lfc_threshold - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} parameters.compute_auc - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated with new results.\n     */\n    compute(parameters) {\n        let { lfc_threshold, compute_auc } = parameters;\n        this.changed = false;\n        let changed_params = (lfc_threshold !== this.#parameters.lfc_threshold || compute_auc !== this.#parameters.compute_auc);\n        \n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (this.#choice.changed || v.changed || changed_params) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClusters();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters.lfc_threshold = lfc_threshold;\n        this.#parameters.compute_auc = compute_auc;\n        if (this.changed) {\n            markers.freeVersusResults(this.#cache.versus);\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode MarkerDetectionCore#compute compute}.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    // Soft-deprecated.\n    static computeVersusCustom(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n        return computeVersus(left, right, matrices, clusters, { cache, block, lfc_threshold, compute_auc });\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two clusters for more detailed examination of the differences between them.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @param {number} left - Index of one cluster in which to find upregulated markers.\n     * @param {number} right - Index of another cluster to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` cluster in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` cluster in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        var clusters = this.#choice.fetchClusters();\n        var block = this.#filter.fetchFilteredBlock();\n\n        // No need to free this afterwards; we don't own the normalized matrices anyway.\n        let matrices = new scran.MultiMatrix;\n        for (const [modality, state] of Object.entries(this.#norm_states)) {\n            if (!state.valid()) {\n                continue;\n            }\n            matrices.add(modality, state.fetchNormalizedMatrix());\n        }\n\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n\n        return _computeVersus(left, right, matrices, clusters, { \n            cache: this.#cache.versus, \n            block: block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**********************\n ***** Standalone *****\n **********************/\n\n/**\n * Standalone version of {@linkplain MarkerDetectionState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices, groups and blocking factor to compute the various marker statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed MarkerDetectionStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class MarkerDetectionStandalone {\n    #matrices;\n\n    #groups;\n    #group_levels;\n    #block;\n    #block_levels;\n\n    #cache;\n    #parameters;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {Array|TypedArray} groups - Array of length equal to the number of columns in any value of `normalized`, containing the group assignments for each column. \n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, groups, { block = null } = {}) {\n        // Checking dimensions.\n        let N = groups.length;\n\n        for (const k of normalized.available()) {\n            let v = normalized.get(k);\n            if (v.numberOfColumns() != N) {\n                throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n            }\n        }\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as 'groups' if not null\");\n            }\n        }\n\n        let arrays = [ groups ];\n        if (block !== null) {\n            arrays.push(block);\n        }\n        let dump = utils.subsetInvalidFactors(arrays);\n\n        // Maybe taking a subset to eliminate invalid entries.\n        let new_matrices;\n        if (dump.retain !== null) {\n            new_matrices = new scran.MultiMatrix;\n            let temp = scran.createInt32WasmArray(dump.retain.length);\n            try {\n                temp.set(dump.retain);\n                for (const k of normalized.available()) {\n                    new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                }\n            } catch (e) {\n                new_matrices.free();\n                throw e;\n            } finally {\n                scran.free(temp);\n            }\n        } else {\n            new_matrices = normalized.clone();\n        }\n\n        this.#matrices = new_matrices;\n        this.#groups = dump.arrays[0].ids;\n        this.#group_levels = dump.arrays[0].levels;\n\n        if (block !== null) {\n            this.#block = dump.arrays[1].ids;\n            this.#block_levels = dump.arrays[1].levels;\n        } else {\n            this.#block = null;\n            this.#block_levels = null;\n        }\n\n        this.#cache = { raw: {}, init: true };\n        this.#parameters = MarkerDetectionState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#groups);\n        scran.free(this.#block);\n        scran.free(this.#matrices);\n        _free_results(this.#cache);\n    }\n\n    /**\n     * @return {object} Marker detection results for the all modalities.\n     * Each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all groups.\n     * This is available after running {@linkcode MarkerDetectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the grouping factor.\n     * Group indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchGroupLevels({ copy = true } = {}) {\n        let ret = this.#group_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#matrices;\n    }\n\n    _peekGroups() {\n        return this.#groups;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode MarkerDetectionState#defaults MarkerDetectionState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode MarkerDetectionState#compute MarkerDetectionState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     */\n    setParameters(parameters) {\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            // Removing existing results, as they are now invalid.\n            _free_results(this.#cache);\n        }\n        this.#parameters = { ...parameters };\n        return;\n    }\n\n    /**\n     * Compute markers for all groups.\n     *\n     * @return The state is updated with new results.\n     */\n    computeAll() {\n        let { lfc_threshold, compute_auc } = this.#parameters;\n        for (const k of this.#matrices.available()) {\n            var mat = this.#matrices.get(k);\n            utils.freeCache(this.#cache.raw[k]);\n            this.#cache.raw[k] = scran.scoreMarkers(mat, this.#groups, { block: this.#block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        }\n        return;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two groups, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {number} left - Index of one group in which to find upregulated markers.\n     * @param {number} right - Index of another group to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two groups.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` group in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` group in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n        return _computeVersus(left, right, this.#matrices, this.#groups, { \n            cache: this.#cache.versus, \n            block: this.#block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction fill_results(stats, num_blocks) {\n    let keys = Object.keys(stats);\n    let first = stats[keys[0]];\n    let ngenes = first.means.length;\n    let object = scran.emptyScoreMarkersResults(ngenes, keys.length, num_blocks, { computeAuc: (\"auc\" in first) });\n\n    for (const k of keys) {\n        let i = Number(k);\n        let vals = stats[k];\n        object.means(i, { fillable: true }).set(vals.means);\n        object.detected(i, { fillable: true }).set(vals.detected);\n\n        for (const [s, v] of Object.entries(vals.cohen)) {\n            object.cohen(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.lfc)) {\n            object.lfc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.delta_detected)) {\n            object.deltaDetected(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        if (\"auc\" in vals) {\n            for (const [s, v] of Object.entries(vals.auc)) {\n                object.auc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n            }\n        }\n    }\n\n    return object;\n}\n\nexport function unserialize(handle, permuters, filter, norm_states, choice) {\n    let ghandle = handle.open(\"marker_detection\");\n\n    let parameters = MarkerDetectionState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        if (\"lfc_threshold\" in phandle.children) {\n            parameters.lfc_threshold = phandle.open(\"lfc_threshold\", { load: true }).values[0];\n        }\n        if (\"compute_auc\" in phandle.children) {\n            parameters.compute_auc = phandle.open(\"compute_auc\", { load: true }).values[0] > 0;\n        }\n    }\n\n    // Figure out the number of blocks.\n    let num_blocks = 1;\n    {\n        let filtered = filter.fetchFilteredBlock();\n        if (filtered != null) {\n            filtered.forEach(x => {\n                if (x + 1 > num_blocks) {\n                    num_blocks = x + 1;\n                }\n            });\n        }\n    }\n\n    // Set up the marker detection statistics.\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        cache.raw = {};\n\n        if (\"clusters\" in rhandle.children) { \n            // below v2.0\n            let chandle = rhandle.open(\"clusters\");\n            let clusters = {};\n            for (const cl of Object.keys(chandle.children)) {\n                clusters[Number(cl)] = markers.unserializeGroupStats(chandle.open(cl), permuters[\"RNA\"], { compute_auc: parameters.compute_auc });\n            }\n            cache.raw.RNA = fill_results(clusters, num_blocks);\n        } else {\n            // after v2.0.\n            let chandle = rhandle.open(\"per_cluster\");\n            for (const a of Object.keys(chandle.children)) {\n                let clusters = {};\n                let ahandle = chandle.open(a);\n                for (const cl of Object.keys(ahandle.children)) {\n                    clusters[Number(cl)] = markers.unserializeGroupStats(ahandle.open(cl), permuters[a], { compute_auc: parameters.compute_auc });\n                }\n                cache.raw[a] = fill_results(clusters, num_blocks);\n            }\n        }\n \n    }\n\n    return new MarkerDetectionState(filter, norm_states, choice, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the [`buildNeighborSearchIndex`](https://kanaverse.github.io/scran.js/global.html#buildNeighborSearchIndex) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {BuildNeighborSearchIndexResults} Index for a nearest-neighbor search,\n     * available after running {@linkcode NeighborIndexState#compute compute}.\n     */\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        this.#cache.raw = scran.buildNeighborSearchIndex(this.#correct.fetchCorrected(), { \n            approximate: approximate, \n            numberOfDims: this.#correct.fetchNumberOfDimensions(),\n            numberOfCells: this.#correct.fetchNumberOfCells()\n        });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.approximate - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { approximate } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(approximate);\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let ghandle = handle.open(\"neighbor_index\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            approximate: phandle.open(\"approximate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let cache = {};\n    return new NeighborIndexState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./rna_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"rna_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaNormalizationState {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc' should be a RnaQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sum_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"RNA\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing normalized expression values,\n     * available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the RNA-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"RNA\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new RnaNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"rna_pca\";\n\n/**\n * Results of running PCA on some input matrix,\n * see [here](https://kanaverse.github.io/scran.js/RunPCAResults.html) for details.\n *\n * @external RunPCAResults\n */\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaPcaState { \n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a FeatureSelectionState object\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized gene expression values.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {number} parameters.num_hvgs - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be one of:\n     *\n     * - `\"none\"`, in which case nothing is done using the sample information. \n     * - `\"regress\"`, where linear regression is applied to remove mean differences between samples.\n     * - `\"weight\"`, where samples are weighted so that they contribute equally regardless of the number of cells.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_hvgs, num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#feat.changed || num_hvgs !== this.#parameters.num_hvgs) {\n            if (this.valid()) {\n                choose_hvgs(num_hvgs, this.#feat, this.#cache);\n                this.changed = true;\n            }\n\n            this.#parameters.num_hvgs = num_hvgs;\n        }\n\n        if (this.changed || this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            utils.freeCache(this.#cache.pcs);\n\n            if (this.valid()) {\n                let sub = this.#cache.hvg_buffer;\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                this.#cache.pcs = scran.runPCA(mat, { features: sub, numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResults().residuals({ copy: false });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm, feat) {\n    let ghandle = handle.open(\"rna_pca\" in handle.children ? \"rna_pca\" : \"pca\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters = { \n            num_hvgs: phandle.open(\"num_hvgs\", { load: true }).values[0],\n            num_pcs: phandle.open(\"num_pcs\", { load: true }).values[0]\n        };\n\n        // For back-compatibility.\n        if (\"block_method\" in phandle.children) {\n            parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n            if (parameters.block_method == \"mnn\") {\n                parameters.block_method = \"weight\";\n            }\n        } else {\n            parameters.block_method = \"none\";\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        if (feat.valid()) {\n            choose_hvgs(parameters.num_hvgs, feat, cache);\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"pcs\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n        }\n\n        output = new RnaPcaState(filter, norm, feat, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.hvg_buffer);\n        utils.freeCache(cache.pcs);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as rutils from \"../readers/index.js\";\n\nconst baseUrl = \"https://github.com/kanaverse/kana-special-features/releases/download/v1.0.0\";\n\nexport const step_name = \"rna_quality_control\";\n\n/**\n * Results of computing per-cell RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellRnaQcMetricsResults.html) for details.\n *\n * @external PerCellRnaQcMetricsResults\n */\n\n/**\n * Suggested filters for the RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestRnaQcFiltersResults.html) for details.\n *\n * @external SuggestRnaQcFiltersResults\n */\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellRnaQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellRnaQcMetrics)\n * and [`suggestRnaQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestRnaQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n    #automatic;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#automatic = false;\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        output.species = bioc.CLONE(output.species);\n        return output;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:SuggestRnaQcFiltersResults} Result of filtering on the RNA-derived QC metrics.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {external:PerCellRnaQcMetricsResults} RNA-derived QC metrics.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults () {\n        return {\n            automatic: true,\n            gene_id_column: null,\n            use_reference_mito: true,\n            species: [],\n            gene_id_type: \"ENSEMBL\",\n            mito_prefix: \"mt-\",\n            nmads: 3\n        };\n    }\n\n    static configureFeatureParameters(use_reference_mito, guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Array of strings containing the taxonomy IDs for species where mitochondrial gene lists are available.\n     * @type {Array}\n     */\n    static mitochondriaSpecies = [ \n        \"9606\",  // Mouse\n        \"10090\", // Human\n        \"6239\",  // C. elegans\n        \"10116\", // Rat\n        \"9541\",  // M. fascicularis\n        \"7227\",  // Fly\n        \"7955\",  // Zebrafish\n        \"9598\"   // Chimp\n    ];\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #acquire_reference(species, feature_type) {\n        let output = new Set;\n        let mito_lists = RnaQualityControlState.#mito_lists;\n\n        for (const s of species) {\n            let target = s + \"-mito-\" + feature_type.toLowerCase() + \".txt.gz\";\n            if (!(target in mito_lists)) {\n                let contents = await RnaQualityControlState.#downloadFun(baseUrl + \"/\" + target);\n                let lines = await rutils.readLines2(contents, { compression: \"gz\" });\n                mito_lists[target] = lines;\n            }\n\n            mito_lists[target].forEach(x => { output.add(x); });\n        }\n\n        return output;\n    }\n\n    static #mito_lists = {};\n\n    /**\n     * Flush all cached lists of mitochondrial genes.\n     *\n     * By default, {@linkcode RnaQualityControlState#compute compute} will cache the mitochondrial gene lists in a static member for re-use across {@linkplain RnaQualityControlState} instances.\n     * These cached lists are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        RnaQualityControlState.#mito_lists = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download the reference mitochondrial gene lists.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = RnaQualityControlState.#downloadFun;\n        RnaQualityControlState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If set to `true`, the following logic is applied:\n     *\n     * - If `use_reference_mito = true`, the annotation column that best matches human/mouse Ensembl/symbols is set as `gene_id_column`.\n     *   Based on the identified species and feature type, `species` and `gene_id_type` are also set.\n     * - If `use_reference_mito = false`, the annotation column that best matches human/mouse symbols is set as `gene_id_column`.\n     *\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the feature annotations that contains the gene identifiers for the RNA modality.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {boolean} parameters.use_reference_mito - Whether to use the reference lists of mitochondrial genes.\n     * If `false`, mitochondrial genes are instead identified from their prefix.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species to use to obtain a reference list of mitochondrial genes.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode RnaQualityControlState#mitochondriaSpecies mitochondriaSpecies}).\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Name of the feature type in the reference list of mitochondrial genes.\n     * This can be any one of `\"ENSEMBL\"`, `\"SYMBOL\"`, or `\"ENTREZ\"`.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.mito_prefix - Case-insensitive prefix to use to identify mitochondrial genes from the dataset.\n     * Only used when `use_reference_mito = false`; in such cases, `gene_id_column` should point to symbols.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let { mito_prefix, nmads } = parameters;\n        let automatic;\n        let use_reference_mito;\n        let gene_id_column;\n        let species;\n        let gene_id_type;\n\n        // Some back-compatibility here.\n        if (\"use_reference_mito\" in parameters) {\n            automatic = parameters.automatic;\n            use_reference_mito = parameters.use_reference_mito;\n            gene_id_column = parameters.gene_id_column;\n            species = parameters.species;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            automatic = true;\n            use_reference_mito = parameters.use_mito_default;\n            let def = RnaQualityControlState.defaults();\n            gene_id_column = def.gene_id_column;\n            species = def.species;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            use_reference_mito !== this.#parameters.use_reference_mito || \n            (\n                !automatic && \n                (\n                    gene_id_column !== this.#parameters.gene_id_column || \n                    (!use_reference_mito && mito_prefix !== this.#parameters.mito_prefix) ||\n                    (\n                        use_reference_mito && \n                        (\n                            utils.changedParameters(species, this.#parameters.species) || \n                            gene_id_type !== this.#parameters.gene_id_type\n                        )\n                    )\n                )\n            ) \n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                let gene_id_column2 = gene_id_column;\n                let species2 = species;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let backcomp = RnaQualityControlState.configureFeatureParameters(use_reference_mito, guesses);\n                    gene_id_column2 = backcomp.gene_id_column;\n                    species2 = backcomp.species;\n                    gene_id_type2 = backcomp.gene_id_type;\n                }\n\n                var gene_info = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let val = (gene_id_column2 == null ? gene_info.rowNames() : gene_info.column(gene_id_column2));\n                var subsets = utils.allocateCachedArray(gene_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (val !== null) {\n                    if (use_reference_mito) {\n                        let lists = await this.#acquire_reference(species2, gene_id_type2);\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if (lists.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else if (mito_prefix !== null) {\n                        var lower_mito = mito_prefix.toLowerCase();\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"RNA\");\n                this.#cache.metrics = scran.perCellRnaQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.use_reference_mito = use_reference_mito;\n        this.#parameters.species = bioc.CLONE(species); // avoid pass-by-reference behavior.\n        this.#parameters.gene_id_type = gene_id_type;\n        this.#parameters.mito_prefix = mito_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestRnaQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let ghandle = handle.open(\"rna_quality_control\" in handle.children ? \"rna_quality_control\" : \"quality_control\");\n\n    let parameters = RnaQualityControlState.defaults(); \n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.use_mito_default = phandle.open(\"use_mito_default\", { load: true }).values[0] > 0;\n        parameters.mito_prefix = phandle.open(\"mito_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n    }\n\n    let output;\n    let cache = {};\n    try {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"metrics\" in rhandle.children) { // QC metrics may not be reported if skipped.\n            let mhandle = rhandle.open(\"metrics\");\n            let sums = mhandle.open(\"sums\", { load: true }).values;\n\n            cache.metrics = scran.emptyPerCellRnaQcMetricsResults(sums.length, 1);\n            cache.metrics.sums({ fillable: true }).set(sums);\n\n            let detected = mhandle.open(\"detected\", { load: true }).values;\n            cache.metrics.detected({ fillable: true }).set(detected);\n            let proportions = mhandle.open(\"proportion\", { load: true }).values;\n            cache.metrics.subsetProportions(0, { fillable: true }).set(proportions);\n        }\n\n        if (\"thresholds\" in rhandle.children) { // if skip=true, QC thresholds may not be reported.\n            let discards = rhandle.open(\"discards\", { load: true }).values; \n            cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n            cache.discard_buffer.set(discards);\n\n            let thandle = rhandle.open(\"thresholds\");\n            let thresholds_sums = thandle.open(\"sums\", { load: true }).values;\n            let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n            let thresholds_proportion = thandle.open(\"proportion\", { load: true }).values;\n\n            cache.filters = scran.emptySuggestRnaQcFiltersResults(1, thresholds_sums.length);\n            cache.filters.thresholdsSums({ fillable: true }).set(thresholds_sums);\n            cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n            cache.filters.thresholdsSubsetProportions(0, { fillable: true }).set(thresholds_proportion);\n        }\n\n        output = new RnaQualityControlState(inputs, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.metrics);\n        utils.freeCache(cache.filters)\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\nexport const step_name = \"snn_graph_cluster\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkplain NeighborIndexState}.\n * This wraps [`clusterSNNGraph`](https://kanaverse.github.io/scran.js/global.html#clusterSNNGraph) \n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode SnnGraphClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSNNGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterSNNGraph(this.#cache.graph, {\n            method: algorithm,\n            multiLevelResolution: multilevel_resolution,\n            leidenResolution: leiden_resolution,\n            leidenModularityObjective: true, // avoid problems with unstable interpretation of leidenResolution.\n            walktrapSteps: walktrap_steps\n        });\n        return;\n    }\n\n    static defaults() {\n        return { \n            k: 10,\n            scheme: \"rank\",\n            algorithm: \"multilevel\",\n            multilevel_resolution: 1,\n            leiden_resolution: 1,\n            walktrap_steps: 4\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of nearest neighbors used to construct the graph.\n     * @param {string} parameters.scheme - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {string} parameters.algorithm - Algorithm to use for community detection.\n     * This can be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n     * @param {number} parameters.multilevel_resolution - Resolution of the multi-level community detection.\n     * @param {number} parameters.leiden_resolution - Resolution of the Leiden community detection.\n     * @param {number} parameters.walktrap_steps - Number of merge steps for the Walktrap algorithm.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k, scheme, algorithm, multilevel_resolution, leiden_resolution, walktrap_steps } = parameters;\n        this.changed = false;\n\n        if (this.#index.changed || k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        if (this.changed || scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.#parameters.scheme = scheme;\n            this.changed = true \n        }\n\n        if (this.changed \n            || algorithm !== this.#parameters.algorithm \n            || multilevel_resolution !== this.#parameters.multilevel_resolution \n            || leiden_resolution !== this.#parameters.leiden_resolution \n            || walktrap_steps !== this.#parameters.walktrap_steps \n            || (!this.#valid() && run_me))\n        {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps);\n            } else {\n                delete this.#cache.clusters;\n            }\n\n            this.#parameters.algorithm = algorithm;\n            this.#parameters.multilevel_resolution = multilevel_resolution;\n            this.#parameters.leiden_resolution = leiden_resolution;\n            this.#parameters.walktrap_steps = walktrap_steps;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"snn_graph_cluster\");\n\n    let parameters = SnnGraphClusterState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters.k = phandle.open(\"k\", { load: true }).values[0];\n\n        parameters.scheme = phandle.open(\"scheme\", { load: true }).values[0];\n        if (typeof parameters.scheme !== \"string\") { // because I stuffed up and tried to save a string as an int in v1.0, oops.\n            parameters.scheme = \"rank\";\n        }\n\n        if (\"algorithm\" in phandle.children) {\n            // v3.0\n            parameters.algorithm = phandle.open(\"algorithm\", { load: true }).values[0];\n            parameters.multilevel_resolution = phandle.open(\"multilevel_resolution\", { load: true }).values[0];\n            parameters.leiden_resolution = phandle.open(\"leiden_resolution\", { load: true }).values[0];\n            parameters.walktrap_steps = phandle.open(\"walktrap_steps\", { load: true }).values[0];\n        } else {\n            // v2.0\n            parameters.multilevel_resolution = phandle.open(\"resolution\", { load: true }).values[0];\n        }\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        if (\"clusters\" in rhandle.children) {\n            let clusters = rhandle.open(\"clusters\", { load: true }).values;\n            cache.clusters = scran.emptyClusterSNNGraphResults(clusters.length, 1);\n            cache.clusters.setBest(0); // whatever.\n            cache.clusters.membership({ fillable: true }).set(clusters);\n        }\n    }\n\n    return new SnnGraphClusterState(index, parameters, cache);\n}\n\n\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a t-SNE embedding based on the neighbor index constructed by {@linkplain NeighborIndexState}.\n * This wraps [`runTSNE`](https://kanaverse.github.io/scran.js/global.html#runTSNE)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class TsneState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createTsneWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n        \n            output.iterations = this.#parameters.iterations;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(perplexity, iterations, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            var k = scran.perplexityToNeighbors(perplexity);\n            nn_out = vizutils.computeNeighbors(this.#index, k);\n        }\n\n        let args = {\n            \"perplexity\": perplexity,\n            \"iterations\": iterations,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the t-SNE runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `tsne` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.perplexity - Number specifying the perplexity for the probability calculations.\n     * @param {number} parameters.iterations - Number of iterations to run the algorithm.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return t-SNE coordinates are computed in parallel on a separate worker thread.\n     * A promise is returned that resolves when those calculations are complete.\n     */\n    compute(parameters) {\n        let { perplexity, iterations, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && perplexity === this.#parameters.perplexity);\n        if (same_neighbors && iterations == this.#parameters.iterations) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(perplexity, iterations, animate, !same_neighbors);\n\n        this.#parameters.perplexity = perplexity;\n        this.#parameters.iterations = iterations;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******* Animators *********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.perplexity, this.#parameters.iterations, true, true);\n\n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => {\n                    return {\n                        \"type\": \"tsne_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"tsne\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            perplexity: phandle.open(\"perplexity\", { load: true }).values[0],\n            iterations: phandle.open(\"iterations\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new TsneState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a UMAP embedding based on the neighbor index constructed at {@linkplain NeighborIndexState}.\n * This wraps [`runUMAP`](https://kanaverse.github.io/scran.js/global.html#runUMAP)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class UmapState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createUmapWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n\n            output.iterations = this.#parameters.num_epochs;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(num_neighbors, num_epochs, min_dist, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            nn_out = vizutils.computeNeighbors(this.#index, num_neighbors);\n        }\n\n        let args = {\n            \"num_neighbors\": num_neighbors,\n            \"num_epochs\": num_epochs,\n            \"min_dist\": min_dist,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the UMAP runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `umap` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use to construct the simplicial sets.\n     * @param {number} parameters.num_epochs - Number of epochs to run the algorithm.\n     * @param {number} parameters.min_dist - Number specifying the minimum distance between points.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return UMAP coordinates are computed in parallel on a separate worker thread.\n     * A promise that resolves when the calculations are complete.\n     */\n    compute(parameters) {\n        let { num_neighbors, num_epochs, min_dist, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && this.#parameters.num_neighbors === num_neighbors);\n        if (same_neighbors && num_epochs === this.#parameters.num_epochs && min_dist === this.#parameters.min_dist) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(num_neighbors, num_epochs, min_dist, animate, !same_neighbors);\n\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.num_epochs = num_epochs;\n        this.#parameters.min_dist = min_dist;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.num_neighbors, this.#parameters.num_epochs, this.#parameters.min_dist, true, true);\n      \n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => { \n                    return {\n                        \"type\": \"umap_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"umap\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            num_neighbors: phandle.open(\"num_neighbors\", { load: true }).values[0],\n            num_epochs: phandle.open(\"num_epochs\", { load: true }).values[0],\n            min_dist: phandle.open(\"min_dist\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new UmapState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","export function registerCallback(worker, callback) {\n    worker.onmessage = callback;\n    return;\n}\n\nexport function sendMessage(worker, message, transfer) {\n    worker.postMessage(message, transfer);\n    return;\n}\n\nexport function terminateWorker(worker) {\n    worker.terminate();\n    return;\n}\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    // Just an alias for back-compatibility.\n    scran.free(object);\n    return;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n\nexport async function defaultDownload(url) {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return new Uint8Array(await resp.arrayBuffer());\n}\n\nexport function guessFeatureTypes(genes) {\n    let output = { columns: {} };\n\n    let rn = genes.rowNames();\n    if (rn !== null) {\n        output.row_names = scran.guessFeatures(rn, { forceTaxonomy: true });\n    }\n\n    for (const key of genes.columnNames()) {\n        let curcol = genes.column(key);\n        if (curcol instanceof Array) {\n            output.columns[key] = scran.guessFeatures(genes.column(key), { forceTaxonomy: true });\n        }\n    }\n\n    return output;\n}\n\nexport function subsetInvalidFactors(arrays) {\n    let N = arrays[0].length;\n    let output = { arrays: [], retain: null };\n\n    let invalid = new Uint8Array(N);\n    invalid.fill(0);\n    for (const x of arrays) {\n        let transformed = scran.factorize(x, { action: \"none\", placeholder: -1 });\n        output.arrays.push(transformed);\n        transformed.ids.forEach((y, i) => {\n            if (y == -1) {\n                invalid[i] = 1;\n            }\n        });\n    }\n\n    let num_invalid = 0;\n    invalid.forEach(y => { num_invalid += y; });\n    if (num_invalid == 0) {\n        return output;\n    }\n\n    let retain = new Int32Array(N - num_invalid);\n    {\n        let counter = 0;\n        for (var i = 0; i < N; i++) {\n            if (invalid[i] == 0) {\n                retain[counter] = i;\n                counter++;\n            }\n        }\n    }\n    output.retain = retain;\n\n    for (var i = 0; i < output.arrays.length; i++) {\n        let x = output.arrays[i];\n        let new_ids = scran.subsetBlock(x.ids, retain);\n        let remapping = scran.dropUnusedBlock(new_ids);\n        let new_levels = remapping.map(i => x.levels[i]);\n\n        scran.free(x.ids);\n        x.ids = new_ids;\n        x.levels = new_levels;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\n\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false, compute_auc = true } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = permuter(handle.open(x, { load: true }).values);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (i == \"auc\" && !compute_auc) {\n            continue;\n        }\n\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(rhandle.children)) {\n                current[j] = permuter(rhandle.open(j, { load: true }).values);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\nexport function fillGroupStats(object, i, vals) {\n    object.means(i, { copy: false }).set(vals.means);\n    object.detected(i, { copy: false }).set(vals.detected);\n\n    for (const [s, v] of Object.entries(vals.cohen)) {\n        object.cohen(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.lfc)) {\n        object.lfc(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.delta_detected)) {\n        object.deltaDetected(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    if (\"auc\" in vals) {\n        for (const [s, v] of Object.entries(vals.auc)) {\n            object.auc(i, { summary: summaries2int[s], copy: false }).set(v);\n        }\n    }\n}\n\n/**\n * Report marker results for a given group or cluster, ordered so that the strongest candidate markers appear first.\n *\n * @param {ScoreMarkersResults} results - The marker results object generated by the `scoreMarkers` function in **scran.js**.\n * @param {number} group - Integer specifying the group or cluster of interest.\n * Any number can be used if it was part of the `groups` passed to `scoreMarkers`.\n * @param {string} rankEffect - Summarized effect size to use for ranking markers.\n * This should follow the format of `<effect>-<summary>` where `<effect>` may be `lfc`, `cohen`, `auc` or `delta_detected`,\n * and `<summary>` may be `min`, `mean` or `min-rank`.\n *\n * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rankEffect`.\n * This contains:\n *   - `means`: a Float64Array of length equal to the number of genes, containing the mean expression within the selection.\n *   - `detected`: a Float64Array of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n *   - `lfc`: a Float64Array of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n *   - `delta_detected`: a Float64Array of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n */\nexport function formatMarkerResults(results, group, rankEffect) {\n    if (!rankEffect || rankEffect === undefined) {\n        rankEffect = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        let index = 1;\n        if (rankEffect.match(/-min$/)) {\n            index = 0;\n        } else if (rankEffect.match(/-min-rank$/)) {\n            increasing = true;\n            index = 4;\n        }\n\n        if (rankEffect.match(/^cohen-/)) {\n            ranking = results.cohen(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^lfc-/)) {\n            ranking = results.lfc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: index, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rankEffect + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.means(group, { copy: false }));\n    var stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n\nexport function locateVersusCache(left, right, cache) {\n    let left_small = left < right;\n\n    let bigg = (left_small ? right : left);\n    if (!(bigg in cache)) {\n        cache[bigg] = {};\n    }\n    let biggversus = cache[bigg];\n\n    let smal = (left_small ? left : right); \n    let rerun = !(smal in biggversus);\n    if (rerun) {\n        biggversus[smal] = {};\n    }\n\n    return { \n        cached: biggversus[smal],\n        run: rerun,\n        left_small: left_small\n    };\n}\n\nexport function freeVersusResults(cache) {\n    if (cache) {\n        for (const v of Object.values(cache)) {\n            for (const v2 of Object.values(v)) {\n                for (const m of Object.values(v2)) {\n                    scran.free(m);\n                }\n            }\n        }\n        for (const k of Object.keys(cache)) {\n            delete cache[k];\n        }\n    }\n}\n\nexport function computeVersusResults(matrices, clusters, block, keep, cache, lfc_threshold, compute_auc) {\n    let new_block = null;\n    if (block !== null) {\n        new_block = scran.subsetBlock(block, keep);\n        scran.dropUnusedBlock(new_block);\n    }\n\n    for (const modality of matrices.available()) {\n        let modmat = matrices.get(modality);\n        let sub;\n        try {\n            sub = scran.subsetColumns(modmat, keep);\n            cache[modality] = scran.scoreMarkers(sub, clusters, { block: new_block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        } finally {\n            scran.free(sub);\n        }\n    }\n}\n","import * as utils from \"./general.js\";\n\nexport function subsetSums(qc, filter, mat, cache, name) {\n    let output = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache, name);\n    let discards = filter.fetchDiscards();\n\n    // unsafe, so no more Wasm allocations past this point. \n    let sums = qc.fetchMetrics().sums({ copy: false }); \n\n    if (discards == null) {\n        output.set(sums);\n    } else {\n        let oarr = output.array();\n        var j = 0;\n        discards.forEach((x, i) => {\n            if (!x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                oarr[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as misc from \"./miscellaneous.js\";\n\n/**\n * Compute the length of a vector-like object.\n *\n * For Array and TypedArrays, this just returns the `length` property directly.\n *\n * Custom classes should provide a `_bioconductor_LENGTH` method to describe their length.\n * This method should accept no arguments. \n *\n * @param {*} x - Some vector-like object.\n * @return {number} Length of the object.\n */\nexport function LENGTH(x) {\n    if (\"_bioconductor_LENGTH\" in x) {\n        return x._bioconductor_LENGTH();\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'LENGTH' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    return x.length;\n}\n\n/**\n * Slice a vector-like object.\n *\n * For Array and TypedArrays, this just uses `slice()` or `subarray()`.\n *\n * Custom classes should provide a `_bioconductor_SLICE` method to create a slice.\n * This method should accept the same arguments as `SLICE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object|Array|TypedArray} i - An Array or TypedArray of integer indices specifying the slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A vector-like object, typically of the same class as `x`, containing data for the specified slice.\n *\n * If `allowInPlace = true`, `x` _may_ be modified in place, and the return value _may_ be a reference to `x`. \n */\nexport function SLICE(x, i, { allowView = false } = {}) {\n    if (\"_bioconductor_SLICE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_SLICE(output, i, { allowView });\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'SLICE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    if (i.constructor == Object) {\n        if (allowView && ArrayBuffer.isView(x)) {\n            return x.subarray(i.start, i.end);\n        } else {\n            return x.slice(i.start, i.end);\n        }\n    } else {\n        let output = new x.constructor(i.length);\n        i.forEach((y, j) => {\n            output[j] = x[y];\n        });\n        return output;\n    }\n}\n\n/**\n * Combine multiple vector-like objects.\n *\n * For Array and TypedArrays, the combined array is of a class that avoids information loss.\n *\n * Custom classes should provide a `_bioconductor_COMBINE` method to define the combining operation.\n * This method should accept the same arguments as `COMBINE`.\n *\n * @param {Array} objects - Array of vector-like objects to be combined.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE` method of the first element of `objects`.\n *\n * @return {*} A vector-like object containing the concatenated data from the input objects.\n * - If the first entry of `objects` is an instance of a custom class, the return value should be of the same class.\n * - If all `objects` are TypedArrays of the same class, the return value will be a TypedArray of that class.\n * - If any of the `objects` are Arrays, the return value will be an Array.\n * - If any of the `objects` are 64-bit TypedArrays of different classes, the return value will be an Array.\n * - Otherwise, for any other classes of TypedArrays in `objects`, the return value will be a Float64Array.\n */\nexport function COMBINE(objects) {\n    let x = objects[0];\n    if (\"_bioconductor_COMBINE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_COMBINE(output, objects);\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'COMBINE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    // It is assumed that every 'y' is of some compatible Array-like type as well.\n    let total_LENGTH = 0;\n    let constructor = x.constructor;\n\n    for (const obj of objects) {\n        total_LENGTH += obj.length;\n        constructor = utils.chooseArrayConstructors(constructor, obj.constructor);\n    }\n\n    let output = new constructor(total_LENGTH);\n    let position = 0;\n    for (const obj of objects) {\n        if (\"set\" in output) {\n            output.set(obj, position);\n            position += obj.length;\n        } else {\n            obj.forEach(x => {\n                output[position] = x;\n                position++;\n            });\n        }\n    }\n\n    return output;\n}\n\n/**\n * Clone a vector-like object.\n * \n * For TypedArrays, this just uses `slice()`.\n * For Arrays, this creates a copy and runs `CLONE` on each element in the copy.\n *\n * Custom classes should provide a `_bioconductor_CLONE` method to define the cloning operation.\n * This method should accept the same arguments as `COMBINE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.deepCopy=true] - Whether to create a deep copy.\n * The exact interpretation of `deepCopy=false` is left to each method, but generally speaking, \n * any setter (`$`-marked) functions operating on the copy should not alter `x`.\n *\n * @return {*} A clone of `x`, i.e., the return value and `x` should not compare equal.\n * If `deepCopy=true`, all internal components are also cloned.\n */\nexport function CLONE(x, { deepCopy = true } = {}) {\n    if (x instanceof Object) {\n        let options = { deepCopy };\n        if (\"_bioconductor_CLONE\" in x) {\n            let output = new x.constructor;\n            x._bioconductor_CLONE(output, options);\n            return output;\n        }\n\n        if (utils.isArrayLike(x)) {\n            if (x.constructor == Array) {\n                return x.map(y => CLONE(y, options));\n            } else if (deepCopy) {\n                return x.slice();\n            } else {\n                return x.subarray();\n            }\n        }\n\n        if (x.constructor == Object) {\n            if (deepCopy) {\n                let output = {};\n                for (const [k, v] of Object.entries(x)) {\n                    output[k] = CLONE(v);\n                }\n                return output;\n            } else {\n                return { ...x };\n            }\n        }\n\n        if (x.constructor == Map) {\n            let output = new Map;\n            for (const [k, v] of x) {\n                output.set(k, deepCopy ? CLONE(v) : v);\n            }\n            return output;\n        }\n\n        if (x.constructor == Set) {\n            let output = new Set;\n            for (const k of x) {\n                output.add(deepCopy ? CLONE(k) : k);\n            }\n            return output;\n        }\n\n\n        throw new Error(\"unknown CLONE operation for instance of class '\" + x.constructor.name + \"'\");\n    }\n\n    // Immutable atomics should be all that's left.\n    return x;\n}\n\n/**\n * Split a vector-like object along its length according to the levels of a factor of the same length.\n * This works automatically for all classes for which there is a {@linkcode SLICE} method,\n * but custom classes may also choose to define their own `_bioconductor_SPLIT` method. \n *\n * @param {*} x - Some vector-like object.\n * @param {Array|TypedArray} factor - Array containing the factor to use for splitting.\n * This should have the same length as `x`.\n *\n * Alternatively, the output of {@linkcode presplitFactor} can be supplied.\n *\n * @return {Object} An object containing one key per level of `factor`,\n * where the value is the slice of `x` corresponding to the indices of that level in `factor`.\n */\nexport function SPLIT(x, factor) {\n    if (factor.constructor != Object) {\n        factor = misc.presplitFactor(factor);\n    }\n\n    if (\"_bioconductor_SPLIT\" in x) {\n        return x._bioconductor_SPLIT(factor);\n    }\n\n    let output = {};\n    for (const [k, v] of Object.entries(factor)) {\n        output[k] = SLICE(x, v);\n    }\n\n    return output;\n}\n\n/**\n * Return the number of rows for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_ROWS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of rows.\n */\nexport function NUMBER_OF_ROWS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_ROWS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_ROWS();\n}\n\n/**\n * Return the number of columns for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_COLUMNS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of columns.\n */\nexport function NUMBER_OF_COLUMNS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_COLUMNS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_COLUMNS();\n}\n\n/**\n * Slice a two-dimensional object by its rows and/or columns.\n *\n * Custom classes should provide a `_bioconductor_SLICE_2D` method, accepting the same arguments as this generic but with `x` replaced by an \"empty\" instance of the same class.\n * Each method should then fill the empty instance with the sliced contents of `x`.\n *\n * @param {*} x - Some two-dimensional object.\n * @param {?(Object|Array|TypedArray)} rows - An Array or TypedArray of integer indices specifying the row-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * \n * Alternatively `null`, to indicate that no slicing is to be performed on the rows.\n * @param {?(Object|Array|TypedArray)} columns - An Array or TypedArray of integer indices specifying the column-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n *\n * Alternatively `null`, to indicate that no slicing is to be performed on the columns.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A two-dimensional object, typically of the same class as `x`, containing data for the specified slice.\n */\nexport function SLICE_2D(x, rows, columns, { allowView = false } = {}) {\n    if (!(\"_bioconductor_SLICE_2D\" in x)) {\n        throw new Error(\"no 'SLICE_2D' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by row.\n * Custom classes should provide a `_bioconductor_COMBINE_ROWS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by row.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_ROWS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the row-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_ROWS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_ROWS\" in x)) {\n        throw new Error(\"no 'COMBINE_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_ROWS(output, objects);\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by column.\n * Custom classes should provide a `_bioconductor_COMBINE_COLUMNS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by column.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_COLUMNS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the column-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_COLUMNS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_COLUMNS\" in x)) {\n        throw new Error(\"no 'COMBINE_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_COLUMNS(output, objects);\n    return output;\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * The Annotated class provides a store for arbitrary object-wide metadata.\n * It is intended as a base class for other structures and should not be constructed directly.\n */\nexport class Annotated {\n    /**\n     * @param {Object|Map} metadata - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(metadata) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._metadata = utils.object2map(metadata);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Map} Map containing arbitrary metadata.\n     */\n    metadata() {\n        return this._metadata;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object|Map} value - Object containing the metadata.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Annotated} The Annotated object after replacing the metadata.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setMetadata(value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._metadata = utils.object2map(value);\n        return target;\n    }\n\n    /**\n     * @param {Object} value - Object containing the metadata.\n     * @return {Annotated} A reference to this Annotated object.\n     */\n    $setMetadata(value) {\n        return this.setMetadata(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        output._metadata = cutils.cloneField(this._metadata, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A DataFrame is a collection of equilength vector-like objects as \"columns\".\n * The number of rows in the DataFrame is equal to the length of the columns, where the i-th row consists of the i-th element from each column.\n *\n * This class supports optional row names, which are either `null` or an array of strings of length equal to the number of rows.\n *\n * This class supports empty instances with a non-zero number of rows, which may be useful for piece-wise construction.\n *\n * The vector-like object for each column is expected to have methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * The DataFrame itself defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @augments Annotated\n */\nexport class DataFrame extends ann.Annotated {\n    /**\n     * @param {Object|Map} columns - Object or Map where keys are the column names and the values are equilength vector-like objects.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?number} [options.numberOfRows=null] - Non-negative value specifying the number of rows in the DataFrame.\n     * If `null`, this is automatically determined from the length of the vectors in `columns`, or from the length of `rowNames`.\n     * If non-`null`, this should not conflict with the inferred lengths from `columns` or `rowNames`.\n     * @param {?Array} [options.rowNames=null] - Array of strings containing the names for each row.\n     * If non-`null`, this should have the same length as the vectors inside `columns`, if any exist.\n     * If `null`, no row names are used.\n     * @param {?Array} [options.columnOrder=null] - Array of strings specifying the ordering of the columns.\n     * If non-`null`, this should have the same values as the keys of `columns`.\n     * If `null`, an arbitrary ordering is obtained from `columns`.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(columns, { numberOfRows = null, rowNames = null, columnOrder = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n        this._numberOfRows = numberOfRows;\n        this._rowNames = rowNames;\n        \n        try {\n            this._columns = new il.InternalList(columns, columnOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize columns for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n\n        for (const k of this._columns.names()) {\n            let n = generics.LENGTH(this._columns.entry(k));\n            if (this._numberOfRows == null) {\n                this._numberOfRows = n;\n            } else if (n != this._numberOfRows) {\n                throw new Error(\"expected all arrays in 'columns' to have equal length\");\n            }\n        }\n\n        if (rowNames != null) {\n            if (this._numberOfRows == null) {\n                this._numberOfRows = rowNames.length;\n            }\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._numberOfRows, \"'numberOfRows' or the length of arrays in 'columns'\");\n        }\n\n        if (this._numberOfRows == null) {\n            this._numberOfRows = 0;\n        }\n    }\n\n    static className = \"DataFrame\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the column names in the specified order.\n     */\n    columnNames() {\n        return this._columns.names();\n    }\n\n    /**\n     * @param {string} name - Name of a column.\n     * @return {boolean} Whether the column exists in this DataFrame.\n     */\n    hasColumn(name) {\n        return this._columns.has(name);\n    }\n\n    /**\n     * @return {number} Number of rows in this DataFrame.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns in this DataFrame.\n     */\n    numberOfColumns() {\n        return this._columns.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Column to retrieve, either by name or index.\n     * @return {*} The contents of column `i` as a vector-like object.\n     */\n    column(i) {\n        return this._columns.entry(i);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     * \n     * @return {DataFrame} The DataFrame after removing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeColumn(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.delete(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @return {DataFrame} A reference to this DataFrame after removing the specified column.\n     */\n    $removeColumn(i) {\n        return this.removeColumn(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame after adding/replacing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, value, { inPlace = false } = {}) {\n        if (generics.LENGTH(value) != this._numberOfRows) {\n            throw new Error(\"expected 'value' to have the same length as the number of rows in 'x'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     *\n     * @return {DataFrame} A reference to this DataFrame after adding/replacing the specified column.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = target._columns.setNames(names, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @return {DataFrame} A reference to this DataFrame with modified column names.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names != null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this._numberOfRows, \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @return {DataFrame} A reference to this DataFrame with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceColumns(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.slice(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $sliceColumns(i) {\n        return this.sliceColumns(i, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        let options = { allowView };\n\n        let new_columns = this._columns.apply(v => generics.SLICE(v, i, options));\n        let new_rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, i, options));\n\n        let new_numberOfRows;\n        if (i.constructor == Object) {\n            new_numberOfRows = i.end - i.start;\n        } else {\n            new_numberOfRows = i.length;\n        }\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return; \n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let new_columns = il.InternalList.parallelCombine(objects.map(x => x._columns), generics.COMBINE);\n\n        let all_n = [];\n        let all_l = [];\n        for (const yi of objects) {\n            all_n.push(yi.rowNames());\n            all_l.push(yi.numberOfRows());\n        }\n\n        let new_numberOfRows = utils.sum(all_l);\n        let new_rowNames = utils.combineNames(all_n, all_l, new_numberOfRows);\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._columns = cutils.cloneField(this._columns, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n        output._numberOfRows = this._numberOfRows;\n        return;\n    }\n};\n\n/**\n * Flexibly combine multiple DataFrames by row by filling in missing columns with an array of `null`s.\n * This is equivalent to calling {@linkcode COMBINE} on an array of DataFrames that may have mismatching columns.\n *\n * @param {Array} objects - Array of {@linkplain DataFrame}s to be combined.\n *\n * @return {DataFrame} The combined DataFrame, where the number of rows is equal to sum of rows across `objects`,\n * and the columns is equal to the union of columns across `objects`.\n */\nexport function flexibleCombineRows(objects) {\n    let ckeys = new Set();\n    let corder = [];\n    for (const current of objects) {\n        let cnames = current.columnNames();\n        for (const a of cnames) {\n            if (!ckeys.has(a)) {\n                ckeys.add(a);\n                corder.push(a);\n            }\n        }\n    }\n\n    let copies = [];\n    for (const current of objects) {\n        let dummy = new Array(current.numberOfRows());\n        dummy.fill(null);\n        let copy = generics.CLONE(current, { deepCopy: false });\n\n        for (const a of corder) {\n            if (!current.hasColumn(a)) {\n                copy.$setColumn(a, dummy);\n            }\n        }\n\n        copy._columns = copy._columns.reorder(corder);\n        copies.push(copy);\n    }\n\n    return generics.COMBINE(copies);\n}\n","import * as cutils from \"./clone-utils.js\";\n\n/**\n * Dense matrix of numbers.\n * Not really a Bioconductor-exclusive data structure, but we need this at a minimum for the {@linkplain SummarizedExperiment} to be useful.\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n */\nexport class DenseMatrix {\n    /**\n     * @param {number} numberOfRows - Number of rows, duh.\n     * @param {number} numberOfColumns - Number of columns.\n     * @param {TypedArray} values - 1-dimensional array of the matrix contents.\n     * This should have length equal to the product of `numberOfRows` and `numberOfColumns`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.columnMajor=true] - Whether `values` represents a column-major layout.\n     */\n    constructor(numberOfRows, numberOfColumns, values, { columnMajor = true } = {}) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._numberOfRows = numberOfRows;\n        this._numberOfColumns = numberOfColumns;\n        this._values = values;\n        this._columnMajor = columnMajor;\n        if (numberOfRows * numberOfColumns != values.length) {\n            throw new Error(\"length of 'values' should be equal to the product of 'dimensions'\");\n        }\n    }\n\n    static name = \"DenseMatrix\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {number} Number of rows.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns.\n     */\n    numberOfColumns() {\n        return this._numberOfColumns;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is column-major.\n     */\n    isColumnMajor() {\n        return this._columnMajor;\n    }\n\n    /**\n     * @return {TypedArray} Matrix contents as a 1-dimensional array.\n     */\n    values() {\n        return this._values;\n    }\n\n    #extractor(i, nprimary, nsecondary, allowView, primaryMajor) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                output[s] = this._values[offset];\n                offset += nprimary;\n            }\n            return output;\n\n        } else {\n            let start = i * nsecondary;\n            let end = start + nsecondary;\n            if (allowView) {\n                return this._values.subarray(start, end);\n            } else {\n                return this._values.slice(start, end);\n            }\n        }\n    }\n\n    /**\n     * Retrieve the contents of a particular row.\n     *\n     * @param {number} i - Index of the row of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the row `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    row(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfRows, this._numberOfColumns, allowView, !this._columnMajor);\n    }\n\n    /**\n     * Retrieve the contents of a particular column.\n     *\n     * @param {number} i - Index of the column of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the column `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    column(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfColumns, this._numberOfRows, allowView, this._columnMajor);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setValues(values, { inPlace = false } = {}) {\n        if (values.length !== this._values.length) {\n            throw new Error(\"replacement 'values' should have length equal to 'values()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._values = values;\n        return target;\n    }\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setValues(values) {\n        return this.setValues(values, { inPlace: true });\n    }\n\n    #inserter(i, nprimary, nsecondary, primaryMajor, replacement) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                this._values[offset] = replacement[s];\n                offset += nprimary;\n            }\n        } else {\n            let start = i * nsecondary;\n            this._values.set(replacement, start);\n        }\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRow(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfColumns) {\n            throw new Error(\"replacement row should have length equal to 'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfRows, target._numberOfColumns, !target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setRow(i, value) {\n        return this.setRow(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of rows in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfRows) {\n            throw new Error(\"replacement column should have length equal to 'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfColumns, target._numberOfRows, target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, {}) {\n        let full_rows = (rows === null);\n        let is_row_range = (!full_rows && rows.constructor == Object);\n        let new_rows = full_rows ? this._numberOfRows : (is_row_range ? rows.end - rows.start : rows.length);\n        output._numberOfRows = new_rows;\n\n        let full_columns = (columns === null);\n        let is_column_range = (!full_columns && columns.constructor == Object);\n        let new_columns = full_columns ? this._numberOfColumns : (is_column_range ? columns.end - columns.start : columns.length);\n        output._numberOfColumns = new_columns;\n\n        let new_values = new this._values.constructor(new_rows * new_columns);\n        output._values = new_values;\n\n        if (this._columnMajor) {\n            this.#primarySlicer(columns, full_columns, is_column_range, this._numberOfColumns, rows, full_rows, is_row_range, this._numberOfRows, new_rows, new_values);\n        } else {\n            this.#primarySlicer(rows, full_rows, is_row_range, this._numberOfRows, columns, full_columns, is_column_range, this._numberOfColumns, new_columns, new_values);\n        }\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n\n    #primarySlicer(primarySlice, fullPrimary, isPrimaryRange, primaryDim, secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues) {\n        if (fullPrimary) {\n            for (var p = 0; p < primaryDim; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p);\n            }\n        } else if (isPrimaryRange) {\n            for (var p = primarySlice.start; p < primarySlice.end; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p - primarySlice.start);\n            }\n        } else {\n            for (var pi = 0; pi < primarySlice.length; pi++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, primarySlice[pi], pi);\n            }\n        }\n    }\n\n    #secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, inPrimary, outPrimary) {\n        let in_offset = inPrimary * inSecondaryDim;\n        let out_offset = outPrimary * outSecondaryDim;\n\n        if (fullSecondary) {\n            let view = this._values.subarray(in_offset, in_offset + inSecondaryDim);\n            outputValues.set(view, out_offset);\n        } else if (isSecondaryRange) {\n            for (var s = secondarySlice.start; s < secondarySlice.end; s++) {\n                outputValues[out_offset + s - secondarySlice.start] = this._values[in_offset + s];\n            }\n        } else {\n            for (var si = 0; si < secondarySlice.length; si++) {\n                outputValues[out_offset + si] = this._values[in_offset + secondarySlice[si]];\n            }\n        }\n    }\n\n    _combiner(objects, primaryFun, secondaryFun, isPrimaryMajor, secondaryName) {\n        let num_primary = primaryFun(objects[0]);\n        let num_secondary = secondaryFun(objects[0]);\n        for (var i = 1; i < objects.length; i++) {\n            if (secondaryFun(objects[i]) !== num_secondary) {\n                throw new Error(\"all objects must have the same number of \" + secondaryName);\n            }\n            num_primary += primaryFun(objects[i]);\n        }\n\n        let primary_major = isPrimaryMajor(objects[0]);\n        let values = new objects[0]._values.constructor(num_primary * num_secondary);\n\n        if (primary_major) {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n                let out_offset = used_primary * num_secondary;\n\n                if (isPrimaryMajor(current)) {\n                    values.set(current._values, out_offset);\n                } else {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let in_offset = s * cur_primary;\n                        let out_offset2 = out_offset + s;\n                        for (var p = 0; p < cur_primary; p++) {\n                            values[out_offset2 + p * num_secondary] = current._values[in_offset + p];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        } else {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n\n                if (!isPrimaryMajor(current)) {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let view_offset = s * cur_primary;\n                        let view = current._values.subarray(view_offset, view_offset + cur_primary);\n                        values.set(view, used_primary + s * num_primary);\n                    }\n                } else {\n                    for (var p = 0; p < cur_primary; p++) {\n                        let in_offset = p * num_secondary;\n                        let out_offset = used_primary + p;\n                        for (var s = 0; s < num_secondary; s++) {\n                            values[out_offset + s * num_primary] = current._values[in_offset + s];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        }\n\n        return { num_primary, num_secondary, values, primary_major };\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfRows,\n            x => x._numberOfColumns,\n            x => !(x._columnMajor),\n            \"columns\"\n        );\n\n        output._numberOfRows = combined.num_primary;\n        output._numberOfColumns = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = !(combined.primary_major);\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfColumns,\n            x => x._numberOfRows,\n            x => x._columnMajor,\n            \"rows\"\n        );\n\n        output._numberOfColumns = combined.num_primary;\n        output._numberOfRows = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = combined.primary_major;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._values = (deepCopy ? this._values.slice() : this._values);\n        output._numberOfRows = this._numberOfRows;\n        output._numberOfColumns = this._numberOfColumns;\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ir from \"./IRanges.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * A GRanges object is a collection of genomic ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a sequence name, a start position on that sequence, and a width.\n * Each range may also be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The GRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class GRanges extends vec.Vector {\n    static #convertToInt8Array(x) {\n        if (x instanceof Int8Array) {\n            return x;\n        } else {\n            return new Int8Array(x);\n        }\n    }\n\n    static #checkStrandedness(strand) {\n        for (const y of strand) {\n            if (y < -1 || y > 1) {\n                throw new Error(\"'strand' must be -1, 0 or 1\");\n            }\n        }\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {IRanges} ranges - Position and width of the range on its specified sequence.\n     * This should have the same length as `seqnames`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.strand=null] - Array containing the strandedness of each genomic range.\n     * This should be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * If `null`, this is assumed to be 0 for all genomic ranges.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(seqnames, ranges, { strand = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(seqnames.length, { names, elementMetadata, metadata });\n\n        utils.checkStringArray(seqnames, \"seqnames\");\n        this._seqnames = seqnames;\n\n        let n = seqnames.length;\n        if (n !== generics.LENGTH(ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"'seqnames'\");\n        }\n        this._ranges = ranges;\n\n        if (strand !== null) {\n            if (n !== strand.length) {\n                throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n            }\n            strand = GRanges.#convertToInt8Array(strand);\n            GRanges.#checkStrandedness(strand);\n        } else {\n            strand = new Int8Array(n);\n            strand.fill(0);\n        }\n        this._strand = strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each genomic range.\n     */\n    start() {\n        return this._ranges.start();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each genomic range.\n     */\n    end() {\n        return this._ranges.end();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each genomic range.\n     */\n    width() {\n        return this._ranges.width();\n    }\n\n    /**\n     * @return {Array} Array of strings containing the sequence name for each genomic range.\n     */\n    seqnames() {\n        return this._seqnames;\n    }\n\n    /**\n     * @return {IRanges} Start positions and widths for all ranges on their specified sequence names.\n     */\n    ranges() {\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int8Array} Array containing the strandedness for each genomic range - 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     */\n    strand() {\n        return this._strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the sequence names to `seqnames`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setSeqnames(seqnames, { inPlace = false } = {}) {\n        utils.checkNamesArray(seqnames, \"replacement 'seqnames'\", generics.LENGTH(this), \"'LENGTH(<GRanges>)'\");\n        let target = cutils.setterTarget(this, inPlace); \n        target._seqnames = seqnames;\n        return target;\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @return {GRanges} A reference to this GRanges object after setting the sequence names to `seqnames`.\n     */\n    $setSeqnames(seqnames) {\n        return this.setSeqnames(seqnames, { inPlace: true });\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the ranges to `ranges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof ir.IRanges)) {\n            throw new Error(\"'ranges' should be an IRanges object\");\n        }\n\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"replacement 'ranges'\", \"'LENGTH(<GRanges>)'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @return {GRanges} A reference to this GRanges object after setting the ranges to `ranges`.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the strands to `strand`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStrand(strand, { inPlace = false } = {}) {\n        if (this._strand.length !== strand.length) {\n            throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n        }\n        strand = GRanges.#convertToInt8Array(strand);\n        GRanges.#checkStrandedness(strand);\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._strand = strand;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     *\n     * @return {GRanges} A reference to this GRanges object after setting the strands to `strand`.\n     */\n    $setStrand(strand) {\n        return this.setStrand(strand, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        let indices = utils.createSequence(generics.LENGTH(this));\n        let by_seqname = generics.SPLIT(indices, this._seqnames);\n        let starts = this.start();\n        let ends = this.end();\n\n        if (restrictToSeqnames !== null && restrictToSeqnames instanceof Array) {\n            restrictToSeqnames = new Set(restrictToSeqnames);\n        }\n        if (restrictToStrand !== null && restrictToStrand instanceof Array) {\n            restrictToStrand = new Set(restrictToStrand);\n        }\n\n        for (const name of Object.keys(by_seqname)) {\n            if (restrictToSeqnames !== null && !restrictToSeqnames.has(name)) {\n                delete by_seqname[name];\n                continue;\n            }\n            let seqname_indices = by_seqname[name];\n            let seqname_strand = generics.SLICE(this._strand, seqname_indices);\n            let by_strand = generics.SPLIT(seqname_indices, seqname_strand);\n\n            for (const str of Object.keys(by_strand)) {\n                if (restrictToStrand !== null && !restrictToStrand.has(Number(str))) {\n                    delete by_strand[str];\n                    continue;\n                }\n                let str_indices = by_strand[str];\n                by_strand[str] = olap.buildIntervalTree(starts, ends, { slice: str_indices });\n            }\n            by_seqname[name] = by_strand;\n        }\n\n        return new GRangesOverlapIndex(by_seqname);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._seqnames.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._seqnames = generics.SLICE(this._seqnames, i, { allowView });\n        output._ranges = generics.SLICE(this._ranges, i, { allowView });\n        output._strand = generics.SLICE(this._strand, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_sn = [];\n        let all_rr = [];\n        let all_st = [];\n        for (const x of objects) {\n            all_sn.push(x._seqnames);\n            all_rr.push(x._ranges);\n            all_st.push(x._strand);\n        }\n\n        output._seqnames = generics.COMBINE(all_sn);\n        output._ranges = generics.COMBINE(all_rr);\n        output._strand = generics.COMBINE(all_st);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._seqnames = cutils.cloneField(this._seqnames, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n        output._strand = cutils.cloneField(this._strand, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} A zero-length GRanges object.\n     */\n    static empty() {\n        return new GRanges([], ir.IRanges.empty());\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GRanges} objects.\n * This is typically constructed using the {@linkcode GRanges#buildOverlapIndex GRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GRangesOverlapIndex {\n    constructor(index) {\n        this._index = index;\n    }\n\n    /**\n     * @param {GRanges} query - The query object, containing ranges to be overlapped with those in the reference GRanges (that was used to construct this GRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let n = generics.LENGTH(query);\n        let results = new Array(n);\n        let starts = query.start();\n        let ends = query.end();\n\n        for (var i = 0; i < n; i++) {\n            results[i] = [];\n            let my_results = results[i];\n\n            let name = query._seqnames[i];\n            if (!(name in this._index)) {\n                continue;\n            }\n            let seq_index = this._index[name];\n\n            let strand = query._strand[i];\n            let allowed_strands;\n            if (ignoreStrand || strand == 0) {\n                allowed_strands = Object.keys(seq_index);\n            } else {\n                let sstr = String(strand);\n                if (!(sstr in seq_index)) {\n                    continue;\n                }\n                allowed_strands = [ sstr ];\n            }\n\n            let start = starts[i];\n            let end = ends[i];\n            for (const str of allowed_strands) {\n                let str_results = olap.queryIntervalTree(start, end, seq_index[str]);\n                str_results.forEach(x => my_results.push(x));\n            }\n        }\n\n        return results;\n    }\n}\n","import * as vec from \"./Vector.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\n/**\n * A GroupedGRanges object is a collection of groups of genomic ranges, inspired by the `GRangesList` class from the Bioconductor ecosystem.\n * Each group consists of a {@linkplain GRanges} object of arbitrary length, which is most often used to represent a multi-exon gene.\n * The GroupedGRanges can be considered a vector of groups, and defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Our implementation re-uses Bioconductor's strategy of storing the groups in a single concatenated GRanges.\n * This improves efficiency for large numbers of small GRanges, especially in placeholder objects where all the GRanges are zero-length.\n * \n * @extends Vector\n */\nexport class GroupedGRanges extends vec.Vector {\n    static #computeStarts(lengths) {\n        let starts = new Int32Array(lengths.length);\n        let last = 0;\n        for (var i = 0; i < lengths.length; i++) {\n            starts[i] = last;\n            last += lengths[i];\n        }\n        return { starts: starts, total: last };\n    }\n\n    #staged_setGroup = null;\n\n    /**\n     * @param {Array|GRanges} ranges - An array of {@linkplain GRanges} objects, where each element represents a group of genomic ranges.\n     * All objects should have compatible columns in their {@linkplain Vector#elementMetadata elementMetadata}.\n     * \n     * Alternatively, a single GRanges containing a concatenation of ranges from all groups.\n     * In this case, `rangeLengths` must be supplied.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(TypedArray|Array)} [options.rangeLengths=null] - Length of the ranges within each group.\n     * This should be coercible to an Int32Array, contain non-negative values, and have a sum equal to the length of `ranges`.\n     * Only used if `ranges` is a single {@linkplain GRanges} object, where each group's ranges are assumed to form contiguous intervals along `ranges`.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(ranges, { rangeLengths = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        if (ranges.constructor == Array) {\n            super(ranges.length, { names, elementMetadata, metadata });\n            rangeLengths = new Int32Array(ranges.length);\n            for (var i = 0; i < rangeLengths.length; i++) {\n                if (!(ranges[i] instanceof gr.GRanges)) {\n                    throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n                }\n                rangeLengths[i] = generics.LENGTH(ranges[i]);\n            }\n            ranges = generics.COMBINE(ranges);\n\n        } else {\n            if (!(ranges instanceof gr.GRanges)) {\n                throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n            }\n            if (rangeLengths == null) {\n                throw new Error(\"'rangeLengths' must be specified when 'ranges' is a 'GRanges'\");\n            }\n            super(rangeLengths.length, { names, elementMetadata, metadata });\n            rangeLengths = utils.convertToInt32Array(rangeLengths);\n            utils.checkNonNegative(rangeLengths);\n        }\n\n        this._ranges = ranges;\n        this._rangeLengths = rangeLengths;\n\n        let accumulated = GroupedGRanges.#computeStarts(rangeLengths);\n        this._rangeStarts = accumulated.starts;\n\n        if (accumulated.total !== generics.LENGTH(ranges)) {\n            throw new Error(\"sum of 'rangeLengths' must be equal to the length of 'ranges'\");\n        }\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} The concatenated set of ranges across all groups. \n     */\n    ranges() {\n        this.#flush_staged_setGroup();\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int32Array} The start indices for each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeStarts() {\n        this.#flush_staged_setGroup();\n        return this._rangeStarts;\n    }\n\n    /**\n     * @return {Int32Array} The length of each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeLengths() {\n        this.#flush_staged_setGroup();\n        return this._rangeLengths;\n    }\n\n    /**\n     * @param {number} i - Index of the group of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether a view can be created in any internal slicing operations.\n     *\n     * @return {GRanges} The genomic ranges for group `i`.\n     */\n    group(i, { allowView = false } = {}) {\n        this.#flush_staged_setGroup();\n        let s = this._rangeStarts[i];\n        return generics.SLICE(this._ranges, { start: s, end: s + this._rangeLengths[i] }, { allowView });\n    }\n\n    /**\n     * @return {number} Number of groups in this object.\n     */\n    numberOfGroups() {\n        return this._rangeStarts.length;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after modifying the internal ranges.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof gr.GRanges)) {\n            throw new Error(\"'ranges' must be a 'GRanges'\");\n        }\n\n        this.#flush_staged_setGroup();\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"number of ranges\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after modifying the internal ranges.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    #flush_staged_setGroup() {\n        let staged = this.#staged_setGroup;\n        if (staged === null) {\n            return;\n        }\n\n        staged.sort((a, b) => {\n            let diff = a[0] - b[0];\n            return (diff === 0 ? a[1] - b[1] : diff);\n        });\n\n        let counter = 0;\n        let accumulated = 0;\n        let last_start = 0;\n        let more_ranges = [];\n\n        let ngroups = this.numberOfGroups();\n        for (var g = 0; g < ngroups; g++) {\n            if (counter < staged.length && g == staged[counter][0]) { \n                let current_start = this._rangeStarts[g];\n                if (last_start < current_start) {\n                    more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: current_start }));\n                }\n                last_start = current_start + this._rangeLengths[g];\n\n                let replacement;\n                do {\n                    replacement = staged[counter][2];\n                    counter++;\n                } while (counter < staged.length && g == staged[counter][0]);\n\n                more_ranges.push(replacement);\n                this._rangeLengths[g] = generics.LENGTH(replacement);\n            }\n\n            this._rangeStarts[g] = accumulated;\n            accumulated += this._rangeLengths[g];\n        }\n\n        let nranges = generics.LENGTH(this._ranges);\n        if (last_start < nranges) {\n            more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: nranges }));\n        }\n\n        try {\n            this._ranges = generics.COMBINE(more_ranges);\n        } catch (e) {\n            throw new Error(\"failed to combine staged '$setGroup' operations; \" + e.message);\n        }\n\n        this.#staged_setGroup = null;\n        return;\n    }\n\n    /**\n     * Multiple consecutive calls to `$setGroup` are not executed immediately.\n     * Rather, the operations are staged and executed in batch once the modified GroupedGRanges is used in other methods.\n     * This enables efficient setting of individual groups inside a single concatenated {@linkplain GRanges}. \n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after setting group `i`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setGroup(i, ranges, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (target.#staged_setGroup === null) {\n            target.#staged_setGroup = [];\n        } else if (!inPlace) {\n            target.#staged_setGroup = target.#staged_setGroup.slice();\n        }\n\n        if (!inPlace) {\n            target._rangeStarts = target._rangeStarts.slice();\n            target._rangeLengths = target._rangeLengths.slice();\n        }\n\n        let nops = target.#staged_setGroup.length;\n        target.#staged_setGroup.push([i, nops, ranges]);\n        return target;\n    }\n\n    /**\n     * See comments for {@linkcode GroupedGRanges#$setGroup $setGroup}.\n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     *\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after setting group `i`.\n     */\n    $setGroup(i, ranges) {\n        return this.setGroup(i, ranges, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GroupedGRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        this.#flush_staged_setGroup();\n        return new GroupedGRangesOverlapIndex(\n            this._ranges.buildOverlapIndex({ restrictToSeqnames, restrictToStrand }),\n            generics.LENGTH(this._ranges),\n            this._rangeStarts,\n            this._rangeLengths\n        );\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._rangeStarts.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false } = {}) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        this.#flush_staged_setGroup();\n\n        output._rangeLengths = generics.SLICE(this._rangeLengths, i, { allowView });\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n\n        if (i.constructor == Object) {\n            // Handle this specially for optimizing allowView = true.\n            let s = this._rangeStarts[i.start];\n            output._ranges = generics.SLICE(this._ranges, { start: s, end: s + accumulated.total }, { allowView });\n        } else {\n            let keep = new Int32Array(accumulated.total);\n\n            let counter = 0;\n            for (const j of i) {\n                let start = this._rangeStarts[j];\n                let end = start + this._rangeLengths[j];\n                for (var k = start; k < end; k++) {\n                    keep[counter] = k;\n                    counter++;\n                }\n            }\n\n            output._ranges = generics.SLICE(this._ranges, keep, { allowView });\n        }\n\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        // We need to flush the staged operations in each object.\n        for (const o of objects) {\n            o.#flush_staged_setGroup();\n        }\n\n        output._rangeLengths = generics.COMBINE(objects.map(x => x.rangeLengths()));\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n        output._ranges = generics.COMBINE(objects.map(x => x._ranges));\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output.#staged_setGroup = cutils.cloneField(this.#staged_setGroup, deepCopy);\n        output._rangeLengths = cutils.cloneField(this._rangeLengths, deepCopy);\n        output._rangeStarts = cutils.cloneField(this._rangeStarts, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {number} [numberOfGroups=0] - Numbe of empty groups to create.\n     * @return {GroupedGRanges} A GroupedGRanges object of length equal to `numberOfGroups`,\n     * where each group is of zero length.\n     */\n    static empty(numberOfGroups) {\n        let runs = new Int32Array(numberOfGroups);\n        runs.fill(0);\n        return new GroupedGRanges(gr.GRanges.empty(), { rangeLengths: runs });\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GroupedGRanges} objects.\n * This is typically constructed using the {@linkcode GroupedGRanges#buildOverlapIndex GroupedGRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GroupedGRanges or {@linkplain GRanges} to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GroupedGRangesOverlapIndex {\n    constructor(index, fullLength, rangeStarts, rangeLengths) {\n        this._index = index;\n        this._rangeStarts = rangeStarts;\n        this._rangeLengths = rangeLengths;\n\n        let rev_map = new Int32Array(fullLength);\n        for (var i = 0; i < rangeStarts.length; i++) {\n            let start = rangeStarts[i];\n            let end = start + rangeLengths[i];\n            for (var s = start; s < end; s++) {\n                rev_map[s] = i;\n            }\n        }\n        this._reverseMapping = rev_map;\n    }\n\n    /**\n     * @param {GroupedGRanges|GRanges} query - The query object, containing ranges to be overlapped with those in the reference GroupedGRanges (that was used to construct this GroupedGRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges or groups in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let output = new Array(this._rangeStarts.length);\n        let rev_map = this._reverseMapping;\n\n        if (query instanceof GroupedGRanges) {\n            let overlaps = this._index.overlap(query._ranges);\n            for (var i = 0; i < query._rangeStarts.length; i++) {\n                let start = query._rangeStarts[i];\n                let end = start + query._rangeLengths[i];\n\n                let results = new Set;\n                for (var s = start; s < end; s++) {\n                    overlaps[s].forEach(x => results.add(rev_map[x]));\n                }\n                output[i] = Array.from(results);\n            }\n\n        } else {\n            let overlaps = this._index.overlap(query);\n            for (var i = 0; i < overlaps.length; i++) {\n                let results = new Set;\n                overlaps[i].forEach(x => results.add(rev_map[x]));\n                output[i] = Array.from(results);\n            }\n        }\n\n        return output;\n    }\n\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * An IRanges object is a collection of integer ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a start position and a width, and may be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The IRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class IRanges extends vec.Vector {\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} start - Array of start positions for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Array|TypedArray} width - Array of widths for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(start, width, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(start.length, { names, elementMetadata, metadata });\n\n        this._start = utils.convertToInt32Array(start);\n        utils.checkNonNegative(this._start, \"start\");\n\n        this._width = utils.convertToInt32Array(width);\n        utils.checkNonNegative(this._width, \"width\");\n\n        let n = this._start.length;\n        if (n !== this._width.length) {\n            throw new Error(\"'start' and 'width' should have the same length\");\n        }\n    }\n\n    static className = \"IRanges\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each range.\n     */\n    start() {\n        return this._start;\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each range.\n     */\n    end() {\n        return this._start.map((x, i) => x + this._width[i]);\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each range.\n     */\n    width() {\n        return this._width;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the start positions to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStart(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'start' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"start\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._start = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the start positions to `value`.\n     */\n    $setStart(value) {\n        return this.setStart(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the widths to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setWidth(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'width' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"width\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._width = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the widths to `value`.\n     */\n    $setWidth(value) {\n        return this.setWidth(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain IRanges} instances.\n     */\n    buildOverlapIndex() {\n        let tree = olap.buildIntervalTree(this._start, this.end());\n        return new IRangesOverlapIndex(tree);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._start.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._start = generics.SLICE(this._start, i, { allowView });\n        output._width = generics.SLICE(this._width, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_s = [];\n        let all_w = [];\n        for (const x of objects) {\n            all_s.push(x._start);\n            all_w.push(x._width);\n        }\n\n        output._start = generics.COMBINE(all_s);\n        output._width = generics.COMBINE(all_w);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._start = cutils.cloneField(this._start, deepCopy);\n        output._width = cutils.cloneField(this._width, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRanges} A zero-length IRanges object.\n     */\n    static empty() {\n        return new IRanges(new Int32Array, new Int32Array);\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain IRanges} objects.\n * This is typically constructed using the {@linkcode IRanges#buildOverlapIndex IRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query IRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class IRangesOverlapIndex {\n    constructor(tree) {\n        this._tree = tree;\n    }\n\n    /**\n     * @param {IRanges} query - The query object, containing ranges to be overlapped with those in the reference IRanges (that was used to construct this IRangesOverlapIndex object).\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain IRanges} object.\n     */\n    overlap(query) {\n        let n = generics.LENGTH(query);\n        let output = new Array(n);\n        for (var i = 0; i < n; i++) {\n            output[i] = olap.queryIntervalTree(query._start[i], query._start[i] + query._width[i], this._tree);\n        }\n        return output;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\nexport class InternalList {\n    constructor(entries, order) {\n        if (arguments.length == 0){\n            return;\n        }\n\n        entries = utils.object2map(entries);\n\n        let expected = Array.from(entries.keys());\n        if (order !== null) {\n            utils.checkNamesArray(order, \"'order'\", expected.length, \"the length of 'entries'\");\n            let observed = order.slice().sort();\n            expected.sort();\n\n            if (!utils.areArraysEqual(observed, expected)) {\n                throw new Error(\"values of 'order' should be the same as the keys of 'entries'\");\n            }\n        } else {\n            order = expected;\n        }\n\n        this._entries = entries;\n        this._order = order;\n    }\n\n    static className = \"InternalList\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    names() {\n        return this._order;\n    }\n\n    numberOfEntries() {\n        return this._order.length;\n    }\n\n    #check_entry_index(i) {\n        if (i < 0 || i >= this._order.length) {\n            throw new Error(\" index '\" + String(i) + \"' out of range for this \" + this.constructor.className);\n        }\n    }\n\n    entry(i) {\n        if (typeof i == \"string\") {\n            if (!this._entries.has(i)) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            return this._entries.get(i);\n        } else {\n            this.#check_entry_index(i);\n            return this._entries.get(this._order[i]);\n        }\n    }\n\n    has(name) {\n        return this._entries.has(name);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n    \n    delete(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copies so that we can do our setting.\n            target._order = target._order.slice();\n            target._entries = new Map(target._entries); \n        }\n\n        if (typeof i == \"string\") {\n            let ii = target._order.indexOf(i);\n            if (ii < 0) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            target._order.splice(ii, 1); \n            target._entries.delete(i);\n        } else {\n            this.#check_entry_index(i);\n            let n = target._order[i];\n            target._order.splice(i, 1);\n            target._entries.delete(n);\n        }\n\n        return target;\n    }\n\n    set(i, value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copy so that we can do our setting.\n            target._entries = new Map(target._entries);\n        }\n\n        if (typeof i == \"string\") {\n            if (!target._entries.has(i)) {\n                if (!inPlace) {\n                    target._order = target._order.slice();\n                }\n                target._order.push(i);\n            }\n            target._entries.set(i, value);\n        } else {\n            this.#check_entry_index(i);\n            target._entries.set(target._order[i], value);\n        }\n\n        return target;\n    }\n\n    setNames(names, { inPlace = false } = {}) {\n        utils.checkNamesArray(names, \"replacement 'names'\", this._order.length, \"length of 'names()'\");\n\n        let new_entries = new Map;\n        for (var i = 0; i < names.length; i++) {\n            if (new_entries.has(names[i])) {\n                throw new Error(\"detected duplicate value '\" + names[i] + \"' in replacement 'names'\");\n            }\n            new_entries.set(names[i], this._entries.get(this._order[i]));\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = names;\n        return target;\n    }\n\n    slice(indices, { inPlace = false } = {}) {\n        let new_entries = new Map;\n        let new_order = [];\n\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (new_entries.has(ii)) {\n                throw new Error(\"duplicate entries detected in slice request\");\n            } else if (!this._entries.has(ii)) {\n                throw new Error(\"slice contains missing entry '\" + ii + \"' \");\n            }\n\n            new_entries.set(ii, this._entries.get(ii));\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = new_order;\n        return target;\n    }\n\n    reorder(indices, { inPlace = false } = {}) {\n        // Reorder can be slightly more efficient than slice because we just\n        // need to change the ordering vector rather than creating a new Map.\n        if (indices.length !== this._order.length) {\n            throw utils.formatLengthError(\"reordered indices\", \"the number of existing entries\");\n        }\n\n        let new_order = [];\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (!this._entries.has(ii)) {\n                throw new Error(\"missing entry '\" + ii + \"' among the reordered indices\");\n            }\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._order = new_order;\n        return target;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._entries = (deepCopy ? generics.CLONE(this._entries) : this._entries);\n        output._order = (deepCopy ? generics.CLONE(this._order) : this._order);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    apply(FUN, { inPlace = false } = {}) {\n        let new_entries = (inPlace ? this._entries : new Map);\n        for (const [k, v] of this._entries) {\n            new_entries.set(k, FUN(v));\n        }\n        return (inPlace ? this : new InternalList(new_entries, this._order));\n    }\n\n    static parallelCombine(objects, combiner) {\n        let first_order = objects[0]._order;\n        for (var i = 1; i < objects.length; i++) {\n            if (!utils.areArraysEqual(first_order, objects[i]._order)) {\n                throw new Error(\"detected differences in names between first object and object \" + String(i) + \" to be combined\");\n            }\n        }\n\n        let new_entries = new Map;\n        for (const k of first_order) {\n            let found = objects.map(x => x._entries.get(k));\n            new_entries.set(k, combiner(found));\n        }\n\n        return new InternalList(new_entries, first_order);\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as ggr from \"./GroupedGRanges.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\n\n/**\n * A RangedSummarizedExperiment is a {@linkplain SummarizedExperiment} subclass where each row represents a genomic interval.\n * As such, it stores an additional {@linkplain GRanges} or {@linkplain GroupedGRanges} of length equal to the number of rows,\n * where each element represents the genomic range(s) for the corresponding row of the SummarizedExperiment.\n *\n * The RangedSummarizedExperiment supports the same set of generics as the {@linkplain SummarizedExperiment}.\n * Each method will call the base method, with the following extensions:\n *\n * - {@linkcode SLICE_2D} will additionally slice the supplied genomic ranges by the desired `rows`.\n * - {@linkcode COMBINE_ROWS} will combine genomic ranges across objects.\n *   If some objects contain a GroupedGRanges and other objects contain GRanges, the latter will be coerced to a GroupedGRanges (where each group contains one range) before combining.\n *   If any object is a base SummarizedExperiment, a GroupedGRanges containing zero-length groups will be automatically constructed to attempt combining.\n * - {@linkcode COMBINE_COLUMNS} will use the genomic ranges from the first object.\n *\n * @extends SummarizedExperiment\n */\nexport class RangedSummarizedExperiment extends se.SummarizedExperiment {\n    #check_rowRanges(x) {\n        if (!(x instanceof gr.GRanges) && !(x instanceof ggr.GroupedGRanges)) {\n            throw new Error(\"'rowRanges' should be a 'GRanges' or 'GroupedGRanges' instance\");\n        }\n        if (generics.LENGTH(x) !== this._rowData.numberOfRows()) {\n            throw utils.formatLengthError(\"'rowRanges'\", \"the number of rows\");\n        }\n    }\n\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {?(GRanges|GroupedGRanges)} rowRanges - Genomic ranges corresponding to each row.\n     *\n     * Alternatively, each row may correspond to a group of genomic ranges.\n     *\n     * If `null`, a {@linkplain GroupedGRanges} is constructed where each row corresponds to one group of ranges of zero length.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain SummarizedExperiment} constructor.\n     */\n    constructor(assays, rowRanges, options = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(assays, options);\n\n        if (rowRanges === null) {\n            rowRanges = ggr.GroupedGRanges.empty(this.numberOfRows());\n        } else {\n            this.#check_rowRanges(rowRanges);\n        }\n        this._rowRanges = rowRanges;\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} Genomic ranges corresponding to each row.\n     */\n    rowRanges() {\n        return this._rowRanges;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {RangedSummarizedExperiment} The RangedSummarizedExperiment after modifying its `rowRanges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowRanges(value, { inPlace = false } = {}) {\n        this.#check_rowRanges(value);\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowRanges = value;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @return {RangedSummarizedExperiment} A reference to this RangedSummarizedExperiment after modifying its `rowRanges`.\n     */\n    $setRowRanges(value) {\n        return this.setRowRanges(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n        if (rows !== null) {\n            output._rowRanges = generics.SLICE(this._rowRanges, rows);\n        } else {\n            output._rowRanges = this._rowRanges;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        let collected = [];\n        let has_empty = false;\n        let has_ggr = false;\n\n        for (var i = 0; i < objects.length; i++) {\n            let x = objects[i];\n            if (x instanceof RangedSummarizedExperiment) {\n                let y = x._rowRanges;\n                if (y instanceof ggr.GroupedGRanges) {\n                    has_ggr = true;\n                }\n                collected.push(y);\n            } else if (x instanceof se.SummarizedExperiment) {\n                has_empty = true;\n                collected.push(null);\n            } else {\n                throw new Error(\"objects to be combined must be SummarizedExperiments (failing for object \" + String(i) + \")\");\n            }\n        }\n\n        // Promoting nulls and GRanges to GroupedGRanges, if necessary.\n        if (has_empty || has_ggr) {\n            for (var i = 0; i < collected.length; i++) {\n                let current = collected[i];\n\n                if (current instanceof gr.GRanges) {\n                    let widths = new Int32Array(generics.LENGTH(current));\n                    widths.fill(1);\n\n                    let options = { \n                        rangeLengths: widths,\n                        names: current.names(),\n                        elementMetadata: current.elementMetadata(),\n                        metadata: current.metadata()\n                    };\n\n                    if (options.names !== null) {\n                        current = current.setNames(null);\n                    } \n\n                    if (options.elementMetadata.metadata().size > 0 || options.elementMetadata.numberOfColumns() > 0) {\n                        current = current.setElementMetadata(null);\n                    }\n\n                    if (options.metadata.size > 0) {\n                        current = current.setMetadata(new Map);\n                    }\n\n                    collected[i] = new ggr.GroupedGRanges(current, options);\n\n                } else if (current === null){\n                    collected[i] = ggr.GroupedGRanges.empty(objects[i].numberOfRows());\n                }\n            }\n        }\n\n        output._rowRanges = generics.COMBINE(collected);\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        output._rowRanges = objects[0]._rowRanges;\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._rowRanges = cutils.cloneField(this._rowRanges, deepCopy);\n\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as rse from \"./RangedSummarizedExperiment.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SingleCellExperiment is a {@linkplain RangedSummarizedExperiment} subclass that contains additional fields for storing reduced dimensions and alternative experiments.\n * It supports the same set of generics as the {@linkplain SummarizedExperiment}.\n *\n * Each reduced dimension instance should have number of rows equal to the number of columns of the SingleCellExperiment.\n * Each instance is expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode CLONE}\n *\n * Each alternative experiment should be a {@linkplain SummarizedExperiment} with number of columns equal to that of the SingleCellExperiment.\n *\n * @extends RangedSummarizedExperiment\n */\nexport class SingleCellExperiment extends rse.RangedSummarizedExperiment {\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {?(GRanges|GroupedGRanges)} [options.rowRanges=null] - Genomic ranges corresponding to each row, see the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {Object|Map} [options.reducedDimensions={}] - Object containing named reduced dimensions.\n     * Each value should be a 2-dimensional object with number of rows equal to the number of columns of the assays.\n     * @param {?Array} [options.reducedDimensionOrder=null] - Array containing the order of the reduced dimensions.\n     * This should have the same values as the keys of `reducedDimensions`, and defaults to those keys if `null`.\n     * @param {Object|Map} [options.alternativeExperiments={}] - Object containing named alternative experiments.\n     * Each value should be a 2-dimensional object with number of columns equal to that of the assays.\n     * @param {?Array} [options.alternativeExperimentOrder=null] - Array containing the order of the alternative experiments.\n     * This should have the same values as the keys of `alternativeExperiments`, and defaults to those keys if `null`.\n     */\n    constructor(assays, options={}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        let { reducedDimensions = {}, reducedDimensionOrder = null, alternativeExperiments = {}, alternativeExperimentOrder = null, rowRanges = null } = options;\n        super(assays, rowRanges, options);\n        let ncols = this.numberOfColumns();\n\n        try {\n            this._reducedDimensions = new il.InternalList(reducedDimensions, reducedDimensionOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize reduced dimension list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._reducedDimensions.names()) {\n            let v = this._reducedDimensions.entry(k);\n            if (generics.NUMBER_OF_ROWS(v) !== ncols) {\n                throw new Error(\"number of rows for reduced dimension '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        try {\n            this._alternativeExperiments = new il.InternalList(alternativeExperiments, alternativeExperimentOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize alternative experiment list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._alternativeExperiments.names()) {\n            let v = this._alternativeExperiments.entry(k);\n            if (!(v instanceof se.SummarizedExperiment)) {\n                throw new Error(\"alternative experiment '\" + k + \"' is not a SummarizedExperiment\");\n            }\n            if (v.numberOfColumns(v) !== ncols) {\n                throw new Error(\"number of columns for alternative experiment '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        return;\n    }\n\n    static className = \"SingleCellExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the reduced dimensions.\n     */\n    reducedDimensionNames() {\n        return this._reducedDimensions.names();\n    }\n\n    /**\n     * @param {string|number} i - Reduced dimension to retrieve, either by name or index.\n     * @return {*} The contents of reduced dimension `i` as an multi-dimensional array-like object.\n     */\n    reducedDimension(i) {\n        let output;\n        try {\n            output = this._reducedDimensions.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the alternative experiments.\n     */\n    alternativeExperimentNames() {\n        return this._alternativeExperiments.names();\n    }\n\n    /**\n     * @param {string|number} i - Alternative experiment to retrieve, either by name or index.\n     * @return {SummarizedExperiment} The specified alternative experiment `i`. \n     */\n    alternativeExperiment(i) {\n        let output;\n        try {\n            output = this._alternativeExperiments.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeReducedDimension(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeReducedDimension(i) {\n        return this.removeReducedDimension(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimension(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) != this.numberOfColumns()) {\n            throw new Error(\"number of rows of 'value' should be the same as the number of columns of this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._reducedDimensions = target._reducedDimensions.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified reduced dimensions.\n     */\n    $setReducedDimension(i, value) {\n        return this.setReducedDimension(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified reduced dimension names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimensionNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the reduced dimension names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified reduced dimension names.\n     */\n    $setReducedDimensionNames(names) {\n        return this.setReducedDimensionNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceReducedDimensions(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = this._reducedDimensions.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the reduced dimensions for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced reduced dimensions.\n     */\n    $sliceReducedDimensions(i) {\n        return this.sliceReducedDimensions(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAlternativeExperiment(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeAlternativeExperiment(i) {\n        return this.removeAlternativeExperiment(i, { inPlace: true });;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperiment(i, value, { inPlace = false } = {}) {\n        if (!(value instanceof se.SummarizedExperiment) || generics.NUMBER_OF_COLUMNS(value) != this.numberOfColumns()) {\n            throw new Error(\"'value' should be a SummarizedExperiment with the same number of columns as this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._alternativeExperiments = target._alternativeExperiments.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified alternative experiments.\n     */\n    $setAlternativeExperiment(i, value) {\n        return this.setAlternativeExperiment(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified alternative experiment names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperimentNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the alternative experiment names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified alternative experiment names.\n     */\n    $setAlternativeExperimentNames(names) {\n        return this.setAlternativeExperimentNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAlternativeExperiments(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = this._alternativeExperiments.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the alternative experiments for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced alternative experiments.\n     */\n    $sliceAlternativeExperiments(i) {\n        return this.sliceAlternativeExperiments(i, { inPlace: true });\n    }\n\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n\n        if (columns !== null) {\n            output._reducedDimensions = this._reducedDimensions.apply(v => generics.SLICE_2D(v, columns, null, { allowView }));\n            output._alternativeExperiments = this._alternativeExperiments.apply(v => generics.SLICE_2D(v, null, columns, { allowView }));\n        } else {\n            output._reducedDimensions = this._reducedDimensions;\n            output._alternativeExperiments = this._alternativeExperiments;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        output._reducedDimensions = this._reducedDimensions;\n        output._alternativeExperiments = this._alternativeExperiments;\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        try {\n            output._reducedDimensions = il.InternalList.parallelCombine(objects.map(x => x._reducedDimensions), generics.COMBINE_ROWS);\n        } catch (e) {\n            throw new Error(\"failed to combine reduced dimensions for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        try {\n            output._alternativeExperiments = il.InternalList.parallelCombine(objects.map(x => x._alternativeExperiments), generics.COMBINE_COLUMNS);\n        } catch (e) {\n            throw new Error(\"failed to combine alternative experiments for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._reducedDimensions = cutils.cloneField(this._reducedDimensions, deepCopy);\n        output._alternativeExperiments = cutils.cloneField(this._alternativeExperiments, deepCopy);\n\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SummarizedExperiment contains zero or more assays, consisting of multi-dimensional arrays (usually matrices) of experimental data,\n * as well as {@linkplain DataFrame}s containing further annotations on the rows or columns of those arrays.\n * The SummarizedExperiment class defines methods for the following generics:\n * \n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * Assays are expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * @extends Annotated\n */\nexport class SummarizedExperiment extends ann.Annotated {\n    /**\n     * @param {Object|Map} assays - Object or Map where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.assayOrder=null] - Array of strings specifying the ordering of the assays.\n     * If non-`null`, this should have the same values as the keys of `assays`.\n     * If `null`, an arbitrary ordering is obtained from `assays`.\n     * @param {?DataFrame} [options.rowData=null] - Data frame of row annotations.\n     * If non-`null`, this should have a number of rows equal to the number of rows in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?DataFrame} [options.columnData=null] - Data frame of column annotations.\n     * If non-`null`, this should have a number of columns equal to the number of columns in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?Array} [options.rowNames=null] - Array of strings of length equal to the number of rows in the `assays`, containing row names.\n     * Alternatively `null`, if no row names are present.\n     * @param {?Array} [options.columnNames=null] - Array of strings of length equal to the number of columns in the `assays`, containing column names.\n     * Alternatively `null`, if no column names are present.\n     * @param {Object|Map} [options.metadata={}] - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(assays, { assayOrder = null, rowData = null, columnData = null, rowNames = null, columnNames = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        // Check the assays.\n        try {\n            this._assays = new il.InternalList(assays, assayOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize assay list for this SummarizedExperiment; \" + e.message, { cause: e });\n        }\n\n        let nrows = null;\n        let ncols = null;\n        for (const k of this._assays.names()) {\n            let current = this._assays.entry(k);\n            let nr = generics.NUMBER_OF_ROWS(current);\n            let nc = generics.NUMBER_OF_COLUMNS(current);\n            if (nrows == null) {\n                nrows = nr;\n                ncols = nc;\n            } else if (nrows !== nr || ncols !== nc) {\n                throw new Error(\"expected all assays in 'assays' to have the same number of rows and columns\");\n            }\n        }\n\n        // Check the rowData.\n        if (rowData === null) {\n            if (nrows == null){\n                throw new Error(\"'rowData' must be specified if 'assays' is empty\");\n            }\n            rowData = new df.DataFrame({}, { numberOfRows: nrows });\n        } else {\n            if (nrows !== null && nrows !== generics.LENGTH(rowData)) {\n                throw new Error(\"'rowData' should be equal to the number of rows in each 'assays'\");\n            }\n        }\n        this._rowData = rowData;\n\n        // Check the columnData.\n        if (columnData === null) {\n            if (ncols == null){\n                throw new Error(\"'columnData' must be specified if 'assays' is empty\");\n            }\n            columnData = new df.DataFrame({}, { numberOfRows: ncols });\n        } else {\n            if (ncols !== null && ncols !== generics.LENGTH(columnData)) {\n                throw new Error(\"'columnData' should be equal to the number of columns in each 'assays'\");\n            }\n        }\n        this._columnData = columnData;\n\n        // Checking the names.\n        if (rowNames != null) {\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._rowData.numberOfRows(), \"the number of rows in each 'assays'\");\n        }\n        this._rowNames = rowNames;\n\n        if (columnNames != null) {\n            utils.checkNamesArray(columnNames, \"'columnNames'\", this._columnData.numberOfRows(), \"the number of columns in each 'assays'\");\n        }\n        this._columnNames = columnNames;\n    }\n\n    static className = \"SummarizedExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of assay names.\n     */\n    assayNames() {\n        return this._assays.names();\n    }\n\n    /**\n     * @return {number} Number of assays.\n     */\n    numberOfAssays() {\n        return this._assays.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Assay to retrieve, either by name or index.\n     * @return {*} The contents of assay `i` as an multi-dimensional array-like object.\n     */\n    assay(i) {\n        let output;\n        try {\n            output = this._assays.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified assay from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of row data, with one row per row in this SummarizedExperiment.\n     */\n    rowData() {\n        return this._rowData;\n    }\n\n    /**\n     * @return {number} Number of rows in this SummarizedExperiment.\n     */\n    numberOfRows() {\n        return this._rowData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of column data, with one row per column in this SummarizedExperiment.\n     */\n    columnData() {\n        return this._columnData;\n    }\n\n    /**\n     * @return {number} Number of columns in this SummarizedExperiment.\n     */\n    numberOfColumns() {\n        return this._columnData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing column names, or `null` if no column names are available.\n     */\n    columnNames() {\n        return this._columnNames;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAssay(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove assay \" + (typeof i == \"string\" ? \"'\" + i + \"'\" : String(i)) + \" from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment after removing the specified assay.\n     */\n    $removeAssay(i) {\n        return this.removeAssay(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} A SummarizedExperiment with modified assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssay(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) !== this.numberOfRows() || generics.NUMBER_OF_COLUMNS(value) !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same dimensions as this 'SummarizedExperiment'\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._assays = target._assays.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assays.\n     */\n    $setAssay(i, value) {\n        return this.setAssay(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified assay names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssayNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the assay names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assay names.\n     */\n    $setAssayNames(names) {\n        return this.setAssayNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAssays(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = this._assays.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the assays for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced assays.\n     */\n    $sliceAssays(i) {\n        return this.sliceAssays(i, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfRows()) {\n            throw new Error(\"expected 'value' to have the same number of rows as this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row data.\n     */\n    $setRowData(value) {\n        return this.setRowData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same number of rows as the number of columns of this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified column data.\n     */\n    $setColumnData(value) {\n        return this.setColumnData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfRows(), \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfColumns(), \"'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        output._assays = this._assays.apply(v => generics.SLICE_2D(v, rows, columns, { allowView }));\n\n        if (rows !== null) {\n            output._rowData = generics.SLICE(this._rowData, rows, { allowView });\n            output._rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, rows, { allowView }));\n        } else {\n            output._rowData = this._rowData;\n            output._rowNames = this._rowNames;\n        }\n\n        if (columns !== null) {\n            output._columnData = generics.SLICE(this._columnData, columns, { allowView });\n            output._columnNames = (this._columnNames == null ? null : generics.SLICE(this._columnNames, columns, { allowView }));\n        } else {\n            output._columnData = this._columnData;\n            output._columnNames = this._columnNames;\n        }\n\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_ROWS);\n\n        let all_dfs = objects.map(x => x._rowData);\n        output._rowData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._rowNames);\n        let all_l = objects.map(x => x.numberOfRows());\n        output._rowNames = utils.combineNames(all_n, all_l);\n\n        output._columnData = this._columnData;\n        output._columnNames = this._columnNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_COLUMNS);\n\n        let all_dfs = objects.map(x => x._columnData);\n        output._columnData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._columnNames);\n        let all_l = objects.map(x => x.numberOfColumns());\n        output._columnNames = utils.combineNames(all_n, all_l);\n\n        output._rowData = this._rowData;\n        output._rowNames = this._rowNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._assays = cutils.cloneField(this._assays, deepCopy);\n        output._rowData = cutils.cloneField(this._rowData, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n\n        output._columnData = cutils.cloneField(this._columnData, deepCopy);\n        output._columnNames = cutils.cloneField(this._columnNames, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as ann from \"./Annotated.js\";\n\nfunction verifyElementMetadata(elementMetadata, numExpected, className) {\n    if (elementMetadata !== null) {\n        if (!(elementMetadata instanceof df.DataFrame)) {\n            throw new Error(\"'elementMetadata' should be a DataFrame\");\n        }\n        if (generics.LENGTH(elementMetadata) !== numExpected) {\n            throw new Error(\"'elementMetadata' should have the same number of rows as 'LENGTH(<\" + className + \">)'\");\n        }\n    } else {\n        elementMetadata = new df.DataFrame({}, { numberOfRows: numExpected });\n    }\n    return elementMetadata;\n}\n\n/**\n * The Vector class implements a store for arbitrary per-element metadata and per-element names.\n * It is intended as a base class for other structures that have a concept of \"vector-ness\".\n * It should not be constructed directly.\n *\n * @augments Annotated\n */\nexport class Vector extends ann.Annotated {\n    /**\n     * @param {number} length - Number of elements in this vector-like object.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-element annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(length, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        this._elementMetadata = verifyElementMetadata(elementMetadata, length, this.constructor.className);\n\n        if (names !== null) {\n            utils.checkNamesArray(names, \"'names'\", length, \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        }\n        this._names = names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {DataFrame} A {@linkplain DataFrame} with one row corresponding to each vector element, containing arbitrary per-element metadata.\n     */\n    elementMetadata() {\n        return this._elementMetadata;\n    }\n\n    /**\n     * @return {?Array} Array of strings containing the name of each range, or `null` if no names are available.\n     */\n    names() {\n        return this._names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the element metadata to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setElementMetadata(elementMetadata, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._elementMetadata = verifyElementMetadata(elementMetadata, generics.LENGTH(target), target.constructor.className);\n        return target;\n    }\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setElementMetadata(elementMetadata) {\n        return this.setElementMetadata(elementMetadata, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the names to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", generics.LENGTH(this), \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        } \n        let target = cutils.setterTarget(this, inPlace);\n        target._names = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setNames(names) {\n        return this.setNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        output._elementMetadata = generics.SLICE(this._elementMetadata, i, { allowView });\n        output._names = (this._names === null ? null : generics.SLICE(this._names, i, { allowView }));\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let all_em = [];\n        let all_n = [];\n        let all_l = [];\n\n        for (const x of objects) {\n            all_em.push(x._elementMetadata);\n            all_n.push(x._names);\n            all_l.push(generics.LENGTH(x));\n        }\n\n        output._elementMetadata = generics.COMBINE(all_em);\n        output._names = utils.combineNames(all_n, all_l);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._elementMetadata = cutils.cloneField(this._elementMetadata, deepCopy);\n        output._names = cutils.cloneField(this._names, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\n\nexport function setterTarget(object, inPlace) {\n    return (inPlace ? object : generics.CLONE(object, { deepCopy: false }));\n}\n\nexport function cloneField(value, deepCopy) {\n    return (deepCopy ? generics.CLONE(value) : value);\n}\n","/**\n * @param {Array|TypedArray} x - Array of values to be interpreted as truthy or falsey.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.not=false] - Whether to select the entries of `x` that are falsey.\n *\n * @return {Array} Array of indices of the entries of `x` that are truthy (if `not=false`) or falsey (if `not=true`).\n * This array is guaranteed to be sorted in ascending order.\n */\nexport function which(x, { not = false } = {}) {\n    let output = [];\n    x.forEach((y, i) => {\n        if ((!y) == not) {\n            output.push(i);\n        }\n    });\n    return output;\n}\n\n/**\n * Given a factor, return the indices corresponding to each level.\n * This can be used in subsequent {@linkcode splitRows} calls.\n *\n * @param {Array|TypedArray} factor - Array containing the factor of interest.\n *\n * @return {Object} Object where each key is a factor level and each value is an array containing the indices corresponding to that level in `factor`.\n */\nexport function presplitFactor(factor) {\n    let by = {};\n    factor.forEach((x, i) => {\n        if (!(x in by)) {\n            by[x] = [];\n        }\n        by[x].push(i);\n    });\n    return by;\n}\n","import * as utils from \"./utils.js\";\n\nexport function convertPositionToRank(start, end, { slice = null } = {}) {\n    let n = (slice == null ? start.length : slice.length);\n\n    let positions = new Int32Array(n * 2);\n    let add = new Uint8Array(n * 2);\n    let index = new Int32Array(n * 2);\n\n    {\n        let counter = 0;\n        let fillIndex = i => {\n            let at = counter * 2;\n            let next = at + 1;\n            positions[at] = start[i];\n            positions[next] = end[i];\n            add[at] = 1;\n            add[next] = 0;\n            index[at] = counter;\n            index[next] = counter;\n            counter++;\n        };\n\n        if (slice === null) {\n            for (var i = 0; i < n; i++) {\n                fillIndex(i);                                \n            }\n        } else {\n            for (const i of slice) {\n                fillIndex(i);\n            }\n        }\n    }\n\n    let order = utils.createSequence(positions.length);\n    order.sort((i, j) => positions[i] - positions[j]);\n\n    let rank2position = [];\n    let new_starts = new Int32Array(n);\n    let new_ends = new Int32Array(n);\n\n    let last = null;\n    for (const i of order) {\n        let pos = positions[i];\n        let idx = index[i];\n\n        if (pos !== last) {\n            rank2position.push(pos);\n            last = pos;\n        }\n\n        if (add[i]) {\n            new_starts[idx] = rank2position.length - 1;\n        } else {\n            new_ends[idx] = rank2position.length - 1;\n        }\n    }\n\n    return { rank2position, startRanks: new_starts, endRanks: new_ends };\n}\n\nexport function buildIntervalTree(start, end, { slice = null } = {}) {\n    let { rank2position, startRanks, endRanks } = convertPositionToRank(start, end, { slice });\n\n    // Now, building an nicely balanced interval tree based on the ranks.\n    let tree = [ create_node(0, rank2position.length) ];\n    if (slice === null) {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], i, tree, 0);\n        }\n    } else {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], slice[i], tree, 0);\n        }\n    }\n\n    // Running a clean-up operation to convert ranks back to positions.\n    let one_past_the_end = (rank2position.length > 0 ? rank2position[rank2position.length - 1] + 1 : 1);\n    rank2position.push(one_past_the_end);\n\n    for (const x of tree) {\n        x.left_bound = rank2position[x.left_bound];\n        x.right_bound = rank2position[x.right_bound];\n        x.center = rank2position[x.center];\n\n        // Also sorting ranges by increasing start and DECREASING end positions.\n        let start_overlaps_sorted = x.overlaps.slice().sort((a, b) => start[a] - start[b]);\n        let end_overlaps_sorted = x.overlaps.sort((a, b) => end[b] - end[a]) // reversed order - deliberate!\n        x.overlaps = {\n            start: start_overlaps_sorted.map(i => [start[i], i]),\n            end: end_overlaps_sorted.map(i => [end[i], i])\n        };\n    }\n\n    return tree;\n}\n\nfunction create_node(left_bound, right_bound) {\n    return { \n        left_bound: left_bound,\n        right_bound: right_bound,\n        center: left_bound + Math.floor((right_bound - left_bound) / 2),\n        left_node: null,\n        right_node: null,\n        overlaps: []\n    };\n}\n\nfunction recursive_build_tree(start, end, index, tree, node) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        if (current.right_node === null) {\n            current.right_node = tree.length;\n            tree.push(create_node(current.center, current.right_bound));\n        }\n        recursive_build_tree(start, end, index, tree, current.right_node);\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Let 0-length ranges fall through to the next clause if they lie exactly on the center.\n        if (current.left_node === null) {\n            current.left_node = tree.length;\n            tree.push(create_node(current.left_bound, current.center));\n        }\n        recursive_build_tree(start, end, index, tree, current.left_node);\n\n    } else {\n        // At some point, every range ends up here. This is because left_bound\n        // == center upon successive halving to create new nodes, so every\n        // range will eventually overlap a center at its own start position.\n        current.overlaps.push(index);\n    }\n}\n\nexport function queryIntervalTree(start, end, tree) {\n    let results = [];\n    if (start > tree.right_bound) {\n        return results;\n    }\n\n    if (end < tree.left_bound || (end == tree.left_bound && end > start)) { // Still allow 0-length ranges to fall through for search.\n        return results;\n    }\n\n    recursive_query_tree(start, end, tree, 0, results); \n    return results;\n}\n\nfunction recursive_query_tree(start, end, tree, node, results) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        for (const overlap of current.overlaps.end) {\n            if (overlap[0] > start) {\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.right_node !== null) {\n            recursive_query_tree(start, end, tree, current.right_node, results);\n        }\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Again, let zero-length ranges fall through if they lie directly on the center.\n        for (const overlap of current.overlaps.start) {\n            if (overlap[0] < end || (overlap[0] == end && start == end)) { // handle zero-length ranges directly on the start position of the center-overlapping range.\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.left_node !== null) {\n            recursive_query_tree(start, end, tree, current.left_node, results);\n        }\n\n    } else {\n        for (const overlap of current.overlaps.start) {\n            results.push(overlap[1]);\n        }\n\n        if (end > current.center) {\n            if (current.right_node !== null) {\n                recursive_query_tree(start, end, tree, current.right_node, results);\n            }\n        }\n        if (start < current.center) {\n            if (current.left_node !== null) {\n                recursive_query_tree(start, end, tree, current.left_node, results);\n            }\n        }\n    }\n}\n","export function areArraysEqual(x, y) {\n    if (x.length !== y.length) {\n        return false;\n    }\n\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] != y[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isArrayLike(x) {\n    return x.constructor == Array || ArrayBuffer.isView(x);\n}\n\nexport function chooseArrayConstructors(con1, con2) {\n    if (con1 == con2) {\n        return con1;\n    }\n\n    if (con1 == Array || con2 == Array) {\n        return Array;\n    }\n\n    if (con1 == BigInt64Array || con2 == BigInt64Array || con1 == BigUint64Array || con2 == BigUint64Array) {\n        return Array;\n    }\n\n    return Float64Array;\n}\n\nexport function formatLengthError(left, right) {\n    return new Error(left + \" should have length equal to \" + right);\n}\n\nexport function checkStringArray(names, typeMessage) {\n    for (const x of names) {\n        if (typeof x !== \"string\") {\n            throw new Error(typeMessage + \" array should only contain strings\");\n        }\n    }\n}\n\nexport function checkNamesArray(names, typeMessage, numExpected, lengthMessage) {\n    checkStringArray(names, typeMessage);\n    if (names.length != numExpected) {\n        throw formatLengthError(typeMessage + \" array\", lengthMessage);\n    }\n}\n\nexport function sum(y) {\n    let total = 0;\n    y.forEach(x => { total += x; });\n    return total;\n}\n\nexport function combineNames(all_names, all_lengths, total_n = null) {\n    let all_null = true;\n    for (var i = 0; i < all_names.length; i++) {\n        if (all_names[i] !== null) {\n            all_null = false;\n        }\n    }\n\n    if (all_null) {\n        return null;\n    }\n\n    if (total_n === null) {\n        total_n = sum(all_lengths);\n    }\n\n    let output = new Array(total_n);\n    let counter = 0;\n    for (var i = 0; i < all_names.length; i++) {\n        let n = all_names[i];\n        if (n === null) {\n            output.fill(\"\", counter, counter + all_lengths[i]);\n            counter += all_lengths[i];\n        } else {\n            n.forEach(x => {\n                output[counter] = x;\n                counter++;\n            });\n        }\n    }\n\n    return output;\n}\n\nexport function createSequence(n) {\n    let output = new Int32Array(n);\n    for (var i = 0; i < n; i++) {\n        output[i] = i;\n    }\n    return output;\n}\n\nexport function isSorted(n, cmp) {\n    for (var i = 1; i < n; ++i) {\n        if (cmp(i-1, i) > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function convertToInt32Array(x) {\n    if (x instanceof Int32Array) {\n        return x;\n    } else {\n        return new Int32Array(x);\n    }\n}\n\nexport function checkNonNegative(x, msg) {\n    for (const y of x) {\n        if (y < 0) {\n            throw new Error(\"detected a negative entry in '\" + msg + \"'\");\n        }\n    }\n}\n\nexport function object2map(x) {\n    if (x.constructor == Object) {\n        let replacement = new Map;\n        for (const [k, v] of Object.entries(x)) {\n            replacement.set(k, v);\n        }\n        return replacement;\n    } \n\n    if (!(x instanceof Map)) {\n        throw new Error(\"'x' should be either an object or Map\");\n    }\n    return x;\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\n\nvar _collections = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the collection details if they are not already available.\n * If `false`, `null` is returned if the collection details have not already been loaded into memory.\n *\n * @return {?Array} Array of objects where each entry corresponds to a set collection and contains details about that collection.\n * Each object can be expected to contain:\n * \n * - `title`, the title for the collection.\n * - `description`, the description for the collection.\n * - `species`, the species for all gene identifiers in the collection.\n *   This should contain the full scientific name, e.g., `\"Homo sapiens\"`, `\"Mus musculus\"`.\n * - `maintainer`, the maintainer of this collection.\n * - `source`, the source of this set, usually a link to some external resource.\n * - `start`, the index for the first set in the collection in the output of {@linkcode sets}.\n *   All sets from the same collection are stored contiguously.\n * - `size`, the number of sets in the collection.\n *\n * In a **gesel** context, the identifier for a collection (i.e., the \"collection ID\") is defined as the index of the collection in this array.\n *\n * If the collection details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllCollections(species, { download = true } = {}) {\n    let target = _collections.get(species);\n    if (typeof target !== \"undefined\") {\n        return target;\n    } else if (!download) {\n        return null;\n    }\n\n    target = [];\n    _collections.set(species, target);\n\n    var cres = await reference_download(species + \"_collections.tsv.gz\");\n    if (!cres.ok) {\n        throw new Error(\"failed to fetch collection information for species '\" + species + \"'\");\n    }\n    var coll_data = decompressLines(await cres.arrayBuffer());\n\n    var start = 0;\n    for (var i = 0; i < coll_data.length; i++) {\n        let x = coll_data[i];\n        var details = x.split(\"\\t\");\n        var len = Number(details[5]);\n        target.push({\n            \"title\": details[0],\n            \"description\": details[1],\n            \"species\": details[2],\n            \"maintainer\": details[3],\n            \"source\": details[4],\n            \"start\": start,\n            \"size\": len\n        });\n        start += len;\n    }\n\n    return target;\n}\n","import { gene_download, decompressLines } from \"./utils.js\";\n\nvar _genes = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Array} [options.types=null] - Array of strings specifying the identifier types to be retrieved.\n * The exact choice of strings depends on how the references were constructed.\n * If `null`, it defaults to an array containing `\"symbol\"`, `\"entrez\"` and `\"ensembl\"`.\n *\n * @return {Map} Object where each key is named after an identifier type in `types`.\n * Each value is an array where each element corresponds to a gene and is itself an array of strings containing all identifiers of the current type for that gene.\n *\n * The arrays for different identifier types are all of the same length, and corresponding elements across these arrays describe the same gene.\n * **gesel**'s identifier for each gene (i.e., the \"gene ID\") is defined as the index of that gene in any of these arrays.\n *\n * @async\n */\nexport async function fetchAllGenes(species, { types = null } = {}) {\n    if (types == null) {\n        types = [ \"symbol\", \"entrez\", \"ensembl\" ];\n    }\n\n    let target = _genes.get(species);\n    if (typeof target == \"undefined\") {\n        target = new Map;\n        _genes.set(species, target);\n    }\n\n    let output = new Map;\n    let promises = [];\n    let processing = [];\n\n    for (const t of types) {\n        let found = target.get(t);\n        if (typeof found == \"undefined\") {\n            promises.push(gene_download(species + \"_\" + t + \".tsv.gz\"));\n            processing.push(t);\n        } else {\n            output.set(t, found);\n        }\n    }\n\n    if (promises.length > 0) {\n        let resolved = await Promise.all(promises);\n        for (var i = 0; i < resolved.length; i++) {\n            let res = resolved[i];\n            if (!res.ok) {\n                throw \"failed to fetch symbol information for genes\";\n            }\n            var buffer = await res.arrayBuffer();\n\n            let gene_data = decompressLines(buffer);\n            let processed = [];\n            for (const x of gene_data) {\n                if (x == \"\") {\n                    processed.push([]);\n                } else {\n                    processed.push(x.split(\"\\t\"));\n                }\n            }\n\n            let t = processing[i];\n            target.set(t, processed);\n            output.set(t, processed);\n        }\n    }\n\n    return output;\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\nimport { fetchAllCollections } from \"./fetchAllCollections.js\";\n\nvar _sets = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set details if they are not already available.\n * If `false`, `null` is returned if the set details have not already been loaded into memory.\n *\n * @return {Array} Array of objects where each entry corresponds to a set and contains the details about that set.\n * Each object can be expected to contain:\n * \n * - `name`, the name of the set.\n * - `description`, the description of the set.\n * - `size`, the number of genes in the set.\n * - `collection`, the index of the collection containing the set.\n * - `number`, the number of the set within the collection.\n *\n * In a **gesel** context, the identifier for a set (i.e., the \"set ID\") is defined as the index of the set in this array.\n *\n * If the set details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllSets(species, { download = true } = {}) {\n    let found = _sets.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    found = [];\n    _sets.set(species, found);\n\n    var [ sres, _collections ] = await Promise.all([reference_download(species + \"_sets.tsv.gz\"), fetchAllCollections(species)]);\n    if (!sres.ok) {\n        throw new Error(\"failed to fetch set information for species '\" + species + \"'\");\n    }\n    var set_data = decompressLines(await sres.arrayBuffer());\n\n    for (var i = 0; i < set_data.length; i++) {\n        let x = set_data[i];\n        var details = x.split(\"\\t\");\n        found.push({\n            \"name\": details[0],\n            \"description\": details[1],\n            \"size\": Number(details[2])\n        });\n    }\n\n    let start = 0;\n    for (var i = 0; i < _collections.length; i++) {\n        let len = _collections[i].size;\n\n        // For easier access going the other way.\n        for (var j = 0; j < len; j++) {\n            found[j + start].collection = i;\n            found[j + start].number = j;\n        }\n\n        start += len;\n    }\n\n    return found;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the embeddings if they are not already available.\n * If `false`, `null` is returned if the embeddings have not already been loaded into memory.\n *\n * @return {?Object} Object with the `x` and `y`-coordinates for the t-SNE embedding.\n * \n * Each value is a Float64Array of length equal to the total number of sets for this `species`.\n * Each entry of the Float64Array corresponds to a gene set in {@linkcode fetchAllSets} and that set's x/y-coordinates on the embedding.\n * \n * If the embedding mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchEmbeddings(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_tsne.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch embeddings for species '\" + species + \"'\");\n    }\n\n    let embed_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = convertToCoordinates(embed_data);\n\n    _cache.set(species, loaded);\n    return loaded;\n}\n\n// Provided for back-compatibility.\nexport function fetchEmbeddingsForSpecies(species, { download = true } = {}) {\n    return fetchEmbeddings(species, { download });\n}\n\nfunction convertToCoordinates(lines) {\n    var x = [], y = [];\n\n    for (let i = 0; i < lines.length; i++) {\n        let split = lines[i].split(\"\\t\");\n        x.push(Number(split[0]));\n        y.push(Number(split[1]));\n    }\n\n    return {\n        \"x\": new Float64Array(x), \n        \"y\": new Float64Array(y)\n    }\n};\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set-to-gene mappings if they are not already available.\n * If `false`, `null` is returned if the set-to-gene mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of sets for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllSets} and is an array of integers containing the IDs for all genes belonging to that set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If the set-to-gene mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchGenesForAllSets(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_set2gene.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full set-to-gene information for species '\" + species + \"'\");\n    }\n\n    var set_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = set_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchGenesForAllSets.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full set-to-gene mappings if {@linkcode fetchGenesForAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set-to-gene information up-front to avoid range requests.\n * This is done by calling {@linkcode fetchGenesForAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs for all genes belonging to the set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchGenesForSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchGenesForAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound == \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_set2gene.tsv\"));\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sefound = spfound.get(set);\n    if (typeof sefound !== \"undefined\") {\n        return sefound;\n    }\n\n    let ranges = _ranges.get(species);\n    let text = await utils.retrieveBytesByIndex(species + \"_set2gene.tsv\", ranges, set);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(set, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the gene-to-set mappings if they are not already available.\n * If `false`, `null` is returned if the gene-to-set mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of genes for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllGenes} and is an array of integers containing the IDs for all sets containing that gene.\n * Set IDs refer to indices in {@linkcode fetchAllSets}.\n *\n * If the gene-to-set mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchSetsForAllGenes(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_gene2set.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full gene-to-set information for species '\" + species + \"'\");\n    }\n\n    var gene_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = gene_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchSetsForAllGenes.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return {number} Number of genes that belong to at least one set for `species`.\n * This can be used as a more appropriate universe size in {@linkcode testEnrichment}.\n */\nexport async function effectiveNumberOfGenes(species) {\n    let ffound = await full.fetchSetsForAllGenes(species, { download: false });\n    if (ffound !== null) {\n        let okay = 0;\n        for (const x of ffound) {\n            okay += x.length > 0;\n        }\n        return okay;\n    }\n\n    let ranged = _ranges.get(species);\n    if (typeof ranged === \"undefined\") {\n        _cache.set(species, new Map);\n        ranged = await utils.retrieveRanges(species + \"_gene2set.tsv\")\n        _ranges.set(species, ranged);\n    }\n\n    let okay = 0;\n    for (var i = 1; i < ranged.length; i++) {\n        if (ranged[i] > ranged[i-1] + 1) {\n            okay++;\n        }\n    }\n\n    return okay;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} gene - Gene ID, see {@linkcode fetchAllGenes} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full gene-to-set mappings if {@linkcode fetchSetsForAllGenes} was called before this function. \n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all gene-to-set mappings up-front to avoid range requests.\n * This is done by calling {@linkcode fetchSetsForAllGenes}\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs of all sets containing the gene.\n * IDs are treated as indices into the return value of {@linkcode fetchAllSets} or as input to {@linkcode fetchSingleSet}.\n *\n * If `gene = null`, no return value is provided.\n * \n * @async\n */\nexport async function fetchSetsForGene(species, gene, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchSetsForAllGenes(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (gene !== null) {\n                return ffound[gene];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound === \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_gene2set.tsv\"));\n    }\n    if (gene == null) {\n        return;\n    }\n\n    let gfound = spfound.get(gene);\n    if (typeof gfound !== \"undefined\") {\n        return gfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_gene2set.tsv\", _ranges.get(species), gene);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(gene, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllCollections.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\n\nasync function initialize(species) {\n    let res = await utils.retrieveRangesWithExtras(species + \"_collections.tsv\");\n    _ranges.set(species, res.ranges);\n    _sizes.set(species, res.extra);\n\n    let first = 0;\n    let starts = [];\n    for (const s of res.extra) {\n        starts.push(first);\n        first += s;\n    }\n    _starts.set(species, starts);\n\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of sets in each collection.\n * Each value corresponds to a collection in {@linkcode fetchAllCollections}.\n * @async\n */\nexport async function fetchCollectionSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of collections for this species.\n * @async\n */\nexport async function numberOfCollections(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} collection - Collection ID, see {@linkcode fetchAllCollections} for details.\n * \n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full collection details if {@linkcode fetchAllCollections} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all collection details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllCollections}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the collection.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllCollections}.\n *\n * If `collection = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleCollection(species, collection, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllCollections(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (collection !== null) {\n                return ffound[collection];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (collection == null) {\n        return;\n    }\n\n    let cfound = cached.get(collection);\n    if (typeof cfound !== \"undefined\") {\n        return cfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_collections.tsv\", _ranges.get(species), collection);\n    let split = text.split(\"\\t\");\n    let output = {\n        title: split[0],\n        description: split[1],\n        species: split[2],\n        maintainer: split[3],\n        source: split[4],\n        start: _starts.get(species)[collection],\n        size: _sizes.get(species)[collection]\n    };\n\n    cached.set(collection, output);\n    return output;\n}\n\n\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllSets.js\";\nimport { fetchCollectionSizes } from \"./fetchSingleCollection.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\nconst _parents = new Map;\nconst _internal_number = new Map;\n\nasync function initialize(species) {\n    const [ sres, csizes ] = await Promise.all([ \n        utils.retrieveRangesWithExtras(species + \"_sets.tsv\"), \n        fetchCollectionSizes(species) \n    ]);\n    _ranges.set(species, sres.ranges);\n    _sizes.set(species, sres.extra);\n\n    let parents = [];\n    let internal_number = [];\n    var totals = 0;\n    for (var i = 0; i < csizes.length; i++) {\n        let colsize = csizes[i];\n        for (var j = 0; j < colsize; j++) {\n            parents.push(i);\n            internal_number.push(j);\n        }\n        totals += colsize;\n    }\n\n    if (totals != sres.extra.length) {\n        throw new Error(\"discrepancy between number of sets and sum of collection sizes\");\n    }\n\n    _parents.set(species, parents);\n    _internal_number.set(species, internal_number);\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of genes in each set.\n * Each value corresponds to a set in {@linkcode fetchAllSets}.\n * @async\n */\nexport async function fetchSetSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of sets for this species.\n * @async\n */\nexport async function numberOfSets(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full set details if {@linkcode fetchAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the set.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllSets}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                console.log(set);\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sfound = cached.get(set);\n    if (typeof sfound !== \"undefined\") {\n        return sfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_sets.tsv\", _ranges.get(species), set);\n    let split = text.split(\"\\t\");\n    let output = {\n        name: split[0],\n        description: split[1],\n        size: _sizes.get(species)[set],\n        collection: _parents.get(species)[set],\n        number: _internal_number.get(species)[set]\n    };\n\n    cached.set(set, output);\n    return output;\n}\n\n\n","import { fetchAllGenes } from \"./fetchAllGenes.js\";\n\nvar by_symbol = new Map;\nvar by_symbol_lower = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} type - Type of the identifier to use as the key of the map, e.g., `\"ensembl\"`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.lowerCase=false] - Whether to use lower-case keys in the map.\n *\n * @return {Map} Map where each key is a string containing a (possibly lower-cased) identifier of the specified `type` and each value is an array.\n * Each array contains the **gesel** gene IDs associated with the `type` identifier, see {@linkcode fetchAllGenes} for ore details.\n *\n * @async\n */\nexport async function mapGenesByIdentifier(species, type, { lowerCase = false } = {}) {\n    let host = (lowerCase ? by_symbol_lower : by_symbol);\n\n    let sfound = host.get(species);\n    if (typeof sfound === \"undefined\") {\n        sfound = new Map;\n        host.set(species, sfound);\n    }\n\n    let tfound = sfound.get(type);\n    if (typeof tfound === \"undefined\") {\n        tfound = new Map;\n        sfound.set(type, tfound);\n\n        let _genes = (await fetchAllGenes(species, { types: [ type ] })).get(type);\n        for (var i = 0; i < _genes.length; i++) {\n            for (let y of _genes[i]) {\n                if (lowerCase) {\n                    y = y.toLowerCase();\n                }\n\n                let current = tfound.get(y);\n                if (typeof current !== \"undefined\") {\n                    current.add(i);\n                } else {\n                    tfound.set(y, new Set([i]));\n                }\n            }\n        }\n\n        for (const [key, val] of tfound) {\n            tfound.set(key, Array.from(val));\n        }\n    }\n\n    return tfound;\n}\n","/**\n * Reindex the gene sets for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to convert the **gesel** gene IDs to indices within that universe.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and should be an array containing the corresponding **gesel** gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * @param {Array} genesForSets - Array of length equal to the number of reference gene sets.\n * Each entry corresponds to a set and is an array containing **gesel** gene IDs for all genes in that set.\n * This is typically obtained from {@linkcode fetchGenesForAllSets}.\n *\n * @return {Array} Array of length equal to `genesForSets`. \n * Each entry corresponds to a reference gene set and is a Uint32Array where the elements are indices into `geneMapping`, specifying the genes in the user's universe that belong to that set.\n * If a gene in `geneMapping` maps to multiple **gesel** IDs, it is considered to belong to all sets containing any of its mapped **gesel** gene IDs.\n */\nexport function reindexGenesForAllSets(geneMapping, genesForSets) {\n    let reverse_mapping = new Map;\n    for (var i = 0; i < geneMapping.length; i++) {\n        for (const gesel_gene of geneMapping[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found == \"undefined\") {\n                found = new Set;\n                reverse_mapping.set(gesel_gene, found);\n            }\n            found.add(i);\n        }\n    }\n\n    // Converting everything to an array for easier iteration. \n    for (const [k, v] of reverse_mapping) {\n        reverse_mapping[k] = new Uint32Array(v);\n    }\n\n    let new_sets = new Array(genesForSets.length);\n    for (var i = 0; i < genesForSets.length; i++) {\n        let subset = new Set;\n        for (const gesel_gene of genesForSets[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found !== \"undefined\") {\n                for (const gene of found) {\n                    subset.add(gene);\n                }\n            }\n        }\n        new_sets[i] = (new Uint32Array(subset)).sort();\n    }\n\n    return new_sets;\n}\n\n","/**\n * Reindex the gene-to-set mappings for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to create a mapping of all sets containing each of their own genes.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and should be an array containing the corresponding **gesel** gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * @param {Array} setsForGenes - Array of length equal to the number of **gesel** gene IDs.\n * Each entry corresponds to a **gesel** gene ID and is an array containing the set IDs for all sets containing that gene.\n * This is typically obtained from {@linkcode fetchSetsForAllGenes}.\n *\n * @return {Array} Array of length equal to `geneMapping`.\n * Each entry corresponds to a gene in the user-supplied universe and is a Uint32Array where the elements are the **gesel** set IDs containing that gene.\n * If a gene in `geneMapping` maps to multiple **gesel** IDs, we report all sets containing any of its mapped **gesel** gene IDs.\n */\nexport function reindexSetsForAllGenes(geneMapping, setsForGenes) {\n    let remapped = new Array(geneMapping.length);\n    for (var i = 0; i < geneMapping.length; i++) {\n        let collected = new Set;\n        for (const gesel_gene of geneMapping[i]) {\n            for (const set of setsForGenes[gesel_gene]) {\n                collected.add(set);\n            }\n        }\n        remapped[i] = (new Uint32Array(collected)).sort();\n    }\n    return remapped;\n}\n","import * as utils from \"./utils.js\";\n\nexport function binarySearch(query, vector) {\n    let left = 0;\n    let right = vector.length;\n\n    while (left < right) {\n        let mid = Math.trunc((left + right) / 2);\n        if (vector[mid] < query) {\n            left = mid + 1;\n        } else if (vector[mid] > query) {\n            right = mid;\n        } else {\n            return mid;\n        }\n    }\n\n    return left;\n}\n\nasync function fetchSetsByToken(species, token, file, all_ranges, all_ordered, all_cache) {\n    let actual_file = species + \"_\" + file;\n\n    let cached = all_cache.get(species);\n    if (typeof cached === \"undefined\") {\n        const { ranges, order } = await utils.retrieveNamedRanges(actual_file);\n        all_ranges.set(species, ranges);\n        all_ordered.set(species, order);\n        cached = new Map;\n        all_cache.set(species, cached);\n    }\n\n    if (token == null) {\n        return;\n    }\n\n    let tfound = cached.get(token);\n    if (typeof tfound !== \"undefined\") {\n        return tfound;\n    }\n\n    let ranges = all_ranges.get(species);\n    let output;\n    if (token.includes(\"*\") || token.includes(\"?\")) {\n        let ordered = all_ordered.get(species);\n\n        // Wildcard handling.\n        let initstub = token.replace(/[*?].*/, \"\")\n        let pos = (initstub == \"\" ? 0 : binarySearch(initstub, ordered));\n        let regex = new RegExp(token.replace(/[*]/g, \".*\").replace(/[?]/g, \".\"));\n\n        let collected = [];\n        let to_cache = [];\n        let union = new Set;\n\n        while (pos < ordered.length) {\n            let candidate = ordered[pos];\n            if (initstub != \"\" && !candidate.startsWith(initstub)) {\n                break;\n            }\n\n            let cfound = cached.get(candidate);\n            if (typeof cfound === \"undefined\") {\n                let rr = ranges.get(candidate);\n                collected.push(utils.retrieveBytes(actual_file, rr[0], rr[1]).then(utils.convertToUint32Array));\n                to_cache.push(candidate);\n            } else {\n                for (const y of cfound) {\n                    union.add(y);\n                }\n            }\n\n            pos++;\n        }\n\n        let resolved = await Promise.all(collected);\n        for (var i = 0; i < resolved.length; i++) {\n            let x = resolved[i];\n            cached.set(to_cache[i], x);\n            for (const y of x) {\n                union.add(y);\n            }\n        }\n\n        output = new Uint32Array(union);\n\n    } else {\n        // Direct handling.\n        let rr = ranges.get(token);\n        if (typeof rr === \"undefined\") {\n            return new Uint32Array;\n        }\n        let text = await utils.retrieveBytes(actual_file, rr[0], rr[1]);\n        output = utils.convertToUint32Array(text);\n    }\n\n    cached.set(token, output);\n    return output;\n}\n\nconst n_cache = new Map;\nconst n_ranges = new Map;\nconst n_ordered = new Map;\n\nasync function fetchSetsByNameToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-names.tsv\", n_ranges, n_ordered, n_cache);\n}\n\nconst d_cache = new Map;\nconst d_ranges = new Map;\nconst d_ordered = new Map;\n\nasync function fetchSetsByDescriptionToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-descriptions.tsv\", d_ranges, d_ordered, d_cache);\n}\n\nexport async function preloadTokens(species, resp, ordered, cache, msg) {\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch full set of \" + msg + \" tokens for species '\" + species + \"'\");\n    }\n\n    let lines = utils.decompressLines(await resp.arrayBuffer());\n    if (lines.length !== ordered.length) {\n        throw new Error(\"mismatch in lengths between token names and set indices for species '\" + species + \"'\");\n    }\n\n    for (var i = 0; i < lines.length; i++) {\n        cache.set(ordered[i], utils.convertToUint32Array(lines[i]));\n    }\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return Preloads the search indices for use in {@linkcode searchSetText}.\n * This performs a one-off download of the indices such that further calls to {@linkcode searchSetText} do not need to perform HTTP range requests.\n */\nexport async function preloadSearchSetText(species) {\n    let full = await Promise.all([ \n        utils.reference_download(species + \"_tokens-names.tsv.gz\"),\n        utils.reference_download(species + \"_tokens-descriptions.tsv.gz\"),\n        fetchSetsByNameToken(species, null),\n        fetchSetsByDescriptionToken(species, null)\n    ]);\n    await preloadTokens(species, full[0], n_ordered.get(species), n_cache.get(species), \"name\");\n    await preloadTokens(species, full[1], d_ordered.get(species), d_cache.get(species), \"description\");\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} query - Query string containing multiple words to search in the names and/or descriptions of each set.\n *\n * Each stretch of alphanumeric characters and dashes is treated as a single word.\n * All other characters are treated as punctuation between words, except for the following wildcards:\n *\n * - `*`: match zero or more alphanumeric or dash characters.\n * - `?`: match exactly one alphanumeric or dash character.\n *\n * A set's name and/or description must contain all words in `query` to be considered a match.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inName=true] - Whether to search the name of the set for matching words.\n * @param {boolean} [options.inDescription=true] - Whether to search the description of the set for matching words.\n *\n * @return {Array} Array of indices of the sets with names and/or descriptions that match `query`.\n * @async\n */\nexport async function searchSetText(species, query, { inName = true, inDescription = true } = {}) {\n    // Tokenizing the query using the same logic as in the feedstock repository,\n    // but preserving our wildcards for special handling later.\n    let processed = query.toLowerCase().replace(/[^a-zA-Z0-9-?*]/g, \" \");\n    let tokens = processed.split(/\\s+/);\n    tokens = tokens.filter(x => x !== \"\" || x !== \"-\");\n\n    let init = [];\n    if (inName) {\n        init.push(fetchSetsByNameToken(species, null));\n    }\n    if (inDescription) {\n        init.push(fetchSetsByDescriptionToken(species, null));\n    }\n    await Promise.all(init); // force initialization of all caches.\n\n    let gathered_names = [];\n    if (inName) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_names.push(fetchSetsByNameToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let gathered_descriptions = [];\n    if (inDescription) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_descriptions.push(fetchSetsByDescriptionToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let resolved_names = await Promise.all(gathered_names);\n    let resolved_descriptions = await Promise.all(gathered_descriptions);\n\n    let gathered = [];\n    for (var i = 0; i < tokens.length; i++) {\n        let n = (inName ? resolved_names[i] : []);\n        let d = (inDescription ? resolved_descriptions[i] : []);\n\n        let combined = new Uint32Array(n.length + d.length);\n        combined.set(n);\n        combined.set(d, n.length);\n        gathered.push(combined);\n    }\n\n    return utils.intersect(gathered);\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Helper class for handling matrix data from multiple modalities.\n * In particular, it simplifies memory management of the assorted {@linkplain ScranMatrix} instances containing data for different features in the same set of cells.\n */\nexport class MultiMatrix {\n    #store;\n    #ncols;\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object} [options.store={}] - Existing store of {@linkplain ScranMatrix} objects.\n     * Each matrix should correspond to a different modality, named according to its key.\n     * All matrices should have data for the same set of cells, i.e., same number of columns.\n     */\n    constructor({ store = {} } = {}) {\n        this.#store = store;\n        this.#ncols = null;\n\n        let keys = Object.keys(store);\n        if (keys.length) {\n            // We ignore numberOfColumns here, as everyone should have the same number of cells.\n            for (var k = 0; k < keys.length; k++) {\n                let current = store[keys[k]];\n                if (k == 0) {\n                    this.#ncols = current.numberOfColumns();\n                } else if (current.numberOfColumns() != this.#ncols) {\n                    throw new Error(\"all matrices should have the same number of columns\");\n                }\n            }\n        }\n    }\n\n    /**\n     * @return {?number} Number of columns in the matrices.\n     * If no matrices are available, `null` is returned.\n     */\n    numberOfColumns() {\n        return this.#ncols;\n    }\n\n    /**\n     * @return {Array} Names of the available modalities.\n     */\n    available() {\n        return Object.keys(this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {boolean} Whether modality `i` is available.\n     */\n    has(i) {\n        return (i in this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {ScranMatrix} The matrix data for modality `i`.\n     */\n    get(i) {\n        return this.#store[i];\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @param {ScranMatrix} matrix - The matrix data for modality `i`.\n     *\n     * @return `matrix` is added to the MultiMatrix with name `i`.\n     */\n    add(i, matrix) {\n        if (this.#ncols === null) {\n            this.#ncols = matrix.numberOfColumns();\n        } else if (matrix.numberOfColumns() != this.#ncols) {\n            throw new Error(\"all matrices should have the same number of columns\");\n        }\n\n        if (i in this.#store) {\n            let old = this.#store[i];\n            utils.free(old);\n        }\n\n        this.#store[i] = matrix;\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return Modality `i` is removed from the MultiMatrix.\n     */\n    remove(i) {\n        utils.free(this.#store[i]);\n        delete this.#store[i];\n        if (Object.keys(this.#store).length == 0) {\n            this.#ncols = null;\n        }\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {MultiMatrix} A deep copy of the current object. \n     */\n    clone() {\n        let new_matrix = new MultiMatrix;\n        try {\n            for (const [k, v] of Object.entries(this.#store)) {\n                new_matrix.add(k, v.clone());\n            }\n        } catch (e) {\n            new_matrix.free();\n            throw e;\n        }\n        return new_matrix;\n    }\n\n    /**\n     * @param {string} from - Old name of the modality.\n     * @param {string} to - New name for the modality.\n     *\n     * @return The modality `from` is renamed to `to`, possibly replacing any existing modality at `to`.\n     */\n    rename(from, to) {\n        if (from !== to) {\n            if (to in this.#store) {\n                utils.free(this.#store[to]);\n            }\n            this.#store[to] = this.#store[from];\n            delete this.#store[from];\n        }\n    }\n\n    /**\n     * @return Frees memory for all modalities in this MultiMatrix.\n     */\n    free() {\n        for (const [x, v] of Object.entries(this.#store)) {\n            utils.free(v);\n        }\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Wrapper around a matrix allocated on the Wasm heap.\n * @hideconstructor\n */\nexport class ScranMatrix {\n    #id;\n    #matrix;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#matrix = raw;\n        return;\n    }\n\n    /**\n     * Create a dense matrix from an existing Wasm-allocated buffer.\n     *\n     * @param {number} rows - Number of rows.\n     * @param {number} columns - Number of columns.\n     * @param {Float64WasmArray} contents - Array of matrix contents.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.columnMajor=true] - Whether the array in `contents` is column-major.\n     * @param {boolean} [options.copy=true] - Whether to copy `contents` when constructing the {@linkplain ScranMatrix}.\n     * If `false`, the returned {@linkplain ScranMatrix} will refer to the same allocation as `contents`,\n     * so callers should make sure that it does not outlive `contents`.\n     *\n     * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrix contents.\n     */\n    static createDenseMatrix(rows, columns, contents, { columnMajor = true , copy = true } = {}) {\n        if (!(contents instanceof wa.Float64WasmArray)) {\n            throw new Error(\"'contents' should be a Float64WasmArray\");\n        }\n        if (contents.length != rows * columns) {\n            throw new Error(\"length of 'contents' should equal the product of 'rows' and 'columns'\");\n        }\n        return gc.call(module => new module.NumericMatrix(rows, columns, contents.offset, columnMajor, copy), ScranMatrix);\n    }\n\n    /**\n     * @return {ScranMatrix} A clone of the current ScranMatrix instance.\n     * This can be freed independently of the current instance.\n     */\n    clone() {\n        return gc.call(\n            module => this.#matrix.clone(),\n            ScranMatrix\n        );\n    }\n\n    // Internal use only, not documented.\n    get matrix() {\n        return this.#matrix;\n    }\n\n    /**\n     * @return {number} Number of rows in the matrix.\n     */\n    numberOfRows() {\n        return this.#matrix.nrow();\n    }\n\n    /**\n     * @return {number} Number of columns in the matrix.\n     */\n    numberOfColumns() {\n        return this.#matrix.ncol();\n    }\n\n    /**\n     * @param {number} i - Index of the row to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     *\n     * @return {Float64Array} An array containing the contents of row `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    row(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.row(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.ncol());\n            try {\n                this.#matrix.row(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /**\n     * @param {number} i - Index of the column to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     *\n     * @return {Float64Array} An array containing the contents of column `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    column(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.column(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.column(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /** \n     * Free the memory on the Wasm heap for this.#matrix.\n     * This invalidates this object and all of its references.\n     */\n    free() {\n        if (this.#matrix !== null) {\n            gc.release(this.#id);\n            this.#matrix = null;\n        }\n        return;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is sparse.\n     */\n    isSparse() {\n        return this.#matrix.sparse();\n    }\n\n    // Internal use only, by initialize* functions.\n    isReorganized() {\n        return this.#matrix.reorganized();\n    }\n\n    // Internal use only, by initialize* functions.\n    identities({ buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.identities(buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createInt32WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.identities(buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    // Internal use only, by initialize* functions.\n    wipeIdentities() {\n        this.#matrix.wipe_identities();\n        return;\n    }\n}\n","import * as methods from \"../file.js\";\n\nexport function temp(prefix, extension) {\n    let tmppath;\n    do {\n        tmppath = prefix + String(Number(new Date())) + \"_\" + String(Math.round(Math.random() * 10000)) + extension;\n    } while (methods.existsFile(tmppath));\n    return tmppath;\n}\n\nexport function handleString(file) {\n    throw new Error(\"cannot access the file system in a browser context\");\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Wrapper for the cell aggregation results, produced by {@linkcode aggregateAcrossCells}.\n * @hideconstructor\n */\nexport class AggregateAcrossCellsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of groups.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @return {number} Number of genes.\n     */\n    numberOfGenes() {\n        return this.#results.num_genes();\n    }\n\n    /**\n     * @param {?number} group - Index of the group.\n     * If a number, it should be non-negative and less than {@linkcode AggregateAcrossCellsResults#numberOfGroups numberOfGroups}.\n     * This may also be `null` to obtain values for all groups.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {(string|boolean)} [options.copy=true] - Copying mode to use when `asMatrix = false`, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray}\n     * If `group` is a number, an array is returned where each entry corresponds to a gene and contains the summed value across all cells in the specified `group`.\n     * If {@linkcode aggregateAcrossCells} was run with `average = true`, the array contains the mean value instead of the sum.\n     *\n     * If `group = null`, an array is returned containing the concatenation of the arrays for all groups.\n     * If `copy = \"view\"`, the output can be used in {@linkcode ScranMatrix#createDenseMatrix ScranMatrix.createDenseMatrix} to create a {@linkcode ScranMatrix} for input into other functions.\n     */\n    sums(group, { copy = true } = {}) {\n        let vec = (group !== null ? this.#results.group_sums(group) : this.#results.all_sums());\n        return utils.possibleCopy(vec, copy);\n    }\n\n    /**\n     * @param {number} group - Index of the group.\n     * This should be non-negative and less than {@linkcode AggregateAcrossCellsResults#numberOfGroups numberOfGroups}.\n     * This may also be `null` to obtain values for all groups.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {(string|boolean)} [options.copy=true] - Copying mode to use when `asMatrix = false`, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray}\n     * If `group` is a number, an array is returned where each entry corresponds to a gene and contains the number of detected cells in the specified `group`.\n     * If {@linkcode aggregateAcrossCells} was run with `average = true`, each value is the proportion of cells with detected expression.\n     * \n     * If `group = null`, an array is returned containing the concatenation of the arrays for all groups.\n     * If `copy = \"view\"`, the output can be used in {@linkcode ScranMatrix#createDenseMatrix ScranMatrix.createDenseMatrix} to create a {@linkcode ScranMatrix} for input into other functions.\n     */\n    detected(group, { copy = true } = {}) {\n        let vec = (group !== null ? this.#results.group_detected(group) : this.#results.all_detected());\n        return utils.possibleCopy(vec, copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Aggregate per-cell expression profiles for each group of cells.\n * This is typically used to summarize data into per-cluster expression profiles for easier inspection.\n *\n * @param {ScranMatrix} x - Some expression matrix, typically containing normalized log-expression values.\n * @param {Int32Array|Int32WasmArray} groups - Array containing group IDs for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.average=false] - Whether to compute the average expression instead of the sum for each group.\n * Similarly, the proportion of detected expression is reported, rather than the number of detected cells in each group.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {AggregateAcrossCellsResults} Object containing the aggregation results.\n */\nexport function aggregateAcrossCells(x, groups, { average = false, numberOfThreads = null } = {}) {\n    var group_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        output = gc.call(\n            module => module.aggregate_across_cells(x.matrix, group_data.offset, average, nthreads),\n            AggregateAcrossCellsResults \n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(group_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as fac from \"./factorize.js\";\n\n/**\n * Create a blocking factor for a set of contiguous blocks, usually to accompany the output of {@linkcode cbind} on matrices representing different batches.\n * This can be used as the blocking factor in functions such as {@linkcode modelGeneVar} or {@linkcode scoreMarkers}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n *\n * @param {(Array|TypedArray)} ncells - Array of integers specifying the number of cells in each block.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the sum of `ncells`.\n *\n * @return {Int32WasmArray} Array containing the blocking factor.\n * Each value specifies the block of origin for each cell.\n *\n * If `buffer` was supplied, it is used as the return value. \n */\nexport function createBlock(ncells, { buffer = null } = {}) {\n    let total = 0;\n    ncells.forEach(x => { total += x; });\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(total);\n            buffer = local_buffer;\n        } else if (buffer.length !== total) {\n            throw new Error(\"'buffer' should have length equal to sum of 'ncells'\");\n        }\n\n        let barr = buffer.array();\n        let sofar = 0;\n        for (var i = 0; i < ncells.length; i++) {\n            let old = sofar;\n            sofar += ncells[i];\n            barr.fill(i, old, sofar);\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n// Soft-deprecated in favor of the more general convertToFactor().\nexport function convertBlock(x, { buffer = null } = {}) {\n    let output = fac.convertToFactor(x, { buffer, action: \"warn\", placeholder: 0 });\n    output.levels = output.levels.map(String);\n    return output;\n}\n\n// Soft-deprecated in favor of the more general subsetFactor(), or wasmarrays.js's subsetWasmArray, take your choice.\nexport function subsetBlock(x, subset, { filter = null, buffer = null } = {}) {\n    return wa.subsetWasmArray(x, subset, { filter, buffer });\n}\n\n// Soft-deprecated, just use subsetFactor().\nexport function filterBlock(x, filter, { buffer = null } = {}) {\n    return subsetBlock(x, filter, { buffer: buffer, filter: true });\n}\n\n// Soft-deprecated in favor of dropUnusedLevels().\nexport function dropUnusedBlock(x) {\n    return fac.dropUnusedLevels(x);\n}\n","import * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as gc from \"./gc.js\";\n\nfunction harvest_matrices(x) {\n    let output = utils.createBigUint64WasmArray(x.length);\n    let arr = output.array();\n    for (var i = 0; i < x.length; i++) {\n        arr[i] = BigInt(x[i].matrix.$$.ptr);\n    }\n    return output;\n}\n\n/**\n * Combine matrices by column, where all matrices contain data for the same features, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of features.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by column.\n */\nexport function cbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.cbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by row, where all matrices contain data for the same cells, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of cells.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by row.\n */\nexport function rbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.rbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by column, after subsetting each matrix to the intersection of common features.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * @param {Array} names - Array of length equal to `inputs`.\n * Each entry should be an Array containing the row names of the corresponding entry of `inputs`.\n * Names should correspond to the rows of that entry of `inputs`.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the combined matrices.\n * - `indices`, an Int32WasmArray of length equal to the number of rows in `matrix`.\n *    This contains the index of the row in the first entry of `inputs` corresponding to each row of `matrix`,\n *    i.e., the gene at the `i`-th row of `matrix` is the same as the gene at the `indices[i]`-th row of `inputs[0]`.\n * - `names`, an array of names identifying the rows of `matrix`.\n *    This is constructed by indexing the first entry of `names` with `indices`.\n */\nexport function cbindWithNames(x, names) {\n    let mat_ptrs;\n    let renamed = [];\n    let name_ptrs;\n    let indices;\n    let output = {};\n\n    try {\n        // Building a common set of rownames.\n        if (names.length !== x.length) {\n            throw new Error(\"length of 'names' should be equal to length of 'x'\");\n        }\n\n        let common = {};\n        let universe = [];\n        for (var i = 0; i < names.length; i++) {\n            if (x[i].numberOfRows() !== names[i].length) {\n                throw new Error(\"length of each 'names' must equal number of rows of its corresponding 'x'\");\n            }\n            names[i].forEach(x => {\n                if (!(x in common)) {\n                    common[x] = universe.length;\n                    universe.push(x);\n                }\n            });\n        }\n\n        name_ptrs = utils.createBigUint64WasmArray(x.length);\n        {\n            let names_arr = name_ptrs.array();\n            for (var i = 0; i < names.length; i++) {\n                let current = names[i];\n                let replacement = utils.createInt32WasmArray(current.length);\n                let replacement_arr = replacement.array();\n                current.forEach((x, i) => {\n                    replacement_arr[i] = common[x];\n                });\n                renamed.push(replacement);\n                names_arr[i] = BigInt(replacement.offset);\n            }\n        }\n\n        mat_ptrs = harvest_matrices(x);\n        indices = utils.createInt32WasmArray(x[0].numberOfRows());\n        output.matrix = gc.call(\n            module => module.cbind_with_rownames(x.length, mat_ptrs.offset, name_ptrs.offset, indices.offset),\n            ScranMatrix\n        );\n\n        output.indices = indices.slice(0, output.matrix.numberOfRows());\n        let internames = [];\n        for (const i of output.indices) {\n            internames.push(names[0][i]);\n        }\n        output.names = internames;\n\n    } catch (e) {\n        utils.free(output.matrix);\n        throw e;\n\n    } finally {\n        utils.free(mat_ptrs);\n        utils.free(name_ptrs);\n        utils.free(indices);\n        for (const x of renamed) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport { ModelGeneVarResults } from \"./modelGeneVar.js\";\n\n/**\n * Compute the filter threshold required to retain the top `number` values.\n *\n * @param {Array|TypedArray} x - Array of numeric values, typically per-gene statistics.\n * @param {number} number - Number of top values to retain after filtering on the returned threshold.\n * This may be approximate in the presence of ties.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.largest=true] - Whether the top values in `x` are defined as the largest numeric values.\n * If `false`, the top values are considered to be the smallest.\n * @param {boolean} [options.copy=true] - Whether to copy `x` before sorting.\n * If `false`, `x` may be modified in-place.\n *\n * @return {number} Threshold to be applied to `x` to obtain the top (approximately) `number` values.\n * If `largest = true`, filtering is performed by taking all values in `x` that are greater than or equal to the returned threshold;\n * if `false`, filtering is performed by taking all values in `x` that are less than or equal to the returned threshold.\n * If `x` is zero-length, NaN is returned.\n */\nexport function computeTopThreshold(x, number, { copy = true, largest = true } = {}) {\n    if (copy) {\n        x = x.slice();\n    }\n\n    if (x instanceof Array) {\n        x.sort((a, b) => a - b); // just in case...\n    } else {\n        x.sort();\n    }\n\n    if (x.length == 0) {\n        return Number.NaN;\n    }\n\n    if (largest) {\n        return x[Math.max(0, x.length - number)]; \n    } else {\n        return x[Math.min(number, x.length) - 1]; \n    }\n}\n\n/**\n * Choose the highly variable genes from variance modelling statistics.\n *\n * @param {(TypedArray|ModelGeneVarResults)} x -\n * A TypedArray of statistics, where larger values correspond to higher variability;\n * or a {@linkplain ModelGeneVarResults} object, in which case the residuals are used as the statistics.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.number=4000] - Number of highly variable genes to select.\n * @param {number} [options.minimum=0] - Minimum value of the residual to consider for a highly variable gene.\n * By default, a highly variable gene must have a non-negative residual.\n *\n * @return {Uint8WasmArray} Array of length equal to the total number of genes,\n * where the chosen highly variable genes are marked with a value of 1 and all other genes have values of zero.\n */\nexport function chooseHVGs(x, { number = 4000, minimum = 0 } = {}) {\n    let stat; \n    if (x instanceof ModelGeneVarResults) {\n        stat = x.residuals();\n    } else {\n        stat = x.slice();\n    }\n\n    let threshold = computeTopThreshold(stat, number, { largest: true, copy: false });\n    if (threshold < minimum) {\n        threshold = minimum;\n    }\n\n    let features = utils.createUint8WasmArray(stat.length);\n    try {\n        // Do this AFTER the features allocation, so that\n        // we can set copy = false for the input array.\n        if (x instanceof ModelGeneVarResults) {\n            stat = x.residuals({ copy: false });\n        } else {\n            stat = x;\n        }\n\n        let farr = features.array();\n        stat.forEach((x, i) => {\n            farr[i] = x >= threshold;\n        });\n\n    } catch (e) {\n        features.free();\n        throw e;\n    }\n\n    return features;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/**\n * Wrapper around the k-means clustering results on the Wasm heap, produced by {@linkcode clusterKmeans}.\n * @hideconstructor\n */\nexport class ClusterKmeansResults {\n    #id;\n    #results;\n\n    #filledClusters;\n    #filledSizes;\n    #filledCenters;\n    #filledWcss;\n    #filledIterations;\n    #filledStatus;\n\n    constructor(id, raw, filled = true) {\n        this.#results = raw;\n        this.#id = id;\n\n        this.#filledClusters = filled;\n        this.#filledSizes = filled;\n        this.#filledCenters = filled;\n        this.#filledWcss = filled;\n        this.#filledIterations = filled;\n        this.#filledStatus = filled;\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the results.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    /**\n     * @return {number} Number of clusters in the results.\n     */\n    numberOfClusters() {\n        return this.#results.num_clusters();\n    }\n\n    /**\n     * @param {number} iterations - Number of iterations.\n     * @return The specified number of iterations is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setIterations(iterations) {\n        if (!this.#filledIterations) {\n            this.#filledIterations = true;\n        }\n        this.#results.set_iterations(iterations);\n        return;\n    }\n\n    /**\n     * @param {number} status - Status of the k-means clustering.\n     * @return The status is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setStatus(status) {\n        if (!this.#filledStatus) {\n            this.#filledStatus = true;\n        }\n        this.#results.set_status(status);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster assignment for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledClusters, \n            () => { this.#filledClusters = true }, \n            COPY => utils.possibleCopy(this.#results.clusters(), COPY),\n            \"clusters\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the number of cells in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterSizes({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSizes, \n            () => { this.#filledSizes = true }, \n            COPY => utils.possibleCopy(this.#results.cluster_sizes(), COPY),\n            \"clusterSizes\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the within-cluster sum of squares in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    withinClusterSumSquares({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledWcss, \n            () => { this.#filledWcss = true }, \n            COPY => utils.possibleCopy(this.#results.wcss(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the cluster centers in column-major format,\n     * where rows are dimensions and columns are the clusters.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterCenters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledCenters, \n            () => { this.#filledCenters = true }, \n            COPY => utils.possibleCopy(this.#results.centers(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} Number of refinement iterations performed by the algorithm.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setIterations setIterations}.\n     */\n    iterations() {\n        if (!this.#filledIterations) {\n            return null;\n        } else {\n            return this.#results.iterations();\n        }\n    }\n\n    /**\n     * @return {?number} Status of the algorithm - anything other than zero usually indicates a problem with convergence.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setStatus setStatus}.\n     */\n    status() {\n        if (!this.#filledStatus) {\n            return null;\n        } else {\n            return this.#results.status();\n        }\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using k-means.\n *\n* @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {number} clusters Number of clusters to create.\n * This should not be greater than the number of cells.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {string} [options.initMethod=\"pca-part\"] - Initialization method.\n * Setting `\"random\"` will randomly select `clusters` cells as centers.\n * Setting `\"kmeans++\"` will use the weighted sampling approach of Arthur and Vassilvitskii (2007).\n * Setting `\"pca-part\"` will use PCA partitioning.\n * @param {number} [options.initSeed=5768] - Seed to use for random number generation during initialization.\n * @param {number} [options.initPCASizeAdjust=1] - Adjustment factor for the cluster sizes, used when `initMethod = \"pca-part\"`.\n * Larger values (up to 1) will prioritize partitioning of clusters with more cells.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ClusterKmeansResults} Object containing the clustering results.\n */\nexport function clusterKmeans(x, clusters, { numberOfDims = null, numberOfCells = null, initMethod = \"pca-part\", initSeed = 5768, initPCASizeAdjust = 1, numberOfThreads = null } = {}) {\n    var buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.cluster_kmeans(pptr, numberOfDims, numberOfCells, clusters, initMethod, initSeed, initPCASizeAdjust, nthreads),\n            ClusterKmeansResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterKmeansResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfClusters - Number of clusters in the dataset.\n * @param {number} numberOfDimensions - Number of dimensions of the embedding used for clustering.\n *\n * @return {ClusterKmeansResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyClusterKmeansResults(numberOfCells, numberOfClusters, numberOfDimensions) {\n    return gc.call(\n        module => new module.ClusterKmeans_Result(numberOfCells, numberOfClusters, numberOfDimensions),\n        ClusterKmeansResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { FindNearestNeighborsResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the SNN graph object on the Wasm heap, produced by {@linkcode buildSNNGraph}.\n * @hideconstructor\n */\nexport class BuildSNNGraphResults {\n    #id;\n    #graph;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#graph = raw;\n        return;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#graph !== null) {\n            gc.release(this.#id);\n            this.#graph = null;\n        }\n        return;\n    }\n\n    // Not documented, internal use only.\n    get graph() {\n        return this.#graph;\n    }\n}\n\n/**\n * Build a shared nearest graph.\n *\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.scheme=\"rank\"] - Weighting scheme for the edges between cells.\n * This can be based on the top ranks of the shared neighbors (`\"rank\"`),\n * the number of shared neighbors (`\"number\"`) \n * or the Jaccard index of the neighbor sets between cells (`\"jaccard\"`).\n * @param {number} [options.neighbors=10] - Number of nearest neighbors to use to construct the graph.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildSNNGraphResults} Object containing the graph.\n */\nexport function buildSNNGraph(x, { scheme = \"rank\", neighbors = 10, numberOfThreads = null } = {}) {\n    var output;\n    var my_neighbors;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    utils.matchOptions(\"scheme\", scheme, [ \"rank\", \"number\", \"jaccard\" ]);\n\n    try {\n        let ref;\n        if (x instanceof FindNearestNeighborsResults) {\n            ref = x;\n        } else {\n            my_neighbors = findNearestNeighbors(x, neighbors, { numberOfThreads: nthreads }); \n            ref = my_neighbors ; // separate assignment is necessary for only 'my_neighbors' but not 'x' to be freed.\n        }\n\n        output = gc.call(\n            module => module.build_snn_graph(ref.results, scheme, nthreads),\n            BuildSNNGraphResults\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around the SNN multi-level clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphMultiLevelResults {\n    #id;\n    #results;\n\n    #filledBest;\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledBest = filled;\n        this.#filledModularity = utils.spawnArray(this.numberOfLevels(), filled);\n        this.#filledMembership = utils.spawnArray(this.numberOfLevels(), filled);\n\n        return;\n    }\n\n    /**\n     * @return {?number} The clustering level with the highest modularity.\n     * Alternatively `null`, if this has not been previously set via {@linkcode ClusterSNNGraphMultiLevelResults#setBest setBest}.\n     */\n    best() {\n        if (!this.#filledBest) {\n            return null;\n        } else {\n            return this.#results.best();\n        }\n    }\n\n    #chooseLevel(level) {\n        if (level === null) {\n            level = this.best();\n            if (level == null) {\n                throw new Error(\"'best' has not yet been set via 'setBest'\");\n            }\n        }\n        return level;\n    }\n\n    /**\n     * @param {number} best - Clustering level with the highest modularity.\n     * @return `best` is set as the best clustering level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setBest(best) {\n        if (!this.#filledBest) {\n            this.#filledBest = true;\n        }\n        this.#results.set_best(best);\n        return;\n    }\n\n    /**\n     * @return {number} Number of levels in the results.\n     */\n    numberOfLevels() {\n        return this.#results.number();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the modularity.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     *\n     * @return {?number} The modularity at the specified level.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphMultiLevelResults#setModularity setModularity}.\n     */\n    modularity({ level = null } = {}) {\n        level = this.#chooseLevel(level);\n        if (!this.#filledModularity[level]) {\n            return null;\n        } else {\n            return this.#results.modularity(level);\n        }\n    }\n\n    /**\n     * @param {number} level - The clustering level at which to set the modularity.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return `modularity` is set as the modularity at the specified level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(level, modularity) {\n        if (!this.#filledModularity[level]) {\n            this.#filledModularity[level] = true;\n        }\n        this.#results.set_modularity(level, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the cluster membership.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ level = null, copy = true, fillable = false } = {}) {\n        level = this.#chooseLevel(level);\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership[level], \n            () => { this.#filledMembership[level] = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(level), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN walktrap clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphWalktrapResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledModularityDetails;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        if (!filled) {\n            let n = this.numberOfMergeSteps() + 1;\n            this.#filledModularityDetails = { which: utils.spawnArray(n, false), remaining: n };\n        }\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of merge steps used by the Walktrap algorithm.\n     */\n    numberOfMergeSteps() {\n        return this.#results.num_merge_steps();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.at=null] - Index at which to extract the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * Set to `null` to obtain the largest modularity across all merge steps.\n     *\n     * @return {?number} The modularity at the specified merge step, or the maximum modularity across all merge steps.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphWalktrapResults#setModularity setModularity}.\n     */\n    modularity({ at = null } = {}) {\n        let fail = false;\n        if (at === null) {\n            if (!this.#filledModularity) {\n                return null;\n            }\n            at = -1;\n        } else if (!this.#filledModularity && !this.#filledModularityDetails[at]) {\n            return null;\n        }\n\n        return this.#results.modularity(at);\n    }\n\n    /**\n     * @param {number} at - Index at which to set the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(at, modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularityDetails.which[at] = true;\n            this.#filledModularityDetails.remaining--;\n            if (this.#filledModularityDetails.remaining == 0) {\n                this.#filledModularity = true;\n            }\n        }\n        this.#results.set_modularity(at, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN Leiden clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphLeidenResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        return;\n    }\n\n    /**\n     * @return {?number} The quality of the Leiden clustering.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphLeidenResults#setModularity setModularity}.\n     *\n     * Note that Leiden's quality score is technically a different measure from modularity.\n     * Nonetheless, we use `modularity` for consistency with the other SNN clustering result classes.\n     */\n    modularity() {\n        if (!this.#filledModularity) {\n            return null;\n        } else {\n            return this.#results.modularity();\n        }\n    }\n\n    /**\n     * @param {number} modularity - Modularity value.\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularity = true;\n        }\n        this.#results.set_modularity(modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using community detection on the SNN graph.\n *\n * @param {BuildSNNGraphResults} x - The shared nearest neighbor graph constructed by {@linkcode buildSNNGraph}.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.multiLevelResolution=1] - The resolution of the multi-level clustering, when `method = \"multilevel\"`.\n * Larger values result in more fine-grained clusters.\n * @param {number} [options.leidenResolution=1] - The resolution of the Leiden clustering, when `method = \"leiden\"`.\n * Larger values result in more fine-grained clusters.\n * @param {boolean} [options.leidenModularityObjective=false] - Whether to use the modularity as the objective function when `method = \"leiden\"`.\n * By default, the Constant-Potts Model is used instead.\n * Set to `true` to get an interpretation of the resolution on par with that of `method = \"multilevel\"`.\n * @param {number} [options.walktrapSteps=4] - Number of steps for the Walktrap algorithm, when `method = \"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} Object containing the clustering results.\n * The class of this object depends on the choice of `method`.\n */\nexport function clusterSNNGraph(x, { \n    method = \"multilevel\", \n    multiLevelResolution = 1, \n    leidenResolution = 1, \n    leidenModularityObjective = false,\n    walktrapSteps = 4\n} = {}) {\n    var output;\n\n    try {\n        if (method == \"multilevel\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_multilevel(x.graph, multiLevelResolution),\n                ClusterSNNGraphMultiLevelResults\n            );\n        } else if (method == \"walktrap\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_walktrap(x.graph, walktrapSteps),\n                ClusterSNNGraphWalktrapResults\n            );\n        } else if (method == \"leiden\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_leiden(x.graph, leidenResolution, leidenModularityObjective),\n                ClusterSNNGraphLeidenResults\n            );\n        } else {\n            throw new Error(\"unknown method '\" + method + \"'\")\n        }\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterSNNGraphMultiLevelResults} object (or one of its counterparts), to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.numberOfLevels=1] - Number of levels for which to allocate space when `method=\"multilevel\"`.\n * @param {number} [options.numberOfMergeSteps=1] - Number of merge steps for which to allocate space when `method=\"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} \n * Object with space allocated to store the clustering results.\n */\nexport function emptyClusterSNNGraphResults(numberOfCells, { method = \"multilevel\", numberOfLevels = 1, numberOfMergeSteps = 1 } = {}) {\n    if (method == \"multilevel\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphMultiLevel_Result(numberOfCells, numberOfLevels),\n            ClusterSNNGraphMultiLevelResults,\n            /* filled = */ false\n        );\n    } else if (method == \"walktrap\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphWalktrap_Result(numberOfCells, numberOfMergeSteps),\n            ClusterSNNGraphWalktrapResults,\n            /* filled = */ false\n        );\n    } else if (method == \"leiden\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphLeiden_Result(numberOfCells),\n            ClusterSNNGraphLeidenResults,\n            /* filled = */ false\n        );\n    } else {\n        throw new Error(\"unknown method '\" + method + \"'\")\n    }\n}\n","import * as wa from \"wasmarrays.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Convert an arbitrary array into a R-style factor, with integer indices into an array of levels.\n * This is useful for formatting grouping or blocking vectors for {@linkcode scoreMarkers}, {@linkcode modelGeneVar}, etc.\n *\n * @param {Array|TypedArray} x - Array of values to be converted into a factor.\n * \n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asWasmArray=true] - Whether to return an Int32WasmArray instance for the indices.\n * If `false`, an Int32Array is returned instead.\n * Only used if `buffer` is not supplied.\n * @param {?(Int32WasmArray|Int32Array)} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to that of `x`.\n * @param {?Array} [options.levels=null] - An existing array of known levels to be matched against `x`.\n * Values in `x` that are not in `levels` are considered to be invalid.\n * If `null`, the levels are automatically inferred from `x`; these will be sorted if all-numeric or all-string.\n * @param {string} [options.action=\"error\"] - Action to take when invalid values (i.e., null, NaNs) are detected in `x`.\n *\n * - `\"none\"`: the index is silently set to `placeholder`.\n * - `\"warn\"`: a warning is raised on the first occurrence of an invalid value, and the index is set to `placeholder`.\n * - `\"error\"`: an error is raised.\n * \n * @param {number} [options.placeholder=-1] - Placeholder index to use upon detecting invalid values in `x`.\n *\n * @return {object} Object containing:\n *\n * - `ids`: an Int32WasmArray or Int32Array of length equal to `x`, containing the index into `levels` for each cell.\n * - `levels`: an array of unique levels, such that `Array.from(ids).map(i => levels[i])` returns the same contents as `x` (aside from invalid values).\n *   If an input `levels` is supplied, this is returned directly.\n *\n * If `buffer` was supplied, it is used as the value of the `ids` property.\n */\nexport function convertToFactor(x, { asWasmArray = true, buffer = null, levels = null, action = \"error\", placeholder = -1 } = {}) {\n    let local_buffer;\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (!warned) {\n                console.warn (\"replacing invalid values with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected invalid value (e.g., null, NaN) in 'x'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling invalid entries\");\n    }\n\n    try {\n        if (buffer == null) {\n            local_buffer = (asWasmArray ? utils.createInt32WasmArray(x.length) : new Int32Array(x.length));\n            buffer = local_buffer;\n        } else {\n            if (buffer.length !== x.length) {\n                throw new Error(\"'buffer' should have length equal to that of 'x'\");\n            }\n            asWasmArray = buffer instanceof wa.Int32WasmArray;\n        }\n\n        let barr = (asWasmArray ? buffer.array() : buffer); // no allocations from this point onwards!\n        let mapping = new Map;\n\n        if (levels == null) {\n            levels = [];\n            for (var i = 0; i < x.length; i++) {\n                let y = x[i];\n                if (y == null || (typeof y == \"number\" && !Number.isFinite(y))) {\n                    failure();\n                    barr[i] = placeholder;\n                    continue;\n                }\n\n                let existing = mapping.get(y);\n                if (typeof existing == \"undefined\") {\n                    let n = levels.length;\n                    mapping.set(y, n);\n                    levels.push(y);\n                    barr[i] = n;\n                } else {\n                    barr[i] = existing;\n                }\n            }\n\n            // Sorting them by default, to make life nicer.\n            if (levels.every(x => typeof x == \"string\")) {\n                let oldlevels = levels.slice();\n                levels.sort();\n                resetLevels({ ids: buffer, levels: oldlevels }, levels);\n            } else if (levels.every(x => typeof x == \"number\")) {\n                let oldlevels = levels.slice();\n                levels.sort((a, b) => a - b);\n                resetLevels({ ids: buffer, levels: oldlevels }, levels);\n            }\n\n        } else {\n            for (var l = 0; l < levels.length; l++) {\n                mapping.set(levels[l], l);\n            }\n\n            for (var i = 0; i < x.length; i++) {\n                let y = x[i];\n                let existing = mapping.get(y);\n                if (typeof existing == \"undefined\") {\n                    failure();\n                    barr[i] = placeholder;\n                } else {\n                    barr[i] = existing;\n                }\n            }\n        }\n\n    } catch (e) {\n        if (local_buffer instanceof wa.WasmArray) {\n            utils.free(local_buffer);\n        }\n        throw e;\n    }\n\n    return {\n        ids: buffer,\n        levels: levels\n    };\n}\n\n// Back-compatible renaming.\nexport function factorize(x, options = {}) {\n    return convertToFactor(x, options);\n}\n\n/**\n * Reindex the factor indices to remove unused levels.\n * This is done by adjusting the indices such that every index from `[0, N)` is represented at least once, where `N` is the number of (used) levels.\n *\n * @param {Int32WasmArray|TypedArray|Array} x - Array of factor indices such as that produced by {@linkcode convertToFactor}. \n *\n * @return {Array} `x` is modified in place to remove unused levels.\n *\n * An array (denoted here as `y`) is returned that represents the mapping between the original and modified IDs,\n * i.e., running `x.map(i => y[i])` will recover the input `x`.\n * This is most commonly used to create a new array of levels, i.e., `y.map(i => old_levels[i])` will drop the unused levels. \n */\nexport function dropUnusedLevels(x) {\n    if (x instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        x = x.array();\n    }\n\n    let uniq = new Set(x);\n    let uniq_arr = Array.from(uniq).sort();\n    let mapping = {};\n    uniq_arr.forEach((y, i) => { mapping[y] = i; });\n\n    x.forEach((y, i) => {\n        x[i] = mapping[y];\n    });\n\n    return uniq_arr;\n}\n\n/**\n * Change the levels of a factor, updating the indices appropriately.\n *\n * @param {object} x - Factor object produced by {@linkcode convertToFactor}.\n * @param {Array} newLevels - Array of new levels.\n * This should be a superset of `x.levels`.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.action=\"error\"] - Action to take when `newLevels` is not a superset of `x.levels`.\n * This can be `\"error\"`, `\"warn\"` or `\"none\"`.\n * @param {number} [options.placeholder=-1] - Placeholder index corresponding to invalid values of `x.ids`.\n * Any placeholders in `x.ids` will be preserved on function return.\n * Additionally, if entries of `x.ids` refer to entries of `x.levels` that are missing in `newLevels`, they will be set to the placeholder value on function return;\n * this is only relevant if `action = \"warn\"` or `\"none\"`.\n *\n * @return `x` is modified by reference such that `x.levels` is set to `newLevels`.\n * `x.ids` is updated so that the indices now refer to the appropriate value in `newLevels`.\n */\nexport function resetLevels(x, newLevels, { action = \"error\", placeholder = -1 } = {}) {\n    let mapping = new Map;\n    for (var i = 0; i < newLevels.length; i++) {\n        mapping.set(newLevels[i], i);\n    }\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (!warned) {\n                console.warn (\"replacing missing levels with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected level in 'x.levels' that is missing from 'newLevels'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling missing levels\");\n    }\n\n    let oldLevels = x.levels;\n    let conversion = new Array(oldLevels.length);\n    let warned = false;\n    for (var i = 0; i < oldLevels.length; i++) {\n        let found = mapping.get(oldLevels[i]);\n        if (typeof found == \"undefined\") {\n            failure();\n            conversion[i] = placeholder;\n        } else {\n            conversion[i] = found;\n        }\n    }\n    x.levels = newLevels;\n\n    let target = x.ids;\n    if (target instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        target = target.array();\n    }\n    target.forEach((y, i) => {\n        if (y !== placeholder) {\n            target[i] = conversion[y];\n        }\n    });\n}\n\n/**\n * Subset a factor, possibly also dropping its unused levels.\n * This is typically based on the same filtering vector as {@linkcode filterCells}.\n *\n * @param {object} x - An object representing a factor, containing the following properties:\n *\n * - `ids`: An Int32Array or Int32WasmArray of integer indices.\n * - `levels`: An array of levels that can be indexed by entries of `ids`.\n *\n * This is typically produced by {@linkcode convertToFactor}. \n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n *\n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.drop=true] - Whether to drop unused levels in the output, see {@linkcode dropUnusedLevels}.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?(Int32Array|Int32WasmArray)} [options.buffer=null] - Array in which the output is to be stored, of the same type as `x.ids`.\n * If provided, this should be of length equal to `subset`, if `filter = null`;\n * the number of truthy elements in `subset`, if `filter = false`;\n * or the number of falsey elements in `subset`, if `filter = true`.\n *\n * @return {object} An object like `x`, containing:\n *\n * - `ids`: An Int32Array or Int32WasmArray of integer indices, subsetted from those in `x.ids`.\n * - `levels`: Array of levels that can be indexed by entries of the output `ids`.\n *   If `drop = true`, this may be a subset of `x.levels` where every entry is represented at least once in the output `ids`.\n *\n * If `buffer` is supplied, the returned `ids` will be set to `buffer`.\n */\nexport function subsetFactor(x, subset, { drop = true, filter = null, buffer = null } = {}) {\n    let output = { ids: null, levels: x.levels };\n\n    if (x.ids instanceof wa.WasmArray) {\n        output.ids = wa.subsetWasmArray(x.ids, subset, { filter, buffer });\n    } else {\n        let n = wa.checkSubsetLength(subset, filter, x.length, \"x\");\n        if (buffer == null) {\n            buffer = new x.ids.constructor(n);\n        }\n        wa.fillSubset(subset, filter, x.ids, buffer);\n        output.ids = buffer;\n    }\n\n    if (drop) {\n        let remapping = dropUnusedLevels(output.ids);\n        output.levels = remapping.map(i => x.levels[i]);\n    }\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Filter out low-quality cells.\n *\n * @param {ScranMatrix} x The count matrix.\n * @param {(Uint8WasmArray|Array|TypedArray)} filters \n * An array of length equal to the number of columns in `x`, where truthy elements specify the cells to be discarded.\n *\n * @return {ScranMatrix} A matrix of the same type as `x`, filtered by column to remove all cells specified in `filters`. \n */\nexport function filterCells(x, filters) {\n    var filter_data;\n    var output;\n\n    try {\n        filter_data = utils.wasmifyArray(filters, \"Uint8WasmArray\");\n        if (filter_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'filters' must be equal to number of columns in 'x'\");\n        }\n        var ptr = filter_data.offset;\n\n        output = gc.call(\n            module => module.filter_cells(x.matrix, ptr, false),\n            x.constructor\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(filter_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/** \n * Wrapper for the neighbor search index on the Wasm heap, typically produced by {@linkcode buildNeighborSearchIndex}.\n * @hideconstructor\n */\nexport class BuildNeighborSearchIndexResults {\n    #id;\n    #index; \n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#index = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the index.\n     */\n    numberOfCells() {\n        return this.#index.num_obs();\n    }\n\n    /**\n     * @return {number} Number of dimensions in the index.\n     */\n    numberOfDims() {\n        return this.#index.num_dim();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#index !== null) {\n            gc.release(this.#id);\n            this.#index = null;\n        }\n        return;\n    }\n\n    // Internal only, not documented.\n    get index() {\n        return this.#index;\n    }\n}\n\n/**\n * Build the nearest neighbor search index.\n *\n * @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {boolean} [options.approximate=true] - Whether to build an index for an approximate neighbor search.\n *\n * @return {BuildNeighborSearchIndexResults} Index object to use for neighbor searches.\n */\nexport function buildNeighborSearchIndex(x, { numberOfDims = null, numberOfCells = null, approximate = true } = {}) {\n    var buffer;\n    var output;\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.build_neighbor_index(pptr, numberOfDims, numberOfCells, approximate),\n            BuildNeighborSearchIndexResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/** \n * Wrapper for the neighbor search results on the Wasm heap, typically produced by {@linkcode findNearestNeighbors}.\n * @hideconstructor\n */\nexport class FindNearestNeighborsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The total number of neighbors across all cells.\n     * This is usually the product of the number of neighbors and the number of cells.\n     */\n    size() {\n        return this.#results.size();\n    }\n\n    /**\n     * @return {number} The number of cells used in the search.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Int32WasmArray} [options.runs=null] - A Wasm-allocated array of length equal to `numberOfCells()`,\n     * to be used to store the number of neighbors per cell.\n     * @param {?Int32WasmArray} [options.indices=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the indices of the neighbors of each cell.\n     * @param {?Float64WasmArray} [options.distances=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the distances to the neighbors of each cell.\n     *\n     * @return {object} \n     * An object is returned with the `runs`, `indices` and `distances` keys, each with an appropriate TypedArray as the value.\n     *\n     * If all of the arguments are non-`null`, the TypedArrays in the returned object are views on the corresponding input WasmArrays.\n     * Note that these views may be invalidated on the next allocation on the Wasm heap.\n     *\n     * If only some of the arguments are non-`null`, an error is raised.\n     */\n    serialize({ runs = null, indices = null, distances = null } = {}) {\n        var copy = (runs === null) + (indices === null) + (distances === null);\n        if (copy != 3 && copy != 0) {\n            throw new Error(\"either all or none of 'runs', 'indices' and 'distances' can be 'null'\");\n        }\n\n        var output;\n\n        if (copy === 3) {\n            var run_data;\n            var ind_data;\n            var dist_data;\n            \n            try {\n                run_data = utils.createInt32WasmArray(this.numberOfCells());\n                let s = this.size();\n                ind_data = utils.createInt32WasmArray(s);\n                dist_data = utils.createFloat64WasmArray(s);\n                this.#results.serialize(run_data.offset, ind_data.offset, dist_data.offset);\n\n                output = { \n                    \"runs\": run_data.slice(), \n                    \"indices\": ind_data.slice(), \n                    \"distances\": dist_data.slice() \n                };\n            } finally {\n                utils.free(run_data);\n                utils.free(ind_data);\n                utils.free(dist_data);\n            }\n\n        } else {\n            this.#results.serialize(runs.offset, indices.offset, distances.offset);\n            output = {\n                \"runs\": runs.array(),\n                \"indices\": indices.array(),\n                \"distances\": distances.array()\n            };\n        }\n\n        return output;\n    }\n\n    /**\n     * @param {Int32WasmArray|Array|TypedArray} runs An array of length equal to `numberOfCells()`,\n     * containing the number of neighbors per cell.\n     * @param {Int32WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the indices of the neighbors of each cell.\n     * @param {Float64WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the distances to the neighbors of each cell.\n     *\n     * @return {FindNearestNeighborsResults} Object containing the unserialized search results.\n     */\n    static unserialize(runs, indices, distances) {\n        var output;\n        var run_data;\n        var ind_data;\n        var dist_data;\n\n        try {\n            run_data = utils.wasmifyArray(runs, \"Int32WasmArray\");\n            ind_data = utils.wasmifyArray(indices, \"Int32WasmArray\");\n            dist_data = utils.wasmifyArray(distances, \"Float64WasmArray\");\n            output = gc.call(\n                module => new module.NeighborResults(runs.length, run_data.offset, ind_data.offset, dist_data.offset),\n                FindNearestNeighborsResults\n            );\n\n        } catch (e) {\n            utils.free(output);\n            throw e;\n\n        } finally { \n            utils.free(run_data);\n            utils.free(ind_data);\n            utils.free(dist_data);\n        }\n\n        return output;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Find the nearest neighbors for each cell.\n *\n * @param {NeighborSearchIndex} x The neighbor search index built by {@linkcode buildNeighborSearchIndex}.\n * @param {number} k Number of neighbors to find.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {FindNearestNeighborsResults} Object containing the search results.\n */\nexport function findNearestNeighbors(x, k, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.find_nearest_neighbors(x.index, k, nthreads),\n        FindNearestNeighborsResults\n    );\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute group-based size factors, where composition biases are removed between groups and library size normalization is performed within groups.\n * This allows us to generate per-cell size factors in spite of the sparsity.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.center=true] - Whether to return centered size factors.\n * If `false`, the size factors can be interpreted as the scaling to match `reference`.\n * @param {?Float64WasmArray} [options.buffer=null] - Output buffer for the size factors.\n * This should have length equal to the number of columns in `x`.\n * @param {number} [options.priorCount=10] - Prior count to use for shrinking size factors towards the relative library size.\n * Larger values result in stronger shrinkage when the coverage is low.\n * @param {?number} [options.reference=null] - Group to use as a reference.\n * This should be an entry in `groups`. \n * If `null`, it is automatically determined.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to the number of columns in `x`, containing the size factors for all cells.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function groupedSizeFactors(x, groups, { center = true, buffer = null, priorCount = 10, reference = null, numberOfThreads = null } = {}) {\n    var local_buffer;\n    var group_arr;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (!(buffer instanceof wa.Float64WasmArray)) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' must be equal to the number of columns in 'x'\");\n        }\n\n        group_arr = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (reference == null) {\n            reference = -1;\n        }\n\n        wasm.call(module => module.grouped_size_factors(x.matrix, group_arr.offset, center, priorCount, reference, buffer.offset, nthreads));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(group_arr);\n    }\n    \n    return buffer;\n}\n","/**\n * Guess the identity of the features from their names.\n *\n * @param {Array} features - Array of strings containing feature identifiers, typically Ensembl IDs or gene symbols.\n * Elements may also be `null` or undefined if an identifier is missing.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceTaxonomy=false] - Whether to force the use of taxonomy IDs for human and mouse.\n * This is `false` for back compatibility.\n *\n * @return {object} An object containing:\n *\n * - `species`, the inferred species as a string.\n *   This can be either `\"human\"` or `\"mouse\"`, or an NCBI taxonomy ID (one of 6239, 10116, 9541, 7227, 7955, 9598).\n *   If `forceTaxonomy = true`, human and mouse are replaced with 9606 and 10090, respectively.\n * - `type`: the feature identifier type.\n *   This can either be `\"ensembl\"` or `\"symbol\"`.\n * - `confidence`: the percentage of entries in `x` that are consistent with the inferred identity.\n */\nexport function guessFeatures(features, { forceTaxonomy = false } = {}) {\n    let ntotal = features.length;\n    let early_threshold = Math.ceil(ntotal / 2);\n    let format = payload => {\n        payload.confidence /= ntotal;\n        return payload;\n    };\n\n    // Duplicated entries only count as one match, so as to avoid problems with\n    // chromosome positions, feature type specifications, etc. Note that we\n    // still need to use the full length to compute 'ntotal', otherwise we\n    // wouldn't be penalizing the duplicates properly.\n    let unique_features = new Set;\n    for (const f of features) {\n        if (typeof f == \"string\") {\n            unique_features.add(f);\n        }\n    }\n\n    let ensembl_human = 0;\n    let ensembl_mouse = 0;\n    let ensembl_6239 = 0;\n    let ensembl_10116 = 0; // Ensembl only, Rat symbols are indistiguishable from mice.\n    let ensembl_9541 = 0; // Ensembl only, Mfac symbols are indistiguishable from human.\n    let ensembl_7227 = 0; // Ensembl only, fly symbols are crazy.\n    let ensembl_7955 = 0;\n    let ensembl_9598 = 0; // Ensembl only, Chimp symbols are indistinguishable from human.\n\n    let symbol_human = 0;\n    let symbol_mouse = 0;\n    let symbol_6239 = 0;\n    let symbol_7955 = 0;\n\n    let hsid = (forceTaxonomy ? \"9606\" : \"human\");\n    let mmid = (forceTaxonomy ? \"10090\" : \"mouse\");\n    let collected = [];\n\n    // Checking if it's any type of Ensembl.\n    let any_ens = 0;\n    for (const x of unique_features) {\n        if (x && x.match(/^ENS[A-Z]*G[0-9]{11}$/)) {\n            any_ens++;\n        }\n    }\n\n    if (any_ens) {\n        for (const x of unique_features) {\n            if (x) {\n                if (x.startsWith(\"ENSG\")) {\n                    ensembl_human++;\n                } else if (x.startsWith(\"ENSMUSG\")) {\n                    ensembl_mouse++;\n                } else if (x.startsWith(\"ENSRNOG\")) {\n                    ensembl_10116++;\n                } else if (x.startsWith(\"ENSMFAG\")) {\n                    ensembl_9541++;\n                } else if (x.startsWith(\"ENSDARG\")) {\n                    ensembl_7955++;\n                } else if (x.startsWith(\"ENSPTRG\")) {\n                    ensembl_9598++;\n                }\n            }\n        }\n\n        collected.push({ species: hsid, type: \"ensembl\", confidence: ensembl_human });\n        collected.push({ species: mmid, type: \"ensembl\", confidence: ensembl_mouse });\n        collected.push({ species: \"10116\", type: \"ensembl\", confidence: ensembl_10116 });\n        collected.push({ species: \"9541\", type: \"ensembl\", confidence: ensembl_9541 });\n        collected.push({ species: \"7955\", type: \"ensembl\", confidence: ensembl_7955 });\n        collected.push({ species: \"9598\", type: \"ensembl\", confidence: ensembl_9598 });\n\n        // See if we can quit early and avoid the other checks.\n        for (const x of collected) {\n            if (x.confidence >= early_threshold) {\n                return format(x);\n            }\n        }\n    }\n\n    // Human symbol; starts with upper case, no lower case, and not an Ensembl of any kind.\n    // We also ignore VEGA gene identifiers, as these are antiquated; and MGI identifiers,\n    // which are all-caps and thus confusing.\n    for (const x of unique_features) {\n        if (x && x.match(/^[A-Z][^a-z]+$/) && !x.match(/^ENS[A-Z]+[0-9]{11}/) && !x.match(/^OTT.{4}[0-9]{11}/) && !x.match(/^MGI:[0-9]+/)) {\n            symbol_human++;\n        }\n    }\n    {\n        let payload = { species: hsid, type: \"symbol\", confidence: symbol_human };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Mouse symbol; starts with upper case, but no upper case after that.\n    for (const x of unique_features) {\n        if (x && x.match(/^[A-Z][^A-Z]+$/)) {\n            symbol_mouse++;\n        }\n    }\n    {\n        let payload = { species: mmid, type: \"symbol\", confidence: symbol_mouse };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm Ensembl (WormBase).\n    for (const x of unique_features) {\n        if (x && x.match(/^WBGene[0-9]+$/)) {\n            ensembl_6239++;\n        }\n    }\n    {\n        let payload = { species: \"6239\", type: \"ensembl\", confidence: ensembl_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Fly Ensembl (FlyBase).\n    for (const x of unique_features) {\n        if (x && x.match(/^FBgn[0-9]+$/)) {\n            ensembl_7227++;\n        }\n    }\n    {\n        let payload = { species: \"7227\", type: \"ensembl\", confidence: ensembl_7227 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm symbols; at least three lower case with a dash and numbers.\n    for (const x of unique_features) {\n        if (x && x.match(/^[a-z]{3,}-[0-9]+$/)) {\n            symbol_6239++;\n        }\n    }\n    {\n        let payload = { species: \"6239\", type: \"symbol\", confidence: symbol_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Zebrafish symbols; at least three lower case letters, no dash, followed by numbers and/or more lower case.\n    for (const x of unique_features) {\n        if (x && x.match(/^[a-z]{3,}[0-9a-z]+$/)) {\n            symbol_7955++;\n        }\n    }\n    {\n        let payload = { species: \"7955\", type: \"symbol\", confidence: symbol_7955 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Picking the best.\n    let highest = collected[0];\n    for (var i = 1; i < collected.length; i++) {\n        if (collected[i].confidence > highest.confidence) {\n            highest = collected[i];\n        }\n    }\n\n    return format(highest);\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\n/** \n * Perform a hypergeometric test, typically for over-enrichment of markers across feature sets.\n * This can be computed for multiple feature sets by providing arrays as some or all of the arguments.\n * If multiple arrays are supplied, they must be of the same length.\n *\n * @param {number|Array|TypedArray|WasmArray} markersInSet - Number of detected markers that are also in the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfMarkers - Total number of detected markers.\n * @param {number|Array|TypedArray|WasmArray} featureSetSize - Size of the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfFeatures - Total number of features.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {boolean} [options.assumeSorted=false] - Whether the input arrays are already sorted such that `markersInSet` is the slowest-changing value.\n * Setting this to `true` can avoid an extra sorting step for greater efficiency.\n *\n * @return {Float64Array} An array of length equal to that of the supplied arrays (or 1, if no arrays are supplied).\n * The i-th entry contains the p-value for enrichment computed using the i-th entry of each supplied array. \n */\nexport function hypergeometricTest(markersInSet, numberOfMarkers, featureSetSize, numberOfFeatures, { numberOfThreads = null, assumeSorted = false } = {}) {\n    let markersInSet_data;\n    let numberOfMarkers_data;\n    let featureSetSize_data;\n    let numberOfFeatures_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let ntests = null;\n    let check_length = (candidate, name, sofar) => {\n        if (sofar !== null && candidate.length !== sofar) {\n            throw new Error(\"array inputs must have the same length (failing for '\" + name + \"')\");\n        }\n        return candidate.length;\n    }\n\n    if (typeof markersInSet == \"number\") {\n        markersInSet = [markersInSet];\n    } else { \n        ntests = check_length(markersInSet, \"markersInSet\", ntests);\n    }\n\n    if (typeof numberOfMarkers == \"number\") {\n        numberOfMarkers = [numberOfMarkers];\n    } else {\n        ntests = check_length(numberOfMarkers, \"numberOfMarkers\", ntests);\n    }\n\n    if (typeof featureSetSize == \"number\") {\n        featureSetSize = [featureSetSize];\n    } else {\n        ntests = check_length(featureSetSize, \"featureSetSize\", ntests);\n    }\n\n    if (typeof numberOfFeatures == \"number\") {\n        numberOfFeatures = [numberOfFeatures];\n    } else {\n        ntests = check_length(numberOfFeatures, \"numberOfFeatures\", ntests);\n    }\n\n    if (ntests == null) {\n        ntests = 1;\n    }\n\n    let output;\n    let output_data;\n\n    try {\n        markersInSet_data = utils.wasmifyArray(markersInSet, \"Int32WasmArray\");\n        numberOfMarkers_data = utils.wasmifyArray(numberOfMarkers, \"Int32WasmArray\");\n        featureSetSize_data = utils.wasmifyArray(featureSetSize, \"Int32WasmArray\");\n        numberOfFeatures_data = utils.wasmifyArray(numberOfFeatures, \"Int32WasmArray\");\n        output_data = utils.createFloat64WasmArray(ntests);\n\n        wasm.call(module => module.hypergeometric_test(\n            ntests, \n            markersInSet_data.length != 1,\n            markersInSet_data.offset,\n            featureSetSize_data.length != 1,\n            featureSetSize_data.offset,\n            numberOfMarkers_data.length != 1,\n            numberOfMarkers_data.offset,\n            numberOfFeatures_data.length != 1,\n            numberOfFeatures_data.offset,\n            assumeSorted,\n            output_data.offset,\n            nthreads\n        ));\n\n        output = output_data.slice();\n\n    } finally {\n        utils.free(markersInSet_data);\n        utils.free(numberOfMarkers_data);\n        utils.free(featureSetSize_data);\n        utils.free(numberOfFeatures_data);\n        utils.free(output_data);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Initialize a sparse matrix from a dense array.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray|Array|TypedArray} values Values of all elements in the matrix, stored in column-major order.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`.\n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = true, layered = true } = {}) {\n    var val_data; \n    var output;\n    var ids = null; \n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        if (val_data.length !== numberOfRows * numberOfColumns) {\n            throw new Error(\"length of 'values' is not consistent with supplied dimensions\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_dense_vector(\n                numberOfRows, \n                numberOfColumns, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Initialize a sparse matrix from its compressed components.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray} values Values of the non-zero elements.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {WasmArray} indices Row indices of the non-zero elements.\n * This should be of the same length as `values`.\n * @param {WasmArray} pointers Pointers specifying the start of each column in `indices`.\n * This should have length equal to `numberOfColumns + 1`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.byColumn=true] - Whether the input arrays are supplied in the compressed sparse column format.\n * If `true`, `indices` should contain column indices and `pointers` should specify the start of each row in `indices`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n * \n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */ \nexport function initializeSparseMatrixFromCompressedVectors(numberOfRows, numberOfColumns, values, indices, pointers, { byColumn = true, forceInteger = true, layered = true } = {}) {\n    var val_data;\n    var ind_data;\n    var indp_data;\n    var output;\n    var ids = null;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        ind_data = utils.wasmifyArray(indices, null);\n        indp_data = utils.wasmifyArray(pointers, null);\n        if (val_data.length != ind_data.length) {\n            throw new Error(\"'values' and 'indices' should have the same length\");\n        }\n        if (indp_data.length != (byColumn ? numberOfColumns : numberOfRows) + 1) {\n            throw new Error(\"'pointers' does not have an appropriate length\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix(\n                numberOfRows, \n                numberOfColumns, \n                val_data.length, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"), \n                ind_data.offset, \n                ind_data.constructor.className.replace(\"Wasm\", \"\"), \n                indp_data.offset, \n                indp_data.constructor.className.replace(\"Wasm\", \"\"), \n                byColumn,\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n        utils.free(ind_data);\n        utils.free(indp_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/** \n * Initialize a sparse matrix from a buffer containing a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If `layered = true`, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If `layered = false`, this is `null`.\n */\nexport function initializeSparseMatrixFromMatrixMarket(x, { compressed = null, layered = true } = {}) {\n    var buf_data;\n    var output;\n    var ids = null;\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(\n                module => module.read_matrix_market_from_buffer(buf_data.offset, buf_data.length, compressed, layered),\n                ScranMatrix\n            );\n        } else {\n            output = gc.call(\n                module => module.read_matrix_market_from_file(x, compressed, layered),\n                ScranMatrix\n            );\n        }\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buf_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\nfunction convert_compressed(compressed) {\n    if (compressed === null) {\n        return -1;\n    } else if (compressed) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n/** \n * Extract dimensions and other details from a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n *\n * @return {object} An object containing the number of `rows`, `columns` and `lines` in the matrix.\n */\nexport function extractMatrixMarketDimensions(x, { compressed = null } = {}) {\n    var buf_data;\n    var stats = utils.createFloat64WasmArray(3);\n    let output = {};\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            wasm.call(module => module.read_matrix_market_header_from_buffer(buf_data.offset, buf_data.length, compressed, stats.offset));\n        } else {\n            wasm.call(module => module.read_matrix_market_header_from_file(x, compressed, stats.offset));\n        }\n\n        let sarr = stats.array();\n        output.rows = sarr[0];\n        output.columns = sarr[1];\n        output.lines = sarr[2];\n\n    } finally {\n        utils.free(buf_data);\n        utils.free(stats);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from a HDF5 file.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the relevant HDF5 dataset contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n * @param {?(Array|TypedArray|Int32WasmArray)} [options.subsetRow=null] - Row indices to extract.\n * All indices must be non-negative integers less than the number of rows in the sparse matrix.\n * @param {?(Array|TypedArray|Int32WasmArray)} [options.subsetColumn=null] - Column indices to extract.\n * All indices must be non-negative integers less than the number of columns in the sparse matrix.\n * @param {number} [options.cacheSize=100000000] - Size of the cache for loading chunks from HDF5 files. \n * Only really relevant when reading dense matrices, where a larger cache size may be necessary for handling large chunk dimensions efficiently.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *   If `subsetRow` was provided, `row_ids` contains indices into `subsetRow`, i.e., the i-th row in `matrix` is the `subsetRow[row_ids[i]]` row in the original matrix.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromHDF5(file, name, { forceInteger = true, layered = true, subsetRow = null, subsetColumn = null, cacheSize = 100000000 } = {}) {\n    var ids = null;\n    var output;\n    let wasm_row, wasm_col;\n\n    try {\n        let use_row_subset = (subsetRow !== null);\n        let row_offset = 0, row_length = 0;\n        if (use_row_subset) {\n            wasm_row = utils.wasmifyArray(subsetRow, \"Int32WasmArray\");\n            row_offset = wasm_row.offset;\n            row_length = wasm_row.length;\n        }\n\n        let use_col_subset = (subsetColumn !== null);\n        let col_offset = 0, col_length = 0;\n        if (use_col_subset) {\n            wasm_col = utils.wasmifyArray(subsetColumn, \"Int32WasmArray\");\n            col_offset = wasm_col.offset;\n            col_length = wasm_col.length;\n        }\n\n        output = gc.call(\n            module => module.read_hdf5_matrix(file, name, forceInteger, layered, use_row_subset, row_offset, row_length, use_col_subset, col_offset, col_length, cacheSize),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(wasm_row);\n        utils.free(wasm_col);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Extract the format and dimensions of a HDF5 matrix.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n *\n * @return {object} An object containing:\n * - `rows`, the number of rows in the matrix.\n * - `columns`, the number of columns.\n * - `format`, whether the matrix is dense, CSR or CSC.\n * - `integer`, whether the matrix data is stored as integers or doubles.\n */\nexport function extractHDF5MatrixDetails(file, name) { \n    let output = {};\n    let arr = utils.createInt32WasmArray(5);\n    try {\n        wasm.call(module => module.extract_hdf5_matrix_details(file, name, arr.offset));\n\n        let vals = arr.array();\n        if (vals[0] > 0) {\n            output.format = \"dense\";\n        } else if (vals[1] > 0) {\n            output.format = \"csc\";\n        } else {\n            output.format = \"csr\";\n        }\n\n        output.rows = vals[2];\n        output.columns = vals[3];\n        output.integer = vals[4] > 0;\n    } finally {\n        arr.free();\n    }\n    return output;\n}\n\n/**\n * Initialize a dense matrix from a column-major array.\n *\n * @param {number} numberOfRows - Number of rows.\n * @param {number} numberOfColumns - Number of columns.\n * @param {(WasmArray|TypedArray|Array)} values - Array of length equal to the product of `numberOfRows` and `numberOfColumns`,\n * containing the values to store in the array.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n *\n * @return {ScranMatrix} A dense matrix, filled by column with the contents of `values`.\n */\nexport function initializeDenseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = false } = {}) {\n    var tmp;\n    var output;\n\n    try {\n        tmp = utils.wasmifyArray(values, null);\n        output = gc.call(\n            module => module.initialize_dense_matrix(\n                numberOfRows, \n                numberOfColumns, \n                tmp.offset, \n                tmp.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger\n            ),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from an RDS file.\n *\n * @param {RdsObject} x - Handle to an object inside an RDS file.\n * This should be an integer/numeric matrix, `dgCMatrix` or `dgTMatrix` object.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.consume=false] - Whether to consume the values in `x` when creating the output sparse matrix.\n * Setting this to `true` improves memory efficiency at the cost of preventing any further use of `x`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the R matrix is of an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromRds(x, { consume = false, forceInteger = true, layered = true } = {}) {\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_rds(x.object.$$.ptr, forceInteger, layered, consume),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n","import * as utils from \"./../utils.js\";\nimport * as wasm from \"../wasm.js\";\n\nexport function computePerCellQcFilters(metrics, block, run) {\n    var block_data;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = run(metrics, use_blocks, bptr);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\nexport function applyFilter(thresholds, metrics, block, buffer) {\n    var block_data;\n    var rebuffer;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        let optr;\n        if (buffer == null) {\n            rebuffer = utils.createUint8WasmArray(metrics.numberOfCells());\n            optr = rebuffer.offset;\n        } else {\n            if (buffer.length != metrics.numberOfCells()) {\n                throw new Error(\"'buffer' must be of length equal to the number of cells in 'metrics'\");\n            }\n            optr = buffer.offset;\n        }\n\n        wasm.call(module => thresholds.filter(metrics.results.$$.ptr, use_blocks, bptr, optr));\n        if (buffer == null) {\n            output = rebuffer.slice();\n        } else {\n            output = buffer.array();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(rebuffer);\n    }\n\n    return output;\n}\n\n","import * as wasm from \"../wasm.js\";\nimport * as utils from \"../utils.js\"; \nimport * as wa from \"wasmarrays.js\";\n\nexport function computePerCellQcMetrics(x, subsets, run) {\n    var output;\n    var tmp_subsets = [];\n    var subset_offsets;\n\n    try {\n        let nsubsets = 0;\n        let offset_offset = 0;\n\n        if (subsets != null) {\n            nsubsets = subsets.length;\n            subset_offsets = utils.createBigUint64WasmArray(nsubsets);\n            offset_offset = subset_offsets.offset;\n            let offset_arr = subset_offsets.array();\n\n            for (var i = 0; i < nsubsets; i++) {\n                // This will either create a cheap view, or it'll clone\n                // 'subsets' into the appropriate memory space.\n                let current = utils.wasmifyArray(subsets[i], \"Uint8WasmArray\");\n                if (current.length != x.numberOfRows()) {\n                    throw new Error(\"length of each array in 'subsets' should be equal to the matrix rows\");\n                }\n                tmp_subsets.push(current);\n                offset_arr[i] = BigInt(current.offset);\n            }\n        }\n\n        output = run(x.matrix, nsubsets, offset_offset);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(subset_offsets);\n        for (const y of tmp_subsets) {\n            utils.free(y);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"../utils.js\";\n\nexport function unpack_strings(buffer, lengths) {\n    let dec = new TextDecoder();\n    let names = [];\n    let sofar = 0;\n    for (const l of lengths) {\n        let view = buffer.slice(sofar, sofar + l);\n        names.push(dec.decode(view));\n        sofar += l;\n    }\n    return names;\n}\n\nexport function repack_strings(x) {\n    let buffer;\n    let lengths;\n\n    for (const y of x) {\n        if (!(typeof y == \"string\")) {\n            throw new Error(\"all entries of 'x' should be strings for a string HDF5 dataset\");\n        }\n    }\n\n    try {\n        lengths = utils.createInt32WasmArray(x.length);\n        let lengths_arr = lengths.array();\n\n        let total = 0;\n        const enc = new TextEncoder;\n        let contents = new Array(x.length);\n\n        x.forEach((y, i) => {\n            let e = enc.encode(y);\n            lengths_arr[i] = e.length;\n            contents[i] = e;\n            total += e.length;\n        });\n\n        buffer = utils.createUint8WasmArray(total);\n        let buffer_arr = buffer.array();\n        total = 0;\n\n        contents.forEach(y => {\n            buffer_arr.set(y, total);\n            total += y.length;\n        });\n    } catch (e) {\n        utils.free(buffer);\n        utils.free(lengths);\n        throw e;\n    }\n\n    return [lengths, buffer];\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as init from \"./initializeSparseMatrix.js\";\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around a labelled reference dataset on the Wasm heap, typically produced by {@linkcode loadLabelledReferenceFromBuffers}.\n * @hideconstructor\n */\nclass LoadLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of samples in this dataset.\n     */\n    numberOfSamples() {\n        return this.#reference.num_samples();\n    }\n\n    /**\n     * @return {number} Number of features in this dataset.\n     */\n    numberOfFeatures() {\n        return this.#reference.num_features();\n    }\n\n    /**\n     * @return {number} Number of labels in this dataset.\n     */\n    numberOfLabels() {\n        return this.#reference.num_labels();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\n/**\n * Load a reference dataset for annotation.\n * \n * @param {Uint8Array} ranks - Buffer containing the Gzipped CSV file containing a matrix of ranks.\n * Each line corresponds to a sample and contains a comma-separated vector of ranks across all features.\n * All lines should contain the same number of entries.\n * This is effectively a row-major matrix where rows are samples and columns are features.\n * (Advanced users may note that this is transposed in C++.) \n * @param {Uint8Array} markers - Buffer containing the Gzipped GMT file containing the markers for each pairwise comparison between labels.\n * For `markers`, the GMT format is a tab-separated file with possibly variable numbers of fields for each line.\n * Each line corresponds to a pairwise comparison between labels, defined by the first two fields.\n * The remaining fields should contain indices of marker features (referring to columns of `matrix`) that are upregulated in the first label when compared to the second.\n * Markers should be sorted in order of decreasing strength.\n * @param {Uint8Array} labels - Buffer containing the Gzipped text file containing the label for each sample.\n * Each line should contain an integer representing a particular label, from `[0, N)` where `N` is the number of unique labels.\n * The number of lines should be equal to the number of rows in `matrix`.\n * The actual names of the labels are usually held elsewhere.\n * \n * @return {LoadLabelledReferenceResults} Object containing the reference dataset.\n */\nexport function loadLabelledReferenceFromBuffers(ranks, markers, labels) {\n    var output;\n    var matbuf;\n    var markbuf;\n    var labbuf;\n\n    try {\n        matbuf = utils.wasmifyArray(ranks, \"Uint8WasmArray\");\n        markbuf = utils.wasmifyArray(markers, \"Uint8WasmArray\");\n        labbuf = utils.wasmifyArray(labels, \"Uint8WasmArray\");\n        output = gc.call(\n            module => module.load_singlepp_reference(labbuf.offset, labbuf.length, markbuf.offset, markbuf.length, matbuf.offset, matbuf.length),\n            LoadLabelledReferenceResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(markbuf);\n        utils.free(labbuf);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around a built labelled reference dataset on the Wasm heap, typically produced by {@linkcode buildLabelledReference}.\n * @hideconstructor\n */\nclass BuildLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // internal use only.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of shared features between the test and reference datasets.\n     */\n    sharedFeatures() {\n        return this.#reference.shared_features();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\nfunction register_features(features, id_array) {\n    let registry_contents = new Map;\n\n    // All features in the data are guaranteed to get the a unique ID,\n    // but only non-null and non-duplicated (or the first of a duplicate set)\n    // are actually registered.\n    for (var i = 0; i < features.length; i++) {\n        let id = features[i];\n        if (id !== null) {\n            if (!registry_contents.has(id)) {\n                registry_contents.set(id, i);\n            }\n        }\n        id_array[i] = i;\n    }\n\n    return { contents: registry_contents, counter: features.length };\n}\n\nfunction convert_features(features, registry, id_array) {  \n    let used = new Set;\n    let set = (id, index) => {\n        let found = registry.contents.get(id);\n        if (typeof found !== \"undefined\") {\n            if (!used.has(found)) { // if entries of 'features' match to the same ID, only the first entry gets to match to the ID.\n                id_array[index] = found;\n                used.add(found);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    let counter = registry.counter;\n    for (var i = 0; i < features.length; i++) {\n        let y = features[i];\n        let found = false;\n\n        if (y !== null) {\n            if (y instanceof Array) {\n                for (const z of y) {\n                    if (set(z, i)) { // if an entry of 'features' has multiple names, the first matching name wins.\n                        found = true;\n                        break;\n                    }\n                }\n            } else {\n                found = set(y, i);\n            }\n        }\n\n        // If something isn't found, they get a unique ID.\n        if (!found) {\n            id_array[i] = counter;\n            ++counter;\n        }\n    }\n\n    return;\n}\n\n/**\n * Build the reference dataset for annotation.\n * The build process involves harmonizing the identities of the features available in the test dataset compared to the reference.\n * Specifically, a feature must be present in both datasets in order to be retained. \n * Of those features in the intersection, only the `top` markers from each pairwise comparison are ultimately used for classification.\n *\n * Needless to say, `features` should match up to the rows of the {@linkplain ScranMatrix} that is actually used for annotation in {@linkcode labelCells}.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * If any identifiers are duplicated, only the first occurrence is used and the rest are ignored.\n * @param {LoadLabelledReferenceResults} loaded - A reference dataset, typically loaded with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - An array of feature identifiers (usually strings) of length equal to the number of features in `reference`.\n * Each entry may also be an array of synonymous identifiers, in which case the first identifier that matches to an entry of `features` is used.\n * Contents of `referenceFeatures` are expected to exhibit some overlap with identifiers in `features`.\n * Any `null` entries are considered to be incomparable.\n * If multiple entries of `referenceFeatures` match to the same feature in `features`, only the first matching entry is used and the rest are ignored.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.top=20] - Number of top marker features to use.\n * These features are taken from each pairwise comparison between labels.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildLabelledReferenceResults} Object containing the built reference dataset.\n */\nexport function buildLabelledReference(features, loaded, referenceFeatures, { top = 20, numberOfThreads = null } = {}) {\n    var mat_id_buffer;\n    var ref_id_buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var nfeat = features.length;\n        mat_id_buffer = utils.createInt32WasmArray(nfeat);\n        ref_id_buffer = utils.createInt32WasmArray(loaded.numberOfFeatures());\n        if (referenceFeatures.length != ref_id_buffer.length) {\n            throw new Error(\"length of 'referenceFeatures' should be equal to the number of features in 'reference'\");\n        }\n\n        let registry = register_features(features, mat_id_buffer.array());\n        convert_features(referenceFeatures, registry, ref_id_buffer.array());\n\n        output = gc.call(\n            module => module.build_singlepp_reference(nfeat, mat_id_buffer.offset, loaded.reference, ref_id_buffer.offset, top, nthreads),\n            BuildLabelledReferenceResults\n        );\n\n        output.expectedNumberOfFeatures = nfeat;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(mat_id_buffer);\n        utils.free(ref_id_buffer);\n    }\n\n    return output;\n}\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around the cell labelling results on the Wasm heap, typically produced by {@linkcode labelCells}.\n * @hideconstructor\n */\nclass LabelCellsResults {\n    #id;\n    #results;\n    #cell_buffer;\n    #label_buffer;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of labels used in {@linkcode labelCells}.\n     */\n    numberOfLabels() {\n        return this.#results.num_labels();\n    }\n\n    /**\n     * @return {number} Number of cells that were labelled.\n     */\n    numberOfCells() {\n        return this.#results.num_samples();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Int32Array|Int32WasmArray} Array of length equal to the number of cells,\n     * containing the index of the best label for each cell.\n     */\n    predictedLabels({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.get_best(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the cell of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfLabels numberOfLabels}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores for this cell across all labels.\n     * If `buffer` is supplied, it is used as the return value.\n     */\n    scoresForCell(i, { copy = true, buffer = null } = {}) {\n        if (buffer == null) {\n            if (typeof this.#cell_buffer == \"undefined\") {\n                this.#cell_buffer = utils.createFloat64WasmArray(this.#results.num_labels());\n            }\n            this.#results.get_scores_for_sample(i, this.#cell_buffer.offset);\n            return utils.possibleCopy(this.#cell_buffer.array(), copy);\n        } else {\n            if (buffer.length !== this.#results.num_labels()) {\n                throw new Error(\"length of 'buffer' should equal the number of labels\");\n            }\n            this.#results.get_scores_for_sample(i, buffer.offset);\n            return buffer;\n        }\n    }\n\n    /**\n     * @param {number} i - Index of the label of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfCells numberOfCells}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores across all cells for this label.\n     * If `buffer` is supplied, it is used as the return value.\n     */\n    scoresForLabel(i, { copy = true, buffer = null } = {}) {\n        if (buffer == null) {\n            if (typeof this.#label_buffer == \"undefined\") {\n                this.#label_buffer = utils.createFloat64WasmArray(this.#results.num_samples());\n            }\n            this.#results.get_scores_for_label(i, this.#label_buffer.offset);\n            return utils.possibleCopy(this.#label_buffer.array(), copy);\n        } else {\n            if (buffer.length !== this.#results.num_samples()) {\n                throw new Error(\"length of 'buffer' should equal the number of cells\");\n            }\n            this.#results.get_scores_for_label(i, buffer.offset);\n            return utils.possibleCopy(this.#label_buffer.array(), copy);\n        }\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of cells,\n     * containing the difference in scores between the best and second-best label during fine-tuning.\n     */\n    fineTuningDelta({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.get_delta(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n\n            utils.free(this.#label_buffer);\n            utils.free(this.#cell_buffer);\n        }\n    }\n}\n\nfunction label_cells(x, expectedNumberOfFeatures, numberOfFeatures, numberOfCells, FUN, msg) {\n    var output = null;\n    var matbuf;\n    var tempmat;\n\n    try {\n        let target;\n        if (x instanceof ScranMatrix) {\n            target = x.matrix;\n        } else if (x instanceof wa.Float64WasmArray) {\n            tempmat = init.initializeDenseMatrixFromDenseArray(numberOfFeatures, numberOfCells, x, { forceInteger: false });\n            target = tempmat.matrix;\n        } else {\n            throw new Error(\"unknown type for 'x'\");\n        }\n\n        if (target.nrow() != expectedNumberOfFeatures) {\n            throw new Error(\"number of rows in 'x' should be equal to length of 'features' used to build '\" + msg + \"'\");\n        }\n\n        output = FUN(target);\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(tempmat);\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {BuildLabelledReferenceResults} reference - A built reference dataset, typically generated by {@linkcode buildLabelledReference}.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {LabelCellsResults} Labelling results for each cell in `x`.\n */\nexport function labelCells(x, reference, { numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    let FUN = (target, ptr) => {\n        return gc.call(module => module.run_singlepp(target, reference.reference, quantile, nthreads), LabelCellsResults);\n    };\n    return label_cells(x, reference.expectedNumberOfFeatures, numberOfFeatures, numberOfCells, FUN, \"reference\");\n}\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around integrated reference datasets on the Wasm heap, typically produced by {@linkcode integrateLabelledReferences}.\n * @hideconstructor\n */\nclass IntegrateLabelledReferencesResults {\n    #id;\n    #integrated;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#integrated = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get integrated() {\n        return this.#integrated;\n    }\n\n    /**\n     * @return {number} Number of reference datasets.\n     */\n    numberOfReferences() {\n        return this.#integrated.num_references();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#integrated !== null) {\n            gc.release(this.#id);\n            this.#integrated = null;\n        }\n    }\n}\n\n/**\n * Integrate multiple reference datasets.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain a single identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * If any entries are duplicated, only the first occurrence is used and the rest are ignored.\n * @param {Array} loaded - Array of {@linkplain LabelledReference} objects, typically created with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - Array of length equal to `loaded`, \n * containing arrays of feature identifiers (usually strings) of length equal to the number of features the corresponding entry of `loaded`.\n * Each entry may also be an array of synonymous identifiers, in which case the first identifier that matches to an entry of `features` is used.\n * Contents of `referenceFeatures` are expected to exhibit some overlap with identifiers in `features`.\n * Any `null` entries are considered to be incomparable.\n * If multiple entries of `referenceFeatures` match to the same feature in `features`, only the first matching entry is used and the rest are ignored.\n * @param {Array} reference - Array of {@linkplain BuildLabelledReferenceResults} objects, typically generated by calling {@linkcode buildLabelledReference} \n * on the same `features` and the corresponding entries of `loaded` and `referenceFeatures`.\n * This should have length equal to that of `loaded`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {IntegrateLabelledReferencesResults} Object containing the integrated references.\n */\nexport function integrateLabelledReferences(features, loaded, referenceFeatures, built, { numberOfThreads = null } = {}) {\n    let id_arr;\n    let loaded_arr2;\n    let ref_arr2;\n    let built_arr2;\n    let output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    // Checking the inputs.\n    let nrefs = loaded.length;\n    if (referenceFeatures.length != nrefs) {\n        throw new Error(\"'loaded' and 'referenceFeatures' should be of the same length\");\n    }\n    if (built.length != nrefs) {\n        throw new Error(\"'loaded' and 'built' should be of the same length\");\n    }\n    for (var i = 0; i < nrefs; i++) {\n        if (loaded[i].numberOfFeatures() != referenceFeatures[i].length) {\n            throw new Error(\"length of each 'referenceFeatures' should be equal to the number of features in the corresponding 'loaded'\");\n        }\n    }\n\n    let ref_arr = new Array(nrefs);\n    try {\n        id_arr = utils.createInt32WasmArray(features.length);\n        let registry = register_features(features, id_arr.array());\n\n        loaded_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let la2 = loaded_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            la2[i] = BigInt(loaded[i].reference.$$.ptr);\n        }\n\n        ref_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ra2 = ref_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            let current = referenceFeatures[i];\n            ref_arr[i] = utils.createInt32WasmArray(current.length);\n            convert_features(current, registry, ref_arr[i].array());\n            ra2[i] = BigInt(ref_arr[i].offset);\n        }\n\n        built_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ba2 = built_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            ba2[i] = BigInt(built[i].reference.$$.ptr);\n        }\n        \n        output = gc.call(\n            module => module.integrate_singlepp_references(\n                features.length,\n                id_arr.offset,\n                nrefs,\n                loaded_arr2.offset,\n                ref_arr2.offset,\n                built_arr2.offset,\n                nthreads\n            ),\n            IntegrateLabelledReferencesResults\n        );\n\n        output.expectedNumberOfFeatures = features.length;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(id_arr);\n        utils.free(loaded_arr2);\n        utils.free(built_arr2);\n        utils.free(ref_arr2);\n        for (const x of ref_arr) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around the integrated cell labelling results on the Wasm heap, typically produced by {@linkcode labelCells}.\n * @hideconstructor\n */\nclass IntegrateCellLabelsResults {\n    #results;\n\n    constructor(raw) {\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of labels used in {@linkcode integrateCellLabels}.\n     */\n    numberOfReferences() {\n        return this.#results.numberOfLabels();\n    }\n\n    /**\n     * @return {number} Number of cells that were labelled.\n     */\n    numberOfCells() {\n        return this.#results.numberOfCells();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Int32Array|Int32WasmArray} Array of length equal to the number of cells,\n     * containing the index of the best reference for each cell.\n     */\n    predictedReferences({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.predictedLabels(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the cell of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfLabels numberOfLabels}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores for this cell across all references.\n     * If `buffer` is supplied, it is used as the return value.\n     */\n    scoresForCell(i, { copy = true, buffer = null } = {}) {\n        return this.#results.scoresForCell(i, { copy, buffer });\n    }\n\n    /**\n     * @param {number} i - Index of the reference of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfCells numberOfCells}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores across all cells for this label.\n     * If `buffer` is supplied, it is used as the return value.\n     */\n    scoresForReference(i, { copy = true, buffer = null } = {}) {\n        return this.#results.scoresForLabel(i, { copy, buffer });\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of cells,\n     * containing the difference in scores between the best and second-best reference during fine-tuning.\n     */\n    fineTuningDelta({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.fineTuningDelta(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            this.#results.free();\n            this.#results = null;\n        }\n    }\n}\n\n/**\n * Integrate cell labels across multiple reference datasets.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {IntegratedLabelledReferences} integrated - An integrated set of reference datasets, typically generated by {@linkcode integrateLabelledReferences}.\n * @param {Array} assigned - An array of length equal to the number of references in `integrated`.\n * This should contain the result of classification of `x` with each individual reference via {@linkcode labelCells}.\n * Each element should be a {@linkplain LabelCells} object; or an Array, TypedArray or Int32WasmArray of length equal to the number of cells in `x`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {LabelCellsResults} Integrated labelling results for each cell in `x`.\n */\nexport function integrateCellLabels(x, assigned, integrated, { numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) { \n    let nrefs = integrated.numberOfReferences();\n    if (assigned.length != nrefs) {\n        throw new Error(\"length of 'assigned' should be equal to the number of references in 'integrated'\");\n    }\n\n    let output;\n    let aptrs;\n    let assigned_arrs = new Array(nrefs);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        aptrs = utils.createBigUint64WasmArray(nrefs);\n        let aptrs_arr = aptrs.array();\n        for (var i = 0; i < assigned.length; i++) {\n            let current = assigned[i];\n\n            if (current instanceof LabelCellsResults) {\n                current = current.predictedLabels({ copy: \"view\" });\n            }\n\n            let fail = false;\n            if (x instanceof ScranMatrix) {\n                if (current.length != x.numberOfColumns()) {\n                    fail = true;\n                }\n            } else if (current.length != numberOfCells) {\n                fail = true;\n            }\n            if (fail) {\n                throw new Error(\"length of each element in 'assigned' should be equal to number of columns in 'x'\");\n            }\n\n            assigned_arrs[i] = utils.wasmifyArray(current, \"Int32WasmArray\");\n            aptrs_arr[i] = BigInt(assigned_arrs[i].offset);\n        }\n    \n        let FUN = (target, ptr) => {\n            return gc.call(module => module.integrate_singlepp(target, aptrs_arr.offset, integrated.integrated, quantile, nthreads), LabelCellsResults);\n        };\n        output = label_cells(x, integrated.expectedNumberOfFeatures, numberOfFeatures, numberOfCells, FUN, \"integrated\");\n\n    } finally{\n        utils.free(aptrs);\n        for (const x of assigned_arrs) {\n            utils.free(x);\n        }\n    }\n\n    return new IntegrateCellLabelsResults(output);\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Compute log-transformed normalized expression values.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.sizeFactors=null] - Array of positive numbers containing the size factor for each cell in `x`.\n * This should have length equal to the number of columns in `x`.\n * If `null`, size factors are computed from the column sums of `x`.\n * @param {boolean} [options.center=true] - Whether to center the size factors so that the normalized expression values are comparable in magnitude to the input counts.\n * Set this to `false` if `sizeFactors` are provided and already centered, e.g., with {@linkcode centerSizeFactors}.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to adjust the scaling of cells in different blocks, to avoid excessive up-scaling of low-coverage blocks.\n *\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * This option is ignored if `center = false`, in which case it is assumed that scaling has already been provided in the input `sizeFactors`.\n * @param {boolean} [options.allowZeros=false] - Whether size factors of zero should be allowed.\n * If `true`, no scaling normalization is performed for the corresponding cells, under the assumption they are all-zero libraries.\n * If `false`, an error is raised instead.\n *\n * @return {ScranMatrix} A matrix of the same type as `x` containing log-transformed normalized expression values.\n */\nexport function logNormCounts(x, { sizeFactors = null, center = true, block = null, allowZeros = false } = {}) {\n    var sf_data;\n    var block_data;\n    var output;\n\n    try {\n        var sfptr = 0;\n        var use_sf = false;\n\n        if (sizeFactors !== null) {\n            sf_data = utils.wasmifyArray(sizeFactors, \"Float64WasmArray\");\n            if (sf_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'sizeFactors' must be equal to number of columns in 'x'\");\n            }\n            sfptr = sf_data.offset;\n            use_sf = true;\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.log_norm_counts(x.matrix, use_sf, sfptr, use_blocks, bptr, center, allowZeros),\n            x.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(sf_data);\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Center size factors in preparation for log-transformation.\n * This is usually called by {@linkcode logNormCounts} internally, but can also be directly called by users to reconstitute the size factors used in the log-normalized matrix.\n *\n * @param {TypedArray|WasmArray} sizeFactors - Array of non-negative size factors, one per cell.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell, see {@linkcode logNormCounts}.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to that of `sizeFactors`.\n * If `null`, an array is allocated by the function.\n *\n * @return {Float64WasmArray} Array containing the centered size factors.\n * If `buffer` is provided, it is returned directly.\n */\nexport function centerSizeFactors(sizeFactors, { block = null, buffer = null } = {}) {\n    let local_buffer;\n    let block_data;\n\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(sizeFactors.length);\n            buffer = local_buffer;\n        }\n\n        if (buffer !== sizeFactors) {\n            buffer.set(sizeFactors instanceof wa.WasmArray ? sizeFactors.array() : sizeFactors);\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != buffer.length) {\n                throw new Error(\"'block' must be of length equal to that of 'sizeFactors'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        wasm.call(module => module.center_size_factors(buffer.length, buffer.offset, use_blocks, bptr));\n\n    } catch(e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Perform mutual nearest neighbor (MNN) correction on a low-dimensional representation.\n * This is primarily used to remove batch effects.\n *\n * @param {(RunPCAResults|TypedArray|Array|Float64WasmArray)} x - A matrix of low-dimensional results where rows are dimensions and columns are cells.\n * If this is a {@linkplain RunPCAResults} object, the PCs are automatically extracted.\n * Otherwise, the matrix should be provided as an array in column-major form, with specification of `numberOfDims` and `numberOfCells`.\n * @param {(Int32WasmArray|Array|TypedArray)} block - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform normalization within each block.\n * @param {object} [options={}] - Further optional parameters.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer of length equal to the product of the number of cells and dimensions,\n * to be used to store the corrected coordinates for each cell.\n * If `null`, this is allocated and returned by the function.\n * @param {?number} [options.numberOfDims=null] - Number of dimensions in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {?number} [options.numberOfCells=null] - Number of cells in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {number} [options.k=15] - Number of neighbors to use in the MNN search. \n * @param {number} [options.numberOfMADs=3] - Number of MADs to use to define the threshold on the distances to the neighbors,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustIterations=2] - Number of robustness iterations to use for computing the center of mass,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustTrim=0.25] - Proportion of furthest observations to remove during robustness iterations, \n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {string} [options.referencePolicy=\"max-rss\"] - What policy to use to choose the first reference batch.\n * This can be the largest batch (`\"max-size\"`), the most variable batch (`\"max-variance\"`), the batch with the highest RSS (`\"max-rss\"`) or batch 0 in `block` (`\"input\"`).\n * @param {boolean} [options.approximate=true] - Whether to perform an approximate nearest neighbor search.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to `x`, containing the batch-corrected low-dimensional coordinates for all cells.\n * Values are organized using the column-major layout.\n * This is equal to `buffer` if provided.\n */\nexport function mnnCorrect(x, block, { \n    buffer = null, \n    numberOfDims = null,\n    numberOfCells = null,\n    k = 15,\n    numberOfMADs = 3, \n    robustIterations = 2, \n    robustTrim = 0.25,\n    referencePolicy = \"max-rss\",\n    approximate = true,\n    numberOfThreads = null\n} = {}) {\n\n    let local_buffer;\n    let x_data;\n    let block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            x = x.principalComponents({ copy: \"view\" });\n        } else {\n            if (numberOfDims === null || numberOfCells === null || numberOfDims * numberOfCells !== x.length) {\n                throw new Error(\"length of 'x' must be equal to the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n            x_data = utils.wasmifyArray(x, \"Float64WasmArray\");\n            x = x_data;\n        }\n\n        if (buffer == null) {\n            local_buffer = utils.createFloat64WasmArray(numberOfCells * numberOfDims);\n            buffer = local_buffer;\n        } else if (buffer.length !== x.length) {\n            throw new Error(\"length of 'buffer' must be equal to the product of the number of dimensions and cells\");\n        }\n\n        block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n        if (block_data.length != numberOfCells) {\n            throw new Error(\"'block' must be of length equal to the number of cells in 'x'\");\n        }\n\n        wasm.call(module => module.mnn_correct(\n            numberOfDims, \n            numberOfCells,\n            x.offset,\n            block_data.offset,\n            buffer.offset,\n            k,\n            numberOfMADs,\n            robustIterations,\n            robustTrim,\n            referencePolicy,\n            approximate,\n            nthreads\n        ));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n        \n    } finally {\n        utils.free(x_data);\n    }\n\n    return buffer; \n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper for the variance modelling results, produced by {@linkcode modelGeneVar}.\n * @hideconstructor\n */\nexport class ModelGeneVarResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledVariances;\n    #filledFitted;\n    #filledResiduals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMeans = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledVariances = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledFitted = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledResiduals = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n\n        return;\n    }\n\n    #extract(block, copy, fillable, fillcheck, method) {\n        let fillindex = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            fillindex = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck[fillindex], \n            () => { fillcheck[fillindex] = true }, \n            COPY => utils.possibleCopy(this.#results[method](block), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the variance of log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    variances({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledVariances, \"variances\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the fitted value of the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    fitted({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledFitted, \"fitted\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the residuals from the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    residuals({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledResiduals, \"residuals\");\n    }\n\n    /**\n     * @return {number} Number of blocks used.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Model the mean-variance trend across genes.\n *\n * @param {ScranMatrix} x - The normalized log-expression matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to fit the mean-variance trend within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {number} [options.span=0.3] - Span to use for the LOWESS trend fitting.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ModelGeneVarResults} Object containing the variance modelling results.\n */\nexport function modelGeneVar(x, { block = null, span = 0.3, numberOfThreads = null } = {}) {\n    var block_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.model_gene_var(x.matrix, use_blocks, bptr, span, nthreads),\n            ModelGeneVarResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Create an empty {@linkplain ModelGeneVarResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode chooseHVGs} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n *\n * @return {ModelGeneVarResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyModelGeneVarResults(numberOfGenes, numberOfBlocks) {\n    return gc.call(\n        module => new module.ModelGeneVar_Results(numberOfGenes, numberOfBlocks),\n        ModelGeneVarResults,\n        /* filled = */ false\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the ADT-based metrics allocated on the Wasm heap, typically produced by {@linkcode computePerCellAdtQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellAdtQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total ADT count for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected ADT features for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {?boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count in the ADT subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute the per-cell QC metrics from an ADT count matrix.\n *\n * @param {ScranMatrix} x - The ADT count matrix.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellAdtQcMetricsResults} Object containing the ADT-based QC metrics.\n */\nexport function perCellAdtQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_adt_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellAdtQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellAdtQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode computePerCellAdtQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellAdtQcMetricsResults} Object with allocated memory but no actual values.\n */\nexport function emptyPerCellAdtQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellAdtQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellAdtQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \n\n/**\n * Wrapper for the CRISPR-based metrics allocated on the Wasm heap, produced by {@linkcode perCellCrisprQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellCrisprQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledMaxProportions;\n    #filledMaxIndex;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledMaxProportions = filled;\n        this.#filledMaxIndex = filled;\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY),\n            \"detected\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxProportions({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxProportions, \n            () => { this.#filledMaxProportions = true }, \n            COPY => utils.possibleCopy(this.#results.max_proportion(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the index of the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxIndex({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxIndex, \n            () => { this.#filledMaxIndex = true }, \n            COPY => utils.possibleCopy(this.#results.max_index(), COPY),\n            \"maxIndex\"\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the CRISPR guide count matrix.\n *\n * @param {ScranMatrix} x - The count matrix for CRISPR guides.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellCrisprQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellCrisprQcMetrics(x, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.per_cell_crispr_qc_metrics(x.matrix, nthreads),\n        PerCellCrisprQcMetricsResults\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellCrisprQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestCrisprQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n *\n * @return {PerCellCrisprQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellCrisprQcMetricsResults(numberOfCells) {\n    return gc.call(\n        module => new module.PerCellCrisprQcMetrics_Results(numberOfCells),\n        PerCellCrisprQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the RNA-based metrics allocated on the Wasm heap, produced by {@linkcode perCellRnaQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellRnaQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the RNA count matrix.\n *\n * @param {ScranMatrix} x - The RNA count matrix for genes.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellRnaQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellRnaQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n     return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_rna_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellRnaQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellRnaQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestRnaQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellRnaQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellRnaQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellRnaQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellRnaQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import { clusterKmeans } from \"./clusterKmeans.js\";\nimport { logNormCounts } from \"./logNormCounts.js\";\nimport { groupedSizeFactors } from \"./groupedSizeFactors.js\";\nimport { runPCA } from \"./runPCA.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Quickly compute size factors for an ADT count matrix.\n * This generates k-means clusters from a matrix of PCs before calling {@linkcode groupedSizeFactors}.\n * The aim is to account for composition biases that are common in ADT-based data, while avoiding problems with per-cell sparsity.\n *\n * @param {ScranMatrix} x - An ADT count matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfClusters=20] - Number of clusters to create.\n * More clusters improves the accuracy of the size factors at the cost of precision.\n * @param {number} [options.numberOfPCs=25] - Number of PCs to use.\n * More PCs captures more biological signal at the cost of increasing noise.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.totals=null] - Array containing the total count for each column in `x`, to speed up the initial normalization.\n * If `null`, this is computed from `x`.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Blocking level for each column in `x`, see {@linkcode logNormCounts} and {@linkcode runPCA}.\n * For PCA, this is used to equalize the contribution of blocks of differing size.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to the number of columns in `x`.\n * If `null`, an array is allocated by the function.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * \n * @return {Float64WasmArray} Per-cell size factors for each column of `x`.\n *\n * If `buffer` is supplied, it is directly used as the return value.\n */\nexport function quickAdtSizeFactors(x, { numberOfClusters = 20, numberOfPCs = 25, totals = null, block = null, buffer = null, numberOfThreads = null } = {}) {\n    let norm, pcs;\n    try {\n        norm = logNormCounts(x, { sizeFactors: totals, block: block });\n        pcs = runPCA(norm, { numberOfPCs: Math.min(norm.numberOfRows() - 1, numberOfPCs), numberOfThreads: numberOfThreads, block: block, blockMethod: \"weight\" });\n    } finally {\n        utils.free(norm);\n    }\n\n    let clust;\n    try {\n        clust = clusterKmeans(pcs, numberOfClusters, { numberOfThreads: numberOfThreads });\n    } finally {\n        utils.free(pcs);\n    }\n\n    let local_buffer;\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' should be equal to the number of columns in 'x'\");\n        }\n        groupedSizeFactors(x, clust.clusters({ copy: \"view\" }), { buffer: buffer, numberOfThreads: numberOfThreads });\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(clust);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport * as packer from \"./internal/pack_strings.js\";\n\n/**\n * Base class for RDS objects.\n * @hideconstructor\n */\nexport class RdsObject {\n    constructor(id, raw, par) {\n        this.id = id;\n        this.object = raw;\n        this.parent = par;\n    }\n\n    /**\n     * @return {string} Type of the object.\n     */\n    type() {\n        return this.object.type();\n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     */\n    free() {\n        if (this.object !== null) {\n            gc.release(this.id);\n            this.object = null;\n        }\n    }\n}\n\n/**\n * Vector-like R object.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsVector extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return{number} Length of the vector.\n     */\n    length() {\n        return this.object.size();\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * Integer vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsIntegerVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the integer vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Boolean (i.e., boolean) vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsBooleanVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the logical vector.\n     * Zero values are falsey and values of 1 are truthy.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Double-precision vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsDoubleVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Values of the double vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * String vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsStringVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return {Array} Values of the string vector.\n     */\n    values() {\n        return wasm.call(mod => {\n            this.object.fill_string_vector();\n            let buf = this.object.string_vector_buffer();\n            let len = this.object.string_vector_length();\n            return packer.unpack_strings(buf, len);\n        });\n    }\n}\n\n/**\n * Generic vector from R, typically known as a \"list\".\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsGenericVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {number} index - Index of the list element of interest.\n     * @return {RdsObject} Value of the list element.\n     */\n    load(index) {\n        return dispatch(mod => this.object.load_list_element(index), this.parent);\n    }\n}\n\n/**\n * S4 object from R, containing slot data in its attributes.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsS4Object extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * Name of the R class.\n     */\n    className() {\n        return wasm.call(mod => this.object.class_name());\n    }\n\n    /**\n     * Name of the package that defines the class.\n     */\n    packageName() {\n        return wasm.call(mod => this.object.package_name());\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * NULL type in R.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsNull extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n};\n\nfunction dispatch(fun, par) {\n    let obj = wasm.call(fun);\n\n    let tt = null;\n    try {\n        tt = obj.type();\n    } catch (e) {\n        obj.delete();\n        throw e;\n    }\n\n    // Remaining steps until gc.call() should be no-throw!\n    let cons;\n    if (tt == \"integer\") {\n        cons = RdsIntegerVector;\n    } else if (tt == \"double\") {\n        cons = RdsDoubleVector;\n    } else if (tt == \"boolean\") {\n        cons = RdsBooleanVector;\n    } else if (tt == \"string\") {\n        cons = RdsStringVector;\n    } else if (tt == \"vector\") {\n        cons = RdsGenericVector;\n    } else if (tt == \"S4\") {\n        cons = RdsS4Object;\n    } else if (tt == \"null\") {\n        cons = RdsNull;\n    } else {\n        cons = RdsObject;\n    }\n\n    return gc.call(mod => obj, cons, par);\n}\n\n/**\n * Details of the RDS file.\n * @hideconstructor\n */\nexport class RdsDetails {\n    #id;\n    #obj;\n\n    constructor(id, obj) {\n        this.#id = id;\n        this.#obj = obj;\n    }\n\n    /**\n     * @return {number} Version of the RDS format. This should be 3.\n     */\n    formatVersion() {\n        return this.#obj.format_version();\n    }\n\n    /**\n     * @return {string} The R version used to create the file.\n     */\n    writerVersion() {\n        let info = this.#obj.writer_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {string} The minimum R version that can read the file.\n     */\n    readerVersion() {\n        let info = this.#obj.reader_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {RdsObject} Interface into the underlying R object.\n     */\n    value() {\n        return dispatch(mod => this.#obj.load(), this); \n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     * Doing so will invalidate all {@linkplain RdsObject} instances derived from this object, \n     * directly via {@linkcode RdsDetails#load} or indirectly \n     * (e.g., from further {@linkcode RdsVector#attribute RdsVector.attribute} or {@linkcode RdsGenericVector#load RdsGenericVector.load} calls).\n     */\n    free() {\n        if (this.#obj !== null) {\n            gc.release(this.#id);\n            this.#obj = null;\n        }\n    }\n}\n\n/**\n * Read the contents of an RDS file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of an RDS file.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n *\n * @return {RdsDetails} Details of the file.\n */\nexport function readRds(x) {\n    let tmp;\n    let output;\n\n    try {\n        if (typeof x == \"string\") {\n            output = gc.call(module => module.parse_rds_from_file(x), RdsDetails)\n        } else {\n            tmp = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(module => module.parse_rds_from_buffer(tmp.offset, tmp.length), RdsDetails);\n        }\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/** \n * Wrapper for the PCA results on the Wasm heap, typically created by {@linkcode runPCA}.\n * @hideconstructor\n */\nexport class RunPCAResults {\n    #id;\n    #results;\n\n    #filledComponents;\n    #filledVariances;\n    #filledTotalVariance;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledComponents = filled;\n        this.#filledVariances = filled;\n        this.#filledTotalVariance = filled;\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64Wasmarray)} Array containing the principal components for all cells.\n     * This should be treated as a column-major array where the rows are the PCs and columns are the cells.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    principalComponents({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledComponents, \n            () => { this.#filledComponents = true }, \n            COPY => utils.possibleCopy(this.#results.pcs(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} total - Total variance in the dataset,\n     * equal to the sum of the variances across all PCs (including those that were not explicitly computed).\n     *\n     * @return Total varaiance in this object is set to `total`.\n     * This is primarily intended for use with {@linkcode emptyRunPCAResults}.\n     */\n    setTotalVariance(total) {\n        if (!this.#filledTotalVariance) {\n            this.#filledTotalVariance = true;\n        }\n        this.#results.set_total_variance(total);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64WasmArray)} Array containing the variance explained for each requested PC.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    varianceExplained({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledVariances, \n            () => { this.#filledVariances = true }, \n            COPY => utils.possibleCopy(this.#results.variance_explained(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} The total variance in the dataset,\n     * typically used with {@linkcode PCAResults#varianceExplained varianceExplained} to compute the proportion of variance explained.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setTotalVariance setTotalVariance}.\n     */\n    totalVariance() {\n        if (!this.#filledTotalVariance) {\n            return null;\n        } else {\n            return this.#results.total_variance();\n        }\n    }\n\n    /**\n     * @return {number} Number of PCs available in these results.\n     */\n    numberOfPCs() {\n        return this.#results.num_pcs();\n    }\n\n    /**\n     * @return {number} Number of cells used to compute these results.\n     */\n    numberOfCells() {\n        // TODO: switch to this.#results.num_cells();\n        return this.principalComponents({ copy: false }).length / this.numberOfPCs();\n\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Run a principal components analysis on the log-expression matrix.\n * This is usually done on a subset of features, and possibly with some kind of blocking on a per-cell batch factor.\n *\n * @param {ScranMatrix} x - The log-normalized expression matrix.\n * @param {object} [options={}] - Optional parameters. \n * @param {?(Uint8WasmArray|Array|TypedArray)} [options.features=null] - Array specifying which features should be retained (e.g., HVGs).\n * This should be of length equal to the number of rows in `x`; elements should be `true` to retain each row.\n * If `null`, all features are retained.\n * @param {number} [options.numberOfPCs=25] - Number of top principal components to compute.\n * @param {boolean} [options.scale=false] - Whether to scale each feature to unit variance.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {string} [options.blockMethod=\"regress\"] - How to modify the PCA for the blocking factor.\n *\n * - `\"regress\"` will regress out the factor, effectively performing a PCA on the residuals.\n * - `\"weight\"` will weight the contribution of each blocking level equally so that larger blocks do not dominate the PCA.\n * - `\"none\"` will ignore any blocking factor, i.e., as if `block = null`.\n *\n * This option is only used if `block` is not `null`.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {RunPCAResults} Object containing the computed PCs.\n */\nexport function runPCA(x, { features = null, numberOfPCs = 25, scale = false, block = null, blockMethod = \"regress\", numberOfThreads = null } = {}) {\n    var feat_data;\n    var block_data;\n    var output;\n\n    utils.matchOptions(\"blockMethod\", blockMethod, [\"none\", \"regress\", \"weight\" ]);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var use_feat = false;\n        var fptr = 0;\n\n        if (features !== null) {\n            feat_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n            if (feat_data.length != x.numberOfRows()) {\n                throw new Error(\"length of 'features' should be equal to number of rows in 'x'\");\n            }\n            use_feat = true;\n            fptr = feat_data.offset;\n        }\n\n        // Avoid asking for more PCs than is possible.\n        // Remember that centering removes one df, so we subtract 1 from the dimensions.\n        numberOfPCs = Math.min(numberOfPCs, x.numberOfRows() - 1, x.numberOfColumns() - 1);\n\n        if (block === null || blockMethod == 'none') {\n            output = gc.call(\n                module => module.run_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, nthreads),\n                RunPCAResults\n            );\n\n        } else {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'block' should be equal to the number of columns in 'x'\");\n            }\n            if (blockMethod == \"regress\") {\n                output = gc.call(\n                    module => module.run_blocked_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else if (blockMethod == \"weight\") {\n                output = gc.call(\n                    module => module.run_multibatch_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else {\n                throw new Error(\"unknown value '\" + blockMethod + \"' for 'blockMethod='\");\n            }\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(feat_data);\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain RunPCAResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode clusterKmeans} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset, usually after QC filtering.\n * @param {number} numberOfPCs - Number of PCs to be computed.\n *\n * @return {RunPCAResults} Object with allocated memory to store the PCs, but no actual values.\n */\nexport function emptyRunPCAResults(numberOfCells, numberOfPCs) {\n    return gc.call(\n        module => new module.RunPCA_Results(numberOfCells, numberOfPCs),\n        RunPCAResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildNeighborSearchIndexResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the t-SNE status object on the Wasm heap, typically created by {@linkcode initializeTSNE}.\n * @hideconstructor\n */\nexport class InitializeTSNEResults {\n    #id;\n    #status;\n    #coordinates;\n\n    constructor(id, raw_status, raw_coordinates) {\n        this.#id = id;\n        this.#status = raw_status;\n        this.#coordinates = raw_coordinates;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get status() {\n        return this.#status;\n    }\n\n    // Internal use only, not documented.\n    get coordinates() {\n        return this.#coordinates;\n    }\n\n    /**\n     * @return {InitializeTSNEResults} A deep copy of this object.\n     */\n    clone() {\n        return gc.call(\n            module => this.#status.deepcopy(), \n            InitializeTSNEResults, \n            this.#coordinates.clone()\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.#status.num_obs();\n    }\n\n    /**\n     * @return {number} Number of iterations processed so far.\n     * This will change with repeated invocations of {@linkcode runTSNE} on this object.\n     */\n    iterations () {\n        return this.#status.iterations();\n    }\n\n    /**\n     * @return {object} Object with `x` and `y` keys.\n     * The corresponding values are Float64Array objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.#coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free() {\n        if (this.#status !== null) {\n            gc.release(this.#id);\n            this.#status = null;\n        }\n        if (this.#coordinates !== null) {\n            this.#coordinates.free();\n            this.#coordinates = null;\n        }\n        return;\n    }\n}\n\n/**\n * @param {number} perplexity - Perplexity to use in the t-SNE algorithm.\n * @return {number} Appropriate number of neighbors to use in the nearest neighbor search.\n */\nexport function perplexityToNeighbors(perplexity) {\n    return wasm.call(module => module.perplexity_to_k(perplexity));\n}\n\n/**\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.perplexity=30] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {boolean} [options.checkMismatch=true] - Whether to check for a mismatch between the perplexity and the number of searched neighbors.\n * Only relevant if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {InitializeTSNEResults} Object containing the initial status of the t-SNE algorithm.\n */\nexport function initializeTSNE(x, { perplexity = 30, checkMismatch = true, numberOfThreads = null } = {}) {\n    var my_neighbors;\n    var raw_coords;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let neighbors;\n\n        if (x instanceof BuildNeighborSearchIndexResults) {\n            let k = perplexityToNeighbors(perplexity);\n            my_neighbors = findNearestNeighbors(x, k, { numberOfThreads: nthreads });\n            neighbors = my_neighbors;\n\n        } else {\n            if (checkMismatch) {\n                let k = perplexityToNeighbors(perplexity);\n                if (k * x.numberOfCells() != x.size()) {\n                    throw new Error(\"number of neighbors in 'x' does not match '3 * perplexity'\");\n                }\n            }\n            neighbors = x;\n        }\n\n        raw_coords = utils.createFloat64WasmArray(2 * neighbors.numberOfCells());\n        wasm.call(module => module.randomize_tsne_start(neighbors.numberOfCells(), raw_coords.offset, 42));\n        output = gc.call(\n            module => module.initialize_tsne(neighbors.results, perplexity, nthreads),\n            InitializeTSNEResults,\n            raw_coords\n        );\n\n    } catch(e) {\n        utils.free(output);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Run the t-SNE algorithm on an initialized {@linkplain InitializeTSNEResults}.\n *\n * @param {InitializeTSNEResults} x A previously initialized status object from {@linkcode initializeTSNE}.\n * This may be passed through {@linkcode runTSNE} any number of times.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.maxIterations=1000] - Maximum number of iterations to perform.\n * This number includes all existing iterations that were already performed in `x` from previous calls to {@linkcode runTSNE}.\n * @param {?number} [options.runTime=null] - Number of milliseconds for which the algorithm is allowed to run before returning.\n * If `null`, no limit is imposed on the runtime.\n *\n * @return The algorithm status in `x` is advanced up to the requested number of iterations,\n * or until the requested run time is exceeded, whichever comes first.\n */\nexport function runTSNE(x, { maxIterations = 1000, runTime = null } = {}) {\n    if (runTime === null) {\n        runTime = -1;\n    }\n    wasm.call(module => module.run_tsne(x.status, runTime, maxIterations, x.coordinates.offset));\n    return;\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { buildNeighborSearchIndex, BuildNeighborSearchIndexResults } from \"./findNearestNeighbors.js\"; \n\n/**\n * Scale embeddings based on the variation between neighboring cells.\n * This aims to equalize the noise across embeddings for the same population of cells across different data modalities,\n * allowing them to be combined into a single embedding for coordinated downstream analyses.\n *\n * @param {Array} embeddings - Array of Float64WasmArrays containing column-major matrices where rows are dimensions and columns are cells.\n * All entries of this array should contain data for the same number and ordering of cells.\n * @param {number} numberOfCells - Number of cells in all embeddings.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.neighbors=20] - Number of neighbors to use for quantifying variation.\n * Larger values provide a more stable calculation but assume larger subpopulations.\n * @param {?Array} [options.indices=null] - Array of {@linkplain BuildNeighborSearchIndexResults} objects, \n * where each entry is constructed from the corresponding entry of `embeddings` (see {@linkcode buildNeighborSearchIndex}).\n * This can be used to avoid redundant calculation of indices if they are already available.\n * @param {?Float64WasmArray} [options.buffer=null] - Array in which to store the combined embedding.\n * This should have length equal to the product of `numberOfCells` and the sum of dimensions of all embeddings.\n * @param {boolean} [options.approximate=true] - Should we construct an approximate search index if `indices` is not supplied?\n * @param {?(Array|TypedArray|Float64WasmArray)} [options.weights=null] - Array of length equal to the number of embeddings, containing a non-enegative relative weight for each embedding.\n * This is used to scale each embedding if non-equal noise is desired in the combined embedding.\n * If `null`, all embeddings receive the same weight.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array containing the combined embeddings in column-major format, i.e., dimensions in rows and cells in columns.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function scaleByNeighbors(embeddings, numberOfCells, { neighbors = 20, indices = null, buffer = null, approximate = true, weights = null, numberOfThreads = null } = {}) {\n    let nembed = embeddings.length;\n    let embed_ptrs, index_ptrs;\n    let holding_ndims;\n    let holding_weights;\n    let local_buffer;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let deletable = [];\n    try {\n        // Fetching the pointers.\n        embed_ptrs = utils.createBigUint64WasmArray(nembed);\n        let embed_arr = embed_ptrs.array();\n        for (var i = 0; i < nembed; i++) {\n            embed_arr[i] = BigInt(embeddings[i].offset);\n        }\n\n        let weight_offset = 0;\n        let use_weights = false;\n        if (weights !== null) {\n            use_weights = true;\n            holding_weights = utils.wasmifyArray(weights, \"Float64WasmArray\");\n            if (holding_weights.length != nembed) {\n                throw new Error(\"length of 'weights' should be equal to the number of embeddings\");\n            }\n            weight_offset = holding_weights.offset;\n        }\n\n        // Allocating output space, if necessary; and then scaling.\n        let allocator = (total_ndim) => {\n            let total_len = total_ndim * numberOfCells;\n            if (buffer === null) {\n                local_buffer = utils.createFloat64WasmArray(total_len);\n                buffer = local_buffer;\n            } else if (total_len !== buffer.length) {\n                throw new Error(\"length of 'buffer' should be equal to the product of 'numberOfCells' and the total number of dimensions\");\n            }\n        }\n\n        if (indices !== null) {\n            if (nembed !== indices.length) {\n                throw new Error(\"'indices' and 'embeddings' should have the same length\");\n            }\n\n            index_ptrs = utils.createBigUint64WasmArray(nembed);\n            let index_arr = index_ptrs.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let index = indices[i];\n                if (numberOfCells != index.numberOfCells()) {\n                    throw new Error(\"each element of 'indices' should have the same number of cells as 'numberOfCells'\");\n                }\n                if (embeddings[i].length != index.numberOfCells() * index.numberOfDims()) {\n                    throw new Error(\"length of arrays in 'embeddings' should equal the length of arrays used to build 'indices'\");\n                }\n\n                index_arr[i] = BigInt(indices[i].index.$$.ptr);\n                total_ndim += indices[i].numberOfDims();\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_indices(\n                numberOfCells, \n                nembed, \n                embed_ptrs.offset, \n                index_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                nthreads\n            ));\n\n        } else {\n            holding_ndims = utils.createInt32WasmArray(nembed);\n            let ndims_arr = holding_ndims.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let n = embeddings[i].length;\n                ndims_arr[i] = Math.floor(n / numberOfCells);\n                if (numberOfCells * ndims_arr[i] !== n) {\n                    throw new Error(\"length of arrays in 'embeddings' should be a multiple of 'numberOfCells'\");\n                }\n                total_ndim += ndims_arr[i];\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_matrices(\n                numberOfCells, \n                nembed, \n                holding_ndims.offset, \n                embed_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                approximate,\n                nthreads\n            ));\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        for (const x of deletable) {\n            x.free();\n        }\n        utils.free(embed_ptrs);\n        utils.free(index_ptrs);\n        utils.free(holding_weights);\n        utils.free(holding_ndims);\n    }\n\n    return buffer;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute per-cell scores for the activity of a feature set.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {Uint8Array|Uint8WasmArray|TypedArray|Array} features - An array of length equal to the number of rows in `x`, indicating which features belong to the set.\n * A non-zero value for any entry indicates that the corresponding row of `x` is part of the feature set.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {boolean} [options.scale=false] - Whether to scale the expression matrix to unit variance for each feature before computing the per-feature weights.\n * Setting to `true` improves robustness (or reduces sensitivity) to the behavior of highly variable features in the set.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {object} Object containing:\n *\n * - `weights`, a Float64Array containing per-gene weights for each feature in the set.\n * - `scores`, a Float64Array containing the per-cell scores for each column of `x`.\n */\nexport function scoreFeatureSet(x, features, { block = null, scale = false, numberOfThreads = null } = {}) {\n    let temp;\n    let output = {};\n    let feature_data, block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        // Setting up the features.\n        if (features.length !== x.numberOfRows()) {\n            throw new Error(\"Uint8Array 'features' must be of length equal to the number of rows in 'x'\");\n        }\n        feature_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n\n        // Setting up the blocks.\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        temp = wasm.call(module => module.score_feature_set(x.matrix, feature_data.offset, use_blocks, bptr, scale, nthreads));\n        output.weights = temp.weights().slice();\n        output.scores = temp.scores().slice();\n\n    } finally {\n        utils.free(block_data);\n        utils.free(feature_data);\n        if (temp) {\n            temp.delete();\n        }\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\n\nfunction checkFillness2(group, summary, fillable, copy, fillcheck, getfun) {\n    return utils.checkFillness(\n        fillable, \n        copy, \n        fillcheck.filled || fillcheck.details[group][summary] || false, \n        () => { fillcheck.details[group][summary] = true }, \n        getfun  \n    );\n}\n\nfunction intifySummary(summary) {\n    if (typeof summary == \"number\") {\n        return summary; // for back-compatibility with numeric summaries.\n    }\n    let output;\n    switch (summary) {\n        case \"minimum\": \n            output = 0;\n            break;\n        case \"mean\": \n            output = 1;\n            break;\n        case \"median\":\n            output = 2;\n            break;\n        case \"maximum\": \n            output = 3;\n            break;\n        case \"min-rank\":\n            output = 4;\n            break;\n        default:\n            throw new Error(\"unknown summary type '\" + summary + \"'\");\n    }\n    return output;\n}\n\n/**\n * Wrapper around the marker scoring results on the Wasm heap, typically produced by {@linkcode scoreMarkers}.\n * @hideconstructor\n */\nexport class ScoreMarkersResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledDetected;\n    #filledCohen;\n    #filledLfc;\n    #filledAuc;\n    #filledDeltaDetected;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        let n = this.numberOfGroups();\n        let b = this.numberOfBlocks();\n\n        function createBlockedStatsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = utils.spawnArray(b + 1, filled);\n                }\n            }\n            return output;\n        }\n\n        this.#filledMeans = createBlockedStatsFilled(filled);\n        this.#filledDetected = createBlockedStatsFilled(filled);\n\n        function createEffectsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = {};\n                }\n            }\n            return output;\n        }\n\n        this.#filledCohen = createEffectsFilled(filled); \n        this.#filledLfc = createEffectsFilled(filled); \n        this.#filledAuc = createEffectsFilled(filled); \n        this.#filledDeltaDetected = createEffectsFilled(filled); \n\n        return;\n    }\n\n    #extractBlockedStat(group, block, copy, fillable, fillcheck, method) {\n        let index = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            index = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck.filled || fillcheck.details[group][index] || false, \n            () => { fillcheck.details[group][index] = true }, \n            COPY => utils.possibleCopy(this.#results[method](group, block), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks used to compute the results.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {number} Number of groups in the results.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the proportion of cells with detectable expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledDetected, \"detected\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the Cohen's d values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized Cohen's d for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    cohen(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledCohen,\n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.cohen(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * AUCs are only computed if `computeAuc = true` in {@linkcode scoreMarkers}.\n     * If `false`, this method will throw an error.\n     *\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the AUCs of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized AUC for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    auc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledAuc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.auc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the log-fold changes of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized log-fold change for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    lfc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledLfc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.lfc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the delta-detected values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized delta-detected for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    deltaDetected(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledDeltaDetected, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.delta_detected(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Score genes as potential markers for each group of cells.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform comparisons within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {number} [options.lfcThreshold=0] - Log-fold change threshold to use for computing Cohen's d and AUC.\n * Large positive values favor markers with large log-fold changes over those with low variance.\n * @param {boolean} [options.computeAuc=true] - Whether to compute the AUCs as an effect size.\n * This can be set to `false` for greater speed and memory efficiency.\n * @param {boolean} [options.computeMedian=false] - Whether to compute the median effect sizes across all pairwise comparisons for each group.\n * This can be used as a more robust/less sensitive alternative to the mean.\n * @param {boolean} [options.computeMaximum=false] - Whether to compute the maximum effect size across all pairwise comparisons for each group.\n * This could be used to find uniquely downregulated genes.\n *\n * @return {ScoreMarkersResults} Object containing the marker scoring results.\n */\nexport function scoreMarkers(x, groups, { block = null, numberOfThreads = null, lfcThreshold = 0, computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    var output;\n    var block_data;\n    var group_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.score_markers(x.matrix, group_data.offset, use_blocks, bptr, lfcThreshold, computeAuc, computeMedian, computeMaximum, nthreads),\n            ScoreMarkersResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(group_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ScoreMarkersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfGroups - Number of groups for which to store marker detection statistics.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.computeAuc=true] - Whether to allocate memory for storing AUCs.\n * @param {boolean} [options.computeMedian=false] - Whether to allocate memory for storing median effect sizes.\n * @param {boolean} [options.computeMaximum=false] - Whether to allocate memory for storing maximum effect sizes.\n *\n * @return {ScoreMarkersResults} Object with memory allocated to store marker statistics, but not containing any actual values.\n */\nexport function emptyScoreMarkersResults(numberOfGenes, numberOfGroups, numberOfBlocks, { computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    return gc.call(\n        module => new module.ScoreMarkers_Results(numberOfGenes, numberOfGroups, numberOfBlocks, computeAuc, computeMedian, computeMaximum),\n        ScoreMarkersResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport { MultiMatrix } from \"./MultiMatrix.js\";\n\n/**\n * Slice a {@linkplain ScranMatrix} by its rows.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Row indices to extract.\n * All indices must be non-negative integers less than `mat.numberOfRows()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A ScranMatrix containing the subset of rows from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetRows(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.row_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Slice a ScranMatrix by its columns.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Column indices to extract.\n * Al indices must be a non-negative integer less than `mat.numberOfColumns()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A new ScranMatrix containing the subset of columns from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetColumns(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.column_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Split a {@linkplain ScranMatrix} by row.\n *\n * @param {ScranMatrix} matrix - A ScranMatrix object.\n * @param {object} split - Object specifying how rows should be split.\n * Each value should be an Array/TypedArray of 0-based row indices.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.singleNull=false] - Whether `null` should be returned if `split` only contains one level and all rows are represented exactly once.\n * This can be used to avoid the creation of a redundant {@linkplain ScranMatrix} object.\n * @param {boolean} [options.createMultiMatrix=false] - Whether the output should be returned as a {@linkplain MultiMatrix}.\n *\n * @return {object|MultiMatrix} Object with the same keys as `split` where each value is a ScranMatrix for the corresponding subset of rows.\n * Alternatively, this is wrapped in a MultiMatrix if `createMultiMatrix = true`.\n */\nexport function splitRows(matrix, split, { singleNull = false, createMultiMatrix = false } = {}) { \n    let output = {};\n    let tkeys = Object.keys(split);\n\n    if (tkeys.length == 1) {\n        let chosen = split[tkeys[0]];\n        let consec = (chosen.length == matrix.numberOfRows());\n        if (consec) {\n            for (var i = 0; i < chosen.length; i++) {\n                if (i != chosen[i]) {\n                    consec = false;\n                    break;\n                }\n            }\n        }\n\n        if (consec) {\n            if (singleNull) {\n                return null;\n            } else {\n                output[tkeys[0]] = matrix.clone();\n                return output;\n            }\n        }\n    }\n\n    let stuff;\n    try {\n        for (const k of tkeys) {\n            output[k] = subsetRows(matrix, split[k]);\n        }\n\n        // Sticking this inside the trycatch, so that\n        // memory is released if the constructor fails. \n        if (createMultiMatrix) {\n            stuff = new MultiMatrix({ store: output });\n        }\n    } catch (e) {\n        for (const v of Object.values(output)) {\n            v.free();\n        }\n        throw e;\n    }\n\n    if (createMultiMatrix) {\n        return stuff;\n    } else {\n        return output;\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellAdtQcMetricsResults } from \"./perCellAdtQcMetrics.js\";\n\n/**\n * Wrapper class for the ADT-based QC filtering results, produced by {@linkcode suggestAdtQcFilters}.\n * @hideconstructor\n */\nexport class SuggestAdtQcFiltersResults {\n    #results;\n    #id;\n\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected ADTs for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the total counts for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestAdtQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics from the ADT count matrix.\n *\n * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {number} [options.minDetectedDrop=0.1] - Minimum relative drop in the number of detected ADTs before a cell is to be considered a low-quality cell.\n * By default, cells must exhibit at least a 10% decrease from the median before filtering is applied.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestAdtQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestAdtQcFilters(metrics, { numberOfMADs = 3, minDetectedDrop = 0.1, block = null } = {}) {\n    if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics, \n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_adt_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs, minDetectedDrop),\n            SuggestAdtQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestAdtQcFiltersResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode filterCells} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestAdtQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestAdtQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestAdtQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestAdtQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellCrisprQcMetricsResults } from \"./perCellCrisprQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestCrisprQcFilters}.\n * @hideconstructor\n */\nexport class SuggestCrisprQcFiltersResults {\n    #id;\n    #results;\n\n    #filledMaxCount;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMaxCount = filled;\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the maximum count in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsMaxCount({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxCount, \n            () => { this.#filledMaxCount = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_max_count(), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestCrisprQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics for CRISPR guide counts.\n *\n * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestCrisprQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestCrisprQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_crispr_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestCrisprQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestCrisprQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestCrisprQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestCrisprQcFiltersResults(numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestCrisprQcFilters_Results(numberOfBlocks),\n        SuggestCrisprQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellRnaQcMetricsResults } from \"./perCellRnaQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestRnaQcFilters}.\n * @hideconstructor\n */\nexport class SuggestRnaQcFiltersResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the sums for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected genes for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the proportions for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestRnaQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics computed from an RNA count matrix.\n *\n * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestRnaQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestRnaQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_rna_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestRnaQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestRnaQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestRnaQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestRnaQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestRnaQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestRnaQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import { buffer, wasmArraySpace, maximumThreads } from \"./wasm.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Helper function to create a Uint8WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Uint8WasmArray} Uint8WasmArray on the **scran.js** Wasm heap.\n */\nexport function createUint8WasmArray(length) {\n    return wa.createUint8WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Int32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Int32WasmArray} Int32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createInt32WasmArray(length) {\n    return wa.createInt32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a BigUint64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {BigUint64WasmArray} BigUint64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createBigUint64WasmArray (length) {\n    return wa.createBigUint64WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float64WasmArray} Float64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat64WasmArray(length) {\n    return wa.createFloat64WasmArray(wasmArraySpace(), length);\n}\n\nexport function wasmifyArray(x, expected) {\n    if (x instanceof wa.WasmArray) {\n        if (expected !== null && expected != x.constructor.className) {\n            throw new Error(\"expected '\" + expected + \"', got '\" + x.constructor.className + \"'\");\n        }\n\n        if (x.space === wasmArraySpace()) {\n            // Creating a view. This ensures that callers can always call\n            // free() on the output of this function without worrying about\n            // whether they are breaking something else that was using 'x'.\n            if (x.owner === null) {\n                return x.view();\n            } else {\n                return x; // it's already a view, so we just pass it along.\n            }\n        } else {\n            // If it's a different space, then we have to make a copy.\n            return x.clone(wasmArraySpace());\n        }\n    }\n\n    let y = null;\n    if (expected !== null) {\n        y = wa.convertToWasmArray(wasmArraySpace(), x, wa.stringToClass(expected));\n    } else {\n        y = wa.convertToWasmArray(wasmArraySpace(), x);\n    }\n\n    return y;\n}\n\nexport function chooseNumberOfThreads(threads) {\n    if (threads == null) {\n        return maximumThreads();\n    } else {\n        return threads;\n    }\n}\n\n/**\n * Try to free a **scran.js** object's memory (typically involving some memory allocated on the Wasm heap) by calling its `free` method.\n *\n * @param {?object} x - Instance of a **scran.js** or **wasmarrays.js** class to be freed.\n * May also be `null` or undefined.\n * \n * @return The output of `x.free()` - unless `x` is undefined or `null`, in which case nothing is performed.\n */\nexport function free(x) {\n    if (typeof x == \"undefined\" || x == null) {\n        return;\n    }\n    return x.free();\n}\n\nexport function extractXY(ncells, coordinates) {\n    let x = new Float64Array(ncells);\n    let y = new Float64Array(ncells);\n\n    for (var i = 0; i < ncells; i++) {\n        x[i] = coordinates[2 * i];\n        y[i] = coordinates[2 * i + 1];\n    }\n\n    return { \"x\": x, \"y\": y };\n}\n\n/**\n * Possibly copy an array out of the Wasm heap, avoiding potential invalidation at the cost of some efficiency.\n *\n * @param {TypedArray} x - Array of data, possibly on the **scran.js** Wasm heap.\n * @param {(string|boolean)} copy - Copying mode to use.\n *\n * @return {TypedArray|WasmArray} The return value depends on the value of `copy`:\n * - If `copy = true`, a TypedArray copy of `x` is created with `x.slice()` and returned.\n *   This is a good default to avoid invalidation of TypedArray views on the heap upon reallocation, by creating a Javascript-owned copy for downstream use.\n * - If `copy = false`, `x` is returned directly.\n *   This avoids making any copy but runs the risk of invalidation when the Wasm heap is resized;\n *   it should only be used when no further Wasm allocations are performed within the lifetime of `x`.\n * - If `copy = \"view\"`, a WasmArray view is created from `x` and returned.\n *   This avoids any copy and is robust to invalidation but requires an extra `WasmArray.array()` call to create a TypedArray.\n */\nexport function possibleCopy(x, copy) {\n    if (copy === \"view\") {\n        if (x.buffer !== buffer()) {\n            throw new Error(\"cannot use copy = \\\"view\\\" for non-Wasm TypedArrays\");\n        }\n\n        let view_class = x.constructor.name.replace(\"Array\", \"WasmArray\");\n\n        // This function should only be used for objects generated in the\n        // buffer owned by scran.js, so we can assume that x's space is the\n        // same as that of the wasmArraySpace().\n        return wa.createWasmArrayView(wasmArraySpace(), x.length, x.byteOffset, wa.stringToClass(view_class));\n\n    } else if (copy) {\n        return x.slice();\n\n    } else {\n        return x;\n    }\n}\n\nexport function matchOptions(name, value, choices) {\n    if (choices.indexOf(value) == -1) {\n        throw new Error(\"'\" + name + \"=' should be one of '\" + choices.join(\"', '\") + \"'\");\n    }\n}\n\nexport function spawnArray(n, fill) {\n    let output = new Array(n);\n    output.fill(fill);\n    return output;\n}\n\nexport function checkFillness(fill, copy, check, setFilledFun, getFun) {\n    if (!check) {\n        if (fill) {\n            setFilledFun();\n            if (copy) {\n                copy = false;\n            }\n        } else {\n            return null;\n        }\n    }\n    return getFun(copy);\n}\n","import loadScran from \"./wasm/scran.js\";\nimport { register } from \"wasmarrays.js\";\nimport * as afile from \"./abstract/file.js\";\n\nconst cache = {};\n\n/**\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfThreads=4] - Number of threads to use for calculations.\n * This will spin up the requested number of Web Workers during module initialization.\n * @param {boolean} [options.localFile=false] - Whether or not to look for the Wasm and worker scripts locally.\n * This should only be `true` when using old versions of Node.js where file URLs are not supported, \n * and is ignored completely outside of Node.js contexts.\n *\n * @return {boolean}\n * The Wasm bindings are initialized and `true` is returned.\n * If the bindings were already initialized (e.g., by a previous call), nothing is done and `false` is returned.\n */\nexport async function initialize({ numberOfThreads = 4, localFile = false } = {}) {\n    if (\"module\" in cache) {\n        return false;\n    }\n\n    let options = {\n        scran_custom_nthreads: numberOfThreads\n    };\n\n    if (localFile) {                                                                /** NODE ONLY **/  \n        options.locateFile = (x) => import.meta.url.substring(7) + \"/../wasm/\" + x; /** NODE ONLY **/\n    }                                                                               /** NODE ONLY **/\n\n    cache.module = await loadScran(options);\n    cache.space = register(cache.module);\n\n    return true;\n}\n\n/**\n * Maximum number of threads available for computation.\n * This depends on the value specified during module initialization in {@linkcode initialize}. \n *\n * @return {number} Maximum number of available threads.\n */\nexport function maximumThreads() {\n    return cache.module.scran_custom_nthreads;\n}\n\nexport function call(func) {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n\n    var output;\n    try {\n        output = func(cache.module);    \n    } catch (e) {\n        if (typeof e == \"number\") {\n            throw new Error(cache.module.get_error_message(e));\n        } else {\n            throw e;\n        }\n    }\n    return output;\n}\n\nexport function buffer() {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n    return cache.module.wasmMemory.buffer;\n}\n\n/**\n * @return {number} Integer containing the **wasmarrays.js** identifier for **scran.js**'s memory space.\n * This can be used with `createWasmArray()` and related functions from **wasmarrays.js**.\n */\nexport function wasmArraySpace() {\n    return cache.space;\n}\n\n/**\n * @return All worker threads are terminated and the module is deleted from the cache.\n * This is useful for cleaning up at the end of the analysis,\n * otherwise the workers will be shut done ungracefully on program exit.\n */\nexport function terminate() {\n    cache.module.PThread.terminateAllThreads();\n    delete cache.module;\n    return;\n}\n\n/**\n * @return {number} The current size of the Wasm heap, typically used for diagnostic reporting.\n */\nexport function heapSize() {\n    return buffer().byteLength;\n}\n","import { allocate } from \"./globals.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return {WasmArray} Instance of a {@linkplain WasmArray} subclass.\n */\nexport function createWasmArray(space, length, arrayClass) {\n    return allocate(space, length, arrayClass);\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint8WasmArray} Instance of a {@linkplain Uint8WasmArray}.\n */\nexport function createUint8WasmArray(space, length) { \n    return createWasmArray(space, length, Uint8WasmArray); \n}\n\n/**\n * Create a {@linkplain Int8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int8WasmArray} Instance of a {@linkplain Int8WasmArray}.\n */\nexport function createInt8WasmArray(space, length) { \n    return createWasmArray(space, length, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint16WasmArray} Instance of a {@linkplain Uint16WasmArray}.\n */\nexport function createUint16WasmArray(space, length) { \n    return createWasmArray(space, length, Uint16WasmArray); \n}\n\n/**\n * Create a {@linkplain Int16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int16WasmArray} Instance of a {@linkplain Int16WasmArray}.\n */\nexport function createInt16WasmArray(space, length) { \n    return createWasmArray(space, length, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint32WasmArray} Instance of a {@linkplain Uint32WasmArray}.\n */\nexport function createUint32WasmArray(space, length) { \n    return createWasmArray(space, length, Uint32WasmArray); \n}\n\n/**\n * Create a {@linkplain Int32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int32WasmArray} Instance of a {@linkplain Int32WasmArray}.\n */\nexport function createInt32WasmArray(space, length) { \n    return createWasmArray(space, length, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {BigUint64WasmArray} Instance of a {@linkplain BigUint64WasmArray}.\n */\nexport function createBigUint64WasmArray(space, length) { \n    return createWasmArray(space, length, BigUint64WasmArray); \n}\n\n/**\n * Create a {@linkplain BigInt64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {BigInt64WasmArray} Instance of a {@linkplain BigInt64WasmArray}.\n */\nexport function createBigInt64WasmArray(space, length) { \n    return createWasmArray(space, length, BigInt64WasmArray); \n}\n\n/**\n * Create a {@linkplain Float32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Float32WasmArray} Instance of a {@linkplain Float32WasmArray}.\n */\nexport function createFloat32WasmArray(space, length) { \n    return createWasmArray(space, length, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Float64WasmArray} Instance of a {@linkplain Float64WasmArray}.\n */\nexport function createFloat64WasmArray(space, length) { \n    return createWasmArray(space, length, Float64WasmArray); \n}\n","import { buffer } from \"./globals.js\";\nimport { WasmArray } from \"./base.js\";\n\n/** \n * Wrapper around an unsigned 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint8WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint8WasmArray extends WasmArray {\n    /**\n     * @return {Uint8Array} A Uint8Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string}\n     */\n    static className = \"Uint8WasmArray\";\n    // We're returning the name explicitly here instead of relying\n    // on the constructor.name trick, as the name of the class can\n    // change during minification.\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around a signed 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt8WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int8WasmArray extends WasmArray {\n    /**\n     * @return {Int8Array} An Int8Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Int8WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number}\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around an unsigned 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint16WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint16WasmArray extends WasmArray {\n    /**\n     * @return {Uint16Array} A Uint16Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Uint16WasmArray\";\n\n    /**\n     * Size of the each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage a signed 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt16WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int16WasmArray extends WasmArray {\n    /**\n     * @return {Int16Array} An Int16Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Int16WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage an unsigned 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint32WasmArray extends WasmArray {\n    /**\n     * @return {Uint32Array} A Uint32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Uint32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a signed 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int32WasmArray extends WasmArray {\n    /**\n     * @return {Int32Array} An Int32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Int32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage an unsigned 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigUint64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class BigUint64WasmArray extends WasmArray {\n    /**\n     * @return {BigUint64Array} A BigUint64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new BigUint64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"BigUint64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a signed 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigInt64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class BigInt64WasmArray extends WasmArray {\n    /**\n     * @return {BigInt64Array} An BigInt64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new BigInt64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"BigInt64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a 32-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Float32WasmArray extends WasmArray {\n    /**\n     * @return {Float32Array} A Float32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Float32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Float32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a 64-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Float64WasmArray extends WasmArray {\n    /**\n     * @return {Float64Array} A Float64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Float64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Float64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\nconst choices = {\n    \"Uint8WasmArray\": Uint8WasmArray,\n    \"Int8WasmArray\": Int8WasmArray,\n    \"Uint16WasmArray\": Uint16WasmArray,\n    \"Int16WasmArray\": Int16WasmArray,\n    \"Uint32WasmArray\": Uint32WasmArray,\n    \"Int32WasmArray\": Int32WasmArray,\n    \"BigUint64WasmArray\": BigUint64WasmArray,\n    \"BigInt64WasmArray\": BigInt64WasmArray,\n    \"Float32WasmArray\": Float32WasmArray,\n    \"Float64WasmArray\": Float64WasmArray\n};\n\n/**\n * Retrieve class from its name.\n *\n * @param {string} name - Name of the {@linkplain WasmArray} class.\n *\n * @return {class} Class object corresponding to `name`.\n */\nexport function stringToClass(name) {\n    if (!(name in choices)){ \n        throw new Error(\"unknown WasmArray class '\" + name + \"'\");\n    }\n    return choices[name];\n}\n","import { createWasmArray } from \"./create.js\";\n\n/**\n * Helper utility to determine the length of a subset, for use in allocations.\n *\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {?boolean} filter - How to interpret `subset`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {number} targetLength - Length of the target vector to be subsetted by `subset`.\n * @param {string} targetName - Name of the target vector, for use in error messages.\n *\n * @return {number} Length of the subsetted vector.\n */\nexport function checkSubsetLength(subset, filter, targetLength, targetName) {\n    if (filter === null) {\n        subset.forEach(i => {\n            if (i < 0 || i >= targetLength) {\n                throw new Error(\"'subset' contains out-of-range indices for '\" + targetName + \"'\");\n            }\n        });\n        return subset.length;\n    } \n\n    if (subset.length != targetLength) {\n        throw new Error(\"'subset' and '\" + targetName + \"' should have the same length\");\n    }\n\n    let sum = 0;\n    subset.forEach(x => { sum += (x != 0); });\n    if (filter) {\n        return subset.length - sum;\n    } \n\n    return sum;\n}\n\n/**\n * Helper utility to fill a subset from one TypedArray to another.\n *\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {?boolean} filter - How to interpret `subset`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {TypedArray} input - Input array to subset.\n * @param {TypedArray} output - Output array to store the subset, of length defined by {@linkcode checkSubsetLength}.\n *\n * @return `output` is filled with the specified subset of values from `input`.\n */\nexport function fillSubset(subset, filter, input, output) {\n    if (filter == null) {\n        subset.forEach((s, i) => {\n            output[i] = input[s];\n        });\n    } else if (filter) {\n        let j = 0;\n        subset.forEach((y, i) => {\n            if (y == 0) {\n                output[j] = input[i];\n                j++;\n            }\n        });\n    } else {\n        let j = 0;\n        subset.forEach((y, i) => {\n            if (y !== 0) {\n                output[j] = input[i];\n                j++;\n            }\n        });\n    }\n}\n\n/**\n * Create a new WasmArray from a subset of an existing WasmArray.\n * \n * @param {WasmArray} x - The input WasmArray.\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * \n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to `subset`, if `filter = null`; \n * the number of truthy elements in `subset`, if `filter = false`;\n * or the number of falsey elements in `subset`, if `filter = true`.\n *\n * @return {WasmArray} Array of the same type of `x` and in the same space, containing the desired subset `subset`.\n * If `buffer` is supplied, it is directly returned.\n */\nexport function subsetWasmArray(x, subset, { filter = null, buffer = null } = {}) {\n    let len = checkSubsetLength(subset, filter, x.length, \"x\"); \n\n    if (buffer == null) {\n        // Function better be a no-throw from now on.\n        buffer = createWasmArray(x.space, len, x.constructor);\n    } else if (buffer.length !== len) {\n        throw new Error(\"length of 'buffer' is not consistent with 'subset'\");\n    }\n\n    let barr = buffer.array();\n    let xarr = x.array();\n    fillSubset(subset, filter, xarr, barr);\n\n    return buffer;\n}\n","import { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} view of the specified subclass.\n * It is assumed that some unknown entity owns the Wasm heap allocation;\n * for example, Emscripten-defined bindings on C++ classes that own array data,\n * where it may be of interest to wrap these arrays in WasmArray instances for downstream processing.\n * The caller is responsible for ensuring that the lifetime of the returned WasmArray view does not exceed that of the owner.\n * Note that this function differs from {@linkcode WasmArray#view WasmArray.view}, which creates a WasmArray view from an exising WasmArray.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * This may need to be a certain multiple of 2, 4 or 8, depending on `arrayClass`.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return {WasmArray} Instance of a {@linkplain WasmArray} subclass containing a view on the heap.\n */\nexport function createWasmArrayView(space, length, offset, arrayClass) {\n    return new arrayClass(space, -1, length, offset, {});\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint8WasmArray} Instance of a {@linkplain Uint8WasmArray} view.\n */\nexport function createUint8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint8WasmArray); \n}\n\n/**\n * Create an {@linkplain Int8WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int8WasmArray} Instance of an {@linkplain Int8WasmArray} view.\n */\nexport function createInt8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint16WasmArray} Instance of a {@linkplain Uint16WasmArray} view.\n */\nexport function createUint16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint16WasmArray); \n}\n\n/**\n * Create an {@linkplain Int16WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int16WasmArray} Instance of an {@linkplain Int16WasmArray} view.\n */\nexport function createInt16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint32WasmArray} Instance of a {@linkplain Uint32WasmArray} view.\n */\nexport function createUint32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint32WasmArray); \n}\n\n/**\n * Create an {@linkplain Int32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int32WasmArray} Instance of an {@linkplain Int32WasmArray} view.\n */\nexport function createInt32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {BigUint64WasmArray} Instance of a {@linkplain BigUint64WasmArray} view.\n */\nexport function createBigUint64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigUint64WasmArray); \n}\n\n/**\n * Create an {@linkplain BigInt64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {BigInt64WasmArray} Instance of an {@linkplain BigInt64WasmArray} view.\n */\nexport function createBigInt64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigInt64WasmArray); \n}\n\n\n/**\n * Create a {@linkplain Float32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Float32WasmArray} Instance of a {@linkplain Float32WasmArray} view.\n */\nexport function createFloat32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Float64WasmArray} Instance of a {@linkplain Float64WasmArray} view.\n */\nexport function createFloat64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float64WasmArray); \n}\n"],"names":["define","s","f","self","window","n","document","postMessage","o","IS_PAPA_WORKER","a","u","b","parse","e","t","r","dynamicTyping","J","dynamicTypingFunction","transform","worker","WORKERS_SUPPORTED","i","URL","webkitURL","toString","BLOB_URL","createObjectURL","Blob","type","Worker","onmessage","_","id","userStep","step","userChunk","chunk","userComplete","complete","userError","error","input","config","workerId","NODE_STREAM_INPUT","charCodeAt","slice","download","l","p","readable","read","on","g","File","Object","c","stream","unparse","m","y","delimiter","BAD_DELIMITERS","filter","indexOf","length","quotes","Array","isArray","skipEmptyLines","newline","quoteChar","header","columns","Error","escapeChar","escapeFormulae","RegExp","Q","JSON","h","keys","data","fields","meta","v","join","trim","d","push","constructor","Date","stringify","test","replace","charAt","RECORD_SEP","String","fromCharCode","UNIT_SEP","BYTE_ORDER_MARK","LocalChunkSize","RemoteChunkSize","DefaultDelimiter","Parser","E","ParserHandle","NetworkStreamer","FileStreamer","StringStreamer","ReadableStreamStreamer","jQuery","fn","this","each","prop","toUpperCase","attr","toLowerCase","FileReader","files","file","inputElem","instanceConfig","extend","before","action","reason","name","splice","_handle","_finished","_completed","_halted","_input","_baseIndex","_partialLine","_rowCount","_start","_nextChunk","isFirstChunk","_completeResults","errors","w","chunkSize","parseInt","streamer","_config","call","parseChunk","beforeFirstChunk","paused","aborted","cursor","substring","preview","results","WORKER_ID","finished","concat","_sendError","_readChunk","_chunkLoaded","XMLHttpRequest","withCredentials","onload","onerror","_chunkError","open","downloadRequestBody","downloadRequestHeaders","setRequestHeader","send","message","status","readyState","responseText","getResponseHeader","lastIndexOf","statusText","webkitSlice","mozSlice","FileReaderSync","Math","min","size","readAsText","encoding","target","result","pause","prototype","apply","arguments","resume","_streamData","_streamEnd","_streamError","_checkIsFinished","shift","_streamCleanUp","removeListener","pow","abort","k","forEach","transformHeader","map","parseFloat","code","row","split","comments","abs","successful","bestDelimiter","delimitersToGuess","getCharIndex","setTimeout","j","z","M","P","U","q","N","B","fastMode","K","W","H","L","includes","I","F","R","C","S","D","index","T","O","A","substr","x","linebreak","truncated","terminate","create","root","factory","randomColor","seed","colorDictionary","loadColorBounds","colorRanges","options","undefined","stringToInteger","TypeError","count","totalColors","colors","color","setFormat","pickHue","pickSaturation","pickBrightness","hue","randomWithin","hueRange","getRealHueRange","getHueRange","luminosity","saturationRange","getSaturationRange","sMin","sMax","bMin","getMinimumBrightness","bMax","hsv","format","HSVtoHSL","hsl","hslColor","alpha","random","HSVtoRGB","rgbColor","HSVtoHex","lowerBounds","getColorInfo","s1","v1","s2","v2","colorInput","number","match","HexToHSB","colorName","range","golden_ratio","floor","max","rnd","rgb","componentToHex","hex","defineColor","brightnessRange","h_i","red","green","blue","cMax","delta","saturation","round","string","total","Number","MAX_SAFE_INTEGER","colorHue","isNaN","module","exports","_arrayLikeToArray","arr","len","arr2","_arrayWithHoles","_arrayWithoutHoles","_classCheckPrivateStaticAccess","receiver","classConstructor","_classCheckPrivateStaticFieldDescriptor","descriptor","_classPrivateMethodGet","privateSet","has","_classPrivateMethodInitSpec","obj","add","_classStaticPrivateFieldSpecGet","_classStaticPrivateFieldSpecSet","value","_classStaticPrivateMethodGet","method","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","done","_e","err","normalCompletion","didErr","next","_e2","_get","Reflect","get","bind","property","base","desc","getOwnPropertyDescriptor","_iterableToArray","iter","from","_iterableToArrayLimit","_nonIterableRest","_nonIterableSpread","_objectDestructuringEmpty","ownKeys","getOwnPropertySymbols","enumerable","_objectSpread2","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_superPropBase","object","hasOwnProperty","_toConsumableArray","_unsupportedIterableToArray","minLen","cloneCached","cached","bioc","baseUrl","registry","check_class","handle","accepted","scran","_i","_Object$entries","entries","_Object$entries$_i","className","packageName","populate_list_columns","lhandle","output","colnames","nhandle","names","ndx","findAttribute","attribute","values","load_listData_names","curhandle","load","curcol","nrow","load_data_frame","rnhandle","nrhandle","rndx","row_names","NR","extract_matrix_rownames","idx","dimhandle","firsthandle","_id","WeakMap","_rowdata","_coldata","_counts_handle","_counts_loaded","_options","_counts","WeakSet","_features","_cells","_fetchPrimaryId","ExperimentHubDataset","_classCallCheck","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","_classPrivateFieldGet","defaults","clear","_createClass","key","_objectSpread","_i2","_Object$entries2","_Object$entries2$_i","_summary","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref$cache","cache","my_rd","_args","wrap","_context","prev","_features2","_cells2","cells","utils","modality_features","abrupt","stop","_previewPrimaryIds","_callee2","_ref2$cache","_args2","_context2","_fetchPrimaryId2","_load","_callee3","_ref3$cache","counts","perm_features","_args3","_context3","_counts2","matrix","consume","row_ids","features","t0","primary_ids","RNA","buffer","TextEncoder","encode","bakana","fun","previous","_downloadFun","primaryRnaFeatureIdColumn","_step","args","_iterator","dec","TextDecoder","decode","_counts3","_callee5","details","counts_deets","_context5","sent","_features3","_callee6","rowdata_deets","rowdata_load","rowdata_handle","rowdata","_i3","_Object$entries3","_Object$entries3$_i","ids","_context6","finish","_cells3","_callee7","coldata_deets","coldata_load","coldata_handle","cd_df","_context7","coldata","numberOfRows","ncol","curfeat","hasColumn","numberOfColumns","column","rowNames","_class","_value","_callee4","url","resp","_context4","fetch","ok","Uint8Array","arrayBuffer","t1","_x","packId","project","path","version","_wrapNativeSuper","Class","_cache","Map","Function","set","Wrapper","construct","getPrototypeOf","configurable","setPrototypeOf","HttpError","_Error","_inherits","_super","_createSuper","_this","statusCode","checkHttpResponse","_x2","_checkHttpResponse","res","msg","info","json","globalRequestHeaders","quickGet","headers","getFile","_getFile","_ref","_ref$downloadFun","downloadFun","_ref$getFun","getFun","out","encodeURIComponent","gh","_ref2","_x3","getFileMetadata","_getFileMetadata","_ref$followLink","followLink","_ref$raw","raw","_project","_version","CollaboratordbNavigator","_file","adb","_metadata","_unpacked","_h5_file","_h5_path","_h5_flush","_raw_features","_raw_cells","_dump_summary","_instantiate","_feature_type_mapping","_primary_mapping","TenxHdf5Dataset","h5File","afile","_dump_summary2","futils","_feature_type_mapping2","_primary_mapping2","loaded","featureTypeRnaName","featureTypeAdtName","featureTypeCrisprName","primaryAdtFeatureIdColumn","primaryCrisprFeatureIdColumn","_unserialize","setOptions","_instantiate2","content","flush","children","mhandle","fhandle","eutils","feats","$setColumn","ftype","ADT","CRISPR","_load_data_frame","navigator","contents","rownames","parsed","current","_iterator5","_step5","ghandle","chandle","dhandle","_current","_type","replacement","placeholder","new_columns","new_colnames","nest_meta","metadata","startsWith","delim","data_frame","Int32Array","Float64Array","hdf5_data_frame","group","Float32Array","attributes","readAttribute","resource","console","warn","columnOrder","dimensions","main_experiment_name","extract_all_features","_x4","_extract_all_features","_callee9","extract_features","full_meta","_iterator6","_step6","alt","alt_meta","_context9","_ref6","_callee8","se_meta","row_path","_context8","summarized_experiment","row_data","_x19","single_cell_experiment","alternative_experiments","extract_all_assay_names","_x5","_x6","_extract_all_assay_names","_callee10","extract_assay_names","assays","_iterator8","_step8","_context10","_step7","_iterator7","ass","extract_logcounts","_x7","_x8","_extract_logcounts","_callee11","ghandle2","ghandle3","sf","ahandle","mat","_context11","log","extract_assay_raw","sizeFactors","center","extract_assay","_x9","_x10","_x11","_x12","_extract_assay","_callee12","assay","forceInteger","counter","_iterator9","_step9","asspath","_context12","_x13","_x14","_x15","_extract_assay_raw","_callee13","assmeta","schema","is_dense","is_sparse","stuff","_stuff","_context13","hdf5_sparse_matrix","hdf5_dense_array","dataset","hdf5_delayed_array","extract_other_data","_x16","_x17","_extract_other_data","_callee14","other_path","othermeta","ofile","unpacked","_context14","compression","json_simple_list","extract_list_data_internal","NaN","_navigator","_metadata_cache","MetadataCacheWrapper","nav","_x18","_path","_navigator2","_reset_local_caches","AbstractArtifactdbDataset","_reset_local_caches2","t2","modality_assay_names","fmapping","rnaExperiment","adtExperiment","crisprExperiment","mapping","altmap","alts","_args4","exp","rnaCountAssay","adtCountAssay","crisprCountAssay","_features5","_callee15","_context15","t3","_cells5","_callee16","col_path","_context16","column_data","_path2","_navigator3","_raw_features2","_raw_cells2","_raw_other","_options2","_reset_local_caches3","_other","_get_all_reddim_names","AbstractArtifactdbResult","_reset_local_caches4","_summary2","_ref4$cache","reddim_meta","_args5","_features4","_cells4","_other2","t4","reduced_dimension_names","other_metadata","reduced_dimensions","_get_all_reddim_names2","_load2","_ref5$cache","reddims","redmap","_iterator2","_step2","_iterator3","_step3","redmeta","dims","redcontents","realized","acquired","_iterator4","_step4","_i4","_Object$entries4","_Object$entries4$_i","_k","curassay","curnormalized","normed","_args6","reducedDimensionNames","array","primaryAssay","isPrimaryNormalized","allowZeros","_features6","_callee17","_context17","_cells6","_callee18","_context18","_other3","_callee19","_context19","other_data","_x20","_x21","_get_all_reddim_names3","_callee20","rd_meta","store","_iterator10","_step10","_context20","SimpleFile","_ref$name","_mode","_buffer","_name","_ref2$copy","copy","readAsArrayBuffer","_ref3$copy","_matrix_file","_feature_file","_barcode_file","_dimensions","_fetch_dimensions","TenxMatrixMarketDataset","matrixFile","featureFile","barcodeFile","is_gz","endsWith","_serialize","feat","barcode","genes","annotations","mtx","_fetch_dimensions2","rows","fname","_output","symb","types","bname","diff","conv","callback","resolve","reject","peek","extractHDF5Strings","summarizeArray","_ref$limit","limit","chosen","Set","sort","POSITIVE_INFINITY","NEGATIVE_INFINITY","guess_compression","astream","unpackText","_ref2$compression","txt","pako","merge_bytes","leftovers","decoder","combined","stream_callback","_stream_callback","Promise","gz","onData","onEnd","readLines2","_readLines","_ref4","_ref4$compression","_ref4$chunkSize","lines","last","subarray","readTable2","_readTable","_ref6$compression","_ref6$delim","_ref6$chunkSize","size_left","str","ppp","pop","promoteToNumber","as_num","opt1","opt2","create_solo_default_object","modality","reportFeatures","rawFeatures","typeField","by_type","removeColumn","renameByModality","featureTypeMapping","splitByModality","extractSplitPrimaryIds","featureTypeDefault","primary","col","extractPrimaryIdColumn","new_default","found","multiple","findUnnamedDefault","splitScranMatrixAndFeatures","current_features","out_mat","deepCopy","type_keys","skip_subset","indices","full_length","is_subset_noop","rename","extractPrimaryIds","extractRemappedPrimaryIds","createTsneWorker","createUmapWorker","step_name","_qc","_filter","_parameters","_raw_compute","AdtNormalizationState","qc","parameters","qc_module","filter_module","changed","total_buffer","sf_buffer","centered_sf_buffer","fetchFilteredMatrix","_raw_compute2","buff","block","fetchFilteredBlock","num_pcs","num_clusters","remove_bias","valid","nutils","totals","numberOfPCs","numberOfClusters","_norm","AdtPcaState","norm","norm_module","pcs","block_method","fetchNormalizedMatrix","blockMethod","_inputs","AdtQualityControlState","inputs","inputs_module","metrics","filters","metrics_buffer","discard_buffer","fetchCountMatrix","automatic","tag_id_column","igg_prefix","nmads","min_detected_drop","tag_info","fetchFeatureAnnotations","subsets","fill","lower_igg","configureFeatureParameters","val","sub_arr","fetchBlock","numberOfMADs","minDetectedDrop","discard","numberOfCells","best_key","best","rn","columnNames","latest","_combined","BatchCorrectionState","combine_module","corrected","fetchNumberOfCells","fetchNumberOfDimensions","num_neighbors","approximate","needs_correction","fetchCombined","numberOfDims","view","find_usable_upstream_states","qc_states","in_use","tmp","to_use","_qc_states","_raw_compute_matrix","_raw_compute_block","CellFilteringState","rna_qc_module","adt_qc_module","crispr_qc_module","block_buffer","_raw_compute_matrix2","_raw_compute_block2","use_rna","use_adt","use_crispr","first","fetchDiscards","disc_buffer","disc_arr","max_index","keep","available","src","sub","clone","filtered_ncols","bcache","_snn_cluster","_kmeans_cluster","ChooseClusteringState","snn","kmeans","snn_module","kmeans_module","fetchClusters","find_nonzero_upstream_states","pca_states","weights","_pca_states","CombineEmbeddingsState","rna_pca_module","adt_pca_module","crispr_pca_module","combined_buffer","num_cells","total_dims","rna_weight","adt_weight","crispr_weight","_Object$values","weight_arr","collected","ncells","curpcs","fetchPCs","principalComponents","createPcsView","upstream","CrisprNormalizationState","centered_buffer","sum_buffer","createGroup","CrisprPcaState","CrisprQualityControlState","FeatureSelectionState","sorted_residuals","span","residuals","_correct","_valid","KmeansClusterState","correct","correct_module","_valid2","clusters","run_me","fetchCorrected","initMethod","_free_results","markers","versus","_computeVersus","left","right","matrices","_ref$block","_ref$lfc_threshold","lfc_threshold","_ref$compute_auc","compute_auc","cache_info","left_index","left_small","right_index","run","new_clusters","leftfound","rightfound","_norm_states","_choice","MarkerDetectionState","norm_states","choice","rna_norm_module","adt_norm_module","crispr_norm_module","choice_module","changed_params","lfcThreshold","computeAuc","state","_ref2$block","_ref2$lfc_threshold","_ref2$compute_auc","computeVersus","_matrices","_groups","_group_levels","_block","_block_levels","_cache2","_parameters2","MarkerDetectionStandalone","normalized","groups","_ref3$block","arrays","new_matrices","dump","retain","temp","free","levels","init","_ref4$copy","ret","_ref5$copy","_classPrivateFieldGet2","NeighborIndexState","RnaNormalizationState","_feat","RnaPcaState","feat_module","hvg_buffer","num_hvgs","choose_hvgs","sorted_resids","fetchSortedResiduals","threshold_at","unsorted_resids","fetchResults","element","_automatic","_acquire_reference","RnaQualityControlState","species","_compute","mito_prefix","use_reference_mito","gene_id_column","gene_id_type","def","gene_id_column2","species2","gene_id_type2","guesses","backcomp","gene_info","lists","lower_mito","use_mito_default","guessRnaFeatureTypes","_acquire_reference2","confidence","_mito_lists","_acquire_reference3","feature_type","mito_lists","rutils","_defineProperty","_index","_compute_neighbors","_compute_graph","_compute_clusters","SnnGraphClusterState","neighbor_module","neighbors","graph","membership","scheme","algorithm","multilevel_resolution","leiden_resolution","walktrap_steps","_compute_neighbors2","_compute_graph2","_compute_clusters2","fetchIndex","multiLevelResolution","leidenResolution","leidenModularityObjective","walktrapSteps","_reloaded","_worker_id","_ready","_run","_core","TsneState","reloaded","aworkers","_vizutils$initializeW","vizutils","worker_id","ready","_fetchResults","_ref$copy","iterations","perplexity","animate","same_neighbors","_core2","then","reneighbor","nn_out","UmapState","num_epochs","min_dist","registerCallback","sendMessage","transfer","terminateWorker","freeCache","changedParametersIllegal","xskip","yskip","ArrayBuffer","isView","changedParameters","xnull","ynull","xarr","yarr","xkeys","ykeys","_xkeys","allocateCachedArray","reallocate","candidate","owner","findValidUpstreamStates","states","checkIndices","defaultDownload","_defaultDownload","guessFeatureTypes","forceTaxonomy","subsetInvalidFactors","invalid","transformed","num_invalid","_loop","new_ids","new_levels","summaries2int","formatMarkerResults","rankEffect","ordering","ranking","increasing","cohen","summary","auc","lfc","deltaDetected","reorder","stats","thing","stat_detected","detected","stat_mean","means","stat_lfc","stat_delta_d","locateVersusCache","bigg","biggversus","smal","rerun","freeVersusResults","_i8","_i9","_Object$values2","_i10","_Object$values3","_i11","_Object$keys2","computeVersusResults","new_block","modmat","subsetSums","discards","sums","fetchMetrics","oarr","LENGTH","_bioconductor_LENGTH","SLICE","_ref$allowView","allowView","_bioconductor_SLICE","start","end","COMBINE","objects","_bioconductor_COMBINE","total_LENGTH","position","CLONE","_ref2$deepCopy","_bioconductor_CLONE","_step3$value","SPLIT","factor","misc","_bioconductor_SPLIT","NUMBER_OF_ROWS","_bioconductor_NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","_bioconductor_NUMBER_OF_COLUMNS","SLICE_2D","_ref3$allowView","_bioconductor_SLICE_2D","COMBINE_ROWS","_bioconductor_COMBINE_ROWS","COMBINE_COLUMNS","_bioconductor_COMBINE_COLUMNS","Annotated","_ref$inPlace","inPlace","cutils","setMetadata","DataFrame","_ann$Annotated","_ref$numberOfRows","_ref$rowNames","_ref$columnOrder","_ref$metadata","_possibleConstructorReturn","_numberOfRows","_rowNames","_columns","il","cause","generics","entry","numberOfEntries","_ref2$inPlace","delete","_ref3$inPlace","setColumn","_ref4$inPlace","setNames","setColumnNames","_ref5$inPlace","setRowNames","_ref6$inPlace","sliceColumns","_ref7","new_numberOfRows","_ref7$allowView","new_rowNames","parallelCombine","all_n","all_l","yi","_ref8","_ref8$deepCopy","_getPrototypeOf","ann","flexibleCombineRows","ckeys","corder","cnames","copies","dummy","_extractor","_inserter","_primarySlicer","_secondarySlicer","DenseMatrix","_ref$columnMajor","columnMajor","_numberOfColumns","_values","_columnMajor","_ref2$allowView","_extractor2","setValues","_inserter2","setRow","full_rows","is_row_range","new_rows","full_columns","is_column_range","new_values","_primarySlicer2","primaryFun","secondaryFun","isPrimaryMajor","secondaryName","num_primary","num_secondary","primary_major","used_primary","cur_primary","out_offset","in_offset","out_offset2","view_offset","_combiner","nprimary","nsecondary","primaryMajor","offset","primarySlice","fullPrimary","isPrimaryRange","primaryDim","secondarySlice","fullSecondary","isSecondaryRange","inSecondaryDim","outSecondaryDim","outputValues","_secondarySlicer2","pi","inPrimary","outPrimary","si","GRanges","_vec$Vector","seqnames","ranges","_ref$strand","strand","_ref$names","_ref$elementMetadata","elementMetadata","_seqnames","_ranges","_convertToInt8Array","_checkStrandedness","Int8Array","_strand","width","setSeqnames","ir","setRanges","setStrand","_ref5","_ref5$restrictToSeqna","restrictToSeqnames","_ref5$restrictToStran","restrictToStrand","by_seqname","starts","ends","_Object$keys","seqname_indices","seqname_strand","by_strand","str_indices","olap","GRangesOverlapIndex","_ref6$allowView","all_sn","all_rr","all_st","_ref7$deepCopy","empty","vec","query","_this2","_ref8$ignoreStrand","ignoreStrand","my_results","allowed_strands","seq_index","sstr","_staged_setGroup","_flush_staged_setGroup","GroupedGRanges","_ref$rangeLengths","rangeLengths","_assertThisInitialized","gr","_rangeLengths","accumulated","_computeStarts","_rangeStarts","_flush_staged_setGroup2","nops","setGroup","GroupedGRangesOverlapIndex","buildOverlapIndex","numberOfGroups","runs","lengths","staged","last_start","more_ranges","ngroups","current_start","nranges","fullLength","rangeStarts","rev_map","_reverseMapping","overlaps","overlap","_loop2","IRanges","_width","setStart","setWidth","tree","IRangesOverlapIndex","_ref4$allowView","all_s","all_w","_ref5$deepCopy","_tree","_check_entry_index","InternalList","order","expected","observed","_entries","_order","_check_entry_index2","ii","new_entries","new_order","_ref6$deepCopy","FUN","_ref7$inPlace","combiner","first_order","_check_rowRanges","RangedSummarizedExperiment","_se$SummarizedExperim","rowRanges","ggr","_check_rowRanges2","_rowRanges","setRowRanges","has_empty","has_ggr","se","widths","setElementMetadata","_ref3","_rowData","SingleCellExperiment","_rse$RangedSummarized","_options$reducedDimen","reducedDimensions","_options$reducedDimen2","reducedDimensionOrder","_options$alternativeE","alternativeExperiments","_options$alternativeE2","alternativeExperimentOrder","_options$rowRanges","ncols","_reducedDimensions","_alternativeExperiments","removeReducedDimension","setReducedDimension","setReducedDimensionNames","sliceReducedDimensions","removeAlternativeExperiment","setAlternativeExperiment","setAlternativeExperimentNames","_ref8$inPlace","sliceAlternativeExperiments","_ref9","_ref9$allowView","_ref10","rse","SummarizedExperiment","_ref$assayOrder","assayOrder","_ref$rowData","rowData","_ref$columnData","columnData","_ref$columnNames","_assays","nrows","nr","nc","df","_columnData","_columnNames","removeAssay","setAssay","setAssayNames","sliceAssays","setRowData","setColumnData","_ref9$inPlace","_ref10$allowView","all_dfs","_ref11","_ref11$deepCopy","verifyElementMetadata","numExpected","Vector","_elementMetadata","_names","all_em","setterTarget","cloneField","presplitFactor","by","buildIntervalTree","_ref2$slice","_convertPositionToRan","_ref$slice","positions","fillIndex","at","rank2position","new_starts","new_ends","pos","startRanks","endRanks","convertPositionToRank","create_node","recursive_build_tree","one_past_the_end","left_bound","right_bound","start_overlaps_sorted","end_overlaps_sorted","left_node","right_node","node","queryIntervalTree","recursive_query_tree","areArraysEqual","isArrayLike","chooseArrayConstructors","con1","con2","BigInt64Array","BigUint64Array","formatLengthError","checkStringArray","typeMessage","checkNamesArray","lengthMessage","sum","combineNames","all_names","all_lengths","total_n","all_null","createSequence","convertToInt32Array","checkNonNegative","object2map","_collections","fetchAllCollections","_fetchAllCollections","_ref$download","cres","coll_data","reference_download","decompressLines","_genes","fetchAllGenes","_fetchAllGenes","_ref$types","promises","processing","_t","resolved","gene_data","processed","gene_download","all","_sets","fetchAllSets","_fetchAllSets","_yield$Promise$all","_yield$Promise$all2","sres","set_data","collection","fetchGenesForAllSets","_fetchGenesForAllSets","fetchSetsForAllGenes","_fetchSetsForAllGenes","by_symbol","by_symbol_lower","mapGenesByIdentifier","_mapGenesByIdentifier","_ref$lowerCase","lowerCase","host","sfound","tfound","_step2$value","reindexGenesForAllSets","geneMapping","genesForSets","reverse_mapping","gesel_gene","Uint32Array","new_sets","subset","gene","reindexSetsForAllGenes","setsForGenes","remapped","_store","_ncols","MultiMatrix","_ref$store","old","new_matrix","to","_matrix","ScranMatrix","gc","_ref$buffer","_ref2$buffer","sparse","reorganized","_ref3$buffer","identities","wipe_identities","_ref4$columnMajor","wa","NumericMatrix","prefix","extension","tmppath","methods","handleString","_results","AggregateAcrossCellsResults","num_groups","num_genes","group_sums","all_sums","group_detected","all_detected","aggregateAcrossCells","group_data","_ref3$average","average","_ref3$numberOfThreads","numberOfThreads","nthreads","aggregate_across_cells","createBlock","local_buffer","barr","sofar","subsetBlock","_ref3$filter","filterBlock","_ref4$buffer","dropUnusedBlock","fac","harvest_matrices","BigInt","$$","ptr","cbindWithNames","mat_ptrs","name_ptrs","renamed","common","universe","names_arr","replacement_arr","cbind_with_rownames","internames","_renamed","computeTopThreshold","_ref$largest","largest","_filledClusters","_filledSizes","_filledCenters","_filledWcss","_filledIterations","_filledStatus","ClusterKmeansResults","filled","num_obs","set_iterations","set_status","_ref$fillable","fillable","COPY","_ref2$fillable","cluster_sizes","_this3","_ref3$fillable","wcss","_this4","_ref4$fillable","centers","clusterKmeans","_ref5$numberOfDims","_ref5$numberOfCells","_ref5$initMethod","_ref5$initSeed","initSeed","_ref5$initPCASizeAdju","initPCASizeAdjust","_ref5$numberOfThreads","pptr","RunPCAResults","byteOffset","cluster_kmeans","_graph","BuildSNNGraphResults","buildSNNGraph","my_neighbors","_ref$scheme","_ref$neighbors","_ref$numberOfThreads","ref","FindNearestNeighborsResults","findNearestNeighbors","build_snn_graph","_id2","_filledBest","_filledModularity","_filledMembership","_chooseLevel","ClusterSNNGraphMultiLevelResults","numberOfLevels","set_best","_ref2$level","level","_chooseLevel2","modularity","set_modularity","_ref3$level","_id3","_results2","_filledModularity2","_filledModularityDetails","_filledMembership2","ClusterSNNGraphWalktrapResults","numberOfMergeSteps","which","remaining","num_merge_steps","_ref4$at","_ref5$fillable","_id4","_results3","_filledModularity3","_filledMembership3","ClusterSNNGraphLeidenResults","_ref6$copy","_ref6$fillable","clusterSNNGraph","_ref7$method","_ref7$multiLevelResol","_ref7$leidenResolutio","_ref7$leidenModularit","_ref7$walktrapSteps","cluster_snn_graph_multilevel","cluster_snn_graph_walktrap","cluster_snn_graph_leiden","convertToFactor","failure","_ref$asWasmArray","asWasmArray","_ref$levels","_ref$action","_ref$placeholder","warned","isFinite","existing","every","oldlevels","resetLevels","factorize","dropUnusedLevels","uniq","uniq_arr","newLevels","_ref2$action","_ref2$placeholder","oldLevels","conversion","filterCells","filter_data","filter_cells","BuildNeighborSearchIndexResults","num_dim","buildNeighborSearchIndex","_ref$numberOfDims","_ref$numberOfCells","_ref$approximate","build_neighbor_index","run_data","ind_data","dist_data","_ref2$runs","_ref2$indices","_ref2$distances","distances","serialize","NeighborResults","find_nearest_neighbors","groupedSizeFactors","group_arr","_ref$center","_ref$priorCount","priorCount","_ref$reference","reference","wasm","grouped_size_factors","guessFeatures","_ref$forceTaxonomy","ntotal","early_threshold","ceil","payload","unique_features","ensembl_human","ensembl_mouse","ensembl_6239","ensembl_10116","ensembl_9541","ensembl_7227","ensembl_7955","ensembl_9598","symbol_human","symbol_mouse","symbol_6239","symbol_7955","hsid","mmid","any_ens","highest","hypergeometricTest","markersInSet","numberOfMarkers","featureSetSize","numberOfFeatures","markersInSet_data","numberOfMarkers_data","featureSetSize_data","numberOfFeatures_data","output_data","_ref$assumeSorted","assumeSorted","ntests","check_length","hypergeometric_test","initializeSparseMatrixFromMatrixMarket","buf_data","_ref3$compressed","compressed","_ref3$layered","layered","convert_compressed","read_matrix_market_from_buffer","read_matrix_market_from_file","isReorganized","wipeIdentities","extractMatrixMarketDimensions","_ref4$compressed","read_matrix_market_header_from_buffer","read_matrix_market_header_from_file","sarr","initializeSparseMatrixFromHDF5","wasm_row","wasm_col","_ref5$forceInteger","_ref5$layered","_ref5$subsetRow","subsetRow","_ref5$subsetColumn","subsetColumn","_ref5$cacheSize","cacheSize","use_row_subset","row_offset","row_length","use_col_subset","col_offset","col_length","read_hdf5_matrix","extractHDF5MatrixDetails","extract_hdf5_matrix_details","vals","integer","initializeDenseMatrixFromDenseArray","_ref6$forceInteger","initialize_dense_matrix","initializeSparseMatrixFromRds","_ref7$consume","_ref7$forceInteger","_ref7$layered","initialize_sparse_matrix_from_rds","computePerCellQcFilters","block_data","bptr","use_blocks","applyFilter","thresholds","rebuffer","optr","computePerCellQcMetrics","subset_offsets","tmp_subsets","nsubsets","offset_offset","offset_arr","_tmp_subsets","unpack_strings","repack_strings","lengths_arr","enc","buffer_arr","_reference","LoadLabelledReferenceResults","num_samples","num_features","num_labels","loadLabelledReferenceFromBuffers","ranks","labels","matbuf","markbuf","labbuf","load_singlepp_reference","_reference2","BuildLabelledReferenceResults","shared_features","register_features","id_array","registry_contents","convert_features","used","buildLabelledReference","referenceFeatures","mat_id_buffer","ref_id_buffer","_ref$top","top","nfeat","build_singlepp_reference","expectedNumberOfFeatures","_cell_buffer","_label_buffer","LabelCellsResults","get_best","get_scores_for_sample","get_scores_for_label","get_delta","label_cells","tempmat","labelCells","_ref6$numberOfFeature","_ref6$numberOfCells","_ref6$quantile","quantile","_ref6$numberOfThreads","run_singlepp","_integrated","IntegrateLabelledReferencesResults","num_references","integrateLabelledReferences","built","id_arr","loaded_arr2","ref_arr2","built_arr2","_ref7$numberOfThreads","nrefs","ref_arr","la2","ra2","ba2","integrate_singlepp_references","_ref_arr","IntegrateCellLabelsResults","numberOfLabels","_ref8$copy","predictedLabels","_ref9$copy","_ref9$buffer","scoresForCell","_ref10$copy","_ref10$buffer","scoresForLabel","_ref11$copy","fineTuningDelta","integrateCellLabels","assigned","integrated","aptrs","_ref12","_ref12$numberOfFeatur","_ref12$numberOfCells","_ref12$quantile","_ref12$numberOfThread","numberOfReferences","assigned_arrs","aptrs_arr","fail","integrate_singlepp","_assigned_arrs","logNormCounts","sf_data","_ref$sizeFactors","_ref$allowZeros","sfptr","use_sf","log_norm_counts","centerSizeFactors","center_size_factors","mnnCorrect","x_data","_ref$k","_ref$numberOfMADs","_ref$robustIterations","robustIterations","_ref$robustTrim","robustTrim","_ref$referencePolicy","referencePolicy","mnn_correct","_filledMeans","_filledVariances","_filledFitted","_filledResiduals","_extract","ModelGeneVarResults","numberOfBlocks","_extract2","_ref4$block","num_blocks","fillcheck","fillindex","nblocks","modelGeneVar","_ref5$block","_ref5$span","model_gene_var","_filledSums","_filledDetected","_filledSubsetTotals","PerCellAdtQcMetricsResults","numberOfSubsets","subset_totals","num_subsets","perCellAdtQcMetrics","_ref4$numberOfThreads","internal","subset_offset","per_cell_adt_qc_metrics","_filledMaxProportions","_filledMaxIndex","PerCellCrisprQcMetricsResults","max_proportion","perCellCrisprQcMetrics","per_cell_crispr_qc_metrics","_filledSubsetProportions","PerCellRnaQcMetricsResults","subset_proportions","perCellRnaQcMetrics","per_cell_rna_qc_metrics","quickAdtSizeFactors","clust","_ref$numberOfClusters","_ref$numberOfPCs","_ref$totals","runPCA","RdsObject","par","parent","RdsVector","_RdsObject","mod","fill_attribute_names","anames_buf","attribute_names_buffer","anames_len","attribute_names_length","packer","find_attribute","dispatch","load_attribute_by_index","load_attribute_by_name","RdsIntegerVector","_RdsVector","_super2","numeric_vector","RdsBooleanVector","_RdsVector2","_super3","RdsDoubleVector","_RdsVector3","_super4","RdsStringVector","_RdsVector4","_super5","fill_string_vector","buf","string_vector_buffer","string_vector_length","RdsGenericVector","_RdsVector5","_super6","_this5","load_list_element","RdsS4Object","_RdsObject2","_super7","_this6","class_name","_this7","package_name","_this8","_this9","_this10","RdsNull","_RdsVector6","_super8","cons","tt","_obj","RdsDetails","format_version","writer_version","reader_version","_this11","readRds","parse_rds_from_file","parse_rds_from_buffer","_filledComponents","_filledTotalVariance","set_total_variance","variance_explained","total_variance","feat_data","_ref3$features","_ref3$numberOfPCs","_ref3$scale","scale","_ref3$blockMethod","use_feat","fptr","run_pca","run_blocked_pca","run_multibatch_pca","perplexityToNeighbors","perplexity_to_k","scaleByNeighbors","embeddings","embed_ptrs","index_ptrs","holding_ndims","holding_weights","_ref$indices","_ref$weights","nembed","embed_arr","weight_offset","use_weights","allocator","total_ndim","total_len","index_arr","scale_by_neighbors_indices","ndims_arr","scale_by_neighbors_matrices","_deletable","scoreFeatureSet","feature_data","_ref$scale","score_feature_set","scores","checkFillness2","getfun","intifySummary","_filledCohen","_filledLfc","_filledAuc","_filledDeltaDetected","_extractBlockedStat","ScoreMarkersResults","createBlockedStatsFilled","createEffectsFilled","_extractBlockedStat2","_ref3$summary","_ref4$summary","_ref5$summary","_ref6$summary","delta_detected","scoreMarkers","_ref7$block","_ref7$lfcThreshold","_ref7$computeAuc","_ref7$computeMedian","computeMedian","_ref7$computeMaximum","computeMaximum","score_markers","subsetRows","xcopy","wasm_indices","row_subset","subsetColumns","column_subset","splitRows","_ref3$singleNull","singleNull","_ref3$createMultiMatr","createMultiMatrix","tkeys","consec","_tkeys","SuggestAdtQcFiltersResults","thresholds_detected","thresholds_subset_totals","suggestAdtQcFilters","_ref4$numberOfMADs","_ref4$minDetectedDrop","suggest_adt_qc_filters","_filledMaxCount","SuggestCrisprQcFiltersResults","thresholds_max_count","suggestCrisprQcFilters","_ref3$numberOfMADs","suggest_crispr_qc_filters","SuggestRnaQcFiltersResults","thresholds_sums","thresholds_proportions","suggestRnaQcFilters","_ref5$numberOfMADs","suggest_rna_qc_filters","createUint8WasmArray","wasmArraySpace","createInt32WasmArray","createBigUint64WasmArray","createFloat64WasmArray","wasmifyArray","space","chooseNumberOfThreads","threads","maximumThreads","possibleCopy","view_class","matchOptions","choices","spawnArray","checkFillness","check","setFilledFun","initialize","_initialize","_ref$localFile","localFile","scran_custom_nthreads","locateFile","import","loadScran","register","func","get_error_message","wasmMemory","createWasmArray","arrayClass","allocate","Uint8WasmArray","Int32WasmArray","BigUint64WasmArray","Float64WasmArray","_WasmArray","WasmArray","Int8WasmArray","_WasmArray2","Uint16WasmArray","_WasmArray3","Uint16Array","Int16WasmArray","_WasmArray4","Int16Array","Uint32WasmArray","_WasmArray5","_WasmArray6","_WasmArray7","BigInt64WasmArray","_WasmArray8","Float32WasmArray","_WasmArray9","_super9","_WasmArray10","_super10","stringToClass","subsetWasmArray","_ref$filter","targetLength","targetName","checkSubsetLength","fillSubset","createWasmArrayView"],"sourceRoot":""}