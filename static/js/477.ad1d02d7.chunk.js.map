{"version":3,"file":"static/js/477.ad1d02d7.chunk.js","mappings":";kFAAA,UAMqDA,EAAO,GAAE,EAA6F,SAASC,IAAI,aAAa,IAAIC,EAAE,oBAAoBC,KAAKA,KAAK,oBAAoBC,OAAOA,YAAO,IAASF,EAAEA,EAAE,CAAC,EAAMG,GAAGH,EAAEI,YAAYJ,EAAEK,YAAYC,EAAEN,EAAEO,iBAAgB,EAAGC,EAAE,CAAC,EAAEC,EAAE,EAAEC,EAAE,CAACC,MAAM,SAASC,EAAEC,GAAG,IAAIC,GAAGD,EAAEA,GAAG,CAAC,GAAGE,gBAAe,EAA0C,GAAvCC,EAAEF,KAAKD,EAAEI,sBAAsBH,EAAEA,EAAE,CAAC,GAAMD,EAAEE,cAAcD,EAAED,EAAEK,YAAYF,EAAEH,EAAEK,YAAYL,EAAEK,UAAUL,EAAEM,QAAQT,EAAEU,kBAAkB,CAAC,IAAIC,EAAE,WAAW,IAAIX,EAAEU,kBAAkB,OAAM,EAAG,IAA+YN,EAAEO,EAA7YT,GAAGE,EAAEd,EAAEsB,KAAKtB,EAAEuB,WAAW,KAAKF,EAAEtB,EAAEyB,WAAWd,EAAEe,WAAWf,EAAEe,SAASX,EAAEY,gBAAgB,IAAIC,KAAK,CAAC,yOAAyO,IAAIN,EAAE,QAAQ,CAACO,KAAK,uBAAuBf,EAAE,IAAIb,EAAE6B,OAAOjB,GAAW,OAAOC,EAAEiB,UAAUC,EAAElB,EAAEmB,GAAGvB,IAAID,EAAEK,EAAEmB,IAAInB,CAAC,CAAte,GAA0e,OAAOQ,EAAEY,SAASpB,EAAEqB,KAAKb,EAAEc,UAAUtB,EAAEuB,MAAMf,EAAEgB,aAAaxB,EAAEyB,SAASjB,EAAEkB,UAAU1B,EAAE2B,MAAM3B,EAAEqB,KAAKlB,EAAEH,EAAEqB,MAAMrB,EAAEuB,MAAMpB,EAAEH,EAAEuB,OAAOvB,EAAEyB,SAAStB,EAAEH,EAAEyB,UAAUzB,EAAE2B,MAAMxB,EAAEH,EAAE2B,cAAc3B,EAAEM,YAAYE,EAAEhB,YAAY,CAACoC,MAAM7B,EAAE8B,OAAO7B,EAAE8B,SAAStB,EAAEW,IAAI,CAAC,IAAI7B,EAAE,KAAmQ,OAA9PO,EAAEkC,kBAAkB,iBAAiBhC,GAAGA,EAAE,SAASA,GAAG,OAAG,QAAQA,EAAEiC,WAAW,GAAUjC,EAAEkC,MAAM,GAAUlC,CAAC,CAAjE,CAAmEA,GAAGT,EAAEU,EAAEkC,SAAS,IAAIC,EAAEnC,GAAG,IAAIoC,EAAEpC,KAAI,IAAKD,EAAEsC,UAAUlC,EAAEJ,EAAEuC,OAAOnC,EAAEJ,EAAEwC,IAAIjD,EAAE,IAAIkD,EAAExC,IAAIb,EAAEsD,MAAM1C,aAAa0C,MAAM1C,aAAa2C,UAAUpD,EAAE,IAAIqD,EAAE3C,IAAWV,EAAEsD,OAAO7C,EAAE,EAAE8C,QAAQ,SAAS9C,EAAEC,GAAG,IAAIV,GAAE,EAAG4B,GAAE,EAAG4B,EAAE,IAAIC,EAAE,OAAO7D,EAAE,IAAIS,EAAET,EAAEA,EAAEe,GAAE,EAAGO,EAAE,KAAKf,GAAE,GAAI,WAAW,GAAG,iBAAiBO,EAApB,CAAyd,GAA5b,iBAAiBA,EAAEgD,WAAWnD,EAAEoD,eAAeC,QAAO,SAASnD,GAAG,OAAO,IAAIC,EAAEgD,UAAUG,QAAQpD,EAAE,IAAGqD,SAASN,EAAE9C,EAAEgD,YAAY,kBAAkBhD,EAAEqD,QAAQ,mBAAmBrD,EAAEqD,QAAQC,MAAMC,QAAQvD,EAAEqD,WAAW/D,EAAEU,EAAEqD,QAAQ,kBAAkBrD,EAAEwD,gBAAgB,iBAAiBxD,EAAEwD,iBAAiBvD,EAAED,EAAEwD,gBAAgB,iBAAiBxD,EAAEyD,UAAUV,EAAE/C,EAAEyD,SAAS,iBAAiBzD,EAAE0D,YAAYxE,EAAEc,EAAE0D,WAAW,kBAAkB1D,EAAE2D,SAASzC,EAAElB,EAAE2D,QAAWL,MAAMC,QAAQvD,EAAE4D,SAAS,CAAC,GAAG,IAAI5D,EAAE4D,QAAQR,OAAO,MAAM,IAAIS,MAAM,2BAA2BrD,EAAER,EAAE4D,OAAO,MAAC,IAAS5D,EAAE8D,aAAanE,EAAEK,EAAE8D,WAAW5E,IAAI,kBAAkBc,EAAE+D,gBAAgB/D,EAAE+D,0BAA0BC,UAAUvE,EAAEO,EAAE+D,0BAA0BC,OAAOhE,EAAE+D,eAAe,kBAAptB,CAAsuB,CAA7wB,GAAixB,IAAInE,EAAE,IAAIoE,OAAOC,EAAE/E,GAAG,KAA2C,GAAtC,iBAAiBa,IAAIA,EAAEmE,KAAKpE,MAAMC,IAAOuD,MAAMC,QAAQxD,GAAG,CAAC,IAAIA,EAAEqD,QAAQE,MAAMC,QAAQxD,EAAE,IAAI,OAAOoE,EAAE,KAAKpE,EAAEE,GAAG,GAAG,iBAAiBF,EAAE,GAAG,OAAOoE,EAAE3D,GAAGkC,OAAO0B,KAAKrE,EAAE,IAAIA,EAAEE,EAAE,MAAM,GAAG,iBAAiBF,EAAE,MAAM,iBAAiBA,EAAEsE,OAAOtE,EAAEsE,KAAKH,KAAKpE,MAAMC,EAAEsE,OAAOf,MAAMC,QAAQxD,EAAEsE,QAAQtE,EAAEuE,SAASvE,EAAEuE,OAAOvE,EAAEwE,MAAMxE,EAAEwE,KAAKD,QAAQ9D,GAAGT,EAAEuE,SAASvE,EAAEuE,OAAOhB,MAAMC,QAAQxD,EAAEsE,KAAK,IAAItE,EAAEuE,OAAO,iBAAiBvE,EAAEsE,KAAK,GAAG3B,OAAO0B,KAAKrE,EAAEsE,KAAK,IAAI,IAAIf,MAAMC,QAAQxD,EAAEsE,KAAK,KAAK,iBAAiBtE,EAAEsE,KAAK,KAAKtE,EAAEsE,KAAK,CAACtE,EAAEsE,QAAQF,EAAEpE,EAAEuE,QAAQ,GAAGvE,EAAEsE,MAAM,GAAGpE,GAAG,MAAM,IAAI4D,MAAM,0CAA0C,SAASM,EAAEpE,EAAEC,EAAEC,GAAG,IAAIO,EAAE,GAAG,iBAAiBT,IAAIA,EAAEmE,KAAKpE,MAAMC,IAAI,iBAAiBC,IAAIA,EAAEkE,KAAKpE,MAAME,IAAI,IAAIV,EAAEgE,MAAMC,QAAQxD,IAAI,EAAEA,EAAEqD,OAAOlE,GAAGoE,MAAMC,QAAQvD,EAAE,IAAI,GAAGV,GAAG4B,EAAE,CAAC,IAAI,IAAIvB,EAAE,EAAEA,EAAEI,EAAEqD,OAAOzD,IAAI,EAAEA,IAAIa,GAAGsC,GAAGtC,GAAGgE,EAAEzE,EAAEJ,GAAGA,GAAG,EAAEK,EAAEoD,SAAS5C,GAAGuC,EAAE,CAAC,IAAI,IAAItD,EAAE,EAAEA,EAAEO,EAAEoD,OAAO3D,IAAI,CAAC,IAAIG,EAAEN,EAAES,EAAEqD,OAAOpD,EAAEP,GAAG2D,OAAOe,GAAE,EAAGhF,EAAEG,EAAE,IAAIoD,OAAO0B,KAAKpE,EAAEP,IAAI2D,OAAO,IAAIpD,EAAEP,GAAG2D,OAAO,GAAGnD,IAAIX,IAAI6E,EAAE,WAAWlE,EAAE,KAAKD,EAAEP,GAAGgF,KAAK,IAAIC,OAAO,IAAI1E,EAAEP,GAAG2D,QAAQ,IAAIpD,EAAEP,GAAG,GAAG2D,QAAQ,WAAWnD,GAAGX,EAAE,CAAC,IAAI,IAAIqF,EAAE,GAAGxC,EAAE,EAAEA,EAAEvC,EAAEuC,IAAI,CAAC,IAAIQ,EAAEzD,EAAEa,EAAEoC,GAAGA,EAAEwC,EAAEC,KAAK5E,EAAEP,GAAGkD,GAAG,CAACwB,EAAE,KAAKQ,EAAEF,KAAK,IAAIC,MAAM,CAAC,IAAIP,EAAE,CAAC,IAAI,IAAI/B,EAAE,EAAEA,EAAExC,EAAEwC,IAAI,CAAC,EAAEA,IAAIjD,IAAIqB,GAAGsC,GAAG,IAAIN,EAAElD,GAAGJ,EAAEa,EAAEqC,GAAGA,EAAE5B,GAAGgE,EAAExE,EAAEP,GAAG+C,GAAGJ,EAAE,CAAC3C,EAAEO,EAAEoD,OAAO,KAAKnD,GAAG,EAAEL,IAAIT,KAAKqB,GAAGuC,EAAE,CAAC,CAAC,OAAOvC,CAAC,CAAC,SAASgE,EAAEzE,EAAEC,GAAG,GAAG,MAAMD,EAAE,MAAM,GAAG,GAAGA,EAAE8E,cAAcC,KAAK,OAAOZ,KAAKa,UAAUhF,GAAGkC,MAAM,EAAE,IAAI,IAAIhC,GAAE,EAAGR,GAAG,iBAAiBM,GAAGN,EAAEuF,KAAKjF,KAAKA,EAAE,IAAIA,EAAEE,GAAE,GAAI,IAAIO,EAAET,EAAEY,WAAWsE,QAAQrF,EAAED,GAAG,OAAOM,EAAEA,IAAG,IAAKX,GAAG,mBAAmBA,GAAGA,EAAES,EAAEC,IAAIsD,MAAMC,QAAQjE,IAAIA,EAAEU,IAAI,SAASD,EAAEC,GAAG,IAAI,IAAIC,EAAE,EAAEA,EAAED,EAAEoD,OAAOnD,IAAI,IAAI,EAAEF,EAAEoD,QAAQnD,EAAEC,IAAI,OAAM,EAAG,OAAM,CAAE,CAAhF,CAAkFO,EAAEX,EAAEoD,kBAAkB,EAAEzC,EAAE2C,QAAQL,IAAI,MAAMtC,EAAE0E,OAAO,IAAI,MAAM1E,EAAE0E,OAAO1E,EAAE4C,OAAO,IAAIlE,EAAEsB,EAAEtB,EAAEsB,CAAC,CAAC,GAAG,GAAGX,EAAEsF,WAAWC,OAAOC,aAAa,IAAIxF,EAAEyF,SAASF,OAAOC,aAAa,IAAIxF,EAAE0F,gBAAgB,SAAS1F,EAAEoD,eAAe,CAAC,KAAK,KAAK,IAAIpD,EAAE0F,iBAAiB1F,EAAEU,mBAAmBjB,KAAKH,EAAE6B,OAAOnB,EAAEkC,kBAAkB,EAAElC,EAAE2F,eAAe,SAAS3F,EAAE4F,gBAAgB,QAAQ5F,EAAE6F,iBAAiB,IAAI7F,EAAE8F,OAAOC,EAAE/F,EAAEgG,aAAa5F,EAAEJ,EAAEiG,gBAAgB3D,EAAEtC,EAAEkG,aAAapD,EAAE9C,EAAEmG,eAAe5D,EAAEvC,EAAEoG,uBAAuBzD,EAAErD,EAAE+G,OAAO,CAAC,IAAIvB,EAAExF,EAAE+G,OAAOvB,EAAEwB,GAAGrG,MAAM,SAASL,GAAG,IAAIQ,EAAER,EAAEoC,QAAQ,CAAC,EAAEjC,EAAE,GAAG,OAAOwG,KAAKC,MAAK,SAAStG,GAAG,GAAK,UAAU4E,EAAEyB,MAAME,KAAK,WAAWC,eAAe,SAAS5B,EAAEyB,MAAMI,KAAK,QAAQC,gBAAetH,EAAEuH,aAAcN,KAAKO,OAAO,IAAIP,KAAKO,MAAMvD,OAAO,OAAM,EAAG,IAAI,IAAIpD,EAAE,EAAEA,EAAEoG,KAAKO,MAAMvD,OAAOpD,IAAIJ,EAAEgF,KAAK,CAACgC,KAAKR,KAAKO,MAAM3G,GAAG6G,UAAUT,KAAKU,eAAenC,EAAEoC,OAAO,CAAC,EAAE9G,IAAI,IAAGF,IAAIqG,KAAK,SAASrG,IAAI,GAAG,IAAIH,EAAEwD,OAAO,CAAC,IAAIrD,EAAEC,EAAEC,EAAEO,EAAElB,EAAEM,EAAE,GAAG,GAAGO,EAAEV,EAAEuH,QAAQ,CAAC,IAAI9H,EAAEO,EAAEuH,OAAO1H,EAAEsH,KAAKtH,EAAEuH,WAAW,GAAG,iBAAiB3H,EAAE,CAAC,GAAG,UAAUA,EAAE+H,OAAO,OAAOlH,EAAE,aAAaC,EAAEV,EAAEsH,KAAK3G,EAAEX,EAAEuH,UAAUrG,EAAEtB,EAAEgI,YAAY/G,EAAEV,EAAEkC,QAAQlC,EAAEkC,MAAM,CAACwF,KAAKpH,GAAGC,EAAEC,EAAEO,IAAI,GAAG,SAAStB,EAAE+H,OAAO,YAAY9C,IAAI,iBAAiBjF,EAAE2C,SAASvC,EAAEwH,eAAenC,EAAEoC,OAAOzH,EAAEwH,eAAe5H,EAAE2C,QAAQ,MAAM,GAAG,SAAS3C,EAAE,YAAYiF,GAAG,CAAC,IAAIxE,EAAEL,EAAEwH,eAAerF,SAASnC,EAAEwH,eAAerF,SAAS,SAAS1B,GAAGI,EAAER,IAAIA,EAAEI,EAAET,EAAEsH,KAAKtH,EAAEuH,WAAW1C,GAAG,EAAEtE,EAAEC,MAAMR,EAAEsH,KAAKtH,EAAEwH,eAAe,MAAM3G,EAAEV,EAAEgC,WAAWhC,EAAEgC,UAAU,CAAC,SAAS0C,IAAIvE,EAAEwH,OAAO,EAAE,GAAGrH,GAAG,CAAC,CAAC,CAAC,SAASoE,EAAEpE,GAAGqG,KAAKiB,QAAQ,KAAKjB,KAAKkB,WAAU,EAAGlB,KAAKmB,YAAW,EAAGnB,KAAKoB,SAAQ,EAAGpB,KAAKqB,OAAO,KAAKrB,KAAKsB,WAAW,EAAEtB,KAAKuB,aAAa,GAAGvB,KAAKwB,UAAU,EAAExB,KAAKyB,OAAO,EAAEzB,KAAK0B,WAAW,KAAK1B,KAAK2B,cAAa,EAAG3B,KAAK4B,iBAAiB,CAAC3D,KAAK,GAAG4D,OAAO,GAAG1D,KAAK,CAAC,GAAG,SAASxE,GAAG,IAAIC,EAAEkI,EAAEnI,GAAGC,EAAEmI,UAAUC,SAASpI,EAAEmI,WAAWpI,EAAEsB,MAAMtB,EAAEwB,QAAQvB,EAAEmI,UAAU,MAAM/B,KAAKiB,QAAQ,IAAIpH,EAAED,IAAIoG,KAAKiB,QAAQgB,SAASjC,MAAMkC,QAAQtI,CAAC,EAAEuI,KAAKnC,KAAKrG,GAAGqG,KAAKoC,WAAW,SAASzI,EAAEC,GAAG,GAAGoG,KAAK2B,cAAc5H,EAAEiG,KAAKkC,QAAQG,kBAAkB,CAAC,IAAIxI,EAAEmG,KAAKkC,QAAQG,iBAAiB1I,QAAG,IAASE,IAAIF,EAAEE,EAAE,CAACmG,KAAK2B,cAAa,EAAG3B,KAAKoB,SAAQ,EAAG,IAAIhH,EAAE4F,KAAKuB,aAAa5H,EAAEqG,KAAKuB,aAAa,GAAG,IAAIrI,EAAE8G,KAAKiB,QAAQvH,MAAMU,EAAE4F,KAAKsB,YAAYtB,KAAKkB,WAAW,IAAIlB,KAAKiB,QAAQqB,WAAWtC,KAAKiB,QAAQsB,UAAU,CAAC,IAAIzJ,EAAEI,EAAEiF,KAAKqE,OAAOxC,KAAKkB,YAAYlB,KAAKuB,aAAanH,EAAEqI,UAAU3J,EAAEkH,KAAKsB,YAAYtB,KAAKsB,WAAWxI,GAAGI,GAAGA,EAAE+E,OAAO+B,KAAKwB,WAAWtI,EAAE+E,KAAKjB,QAAQ,IAAIzD,EAAEyG,KAAKkB,WAAWlB,KAAKkC,QAAQQ,SAAS1C,KAAKwB,WAAWxB,KAAKkC,QAAQQ,QAAQ,GAAGrJ,EAAEN,EAAEK,YAAY,CAACuJ,QAAQzJ,EAAEwC,SAASjC,EAAEmJ,UAAUC,SAAStJ,SAAS,GAAGQ,EAAEiG,KAAKkC,QAAQ/G,SAASvB,EAAE,CAAC,GAAGoG,KAAKkC,QAAQ/G,MAAMjC,EAAE8G,KAAKiB,SAASjB,KAAKiB,QAAQqB,UAAUtC,KAAKiB,QAAQsB,UAAU,YAAYvC,KAAKoB,SAAQ,GAAIlI,OAAE,EAAO8G,KAAK4B,sBAAiB,CAAM,CAAC,OAAO5B,KAAKkC,QAAQjH,MAAM+E,KAAKkC,QAAQ/G,QAAQ6E,KAAK4B,iBAAiB3D,KAAK+B,KAAK4B,iBAAiB3D,KAAK6E,OAAO5J,EAAE+E,MAAM+B,KAAK4B,iBAAiBC,OAAO7B,KAAK4B,iBAAiBC,OAAOiB,OAAO5J,EAAE2I,QAAQ7B,KAAK4B,iBAAiBzD,KAAKjF,EAAEiF,MAAM6B,KAAKmB,aAAa5H,IAAIQ,EAAEiG,KAAKkC,QAAQ7G,WAAWnC,GAAGA,EAAEiF,KAAKoE,UAAUvC,KAAKkC,QAAQ7G,SAAS2E,KAAK4B,iBAAiB5B,KAAKqB,QAAQrB,KAAKmB,YAAW,GAAI5H,GAAGL,GAAGA,EAAEiF,KAAKmE,QAAQtC,KAAK0B,aAAaxI,CAAC,CAAC8G,KAAKoB,SAAQ,CAAE,EAAEpB,KAAK+C,WAAW,SAASpJ,GAAGI,EAAEiG,KAAKkC,QAAQ3G,OAAOyE,KAAKkC,QAAQ3G,MAAM5B,GAAGN,GAAG2G,KAAKkC,QAAQ3G,OAAOxC,EAAEK,YAAY,CAACsC,SAASjC,EAAEmJ,UAAUrH,MAAM5B,EAAEkJ,UAAS,GAAI,CAAC,CAAC,SAAS9G,EAAEpC,GAAG,IAAIS,GAAGT,EAAEA,GAAG,CAAC,GAAGoI,YAAYpI,EAAEoI,UAAUtI,EAAE4F,iBAAiBtB,EAAEoE,KAAKnC,KAAKrG,GAAGqG,KAAK0B,WAAWxI,EAAE,WAAW8G,KAAKgD,aAAahD,KAAKiD,cAAc,EAAE,WAAWjD,KAAKgD,YAAY,EAAEhD,KAAKxD,OAAO,SAAS7C,GAAGqG,KAAKqB,OAAO1H,EAAEqG,KAAK0B,YAAY,EAAE1B,KAAKgD,WAAW,WAAW,GAAGhD,KAAKkB,UAAUlB,KAAKiD,mBAAmB,CAAC,GAAG7I,EAAE,IAAI8I,eAAelD,KAAKkC,QAAQiB,kBAAkB/I,EAAE+I,gBAAgBnD,KAAKkC,QAAQiB,iBAAiBjK,IAAIkB,EAAEgJ,OAAOhF,EAAE4B,KAAKiD,aAAajD,MAAM5F,EAAEiJ,QAAQjF,EAAE4B,KAAKsD,YAAYtD,OAAO5F,EAAEmJ,KAAKvD,KAAKkC,QAAQsB,oBAAoB,OAAO,MAAMxD,KAAKqB,QAAQnI,GAAG8G,KAAKkC,QAAQuB,uBAAuB,CAAC,IAAI9J,EAAEqG,KAAKkC,QAAQuB,uBAAuB,IAAI,IAAI7J,KAAKD,EAAES,EAAEsJ,iBAAiB9J,EAAED,EAAEC,GAAG,CAAC,GAAGoG,KAAKkC,QAAQH,UAAU,CAAC,IAAIlI,EAAEmG,KAAKyB,OAAOzB,KAAKkC,QAAQH,UAAU,EAAE3H,EAAEsJ,iBAAiB,QAAQ,SAAS1D,KAAKyB,OAAO,IAAI5H,EAAE,CAAC,IAAIO,EAAEuJ,KAAK3D,KAAKkC,QAAQsB,oBAAoB,CAAC,MAAM7J,GAAGqG,KAAKsD,YAAY3J,EAAEiK,QAAQ,CAAC1K,GAAG,IAAIkB,EAAEyJ,QAAQ7D,KAAKsD,aAAa,CAAC,EAAEtD,KAAKiD,aAAa,WAAW,IAAI7I,EAAE0J,aAAa1J,EAAEyJ,OAAO,KAAK,KAAKzJ,EAAEyJ,OAAO7D,KAAKsD,eAAetD,KAAKyB,QAAQzB,KAAKkC,QAAQH,UAAU/B,KAAKkC,QAAQH,UAAU3H,EAAE2J,aAAa/G,OAAOgD,KAAKkB,WAAWlB,KAAKkC,QAAQH,WAAW/B,KAAKyB,QAAQ,SAAS9H,GAAG,IAAIC,EAAED,EAAEqK,kBAAkB,iBAAiB,OAAG,OAAOpK,GAAS,EAASoI,SAASpI,EAAE6I,UAAU7I,EAAEqK,YAAY,KAAK,GAAG,CAA9H,CAAgI7J,GAAG4F,KAAKoC,WAAWhI,EAAE2J,eAAe,EAAE/D,KAAKsD,YAAY,SAAS3J,GAAG,IAAIC,EAAEQ,EAAE8J,YAAYvK,EAAEqG,KAAK+C,WAAW,IAAItF,MAAM7D,GAAG,CAAC,CAAC,SAAS2C,EAAE5C,GAAG,IAAIS,EAAElB,GAAGS,EAAEA,GAAG,CAAC,GAAGoI,YAAYpI,EAAEoI,UAAUtI,EAAE2F,gBAAgBrB,EAAEoE,KAAKnC,KAAKrG,GAAG,IAAIb,EAAE,oBAAoBwH,WAAWN,KAAKxD,OAAO,SAAS7C,GAAGqG,KAAKqB,OAAO1H,EAAET,EAAES,EAAEkC,OAAOlC,EAAEwK,aAAaxK,EAAEyK,SAAStL,IAAIsB,EAAE,IAAIkG,YAAY8C,OAAOhF,EAAE4B,KAAKiD,aAAajD,MAAM5F,EAAEiJ,QAAQjF,EAAE4B,KAAKsD,YAAYtD,OAAO5F,EAAE,IAAIiK,eAAerE,KAAK0B,YAAY,EAAE1B,KAAK0B,WAAW,WAAW1B,KAAKkB,WAAWlB,KAAKkC,QAAQQ,WAAW1C,KAAKwB,UAAUxB,KAAKkC,QAAQQ,UAAU1C,KAAKgD,YAAY,EAAEhD,KAAKgD,WAAW,WAAW,IAAIrJ,EAAEqG,KAAKqB,OAAO,GAAGrB,KAAKkC,QAAQH,UAAU,CAAC,IAAInI,EAAE0K,KAAKC,IAAIvE,KAAKyB,OAAOzB,KAAKkC,QAAQH,UAAU/B,KAAKqB,OAAOmD,MAAM7K,EAAET,EAAEiJ,KAAKxI,EAAEqG,KAAKyB,OAAO7H,EAAE,CAAC,IAAIC,EAAEO,EAAEqK,WAAW9K,EAAEqG,KAAKkC,QAAQwC,UAAU5L,GAAGkH,KAAKiD,aAAa,CAAC0B,OAAO,CAACC,OAAO/K,IAAI,EAAEmG,KAAKiD,aAAa,SAAStJ,GAAGqG,KAAKyB,QAAQzB,KAAKkC,QAAQH,UAAU/B,KAAKkB,WAAWlB,KAAKkC,QAAQH,WAAW/B,KAAKyB,QAAQzB,KAAKqB,OAAOmD,KAAKxE,KAAKoC,WAAWzI,EAAEgL,OAAOC,OAAO,EAAE5E,KAAKsD,YAAY,WAAWtD,KAAK+C,WAAW3I,EAAEmB,MAAM,CAAC,CAAC,SAASS,EAAErC,GAAG,IAAIE,EAAEkE,EAAEoE,KAAKnC,KAAKrG,EAAEA,GAAG,CAAC,GAAGqG,KAAKxD,OAAO,SAAS7C,GAAG,OAAOE,EAAEF,EAAEqG,KAAK0B,YAAY,EAAE1B,KAAK0B,WAAW,WAAW,IAAI1B,KAAKkB,UAAU,CAAC,IAAIvH,EAAEC,EAAEoG,KAAKkC,QAAQH,UAAU,OAAOnI,GAAGD,EAAEE,EAAE4I,UAAU,EAAE7I,GAAGC,EAAEA,EAAE4I,UAAU7I,KAAKD,EAAEE,EAAEA,EAAE,IAAImG,KAAKkB,WAAWrH,EAAEmG,KAAKoC,WAAWzI,EAAE,CAAC,CAAC,CAAC,SAASyC,EAAEzC,GAAGoE,EAAEoE,KAAKnC,KAAKrG,EAAEA,GAAG,CAAC,GAAG,IAAIC,EAAE,GAAGC,GAAE,EAAGO,GAAE,EAAG4F,KAAK6E,MAAM,WAAW9G,EAAE+G,UAAUD,MAAME,MAAM/E,KAAKgF,WAAWhF,KAAKqB,OAAOwD,OAAO,EAAE7E,KAAKiF,OAAO,WAAWlH,EAAE+G,UAAUG,OAAOF,MAAM/E,KAAKgF,WAAWhF,KAAKqB,OAAO4D,QAAQ,EAAEjF,KAAKxD,OAAO,SAAS7C,GAAGqG,KAAKqB,OAAO1H,EAAEqG,KAAKqB,OAAOlF,GAAG,OAAO6D,KAAKkF,aAAalF,KAAKqB,OAAOlF,GAAG,MAAM6D,KAAKmF,YAAYnF,KAAKqB,OAAOlF,GAAG,QAAQ6D,KAAKoF,aAAa,EAAEpF,KAAKqF,iBAAiB,WAAWjL,GAAG,IAAIR,EAAEoD,SAASgD,KAAKkB,WAAU,EAAG,EAAElB,KAAK0B,WAAW,WAAW1B,KAAKqF,mBAAmBzL,EAAEoD,OAAOgD,KAAKoC,WAAWxI,EAAE0L,SAASzL,GAAE,CAAE,EAAEmG,KAAKkF,YAAY9G,GAAE,SAASzE,GAAG,IAAIC,EAAE4E,KAAK,iBAAiB7E,EAAEA,EAAEA,EAAEY,SAASyF,KAAKkC,QAAQwC,WAAW7K,IAAIA,GAAE,EAAGmG,KAAKqF,mBAAmBrF,KAAKoC,WAAWxI,EAAE0L,SAAS,CAAC,MAAM3L,GAAGqG,KAAKoF,aAAazL,EAAE,CAAC,GAAEqG,MAAMA,KAAKoF,aAAahH,GAAE,SAASzE,GAAGqG,KAAKuF,iBAAiBvF,KAAK+C,WAAWpJ,EAAE,GAAEqG,MAAMA,KAAKmF,WAAW/G,GAAE,WAAW4B,KAAKuF,iBAAiBnL,GAAE,EAAG4F,KAAKkF,YAAY,GAAG,GAAElF,MAAMA,KAAKuF,eAAenH,GAAE,WAAW4B,KAAKqB,OAAOmE,eAAe,OAAOxF,KAAKkF,aAAalF,KAAKqB,OAAOmE,eAAe,MAAMxF,KAAKmF,YAAYnF,KAAKqB,OAAOmE,eAAe,QAAQxF,KAAKoF,aAAa,GAAEpF,KAAK,CAAC,SAASnG,EAAE6C,GAAG,IAAInD,EAAEF,EAAEG,EAAEY,EAAEkK,KAAKmB,IAAI,EAAE,IAAIvM,GAAGkB,EAAEtB,EAAE,mDAAmDiF,EAAE,qNAAqNnE,EAAEoG,KAAKnG,EAAE,EAAEd,EAAE,EAAEwF,GAAE,EAAG5E,GAAE,EAAGoC,EAAE,GAAGQ,EAAE,CAAC0B,KAAK,GAAG4D,OAAO,GAAG1D,KAAK,CAAC,GAAG,GAAGpE,EAAE2C,EAAEzB,MAAM,CAAC,IAAIe,EAAEU,EAAEzB,KAAKyB,EAAEzB,KAAK,SAAStB,GAAG,GAAG4C,EAAE5C,EAAEmB,IAAIsB,QAAQ,CAAC,GAAGA,IAAI,IAAIG,EAAE0B,KAAKjB,OAAO,OAAOnD,GAAGF,EAAEsE,KAAKjB,OAAON,EAAEgG,SAAS7I,EAAE6C,EAAEgG,QAAQrJ,EAAEqM,SAASnJ,EAAE0B,KAAK1B,EAAE0B,KAAK,GAAGjC,EAAEO,EAAE3C,GAAG,CAAC,CAAC,CAAC,SAAS+C,EAAEhD,GAAG,MAAM,WAAW+C,EAAEU,eAAe,KAAKzD,EAAE0E,KAAK,IAAIC,OAAO,IAAI3E,EAAEqD,QAAQ,IAAIrD,EAAE,GAAGqD,MAAM,CAAC,SAASZ,IAAI,OAAOG,GAAG/C,IAAImM,EAAE,YAAY,wBAAwB,6DAA6DlM,EAAE6F,iBAAiB,KAAK9F,GAAE,GAAIkD,EAAEU,iBAAiBb,EAAE0B,KAAK1B,EAAE0B,KAAKnB,QAAO,SAASnD,GAAG,OAAOgD,EAAEhD,EAAE,KAAImB,KAAK,WAAW,GAAIyB,EAAoF,GAAGW,MAAMC,QAAQZ,EAAE0B,KAAK,IAAI,CAAC,IAAI,IAAIrE,EAAE,EAAEkB,KAAKlB,EAAE2C,EAAE0B,KAAKjB,OAAOpD,IAAI2C,EAAE0B,KAAKrE,GAAGgM,QAAQjM,GAAG4C,EAAE0B,KAAK+C,OAAO,EAAE,EAAE,MAAMzE,EAAE0B,KAAK2H,QAAQjM,GAAzM,SAASA,EAAEA,EAAEC,GAAGG,EAAE2C,EAAEmJ,mBAAmBlM,EAAE+C,EAAEmJ,gBAAgBlM,EAAEC,IAAImC,EAAEyC,KAAK7E,EAAE,CAAiI,CAAnO,GAAuO,WAAW,IAAI4C,IAAIG,EAAEa,SAASb,EAAE5C,gBAAgB4C,EAAEzC,UAAU,OAAOsC,EAAE,SAAS5C,EAAEA,EAAEC,GAAG,IAAIC,EAAEO,EAAEsC,EAAEa,OAAO,CAAC,EAAE,GAAG,IAAI1D,EAAE,EAAEA,EAAEF,EAAEqD,OAAOnD,IAAI,CAAC,IAAIX,EAAEW,EAAEf,EAAEa,EAAEE,GAAG6C,EAAEa,SAASrE,EAAEW,GAAGkC,EAAEiB,OAAO,iBAAiBjB,EAAElC,IAAI6C,EAAEzC,YAAYnB,EAAE4D,EAAEzC,UAAUnB,EAAEI,IAAIJ,EAAEsF,EAAElF,EAAEJ,GAAG,mBAAmBI,GAAGkB,EAAElB,GAAGkB,EAAElB,IAAI,GAAGkB,EAAElB,GAAGsF,KAAK1F,IAAIsB,EAAElB,GAAGJ,CAAC,CAAC,OAAO4D,EAAEa,SAAS1D,EAAEkC,EAAEiB,OAAO2I,EAAE,gBAAgB,gBAAgB,6BAA6B5J,EAAEiB,OAAO,sBAAsBnD,EAAEd,EAAEa,GAAGC,EAAEkC,EAAEiB,QAAQ2I,EAAE,gBAAgB,eAAe,4BAA4B5J,EAAEiB,OAAO,sBAAsBnD,EAAEd,EAAEa,IAAIQ,CAAC,CAAC,IAAIR,EAAE,EAAyI,OAAtI2C,EAAE0B,KAAKjB,QAAQE,MAAMC,QAAQZ,EAAE0B,KAAK,KAAK1B,EAAE0B,KAAK1B,EAAE0B,KAAK6H,IAAInM,GAAGC,EAAE2C,EAAE0B,KAAKjB,QAAQT,EAAE0B,KAAKtE,EAAE4C,EAAE0B,KAAK,GAAGvB,EAAEa,QAAQhB,EAAE4B,OAAO5B,EAAE4B,KAAKD,OAAOnC,GAAUhD,GAAGa,EAAE2C,CAAC,CAAvrB,EAA0rB,CAAC,SAASzB,IAAI,OAAO4B,EAAEa,QAAQ,IAAIxB,EAAEiB,MAAM,CAAC,SAASoB,EAAEzE,EAAEC,GAAG,OAAOC,EAAEF,EAAE+C,EAAE1C,4BAAuB,IAAS0C,EAAE5C,cAAcD,KAAK6C,EAAE5C,cAAcD,GAAG6C,EAAE1C,sBAAsBH,KAAI,KAAM6C,EAAE5C,cAAcD,IAAI6C,EAAE5C,eAAe,SAASF,GAAG,SAASA,GAAG,UAAUA,GAAG,UAAUA,IAAI,SAASD,GAAG,GAAGb,EAAE8F,KAAKjF,GAAG,CAAC,IAAIC,EAAEmM,WAAWpM,GAAG,GAAGT,EAAEU,GAAGA,EAAEQ,EAAE,OAAM,CAAE,CAAC,OAAM,CAAE,CAA3E,CAA6ER,GAAGmM,WAAWnM,GAAGmE,EAAEa,KAAKhF,GAAG,IAAI8E,KAAK9E,GAAG,KAAKA,EAAE,KAAKA,GAAGA,EAAE,IAAIC,CAAC,CAAC,SAAS8L,EAAEhM,EAAEC,EAAEC,EAAEO,GAAG,IAAIlB,EAAE,CAACyB,KAAKhB,EAAEqM,KAAKpM,EAAEgK,QAAQ/J,QAAG,IAASO,IAAIlB,EAAE+M,IAAI7L,GAAGmC,EAAEsF,OAAOrD,KAAKtF,EAAE,CAAC8G,KAAKtG,MAAM,SAASC,EAAEC,EAAEC,GAAG,IAAIO,EAAEsC,EAAEY,WAAW,IAAI,GAAGZ,EAAEW,UAAUX,EAAEW,QAAQ,SAAS1D,EAAEC,GAAGD,EAAEA,EAAE8I,UAAU,EAAE,SAAS,IAAI5I,EAAE,IAAI+D,OAAOC,EAAEjE,GAAG,UAAUiE,EAAEjE,GAAG,MAAMQ,GAAGT,EAAEA,EAAEkF,QAAQhF,EAAE,KAAKqM,MAAM,MAAMhN,EAAES,EAAEuM,MAAM,MAAMpN,EAAE,EAAEI,EAAE8D,QAAQ9D,EAAE,GAAG8D,OAAO5C,EAAE,GAAG4C,OAAO,GAAG,IAAI5C,EAAE4C,QAAQlE,EAAE,MAAM,KAAK,IAAI,IAAIS,EAAE,EAAEF,EAAE,EAAEA,EAAEe,EAAE4C,OAAO3D,IAAI,OAAOe,EAAEf,GAAG,IAAIE,IAAI,OAAOA,GAAGa,EAAE4C,OAAO,EAAE,OAAO,IAAI,CAA3R,CAA6RrD,EAAES,IAAIZ,GAAE,EAAGkD,EAAEE,UAAU7C,EAAE2C,EAAEE,aAAaF,EAAEE,UAAUF,EAAEE,UAAUjD,GAAG4C,EAAE4B,KAAKvB,UAAUF,EAAEE,eAAe,CAAC,IAAI1D,EAAE,SAASS,EAAEC,EAAEC,EAAEO,EAAElB,GAAG,IAAIJ,EAAES,EAAEF,EAAEG,EAAEN,EAAEA,GAAG,CAAC,IAAI,KAAK,IAAI,IAAIO,EAAEsF,WAAWtF,EAAEyF,UAAU,IAAI,IAAInB,EAAE,EAAEA,EAAE7E,EAAE8D,OAAOe,IAAI,CAAC,IAAIhF,EAAEG,EAAE6E,GAAGQ,EAAE,EAAExC,EAAE,EAAEQ,EAAE,EAAElD,OAAE,EAAO,IAAI,IAAI2C,EAAE,IAAIwD,EAAE,CAAC2G,SAAS/L,EAAEwC,UAAU7D,EAAEsE,QAAQzD,EAAE8I,QAAQ,KAAKhJ,MAAMC,GAAGyC,EAAE,EAAEA,EAAEJ,EAAEiC,KAAKjB,OAAOZ,IAAI,GAAGvC,GAAG8C,EAAEX,EAAEiC,KAAK7B,IAAIG,QAAQ,CAAC,IAAIzB,EAAEkB,EAAEiC,KAAK7B,GAAGY,OAAOjB,GAAGjB,OAAE,IAASzB,EAAE,EAAEyB,IAAIyD,GAAG+F,KAAK8B,IAAItL,EAAEzB,GAAGA,EAAEyB,GAAGzB,EAAEyB,CAAC,CAAC,EAAEkB,EAAEiC,KAAKjB,SAASjB,GAAGC,EAAEiC,KAAKjB,OAAOT,SAAI,IAAShD,GAAGgF,GAAGhF,UAAK,IAASC,GAAGA,EAAEuC,IAAI,KAAKA,IAAIxC,EAAEgF,EAAEzF,EAAEC,EAAES,EAAEuC,EAAE,CAAC,MAAM,CAACsK,cAAc3J,EAAEE,UAAU9D,GAAGwN,cAAcxN,EAAE,CAAte,CAAwea,EAAE+C,EAAEW,QAAQX,EAAEU,eAAeV,EAAEyJ,SAASzJ,EAAE6J,mBAAmBrN,EAAEmN,WAAW3J,EAAEE,UAAU1D,EAAEoN,eAAe9M,GAAE,EAAGkD,EAAEE,UAAUnD,EAAE6F,kBAAkB/C,EAAE4B,KAAKvB,UAAUF,EAAEE,SAAS,CAAC,IAAI9D,EAAEgJ,EAAEpF,GAAG,OAAOA,EAAEgG,SAAShG,EAAEa,QAAQzE,EAAE4J,UAAUnJ,EAAEI,EAAEN,EAAE,IAAImG,EAAE1G,GAAGyD,EAAElD,EAAEK,MAAMH,EAAEK,EAAEC,GAAGuC,IAAImC,EAAE,CAACJ,KAAK,CAACmE,QAAO,IAAK/F,GAAG,CAAC4B,KAAK,CAACmE,QAAO,GAAI,EAAEtC,KAAKsC,OAAO,WAAW,OAAO/D,CAAC,EAAEyB,KAAK6E,MAAM,WAAWtG,GAAE,EAAGlF,EAAEqM,QAAQnM,EAAEQ,EAAE2C,EAAEvB,OAAO,GAAG5B,EAAEkJ,UAAUpJ,EAAEmN,eAAe,EAAExG,KAAKiF,OAAO,WAAWrL,EAAEqI,SAASb,SAAS7C,GAAE,EAAG3E,EAAEqI,SAASG,WAAW7I,GAAE,IAAKkN,WAAW7M,EAAEqL,OAAO,EAAE,EAAEjF,KAAKuC,QAAQ,WAAW,OAAO5I,CAAC,EAAEqG,KAAK0F,MAAM,WAAW/L,GAAE,EAAGN,EAAEqM,QAAQnJ,EAAE4B,KAAKoE,SAAQ,EAAGxI,EAAE2C,EAAErB,WAAWqB,EAAErB,SAASkB,GAAGhD,EAAE,EAAE,CAAC,CAAC,SAASsE,EAAElE,GAAG,OAAOA,EAAEkF,QAAQ,sBAAsB,OAAO,CAAC,SAASW,EAAEkH,GAAG,IAAIC,EAAEC,GAAGF,EAAEA,GAAG,CAAC,GAAG9J,UAAUiK,EAAEH,EAAErJ,QAAQyJ,EAAEJ,EAAEP,SAASY,EAAEL,EAAEzL,KAAK+L,EAAEN,EAAEhE,QAAQuE,EAAEP,EAAEQ,SAASC,EAAER,OAAE,IAASD,EAAEpJ,WAAW,OAAOoJ,EAAEpJ,UAAU,IAAIoJ,EAAEpJ,UAAU,QAAG,IAASoJ,EAAEhJ,aAAayJ,EAAET,EAAEhJ,aAAa,iBAAiBkJ,IAAI,EAAEnN,EAAEoD,eAAeE,QAAQ6J,MAAMA,EAAE,KAAKE,IAAIF,EAAE,MAAM,IAAInJ,MAAM,wCAAuC,IAAKqJ,EAAEA,EAAE,KAAK,iBAAiBA,IAAI,EAAErN,EAAEoD,eAAeE,QAAQ+J,MAAMA,GAAE,GAAI,OAAOD,GAAG,OAAOA,GAAG,SAASA,IAAIA,EAAE,MAAM,IAAIO,EAAE,EAAEC,GAAE,EAAGrH,KAAKtG,MAAM,SAASU,EAAER,EAAEC,GAAG,GAAG,iBAAiBO,EAAE,MAAM,IAAIqD,MAAM,0BAA0B,IAAIvE,EAAEkB,EAAE4C,OAAOrD,EAAEiN,EAAE5J,OAAOlE,EAAE+N,EAAE7J,OAAOzD,EAAEuN,EAAE9J,OAAO3D,EAAEU,EAAEgN,GAAGvN,EAAE,GAAGuE,EAAE,GAAGhF,EAAE,GAAGwF,EAAE6I,EAAE,EAAE,IAAIhN,EAAE,OAAOkN,IAAI,GAAGZ,EAAEnJ,SAAS3D,EAAE,CAAC,IAAImC,EAAE3B,EAAE8L,MAAMW,GAAG,GAAGX,MAAMU,GAAGrK,EAAE,GAAGP,EAAE,CAAC,EAAEI,GAAE,EAAG,IAAI,IAAItB,KAAKiB,EAAE,CAAC,IAAIW,EAAEX,EAAEjB,GAAGf,EAAE2M,EAAEb,mBAAmBnJ,EAAEgK,EAAEb,gBAAgBnJ,EAAE5B,IAAI,IAAI6B,EAAED,EAAE0B,EAAEpC,EAAEU,IAAI,EAAE,IAAI,EAAE0B,IAAIhC,GAAE,EAAGO,EAAED,EAAE,IAAI0B,GAAGpC,EAAEU,GAAG0B,EAAE,EAAE7B,EAAEgL,SAAS5K,IAAIA,EAAEA,EAAE,IAAIyB,EAAE7B,EAAEiC,KAAK7B,EAAE,CAAC,GAAGP,EAAE,CAAC,IAAIuJ,EAAEvL,EAAE8L,MAAMW,GAAGlB,EAAE,GAAGpJ,EAAE8B,KAAKuI,GAAGxM,EAAEuL,EAAEtH,KAAKwI,EAAE,CAAC,CAAC,GAAGI,IAAG,IAAKA,IAAI,IAAI7M,EAAE2C,QAAQ4J,GAAG,CAAC,IAAI,IAAIlN,EAAEW,EAAE8L,MAAMW,GAAGrH,EAAE,EAAEA,EAAE/F,EAAEuD,OAAOwC,IAAI,CAAC,GAAGzG,EAAEU,EAAE+F,GAAG4H,GAAGrO,EAAEiE,OAAOwC,IAAI/F,EAAEuD,OAAO,EAAEoK,GAAGP,EAAE7J,YAAY,GAAGnD,EAAE,OAAOyN,IAAI,IAAIR,GAAG/N,EAAE0J,UAAU,EAAElJ,KAAKuN,EAAE,CAAC,GAAGzN,GAAG,GAAGG,EAAE,GAAGgO,EAAEzO,EAAEmN,MAAMU,IAAIa,IAAIJ,EAAE,OAAOC,SAASE,EAAEzO,EAAEmN,MAAMU,IAAI,GAAGI,GAAGA,GAAGxH,EAAE,OAAOhG,EAAEA,EAAEqC,MAAM,EAAEmL,GAAGM,GAAE,EAAG,CAAC,CAAC,OAAOA,GAAG,CAAC,IAAI,IAAIxF,EAAE1H,EAAE2C,QAAQ6J,EAAEQ,GAAGM,EAAEtN,EAAE2C,QAAQ8J,EAAEO,GAAGO,EAAE,IAAI/J,OAAOC,EAAEsJ,GAAGtJ,EAAE8I,GAAG,KAAKiB,EAAExN,EAAE2C,QAAQ4J,EAAES,KAAK,GAAGhN,EAAEgN,KAAKT,EAAE,GAAGG,GAAG,IAAI/N,EAAEiE,QAAQ5C,EAAEqI,UAAU2E,EAAEA,EAAE7N,KAAKuN,EAAE,CAAC,IAAI,IAAIY,EAAE,OAAOJ,IAAIF,EAAEM,EAAE5O,EAAE4O,EAAEtN,EAAE2C,QAAQ8J,EAAEO,GAAGtF,EAAE1H,EAAE2C,QAAQ6J,EAAEQ,EAAE,MAAM,IAAI,IAAItF,IAAIA,EAAE4F,IAAI,IAAIA,GAAG3O,EAAEyF,KAAKpE,EAAEqI,UAAU2E,EAAEtF,IAAIsF,EAAEtF,EAAEnI,EAAEmI,EAAE1H,EAAE2C,QAAQ6J,EAAEQ,OAAO,CAAC,IAAI,IAAIM,EAAE,MAAM,GAAG3O,EAAEyF,KAAKpE,EAAEqI,UAAU2E,EAAEM,IAAIG,EAAEH,EAAE5O,GAAGO,IAAIoO,IAAIJ,GAAG,OAAOC,IAAI,GAAGN,GAAGxN,EAAEwD,QAAQgK,EAAE,OAAOM,GAAE,EAAG,MAAM,IAAIM,EAAER,EAAEA,MAAM,CAAC,IAAI,KAAKQ,EAAExN,EAAE2C,QAAQ4J,EAAEiB,EAAE,IAAI,OAAO/N,GAAGkE,EAAES,KAAK,CAAC7D,KAAK,SAASqL,KAAK,gBAAgBpC,QAAQ,4BAA4BqC,IAAIzM,EAAEwD,OAAO8K,MAAMV,IAAIW,IAAI,GAAGH,IAAI1O,EAAE,EAAE,OAAO6O,EAAE3N,EAAEqI,UAAU2E,EAAEQ,GAAG/I,QAAQ8I,EAAEhB,IAAI,GAAGA,IAAIQ,GAAG/M,EAAEwN,EAAE,KAAKT,GAAG,GAAGR,IAAIQ,GAAG,IAAIS,GAAGxN,EAAEwN,EAAE,KAAKT,EAAE,EAAE,IAAIrF,GAAGA,EAAE8F,EAAE,IAAI9F,EAAE1H,EAAE2C,QAAQ6J,EAAEgB,EAAE,KAAK,IAAIF,GAAGA,EAAEE,EAAE,IAAIF,EAAEtN,EAAE2C,QAAQ8J,EAAEe,EAAE,IAAI,IAAII,EAAEC,GAAG,IAAIP,EAAE5F,EAAEwC,KAAKC,IAAIzC,EAAE4F,IAAI,GAAGtN,EAAE8N,OAAON,EAAE,EAAEI,EAAErO,KAAKiN,EAAE,CAAC7N,EAAEyF,KAAKpE,EAAEqI,UAAU2E,EAAEQ,GAAG/I,QAAQ8I,EAAEhB,IAAIvM,EAAEgN,EAAEQ,EAAE,EAAEI,EAAErO,KAAKgN,IAAIiB,EAAExN,EAAE2C,QAAQ4J,EAAES,IAAItF,EAAE1H,EAAE2C,QAAQ6J,EAAEQ,GAAGM,EAAEtN,EAAE2C,QAAQ8J,EAAEO,GAAG,KAAK,CAAC,IAAIe,EAAEF,EAAEP,GAAG,GAAGtN,EAAEqI,UAAUmF,EAAE,EAAEO,EAAEP,EAAE,EAAEO,EAAErP,KAAK+N,EAAE,CAAC,GAAG9N,EAAEyF,KAAKpE,EAAEqI,UAAU2E,EAAEQ,GAAG/I,QAAQ8I,EAAEhB,IAAIkB,EAAED,EAAE,EAAEO,EAAErP,GAAGgJ,EAAE1H,EAAE2C,QAAQ6J,EAAEQ,GAAGQ,EAAExN,EAAE2C,QAAQ4J,EAAES,GAAG/N,IAAIoO,IAAIJ,GAAG,OAAOC,IAAI,GAAGN,GAAGxN,EAAEwD,QAAQgK,EAAE,OAAOM,GAAE,GAAI,KAAK,CAACvJ,EAAES,KAAK,CAAC7D,KAAK,SAASqL,KAAK,gBAAgBpC,QAAQ,8CAA8CqC,IAAIzM,EAAEwD,OAAO8K,MAAMV,IAAIQ,GAAG,OAAOA,GAAG,CAAC,OAAOG,IAAI,SAASP,EAAE7N,GAAGH,EAAEgF,KAAK7E,GAAG4E,EAAE6I,CAAC,CAAC,SAASa,EAAEtO,GAAG,IAAIC,EAAE,EAAE,IAAI,IAAID,EAAE,CAAC,IAAIE,EAAEO,EAAEqI,UAAUmF,EAAE,EAAEjO,GAAGE,GAAG,KAAKA,EAAEyE,SAAS1E,EAAEC,EAAEmD,OAAO,CAAC,OAAOpD,CAAC,CAAC,SAASmO,EAAEpO,GAAG,OAAOE,SAAI,IAASF,IAAIA,EAAES,EAAEqI,UAAU2E,IAAIrO,EAAEyF,KAAK7E,GAAGyN,EAAElO,EAAEsO,EAAEzO,GAAGM,GAAGoO,KAAKH,GAAG,CAAC,SAASO,EAAElO,GAAGyN,EAAEzN,EAAE6N,EAAEzO,GAAGA,EAAE,GAAG2O,EAAEtN,EAAE2C,QAAQ8J,EAAEO,EAAE,CAAC,SAASE,EAAE3N,GAAG,MAAM,CAACsE,KAAKzE,EAAEqI,OAAO9D,EAAEI,KAAK,CAACvB,UAAUgK,EAAEwB,UAAUvB,EAAEtE,QAAQ8E,EAAEgB,YAAY1O,EAAE6I,OAAOjE,GAAG3E,GAAG,IAAI,CAAC,SAAS6N,IAAIV,EAAEO,KAAK9N,EAAE,GAAGuE,EAAE,EAAE,CAAC,EAAEiC,KAAK0F,MAAM,WAAW2B,GAAE,CAAE,EAAErH,KAAKwG,aAAa,WAAW,OAAOY,CAAC,CAAC,CAAC,SAAStM,EAAEnB,GAAG,IAAIC,EAAED,EAAEsE,KAAKpE,EAAEN,EAAEK,EAAE8B,UAAUtB,GAAE,EAAG,GAAGR,EAAE2B,MAAM1B,EAAEyB,UAAU1B,EAAE2B,MAAM3B,EAAE4G,WAAW,GAAG5G,EAAE+I,SAAS/I,EAAE+I,QAAQ1E,KAAK,CAAC,IAAI/E,EAAE,CAACwM,MAAM,WAAWtL,GAAE,EAAGsC,EAAE9C,EAAE8B,SAAS,CAACuC,KAAK,GAAG4D,OAAO,GAAG1D,KAAK,CAACoE,SAAQ,IAAK,EAAEsC,MAAMlI,EAAEsI,OAAOtI,GAAG,GAAG5C,EAAEF,EAAEmB,UAAU,CAAC,IAAI,IAAIlC,EAAE,EAAEA,EAAEc,EAAE+I,QAAQ1E,KAAKjB,SAASnD,EAAEmB,SAAS,CAACiD,KAAKrE,EAAE+I,QAAQ1E,KAAKnF,GAAG+I,OAAOjI,EAAE+I,QAAQd,OAAO1D,KAAKvE,EAAE+I,QAAQxE,MAAMjF,IAAIkB,GAAGtB,YAAYc,EAAE+I,OAAO,MAAM5I,EAAEF,EAAEqB,aAAarB,EAAEqB,UAAUtB,EAAE+I,QAAQzJ,EAAEU,EAAE4G,aAAa5G,EAAE+I,QAAQ,CAAC/I,EAAEiJ,WAAWzI,GAAGsC,EAAE9C,EAAE8B,SAAS9B,EAAE+I,QAAQ,CAAC,SAASjG,EAAE/C,EAAEC,GAAG,IAAIC,EAAEN,EAAEI,GAAGI,EAAEF,EAAEuB,eAAevB,EAAEuB,aAAaxB,GAAGC,EAAEyO,mBAAmB/O,EAAEI,EAAE,CAAC,SAASgD,IAAI,MAAM,IAAIc,MAAM,mBAAmB,CAAC,SAASqE,EAAEnI,GAAG,GAAG,iBAAiBA,GAAG,OAAOA,EAAE,OAAOA,EAAE,IAAIC,EAAEsD,MAAMC,QAAQxD,GAAG,GAAG,CAAC,EAAE,IAAI,IAAIE,KAAKF,EAAEC,EAAEC,GAAGiI,EAAEnI,EAAEE,IAAI,OAAOD,CAAC,CAAC,SAASwE,EAAEzE,EAAEC,GAAG,OAAO,WAAWD,EAAEoL,MAAMnL,EAAEoL,UAAU,CAAC,CAAC,SAASjL,EAAEJ,GAAG,MAAM,mBAAmBA,CAAC,CAAC,OAAON,IAAIN,EAAE8B,UAAU,SAASlB,GAAG,IAAIC,EAAED,EAAEsE,KAAuD,QAAlD,IAASxE,EAAEmJ,WAAWhJ,IAAIH,EAAEmJ,UAAUhJ,EAAE8B,UAAa,iBAAiB9B,EAAE4B,MAAMzC,EAAEK,YAAY,CAACsC,SAASjC,EAAEmJ,UAAUD,QAAQlJ,EAAEC,MAAME,EAAE4B,MAAM5B,EAAE6B,QAAQoH,UAAS,SAAU,GAAG9J,EAAEsD,MAAMzC,EAAE4B,iBAAiBa,MAAMzC,EAAE4B,iBAAiBc,OAAO,CAAC,IAAIzC,EAAEJ,EAAEC,MAAME,EAAE4B,MAAM5B,EAAE6B,QAAQ5B,GAAGd,EAAEK,YAAY,CAACsC,SAASjC,EAAEmJ,UAAUD,QAAQ9I,EAAEgJ,UAAS,GAAI,CAAC,IAAI9G,EAAE+I,UAAUxI,OAAOiM,OAAOxK,EAAE+G,YAAYrG,YAAY1C,GAAGQ,EAAEuI,UAAUxI,OAAOiM,OAAOxK,EAAE+G,YAAYrG,YAAYlC,GAAGP,EAAE8I,UAAUxI,OAAOiM,OAAOvM,EAAE8I,YAAYrG,YAAYzC,GAAGI,EAAE0I,UAAUxI,OAAOiM,OAAOxK,EAAE+G,YAAYrG,YAAYrC,EAAE3C,CAAC,OAAz3lB,6FCH9D,SAAS+O,EAAMC,GAIb,IAAIC,EAmBA,WAGN,IAAIC,EAAO,KAGPC,EAAkB,CAAC,EAGvBC,IAGA,IAAIC,EAAc,GAEdJ,EAAc,SAAUK,GAM1B,QAAqBC,KAJrBD,EAAUA,GAAW,CAAC,GAIVJ,MAAuC,OAAjBI,EAAQJ,MAAiBI,EAAQJ,OAAS3G,SAAS+G,EAAQJ,KAAM,IACjGA,EAAOI,EAAQJ,UAGV,GAA4B,kBAAjBI,EAAQJ,KACxBA,EAAOM,EAAgBF,EAAQJ,UAG1B,SAAqBK,IAAjBD,EAAQJ,MAAuC,OAAjBI,EAAQJ,KAC/C,MAAM,IAAIO,UAAU,+CAIpBP,EAAO,IACT,CAEA,IAAItB,EAAEO,EAGN,GAAsB,OAAlBmB,EAAQI,YAAoCH,IAAlBD,EAAQI,MAAqB,CAKzD,IAHA,IAAIC,EAAcL,EAAQI,MACtBE,EAAS,GAEJjP,EAAI,EAAGA,EAAI2O,EAAQI,MAAO/O,IACjC0O,EAAYtK,MAAK,GAInB,IAFAuK,EAAQI,MAAQ,KAETC,EAAcC,EAAOrM,QAAQ,CAElC,IAAIsM,EAAQZ,EAAYK,GAEX,OAATJ,IACFI,EAAQJ,KAAOA,GAGjBU,EAAO7K,KAAK8K,EACd,CAIA,OAFAP,EAAQI,MAAQC,EAETC,CACT,CAYA,OAAOE,EAAU,CATjBlC,EAAImC,EAAQT,GAGZnB,EAAI6B,EAAepC,EAAG0B,GAGlBW,EAAerC,EAAGO,EAAGmB,IAGCA,EAC5B,EAEA,SAASS,EAAQT,GACf,GAAID,EAAY9L,OAAS,EAAG,CAC1B,IAEI2M,EAAMC,EAFNC,EAAWC,EAAgBf,EAAQY,MAKnC1O,GAAQ4O,EAAS,GAAKA,EAAS,IAAMf,EAAY9L,OAEjD0J,EAAI1E,UAAU2H,EAAME,EAAS,IAAM5O,GAkBvC,OAfuB,IAAnB6N,EAAYpC,GACdA,GAAKA,EAAI,GAAKoC,EAAY9L,OAG1B8L,EAAYpC,IAAK,GAQnBiD,EAAMC,EAFNC,EAAW,EAHAA,EAAS,GAAKnD,EAAIzL,GAAQ,KAC1B4O,EAAS,IAAMnD,EAAI,GAAKzL,GAAQ,OAMjC,IAAI0O,EAAM,IAAMA,GACnBA,CACT,CAEE,IAAIE,EASJ,OAPAF,EAAMC,EAFFC,EAAWE,EAAYhB,EAAQY,OAKzB,IACRA,EAAM,IAAMA,GAGPA,CAEX,CAEA,SAASF,EAAgBE,EAAKZ,GAE5B,GAAoB,eAAhBA,EAAQY,IACV,OAAO,EAGT,GAA2B,WAAvBZ,EAAQiB,WACV,OAAOJ,EAAa,CAAC,EAAE,MAGzB,IAAIK,EAAkBC,EAAmBP,GAErCQ,EAAOF,EAAgB,GACvBG,EAAOH,EAAgB,GAE3B,OAAQlB,EAAQiB,YAEd,IAAK,SACHG,EAAO,GACP,MAEF,IAAK,OACHA,EAAOC,EAAO,GACd,MAEF,IAAK,QACHA,EAAO,GAIX,OAAOR,EAAa,CAACO,EAAMC,GAE7B,CAEA,SAASV,EAAgBrC,EAAGO,EAAGmB,GAE7B,IAAIsB,EAAOC,EAAqBjD,EAAGO,GAC/B2C,EAAO,IAEX,OAAQxB,EAAQiB,YAEd,IAAK,OACHO,EAAOF,EAAO,GACd,MAEF,IAAK,QACHA,GAAQE,EAAOF,GAAM,EACrB,MAEF,IAAK,SACHA,EAAO,EACPE,EAAO,IAIX,OAAOX,EAAa,CAACS,EAAME,GAC7B,CAEA,SAAShB,EAAWiB,EAAKzB,GAEvB,OAAQA,EAAQ0B,QAEd,IAAK,WACH,OAAOD,EAET,IAAK,WACH,OAAOE,EAASF,GAElB,IAAK,MACH,IAAIG,EAAMD,EAASF,GACnB,MAAO,OAAOG,EAAI,GAAG,KAAKA,EAAI,GAAG,MAAMA,EAAI,GAAG,KAEhD,IAAK,OACH,IAAIC,EAAWF,EAASF,GACpBK,EAAQ9B,EAAQ8B,OAASvG,KAAKwG,SAClC,MAAO,QAAQF,EAAS,GAAG,KAAKA,EAAS,GAAG,MAAMA,EAAS,GAAG,MAAQC,EAAQ,IAEhF,IAAK,WACH,OAAOE,EAASP,GAElB,IAAK,MAEH,MAAO,OADGO,EAASP,GACCnM,KAAK,MAAQ,IAEnC,IAAK,OACH,IAAI2M,EAAWD,EAASP,GACpBK,EAAQ9B,EAAQ8B,OAASvG,KAAKwG,SAClC,MAAO,QAAUE,EAAS3M,KAAK,MAAQ,KAAOwM,EAAQ,IAExD,QACE,OAAOI,EAAST,GAGtB,CAEA,SAASF,EAAqBjD,EAAGO,GAI/B,IAFA,IAAIsD,EAAcC,EAAa9D,GAAG6D,YAEzB9Q,EAAI,EAAGA,EAAI8Q,EAAYlO,OAAS,EAAG5C,IAAK,CAE/C,IAAIgR,EAAKF,EAAY9Q,GAAG,GACpBiR,EAAKH,EAAY9Q,GAAG,GAEpBkR,EAAKJ,EAAY9Q,EAAE,GAAG,GACtBmR,EAAKL,EAAY9Q,EAAE,GAAG,GAE1B,GAAIwN,GAAKwD,GAAMxD,GAAK0D,EAAI,CAErB,IAAI5O,GAAK6O,EAAKF,IAAKC,EAAKF,GAGxB,OAAO1O,EAAEkL,GAFDyD,EAAK3O,EAAE0O,EAGlB,CAEF,CAEA,OAAO,CACT,CAEA,SAASrB,EAAayB,GAEpB,GAAoC,kBAAzBxJ,SAASwJ,GAA0B,CAE5C,IAAIC,EAASzJ,SAASwJ,GAEtB,GAAIC,EAAS,KAAOA,EAAS,EAC3B,MAAO,CAACA,EAAQA,EAGpB,CAEA,GAA0B,kBAAfD,EAET,GAAI5C,EAAgB4C,GAAa,CAC/B,IAAIlC,EAAQV,EAAgB4C,GAC5B,GAAIlC,EAAMO,SAAW,OAAOP,EAAMO,QACpC,MAAO,GAAI2B,EAAWE,MAAM,kCAAmC,CAC7D,IAAI/B,EAAMgC,EAASH,GAAY,GAC/B,MAAO,CAAE7B,EAAKA,EAChB,CAGF,MAAO,CAAC,EAAE,IAEZ,CAEA,SAASO,EAAoBP,GAC3B,OAAOwB,EAAaxB,GAAKM,eAC3B,CAEA,SAASkB,EAAcxB,GAOrB,IAAK,IAAIiC,KAJLjC,GAAO,KAAOA,GAAO,MACvBA,GAAM,KAGcf,EAAiB,CACpC,IAAIU,EAAQV,EAAgBgD,GAC5B,GAAItC,EAAMO,UACNF,GAAOL,EAAMO,SAAS,IACtBF,GAAOL,EAAMO,SAAS,GACvB,OAAOjB,EAAgBgD,EAE7B,CAAE,MAAO,iBACX,CAEA,SAAShC,EAAciC,GACrB,GAAa,OAATlD,EAAe,CAEjB,IAAImD,EAAe,iBACfjS,EAAEyK,KAAKwG,SAGX,OAFAjR,GAAKiS,EACLjS,GAAK,EACEyK,KAAKyH,MAAMF,EAAM,GAAKhS,GAAGgS,EAAM,GAAK,EAAIA,EAAM,IACvD,CAEE,IAAIG,EAAMH,EAAM,IAAM,EAClBtH,EAAMsH,EAAM,IAAM,EAElBI,GADJtD,GAAe,KAAPA,EAAc,OAAS,QACd,OACjB,OAAOrE,KAAKyH,MAAMxH,EAAM0H,GAAOD,EAAMzH,GAEzC,CAEA,SAAS0G,EAAUT,GAEjB,IAAI0B,EAAMnB,EAASP,GAEnB,SAAS2B,EAAe5P,GACpB,IAAI6P,EAAM7P,EAAEhC,SAAS,IACrB,OAAqB,GAAd6R,EAAIpP,OAAc,IAAMoP,EAAMA,CACzC,CAIA,MAFU,IAAMD,EAAeD,EAAI,IAAMC,EAAeD,EAAI,IAAMC,EAAeD,EAAI,GAIvF,CAEA,SAASG,EAAatL,EAAM8I,EAAUqB,GAEpC,IAAIf,EAAOe,EAAY,GAAG,GACtBd,EAAOc,EAAYA,EAAYlO,OAAS,GAAG,GAE3CqN,EAAOa,EAAYA,EAAYlO,OAAS,GAAG,GAC3CuN,EAAOW,EAAY,GAAG,GAE1BtC,EAAgB7H,GAAQ,CACtB8I,SAAUA,EACVqB,YAAaA,EACbjB,gBAAiB,CAACE,EAAMC,GACxBkC,gBAAiB,CAACjC,EAAME,GAG5B,CAEA,SAAS1B,IAEPwD,EACE,aACA,KACA,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,KAGdA,EACE,MACA,EAAE,GAAG,IACL,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,MAGzEA,EACE,SACA,CAAC,GAAG,IACJ,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,MAGzDA,EACE,SACA,CAAC,GAAG,IACJ,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,MAGjEA,EACE,QACA,CAAC,GAAG,KACJ,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,MAGjEA,EACE,OACA,CAAC,IAAK,KACN,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,MAGzEA,EACE,SACA,CAAC,IAAK,KACN,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,MAGzEA,EACE,OACA,CAAC,IAAK,KACN,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,KAG3D,CAEA,SAAStB,EAAUP,GAIjB,IAAIzM,EAAIyM,EAAI,GACF,IAANzM,IAAUA,EAAI,GACR,MAANA,IAAYA,EAAI,KAGpBA,GAAM,IACN,IAAIjF,EAAI0R,EAAI,GAAG,IACXpM,EAAIoM,EAAI,GAAG,IAEX+B,EAAMjI,KAAKyH,MAAQ,EAAFhO,GACnBhF,EAAQ,EAAJgF,EAAQwO,EACZvQ,EAAIoC,GAAK,EAAItF,GACbiO,EAAI3I,GAAK,EAAIrF,EAAED,GACfc,EAAIwE,GAAK,GAAK,EAAIrF,GAAGD,GACrBe,EAAI,IACJuC,EAAI,IACJ3C,EAAI,IAEN,OAAO8S,GACL,KAAK,EAAG1S,EAAIuE,EAAGhC,EAAIxC,EAAGH,EAAIuC,EAAI,MAC9B,KAAK,EAAGnC,EAAIkN,EAAG3K,EAAIgC,EAAG3E,EAAIuC,EAAI,MAC9B,KAAK,EAAGnC,EAAImC,EAAGI,EAAIgC,EAAG3E,EAAIG,EAAI,MAC9B,KAAK,EAAGC,EAAImC,EAAGI,EAAI2K,EAAGtN,EAAI2E,EAAI,MAC9B,KAAK,EAAGvE,EAAID,EAAGwC,EAAIJ,EAAGvC,EAAI2E,EAAI,MAC9B,KAAK,EAAGvE,EAAIuE,EAAGhC,EAAIJ,EAAGvC,EAAIsN,EAI5B,MADa,CAACzC,KAAKyH,MAAQ,IAAFlS,GAAQyK,KAAKyH,MAAQ,IAAF3P,GAAQkI,KAAKyH,MAAQ,IAAFtS,GAEjE,CAEA,SAASkS,EAAUS,GAEjBA,EAAqB,KADrBA,EAAMA,EAAIvN,QAAQ,KAAM,KACd7B,OAAeoP,EAAIvN,QAAQ,OAAQ,QAAUuN,EAEvD,IAAII,EAAMxK,SAASoK,EAAIlE,OAAO,EAAG,GAAI,IAAM,IACrCuE,EAAQzK,SAASoK,EAAIlE,OAAO,EAAG,GAAI,IAAM,IACzCwE,EAAO1K,SAASoK,EAAIlE,OAAO,EAAG,GAAI,IAAM,IAE1CyE,EAAOrI,KAAK0H,IAAIQ,EAAKC,EAAOC,GAC1BE,EAAQD,EAAOrI,KAAKC,IAAIiI,EAAKC,EAAOC,GACpCG,EAAaF,EAAQC,EAAQD,EAAQ,EAE3C,OAAQA,GACN,KAAKH,EAAK,MAAO,EAAUC,EAAQC,GAAQE,EAAS,EAAjC,IAAuC,EAAGC,EAAYF,GACzE,KAAKF,EAAO,MAAO,CAAE,KAAQC,EAAOF,GAAOI,EAAS,IAAM,EAAGC,EAAYF,GACzE,KAAKD,EAAM,MAAO,CAAE,KAAQF,EAAMC,GAASG,EAAS,IAAM,EAAGC,EAAYF,GAE7E,CAEA,SAASjC,EAAUF,GACjB,IAAIzM,EAAIyM,EAAI,GACV1R,EAAI0R,EAAI,GAAG,IACXpM,EAAIoM,EAAI,GAAG,IACX7E,GAAK,EAAE7M,GAAGsF,EAEZ,MAAO,CACLL,EACAuG,KAAKwI,MAAMhU,EAAEsF,GAAKuH,EAAE,EAAIA,EAAI,EAAEA,GAAK,KAAS,IAC5CA,EAAE,EAAI,IAEV,CAEA,SAASsD,EAAiB8D,GAExB,IADA,IAAIC,EAAQ,EACH5S,EAAI,EAAGA,IAAM2S,EAAO/P,UACvBgQ,GAASC,OAAOC,kBADe9S,IAEnC4S,GAASD,EAAOnR,WAAWxB,GAE7B,OAAO4S,CACT,CAGA,SAASlD,EAAgBqD,GACvB,GAAKC,MAAMD,IAON,GAAwB,kBAAbA,EAEd,GAAIvE,EAAgBuE,GAAW,CAC7B,IAAI7D,EAAQV,EAAgBuE,GAE5B,GAAI7D,EAAMO,SACR,OAAOP,EAAMO,QAEnB,MAAO,GAAIsD,EAASzB,MAAM,kCAAmC,CAEzD,OAAOP,EADGQ,EAASwB,GAAU,IACJtD,QAC7B,MAlBsB,CACtB,IAAI4B,EAASzJ,SAASmL,GAEtB,GAAI1B,EAAS,KAAOA,EAAS,EAC3B,OAAON,EAAagC,GAAUtD,QAElC,CAeE,MAAO,CAAC,EAAE,IACd,CACE,OAAOnB,CACT,CAhgBsBD,GAGgB4E,GAAUA,EAAOC,UACjDA,EAAUD,EAAOC,QAAU5E,GAI7B4E,EAAQ5E,YAAcA,CAWzB,CAvBC,gCCHa,SAAS6E,EAA+BC,EAAUC,GAC/D,GAAID,IAAaC,EACf,MAAM,IAAIvE,UAAU,4CAExB,+CCJe,SAASwE,EAAwCC,EAAY9M,GAC1E,QAAmBmI,IAAf2E,EACF,MAAM,IAAIzE,UAAU,gBAAkBrI,EAAS,+CAEnD,+CCJe,SAAS+M,EAAuBJ,EAAUK,EAAY9N,GACnE,IAAK8N,EAAWC,IAAIN,GAClB,MAAM,IAAItE,UAAU,kDAEtB,OAAOnJ,CACT,4ECJe,SAASgO,EAA4BC,EAAKH,IACvD,OAA0BG,EAAKH,GAC/BA,EAAWI,IAAID,EACjB,kFCDe,SAASE,EAAgCV,EAAUC,EAAkBE,GAGlF,OAFA,OAA8BH,EAAUC,IACxC,OAAuCE,EAAY,QAC5C,OAAwBH,EAAUG,EAC3C,kFCJe,SAASQ,EAAgCX,EAAUC,EAAkBE,EAAYS,GAI9F,OAHA,OAA8BZ,EAAUC,IACxC,OAAuCE,EAAY,QACnD,OAAwBH,EAAUG,EAAYS,GACvCA,CACT,8DCPe,SAASC,EAA6Bb,EAAUC,EAAkBa,GAE/E,OADA,OAA8Bd,EAAUC,GACjCa,CACT,wJCFO,SAASC,EAAYpG,EAAGqG,GAC3B,OAAQA,EAASC,EAAAA,GAAWtG,GAAKA,CACrC,CCCA,MAAMuG,EAAU,+CAEVC,EAAW,CACb,eAAgB,CAAE,OAAU,OAAQ,QAAW,OAAQ,QAAW,QAClE,uBAAwB,CAAE,OAAU,OAAQ,QAAW,OAAQ,QAAW,QAC1E,gBAAiB,CAAE,OAAU,OAAQ,KAAQ,MAC7C,eAAgB,CAAE,OAAU,OAAQ,QAAW,QAC/C,YAAa,CAAE,OAAU,OAAQ,QAAW,QAC5C,sBAAuB,CAAE,OAAU,OAAQ,QAAW,SAG1D,SAASC,EAAYC,EAAQC,EAAUC,GACnC,KAAMF,aAAkBG,EAAAA,IACpB,MAAM,IAAIvR,MAAM,yBAGpB,IAAK,MAAOkI,EAAGvH,KAAM9B,OAAO2S,QAAQH,GAChC,GAAID,EAAOK,aAAevJ,GAAKkJ,EAAOM,eAAiB/Q,EACnD,OAGR,MAAM,IAAIX,MAAM,mBAAqBsR,EAAO,uCAChD,CAyBA,SAASK,EAAsBC,EAASC,GACpC,IAAIC,EAxBR,SAA6BF,GACzB,IAKIG,EACAC,EANAC,EAAML,EAAQM,cAAc,SAChC,GAAID,EAAM,EACN,OAAO,KAKX,IACIF,EAAUH,EAAQO,UAAUF,GAC5BD,EAAQD,EAAQK,QACpB,CAAE,MAAMlW,GACJ,MAAM,IAAI8D,MAAM,kCAAoC9D,EAAEiK,QAC1D,CAAE,QACEoL,EAAAA,GAAWQ,EACf,CAEA,GAAIC,EAAMzS,QAAUqS,EAAQrS,SACxB,MAAM,IAAIS,MAAM,kDAEpB,OAAOgS,CACX,CAGmBK,CAAoBT,GACnC,GAAgB,MAAZE,EACA,MAAM,IAAI9R,MAAM,0CAEpB,IAAID,EAAU,CAAC,EAEf,IAAK,IAAIpD,EAAI,EAAGA,EAAIiV,EAAQrS,SAAU5C,IAAK,CACvC,IAAI2V,EACJ,IAEI,GADAA,EAAYV,EAAQW,KAAK5V,GACrB2V,aAAqBf,EAAAA,MAAqBe,aAAqBf,EAAAA,IAAyB,CACxF,IAAIiB,EAASF,EAAUF,SACvBrS,EAAQ+R,EAASnV,IAAM6V,EACvBX,EAAOY,KAAOD,EAAOjT,MACzB,CACJ,CAAE,QACEgS,EAAAA,GAAWe,EACf,CACJ,CAEAT,EAAO9R,QAAUA,CAErB,CAEA,SAAS2S,EAAgBtB,GACrB,IA0BIuB,EA1BAd,EAAS,CAAC,EAEd,GAAqB,MAAjBT,EAAOlU,OAAgB,CAIvB,IAAI0U,EAHJT,EAAYC,EAAQ,CAAE,OAAU,YAAa,UAAa,aAAe,UAIzE,IAEI,GADAQ,EAAUR,EAAOe,UAAU,cACrBP,aAAmBL,EAAAA,IACrB,MAAM,IAAIvR,MAAM,0CAEpB2R,EAAsBC,EAASC,EACnC,CAAE,MAAM3V,GACJ,MAAM,IAAI8D,MAAM,sDAAwD9D,EAAEiK,QAC9E,CAAE,QACEoL,EAAAA,GAAWK,EACf,CACJ,KAAO,CACH,GAAqB,UAAjBR,EAAOlU,OACP,MAAM,IAAI8C,MAAM,+CAEpB2R,EAAsBP,EAAQS,EAClC,CAIA,IACI,IAAIe,EAAOxB,EAAOc,cAAc,YAC5BU,GAAQ,IACRD,EAAWvB,EAAOe,UAAUS,GACxBD,aAAoBpB,EAAAA,KACpBM,EAAOgB,UAAYF,EAASP,SAC5BP,EAAOY,KAAOZ,EAAOgB,UAAUtT,QAG3C,CAAE,MAAMrD,GACJ,MAAM,IAAI8D,MAAM,gDAAkD9D,EAAEiK,QACxE,CAAE,QACEoL,EAAAA,GAAWoB,EACf,CAGA,KAAM,SAAUd,GAAS,CACrB,IAAIiB,EACJ,IAEI,GADAA,EAAW1B,EAAOe,UAAU,WACtBW,aAAoBvB,EAAAA,IACtB,MAAM,IAAIvR,MAAM,kDAEpB,IAAI+S,EAAKD,EAASV,SAClB,GAAiB,GAAbW,EAAGxT,OACH,MAAM,IAAIS,MAAM,8DAEpB6R,EAAOY,KAAOM,EAAG,EACrB,CAAE,MAAO7W,GACL,MAAM,IAAI8D,MAAM,4CAA8C9D,EAAEiK,QACpE,CAAE,QACEoL,EAAAA,GAAWuB,EACf,CACJ,CAEA,OAAOjB,CACX,CAwCA,IAAAmB,EAAA,IAAAC,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAG,EAAA,IAAAH,QAAAI,EAAA,IAAAJ,QAAAK,EAAA,IAAAL,QAAAM,EAAA,IAAAC,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAG,EAAA,IAAAH,QAGO,MAAMI,EAgCT,qBAAOC,CAAeC,GAClB,IAAIC,GAAQtD,EAAAA,EAAAA,GAAGmD,EAjCVA,EAAoBI,GAmCzB,OADAtD,EAAAA,EAAAA,GAAAkD,EAlCKA,EAAoBI,EAkCWF,GAC7BC,CACX,CASA,wBAAOE,GACH,OAAOpV,OAAO0B,KAAK2Q,EACvB,CAMAlQ,WAAAA,CAAY1D,GAER,IAFYgT,EAAAA,EAAAA,GAAA,KAAAqD,IAAArD,EAAAA,EAAAA,GAAA,KAAAoD,IAAApD,EAAAA,EAAAA,GAAA,KAAAmD,IAAAnD,EAAAA,EAAAA,GAAA,KAAAiD,IAAAW,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAhB,EAAA,CAAAiB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAf,EAAA,CAAAgB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAd,EAAA,CAAAe,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAb,EAAA,CAAAc,UAAA,EAAAxD,WAAA,KAzChBuD,EAAAA,EAAAA,GAAA,KAAAZ,EAAA,CAAAa,UAAA,EAAAxD,WAAA,KA0CIyD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,MACL+W,EAAAA,EAAAA,GAAA9R,KAAIyQ,KAAQ9B,GACd,MAAM,IAAIlR,MAAM,6BAA2BqU,EAAAA,EAAAA,GAAG9R,KAAIyQ,GAAO,uCAG7DoB,EAAAA,EAAAA,GAAA7R,KAAI+Q,EAAYM,EAAqBU,YACrC/R,KAAKgS,OACT,CAKA,eAAOD,GACH,MAAO,CACHE,0BAA2B,EAEnC,CAKAlJ,OAAAA,GACI,MAAO,KAAE+I,EAAAA,EAAAA,GAAI9R,KAAI+Q,GACrB,CAOAmB,UAAAA,CAAWnJ,GACP,IAAK,MAAOpD,EAAGvH,KAAM9B,OAAO2S,QAAQlG,IAChC+I,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUpL,GAAKvH,CAE3B,CAMA,aAAOqM,GACH,MAAO,eACX,CAMAuH,KAAAA,GACIhD,EAAAA,IAAU8C,EAAAA,EAAAA,GAAC9R,KAAI6Q,IACf7B,EAAAA,IAAU8C,EAAAA,EAAAA,GAAC9R,KAAI8Q,KACfe,EAAAA,EAAAA,GAAA7R,KAAI6Q,EAAkB,OACtBgB,EAAAA,EAAAA,GAAA7R,KAAI8Q,EAAkB,OACtBe,EAAAA,EAAAA,GAAA7R,KAAI2Q,EAAY,OAChBkB,EAAAA,EAAAA,GAAA7R,KAAI4Q,EAAY,KACpB,CAKAuB,UAAAA,GACI,MAAO,CAAE,IAAIL,EAAAA,EAAAA,GAAE9R,KAAIyQ,GAAM,QAAWzQ,KAAK+I,UAC7C,CA0GA,aAAMqJ,GAAgC,IAAxB,MAAEC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QAC/B4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAImR,EAAAoB,GAAApQ,KAAJnC,MAEN,IAAIsP,EAAS,CAAEkD,MAAOC,GAAiBX,EAAAA,EAAAA,GAAC9R,KAAI4Q,GAAWyB,IACnDK,EAAQD,GAAiBX,EAAAA,EAAAA,GAAC9R,KAAI2Q,GAAW0B,GAM7C,OALA/C,EAAOqD,kBAAoB,CAAE,IAAOD,GAE/BL,GACDrS,KAAKgS,QAEF1C,CACX,CAqBA,uBAAMsD,GAA0C,IAAxB,MAAEP,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QACzC4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,MACN,IAAI0C,GAAOkL,EAAAA,EAAAA,GAAG5N,KAAIoR,EAAAyB,GAAA1Q,KAAJnC,MAAI8R,EAAAA,EAAAA,GAAiB9R,KAAI2Q,IAIvC,OAHK0B,GACDrS,KAAKgS,QAEFtP,CACX,CAmBA,UAAMsN,GAA6B,IAAxB,MAAEqC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QAC5B4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAImR,EAAAoB,GAAApQ,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAIgR,EAAA8B,GAAA3Q,KAAJnC,MAEN,IAAIsP,EAAS,CACTkD,MAAOC,GAAiBX,EAAAA,EAAAA,GAAC9R,KAAI4Q,GAAWyB,IAK9B1D,GAAQmD,EAAAA,EAAAA,GAAC9R,KAAIyQ,IAC3B,IACInB,EAAOyD,OAAS,IAAI/D,EAAAA,GACpB,IAAIgE,EAAShE,EAAAA,IAAmC8C,EAAAA,EAAAA,GAAC9R,KAAI6Q,GAAiB,CAAEoC,SAAUZ,IAElF/C,EAAOyD,OAAO9E,IAAI,MAAO+E,EAAOD,QAChCzD,EAAO4D,QAAU,CAAE,IAAOF,EAAOE,SAEjC,IAAIC,EAAgB1E,EAAAA,IAAUqD,EAAAA,EAAAA,GAAC9R,KAAI2Q,GAAWqC,EAAOE,SACrD5D,EAAO8D,SAAW,CAAE,IAAOD,EAC/B,CAAE,MAAOxZ,GAEL,MADAqV,EAAAA,GAAWM,EAAOyD,QACZpZ,CACV,CAOA,OALA2V,EAAO+D,aAAWzF,EAAAA,EAAAA,GAAG5N,KAAIoR,EAAAyB,GAAA1Q,KAAJnC,KAAqBsP,EAAO8D,SAASE,KAErDjB,GACDrS,KAAKgS,QAEF1C,CACX,CAWAiE,SAAAA,GAEI,IAAIC,GADQ,IAAIC,aACCC,QAAM5B,EAAAA,EAAAA,GAAC9R,KAAIyQ,IAQ5B,MAAO,CACHlQ,MAAO,CANE,CACT5F,KAAM,KACN6F,KAAM,IAAImT,EAAAA,GAAkBH,EAAQ,CAAEzS,KAAM,SAK5CgI,QAAS/I,KAAK+I,UAEtB,CAQA,kBAAO6K,CAAYrT,EAAOwI,GACtB,IAAI8K,EAAO,CAAC,EAGZ,IAAK,MAAM1L,KAAK5H,EAAO,CACnB,MAAMuT,EAAM,IAAIC,YAChBF,EAAK1L,EAAExN,MAAQmZ,EAAIE,OAAO7L,EAAE3H,KAAKgT,SACrC,CAEA,KAAM,OAAQK,GACV,MAAM,IAAIpW,MAAM,yEAEpB,OAAO,IAAI4T,EAAqBwC,EAAK9Y,GAAIgO,EAC7C,EAvW6B,eAAA+J,IAuHzB,GAA4B,QAAxBhB,EAAAA,EAAAA,GAAA9R,KAAI6Q,GACJ,OAGJ,IAAIoD,EAAUtF,GAAQmD,EAAAA,EAAAA,GAAC9R,KAAIyQ,IACvByD,QAAehG,EAAAA,EAAAA,GAAMmD,EA5HpBA,EAAoBI,GAAAtP,KA4HAkP,EAAkC3C,EAAU,IAAMuF,EAAQjB,QACnF,KACInB,EAAAA,EAAAA,GAAA7R,KAAI8Q,EAAkB9B,EAAAA,GAAckF,KACpCrC,EAAAA,EAAAA,GAAA7R,KAAI6Q,GAAkBiB,EAAAA,EAAAA,GAAA9R,KAAI8Q,GAAgB1C,QAC9C,CAAE,MAAMzU,GAGJ,MAFAqV,EAAAA,IAAU8C,EAAAA,EAAAA,GAAC9R,KAAI6Q,IACf7B,EAAAA,IAAU8C,EAAAA,EAAAA,GAAC9R,KAAI8Q,IACTnX,CACV,CACJ,CAAC,eAAA2Y,IAGG,GAAsB,QAAlBR,EAAAA,EAAAA,GAAA9R,KAAI2Q,GACJ,OAGJ,IAAIsD,EAAUtF,GAAQmD,EAAAA,EAAAA,GAAC9R,KAAIyQ,IAE3B,GAAI,YAAawD,EAAS,CACtB,IAEIE,EACAC,EAHAC,QAAgBnG,EAAAA,EAAAA,GAAMmD,EA/IzBA,EAAoBI,GAAAtP,KA+IKkP,EAAkC3C,EAAU,IAAMuF,EAAQK,SAIpF,IACIH,EAAenF,EAAAA,GAAcqF,GAC7BD,EAAiBD,EAAa/F,QAC9B,IAAIkG,EAAUnE,EAAgBiE,GAC1B3E,EAAQ6E,EAAQhE,UAEhBhB,EAAS,CAAC,EACVG,IACAH,EAAOvU,GAAK0U,GAGhB,IAAK,MAAO9J,EAAGvH,KAAM9B,OAAO2S,QAAQqF,EAAQ9W,SACpCmI,EAAE+F,MAAM,UACR4D,EAAO3J,GAAKvH,GAIpB,GAAkC,GAA9B9B,OAAO0B,KAAKsR,GAAQtS,OACpB,MAAM,IAAIS,MAAM,qEAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI2Q,EAAY,IAAIlC,EAAAA,GAAea,GACvC,CAAE,QACEN,EAAAA,GAAWoF,GACXpF,EAAAA,GAAWmF,EACf,CACA,MACJ,OAGAvG,EAAAA,EAAAA,GAAM5N,KAAIgR,EAAA8B,GAAA3Q,KAAJnC,MACN,IAAIuU,EA1NZ,SAAiC1F,GAC7B,IAAI2F,EAaAC,EACAC,EACApF,EANJ,GAPqB,MAAjBT,EAAOlU,QACPiU,EAAYC,EAAQ,CAAE,UAAa,SAAU,UAAa,UAAY,UACtE2F,EAAM3F,EAAOc,cAAc,aAE3B6E,EAAM3F,EAAOc,cAAc,YAG3B6E,EAAM,EACN,MAAM,IAAI/W,MAAM,uCAOpB,IAEI,GADAgX,EAAY5F,EAAOe,UAAU4E,GACL,UAApBC,EAAU9Z,QAA0C,GAApB8Z,EAAUjQ,OAC1C,MAAM,IAAI/G,MAAM,6DAIpB,GADAiX,EAAcD,EAAUzE,KAAK,GACH,UAAtB0E,EAAY/Z,OACZ,MAAM,IAAI8C,MAAM,qDAGpB6R,EAASoF,EAAY7E,QACzB,CAAE,QACEb,EAAAA,GAAWyF,GACXzF,EAAAA,GAAW0F,EACf,CAEA,OAAOpF,CACX,CAsLkBqF,EAAuB7C,EAAAA,EAAAA,GAAC9R,KAAI6Q,KACtCgB,EAAAA,EAAAA,GAAA7R,KAAI2Q,EAAY,IAAIlC,EAAAA,GAAe,CAAE1T,GAAIwZ,IAC7C,CAAC,eAAAhC,IAGG,GAAsB,QAAlBT,EAAAA,EAAAA,GAAA9R,KAAI4Q,GACJ,OAGJ,IAAIqD,EAAUtF,GAAQmD,EAAAA,EAAAA,GAAC9R,KAAIyQ,IAC3B,GAAI,YAAawD,EAAS,CACtB,IAEIW,EACAC,EACAC,EAJAC,QAAgB7G,EAAAA,EAAAA,GAAMmD,EA5LzBA,EAAoBI,GAAAtP,KA4LKkP,EAAkC3C,EAAU,IAAMuF,EAAQe,SAKpF,IACIJ,EAAe5F,EAAAA,GAAc+F,GAC7BF,EAAiBD,EAAaxG,QAC9B0G,EAAQ3E,EAAgB0E,EAC5B,CAAE,QACE7F,EAAAA,GAAW6F,GACX7F,EAAAA,GAAW4F,EACf,EAEA/C,EAAAA,EAAAA,GAAA7R,KAAI4Q,EAAY,IAAInC,EAAAA,GAAeqG,EAAMtX,QAAS,CAAEyX,aAAcH,EAAM5E,OAC5E,MACI2B,EAAAA,EAAAA,GAAA7R,KAAI4Q,EAAY,IAAInC,EAAAA,GAAe,CAAC,EAAG,CAAEwG,aAAchB,EAAQiB,OAIvE,CAAC,SAAArC,EA4BesC,GACZ,IAAIpa,GAAK+W,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUkB,0BACvB,MAAkB,iBAANlX,GAAkBoa,EAAQC,UAAUra,IAAsB,iBAANA,GAAkBA,EAAKoa,EAAQE,kBACpF,CAAE/B,IAAK6B,EAAQG,OAAOva,IAEtB,CAAEuY,IAAK6B,EAAQI,WAE9B,CAqHHC,EAxWYnE,EAeT,IAAAI,EAAA,CAAAG,UAAA,EAAAxD,MAGsBqH,UAClB,IAAIC,QAAaC,MAAMC,GACvB,IAAKF,EAAKG,GACN,MAAM,IAAIpY,MAAM,8BAAgCmY,EAAM,KAAOF,EAAK7R,OAAS,KAE/E,OAAO,IAAIiS,iBAAiBJ,EAAKK,cAAc,GC3MxBtY,MC+BYkW,EAAAA,8RC7B3CqC,EAAA,IAAAtF,QAAAuF,EAAA,IAAAvF,QAAAwF,EAAA,IAAAxF,QAAAyF,EAAA,IAAAzF,QAAA0F,EAAA,IAAA1F,QAAAK,EAAA,IAAAL,QAAA2F,EAAA,IAAApF,QAAAqF,EAAA,IAAArF,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAsF,EAAA,IAAAtF,QAAAuF,EAAA,IAAAvF,QAGO,MAAMwF,EAqBThY,WAAAA,CAAYiY,IAAQ3I,EAAAA,EAAAA,GAAA,KAAAyI,IAAAzI,EAAAA,EAAAA,GAAA,KAAAwI,IAAAxI,EAAAA,EAAAA,GAAA,KAAAoD,IAAApD,EAAAA,EAAAA,GAAA,KAAAmD,IAAAnD,EAAAA,EAAAA,GAAA,KAAAuI,IAAAvI,EAAAA,EAAAA,GAAA,KAAAsI,IAAA1E,EAAAA,EAAAA,GAAA,KAAAqE,EAAA,CAAApE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAsE,EAAA,CAAArE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAuE,EAAA,CAAAtE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAwE,EAAA,CAAAvE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAyE,EAAA,CAAAxE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAZ,EAAA,CAAAa,UAAA,EAAAxD,WAAA,IACZsI,aAAkBC,EAAAA,GAClB9E,EAAAA,EAAAA,GAAA7R,KAAIgW,EAAYU,IAEhB7E,EAAAA,EAAAA,GAAA7R,KAAIgW,EAAY,IAAIW,EAAAA,EAAiBD,KAGzC7E,EAAAA,EAAAA,GAAA7R,KAAI+Q,EAAY0F,EAAgB1E,YAChC/R,KAAKgS,OACT,CAKA,eAAOD,GACH,MAAO,CACH6E,mBAAoB,kBACpBC,mBAAoB,mBACpBC,sBAAuB,uBACvB7E,0BAA2B,EAC3B8E,0BAA2B,EAC3BC,6BAA8B,EAEtC,CAKAjO,OAAAA,GACI,MAAO,KAAE+I,EAAAA,EAAAA,GAAI9R,KAAI+Q,GACrB,CAwBAmB,UAAAA,CAAWnJ,GACP,IAAK,MAAOpD,EAAGvH,KAAM9B,OAAO2S,QAAQlG,IAChC+I,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUpL,GAAKvH,CAE3B,CAgBA4T,KAAAA,GACiC,mBAAzBF,EAAAA,EAAAA,GAAO9R,KAAIkW,KACXpE,EAAAA,EAAAA,GAAA9R,KAAIkW,GAAA/T,KAAJnC,OAEJ6R,EAAAA,EAAAA,GAAA7R,KAAIkW,EAAa,OACjBrE,EAAAA,EAAAA,GAAA7R,KAAIiW,EAAY,OAEhBpE,EAAAA,EAAAA,GAAA7R,KAAImW,EAAiB,OACrBtE,EAAAA,EAAAA,GAAA7R,KAAIoW,EAAc,KACtB,CAMA,aAAO3L,GACH,MAAO,KACX,CAMA0H,UAAAA,GACI,OAAAvE,EAAAA,EAAAA,GAAO5N,KAAIqW,EAAAY,GAAA9U,KAAJnC,MAAmBjH,IAAc,CAAEgI,KAAMhI,EAAEgI,OAAQyD,KAAMzL,EAAEyL,UACtE,CA6DA4N,OAAAA,GAAgC,IAAxB,MAAEC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GACzB4I,EAAAA,EAAAA,GAAA5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,OACA4N,EAAAA,EAAAA,GAAA5N,KAAImR,EAAAoB,GAAApQ,KAAJnC,MAEA,IAAIsP,EAAS,CACT,kBAAqB4H,EAAAA,IAAqBpF,EAAAA,EAAAA,GAAC9R,KAAImW,GAAgB,QAC/D,OAAOrE,EAAAA,EAAAA,GAAE9R,KAAIoW,IAMjB,OAHK/D,GACDrS,KAAKgS,QAEF1C,CACX,CA0BAsD,iBAAAA,GAA0C,IAAxB,MAAEP,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GACnC4I,EAAAA,EAAAA,GAAA5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,MACA,IAAI0C,EAAUwU,EAAAA,IAA6BpF,EAAAA,EAAAA,GAAC9R,KAAImW,GAAgB,QAAMvI,EAAAA,EAAAA,GAAE5N,KAAIuW,EAAAY,GAAAhV,KAAJnC,MAA8B,OAAK4N,EAAAA,EAAAA,GAAE5N,KAAIwW,EAAAY,GAAAjV,KAAJnC,OAI7G,OAHKqS,GACDrS,KAAKgS,QAEFtP,CACX,CAqBAsN,IAAAA,GAA6B,IAAxB,MAAEqC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GACtB4I,EAAAA,EAAAA,GAAA5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,OACA4N,EAAAA,EAAAA,GAAA5N,KAAImR,EAAAoB,GAAApQ,KAAJnC,MAEA,IAAIqX,EAASrI,EAAAA,IAAoC8C,EAAAA,EAAAA,GAAC9R,KAAIiW,GAAW,UAE7D3G,EAAS4H,EAAAA,GAAmCG,GAAMvF,EAAAA,EAAAA,GAAE9R,KAAImW,GAAgB,QAAMvI,EAAAA,EAAAA,GAAE5N,KAAIuW,EAAAY,GAAAhV,KAAJnC,MAA8B,OAQlH,OAPAsP,EAAOkD,OAAKV,EAAAA,EAAAA,GAAG9R,KAAIoW,GAEnB9G,EAAO+D,YAAc6D,EAAAA,GAAyB5H,EAAO8D,UAAQxF,EAAAA,EAAAA,GAAE5N,KAAIwW,EAAAY,GAAAjV,KAAJnC,OAE1DqS,GACDrS,KAAKgS,QAEF1C,CACX,CAWAiE,SAAAA,GACI,OAAA3F,EAAAA,EAAAA,GAAO5N,KAAIqW,EAAAY,GAAA9U,KAAJnC,MAAmBjH,GAAKA,GACnC,CAQA,wBAAa6a,CAAYrT,EAAOwI,GAC5B,GAAoB,GAAhBxI,EAAMvD,QAAgC,MAAjBuD,EAAM,GAAG5F,KAC9B,MAAM,IAAI8C,MAAM,uEAEpB,IAAI6R,EAAS,IAAImH,EAAgBlW,EAAM,GAAGC,MAE1C,OADA8O,EAAO4C,WAAW5C,GACXA,CACX,EACH,SAAA2H,EA1RiB1F,GAGV,MAAO,CAAEhR,MAFG,CAAC,CAAE5F,KAAM,KAAM6F,KAAM+Q,GAAGO,EAAAA,EAAAA,GAAC9R,KAAIgW,MAEzBjN,QADF/I,KAAK+I,UAEvB,CAAC,SAAAuO,IAoEG,GAAsB,QAAlBxF,EAAAA,EAAAA,GAAA9R,KAAIiW,GACJ,OAGJ,IAAIsB,EAAOvI,EAAAA,IAAkB8C,EAAAA,EAAAA,GAAA9R,KAAIgW,GAAUwB,YAC3C3F,EAAAA,EAAAA,GAAA7R,KAAIiW,EAAYsB,EAAKE,OACrB5F,EAAAA,EAAAA,GAAA7R,KAAIkW,EAAaqB,EAAKG,MAC1B,CAAC,SAAApF,IAkCG,GAA2B,QAAvBR,EAAAA,EAAAA,GAAA9R,KAAImW,GACJ,QAGJvI,EAAAA,EAAAA,GAAA5N,KAAIsW,EAAAgB,GAAAnV,KAAJnC,MACA,IAAI6O,EAAS,IAAIG,EAAAA,IAAY8C,EAAAA,EAAAA,GAAC9R,KAAIiW,IAClC,KAAM,WAAYpH,EAAO8I,WAA0C,SAA7B9I,EAAO8I,SAAiB,OAC1D,MAAM,IAAIla,MAAM,0DAEpB,IAAIma,EAAU/I,EAAOtL,KAAK,UAE1B,KAAM,aAAcqU,EAAQD,WAA6C,SAAhCC,EAAQD,SAAmB,SAChE,MAAM,IAAIla,MAAM,wEAEpB,IAAIoa,EAAUD,EAAQrU,KAAK,YAEvBgR,EAAMuD,EAAAA,GAA0BD,EAAS,MAC7C,GAAW,MAAPtD,EACA,MAAM,IAAI9W,MAAM,6EAEpB,IAAIsa,EAAQ,IAAItJ,EAAAA,GAAe,CAAE1T,GAAIwZ,IAEjC9E,EAAQqI,EAAAA,GAA0BD,EAAS,QACjC,OAAVpI,GACAsI,EAAMC,WAAW,OAAQvI,GAG7B,IAAIwI,EAAQH,EAAAA,GAA0BD,EAAS,gBACjC,OAAVI,GACAF,EAAMC,WAAW,OAAQC,IAG7BpG,EAAAA,EAAAA,GAAA7R,KAAImW,EAAiB4B,EAEzB,CAAC,SAAAxF,IAGG,GAAwB,QAApBT,EAAAA,EAAAA,GAAA9R,KAAIoW,GACJ,QAGJxI,EAAAA,EAAAA,GAAA5N,KAAIsW,EAAAgB,GAAAnV,KAAJnC,MACA,IAAIiU,EAAUjF,EAAAA,IAA8B8C,EAAAA,EAAAA,GAAC9R,KAAIiW,GAAW,WAC5DpE,EAAAA,EAAAA,GAAA7R,KAAIoW,EAAc,IAAI3H,EAAAA,GAAe,CAAC,EAAG,CAAEwG,aAAchB,EAAQzW,UACrE,CAAC,SAAA2Z,IA8BG,MAAO,CACH7D,KAAKxB,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU6F,mBACnBsB,KAAKpG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU8F,mBACnBsB,QAAQrG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU+F,sBAE9B,CAAC,SAAAM,IAGG,MAAO,CACH9D,KAAKxB,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUkB,0BACnBiG,KAAKpG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUgG,0BACnBoB,QAAQrG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUiG,6BAE9B,iKC5LJvB,eAAetF,EAAgBoH,EAAMa,GACd,iBAARb,IACPA,QAAaa,EAAUC,SAASd,IAEpC,IAEIhI,EACA/R,EAHA8a,QAAiBF,EAAU5X,KAAK+W,EAAKE,MAIrCc,EAAW,KAEf,GAAIhB,EAAc,QAAEiB,WAAW,mBAAoB,CAE/C,IAAIC,QAAeX,EAAAA,GAAkBQ,EAAU,CAAEI,MAAO,MACxDnJ,EAAWkJ,EAAOnT,QAElB9H,EAAU,IAAIN,MAAMqS,EAASvS,QAC7B,IAAK,IAAI5C,EAAI,EAAGA,EAAIoD,EAAQR,OAAQ5C,IAAK,CACrC,IAAIue,EAAU,GACd,IAAK,MAAMxQ,KAAKsQ,EACZE,EAAQna,KAAK2J,EAAE/N,IAEnBoD,EAAQpD,GAAKue,CACjB,CAEIpB,EAAKqB,WAAWtI,YAChBiI,EAAW/a,EAAQ8H,QACnBiK,EAASjK,SAIb,IAASlL,EAAI,EAAGA,EAAIoD,EAAQR,OAAQ5C,IAAK,CACrC,IAAIO,EAAO4c,EAAKqB,WAAWpb,QAAQpD,GAAGO,KAC1B,WAARA,EACA6C,EAAQpD,GAAK,IAAIye,WAAWrb,EAAQpD,IACrB,UAARO,EACP6C,EAAQpD,GAAK,IAAI0e,aAAatb,EAAQpD,IACvB,WAARO,IACP6C,EAAQpD,GAAKoD,EAAQpD,GAAG0L,KAAIqC,GAAU,QAALA,IAEzC,CAEJ,KAAO,KAAIoP,EAAc,QAAEiB,WAAW,oBA8DlC,MAAM,IAAI/a,MAAM,mCAAqC8Z,EAAc,QAAI,KA9DhB,CACvD,IAAIwB,EAAM/J,EAAAA,GAAkBsJ,GAC5B,IACI,IACIU,EADS,IAAIhK,EAAAA,GAAa+J,EAAItB,MACblU,KAAKgU,EAAK0B,gBAAgBC,OAE/C3J,EAAWyJ,EAAQzV,KAAK,eAAgB,CAAEyM,MAAM,IAAQH,OACpD0H,EAAKqB,WAAWtI,YAChBiI,EAAWS,EAAQzV,KAAK,YAAa,CAAEyM,MAAM,IAAQH,QAGzDrS,EAAU,GACV,IAAI2b,EAAUH,EAAQzV,KAAK,QAC3B,IAASnJ,EAAI,EAAGA,EAAImV,EAASvS,OAAQ5C,IAAK,CACtC,KAAM4E,OAAO5E,KAAM+e,EAAQxB,UAAW,CAClCna,EAAQgB,KAAK,MACb,QACJ,CAEA,IAAI4a,EAAUD,EAAQ5V,KAAKvE,OAAO5E,GAAI,CAAE4V,MAAM,IAC1C2I,EAAUS,EAAQvJ,OAElBlV,EAAO4c,EAAKqB,WAAWpb,QAAQpD,GACnC,GAAY,WAARO,GACIge,aAAmBG,cAAgBH,aAAmBU,gBACtDV,EAAU,IAAIE,WAAWF,SAG1B,GAAY,UAARhe,EACDge,aAAmBG,cAAmBH,aAAmBU,eAC3DV,EAAU,IAAIG,aAAaH,SAG5B,GAAY,WAARhe,EAAmB,CAC1B,IAAI2e,EAAc,IAAIpc,MAAMyb,EAAQ3b,QACpC,IAAS5C,EAAI,EAAGA,EAAIue,EAAQ3b,OAAQ5C,KACb,YAAfue,EAAQve,GACRkf,EAAYlf,GAAK,KAEjBkf,EAAYlf,GAAmB,GAAdue,EAAQve,GAGjCue,EAAUW,CAEd,MAAO,IAAY,UAAR3e,GAA4B,QAARA,IACvB,8BAA+Bye,EAAQG,WAAY,CACnD,IAAIC,EAAcJ,EAAQK,cAAc,6BAA6B5J,OAAO,GAC5E,IAASzV,EAAI,EAAGA,EAAIue,EAAQ3b,OAAQ5C,IAC5Bue,EAAQve,IAAMof,IACdb,EAAQve,GAAK,KAGzB,CAGJoD,EAAQgB,KAAKma,EACjB,CACJ,CAAE,QACEI,EAAIrB,OACR,CAEJ,CAEA,CAEA,IAAIgC,EAAc,CAAC,EACfC,EAAe,GACnB,IAASvf,EAAI,EAAGA,EAAIoD,EAAQR,OAAQ5C,IAChC,GAAwC,UAApCmd,EAAKqB,WAAWpb,QAAQpD,GAAGO,KAAkB,CAC7C,IAAIif,QAAkBxB,EAAUC,SAASd,EAAKqB,WAAWpb,QAAQpD,GAAGyf,SAASpC,MAC7E,IACIiC,EAAYnK,EAASnV,UAAY+V,EAAgByJ,EAAWxB,GAC5DuB,EAAanb,KAAK+Q,EAASnV,GAC/B,CAAE,MAAOT,GACLmgB,QAAQC,KAAKpgB,EACjB,CACJ,MACI+f,EAAYnK,EAASnV,IAAMoD,EAAQpD,GACnCuf,EAAanb,KAAK+Q,EAASnV,IAInC,OAAO,IAAIqU,EAAAA,GAAeiL,EAAa,CACnCM,YAAaL,EACbpE,SAAUgD,EACVtD,aAAcsC,EAAKqB,WAAWqB,WAAW,IAEjD,CAEA,MAAMC,EAAuB,GAE7BzE,eAAe0E,EAAqB1C,EAAMW,GACtC,IAAIgC,EAAmB3E,UACnB,GAAI,aAAc4E,EAAQC,sBAAuB,CAC7C,IAAIC,EAAWF,EAAQC,sBAAsBE,SAASX,SAASpC,KAC/D,aAAatH,EAAgBoK,EAAUnC,EAC3C,CACI,OAAO,IAAI3J,EAAAA,GAAe,CAAC,EAAG,CAAEwG,aAAcoF,EAAQC,sBAAsBL,WAAW,IAC3F,EAGAQ,QAAkBrC,EAAUC,SAASZ,GACrCnI,EAAS,CAAC,EAGd,GAFAA,EAAO4K,SAA8BE,EAAiBK,GAElD,2BAA4BA,EAC5B,IAAK,MAAMC,KAAOD,EAAUE,uBAAuBC,wBAC/C,IACI,IAAIC,QAAiBzC,EAAUC,SAASqC,EAAIb,SAASpC,MACrDnI,EAAOoL,EAAI3Z,YAAcqZ,EAAiBS,EAC9C,CAAE,MAAOlhB,GACLmgB,QAAQC,KAAK,0DAA4DW,EAAI3Z,KAAO,MAAQpH,EAAEiK,QAClG,CAIR,OAAO0L,CACX,CAEAmG,eAAeqF,EAAwBrD,EAAMW,GACzC,IAAI2C,EAAsBV,IACtB,IAAI/K,EAAS,GACb,IAAK,MAAM0L,KAAOX,EAAQC,sBAAsBW,OAC5C3L,EAAO9Q,KAAKwc,EAAIja,MAEpB,OAAOuO,CAAM,EAGbmL,QAAkBrC,EAAUC,SAASZ,GACrCwD,EAAS,CAAC,EAGd,GAFAA,EAAOf,GAAwBa,EAAoBN,GAE/C,2BAA4BA,EAC5B,IAAK,MAAMC,KAAOD,EAAUE,uBAAuBC,wBAC/C,IACI,IAAIC,QAAiBzC,EAAUC,SAASqC,EAAIb,SAASpC,MACrDwD,EAAOP,EAAI3Z,MAAQga,EAAoBF,EAC3C,CAAE,MAAOlhB,GACLmgB,QAAQC,KAAK,0DAA4DW,EAAI3Z,KAAO,MAAQpH,EAAEiK,QAClG,CAIR,OAAOqX,CACX,CAwEAxF,eAAeyF,EAAc/c,EAAMgd,EAAO/C,EAAWgD,GACjD,GAAoB,iBAATD,EAAmB,CAC1B,IAAIE,EAAU,EACd,IAAK,MAAML,KAAO7c,EAAKmc,sBAAsBW,OAAQ,CACjD,GAAID,EAAIja,MAAQoa,EAAO,CACnBA,EAAQE,EACR,KACJ,CACAA,GACJ,CACA,GAAIA,GAAWld,EAAKmc,sBAAsBW,OAAOje,OAC7C,MAAM,IAAIS,MAAM,UAAY0d,EAAQ,cAE5C,MACI,GAAIA,GAAShd,EAAKmc,sBAAsBW,OAAOje,OAC3C,MAAM,IAAIS,MAAM,SAAWuB,OAAOmc,GAAS,iBAKnD,OAAOG,EADOnd,EAAKmc,sBAAsBW,OAAOE,GAAOtB,SAASpC,KAC9BW,EAAWgD,EACjD,CAEA3F,eAAe6F,EAAkBC,EAASnD,EAAWgD,GACjD,IAEI9L,EAFAkM,QAAgBpD,EAAUC,SAASkD,GACnCjD,QAAiBF,EAAU5X,KAAKgb,EAAQ/D,MAGxCgE,EAASD,EAAiB,QAC1BE,EAAWD,EAAOjD,WAAW,qBAC7BmD,EAAYF,EAAOjD,WAAW,uBAElC,GAAIkD,GAAYC,EAAW,CACvB,IAAI5a,EAAQ4a,EAAaH,EAAQI,mBAAmB1C,MAAQsC,EAAQK,iBAAiBC,QACjFC,EAAQ/M,EAAAA,GAAkBsJ,GAC9B,IACIhJ,EAASN,EAAAA,GAAqC+M,EAAMtE,KAAM1W,EAAM,CAAEqa,gBACtE,CAAE,QACEW,EAAMrE,OACV,CAEJ,KAAO,KAAI8D,EAAiB,QAAEhD,WAAW,uBAgBrC,MAAM,IAAI/a,MAAM,iBAAmB+d,EAAiB,QAAI,gCAhBK,CAC7D,IAAIO,EAAQ/M,EAAAA,GAAkBsJ,GAC9B,IACI,IACIU,EADU,IAAIhK,EAAAA,GAAa+M,EAAMtE,MACflU,KAAKiY,EAAQQ,mBAAmB9C,OAItD,GADA5J,QApHZmG,eAAiC5G,EAAQuJ,GACrC,GAAuD,cAAnDvJ,EAAO4K,cAAc,gBAAgB5J,OAAO,GAC5C,OAAO,KAEX,GAA4D,qBAAxDhB,EAAO4K,cAAc,qBAAqB5J,OAAO,GACjD,OAAO,KAEX,GAAIvL,KAAK8B,IAAIyI,EAAOtL,KAAK,QAAS,CAAEyM,MAAM,IAAQH,OAAO,GAAKvL,KAAK2X,IAAI,IAAM,KACzE,OAAO,KAEX,GAAwD,MAApDpN,EAAOtL,KAAK,SAAU,CAAEyM,MAAM,IAAQH,OAAO,GAC7C,OAAO,KAEX,GAAsD,UAAlDhB,EAAOtL,KAAK,OAAQ,CAAEyM,MAAM,IAAQH,OAAO,GAC3C,OAAO,KAGX,IAAIqM,EAAWrN,EAAOtL,KAAK,QAC3B,GAAyD,cAArD2Y,EAASzC,cAAc,gBAAgB5J,OAAO,GAC9C,OAAO,KAEX,GAA8D,eAA1DqM,EAASzC,cAAc,qBAAqB5J,OAAO,GACnD,OAAO,KAEX,GAA0D,UAAtDqM,EAAS3Y,KAAK,SAAU,CAAEyM,MAAM,IAAQH,OAAO,GAC/C,OAAO,KAGX,IAAIsM,EAAWD,EAAS3Y,KAAK,QAC7B,GAAyD,cAArD4Y,EAAS1C,cAAc,gBAAgB5J,OAAO,GAC9C,OAAO,KAEX,GAA8D,qBAA1DsM,EAAS1C,cAAc,qBAAqB5J,OAAO,GACnD,OAAO,KAEX,GAA0D,MAAtDsM,EAAS5Y,KAAK,SAAU,CAAEyM,MAAM,IAAQH,OAAO,GAC/C,OAAO,KAEX,GAAwD,UAApDsM,EAAS5Y,KAAK,OAAQ,CAAEyM,MAAM,IAAQH,OAAO,GAC7C,OAAO,KAEX,GAAyD,IAArDsM,EAAS5Y,KAAK,QAAS,CAAEyM,MAAM,IAAQH,OAAO,GAC9C,OAAO,KAEX,IAAIuM,EAAKD,EAAS5Y,KAAK,QAAS,CAAEyM,MAAM,IAAQH,OAE5CwM,EAAUF,EAAS5Y,KAAK,QAC5B,GAAwD,UAApD8Y,EAAQ5C,cAAc,gBAAgB5J,OAAO,GAC7C,OAAO,KAEX,GAAyD,iCAArDwM,EAAQ5C,cAAc,iBAAiB5J,OAAO,GAC9C,OAAO,KAEX,IAEIyM,EAFA7E,EAAO4E,EAAQ9Y,KAAK,OAAQ,CAAEyM,MAAM,IAAQH,OAAO,GAGnDP,EAAS,CAAC,EACd,IACIgN,QAAYhB,EAAkB7D,EAAMW,GAAW,GAC/C9I,EAAOyD,OAAS/D,EAAAA,GAAoBsN,EAAIvJ,OAAQ,CAAEwJ,YAAaH,EAAII,QAAQ,IAC3ElN,EAAO4D,QAAUoJ,EAAIpJ,OACzB,CAAE,QACElE,EAAAA,GAAWsN,EAAIvJ,OACnB,CAEA,OAAOzD,CACX,CAkD2BmN,CAAkBzD,EAASZ,GAC5B,MAAV9I,EACA,MAAM,IAAI7R,MAAM,2EAExB,CAAE,QACEse,EAAMrE,OACV,CAEJ,CAEA,CAEA,OAAOpI,CACX,CAEAmG,eAAeiH,EAAmBC,EAAYvE,GAC1C,IAAIwE,QAAkBxE,EAAUC,SAASsE,GACzC,IAAKC,EAAmB,QAAEpE,WAAW,qBACjC,MAAM,IAAI/a,MAAM,mEAGpB,IAAI6a,QAAiBF,EAAU5X,KAAKoc,EAAUnF,MAC1CoF,EAAQ,IAAIlG,EAAAA,EAAiB2B,EAAU,CAAEvX,KAAM,cAC/C+b,EAAWhF,EAAAA,EAAkB+E,EAAMrJ,SAAU,CAAEuJ,YAAwD,QAA1CH,EAAUI,iBAAiBD,YAAwB,KAAO,SAE3H,OAAOE,EADMnf,KAAKpE,MAAMojB,GAE5B,CAEA,SAASG,EAA2BjP,GAChC,KAAM,SAAUA,GACZ,MAAM,IAAIvQ,MAAM,0DAGpB,GAAgB,UAAZuQ,EAAIrT,KAAkB,CACtB,GAAIqT,EAAI6B,kBAAkB3S,MAAO,CAC7B,IAAIoS,EAAS,IAAIwJ,aAAa9K,EAAI6B,OAAO7S,QAIzC,OAHAgR,EAAI6B,OAAOjK,SAAQ,CAACuC,EAAG/N,KACnBkV,EAAOlV,GAAY,OAAN+N,EAAa8E,OAAOiQ,IAAM/U,CAAE,IAEtCmH,CACX,CACI,OAAsB,MAAdtB,EAAI6B,OAAiB5C,OAAOiQ,IAAMlP,EAAI6B,MAGtD,CAAO,GAAgB,WAAZ7B,EAAIrT,KAAmB,CAC9B,GAAIqT,EAAI6B,kBAAkB3S,MAAO,CAC7B,IAAIoS,EAAS,IAAIuJ,WAAW7K,EAAI6B,OAAO7S,QAIvC,OAHAgR,EAAI6B,OAAOjK,SAAQ,CAACuC,EAAG/N,KACnBkV,EAAOlV,GAAY,OAAN+N,GAAc,WAAaA,CAAE,IAEvCmH,CACX,CACI,OAAOtB,EAAI6B,MAGnB,CAAO,GAAgB,WAAZ7B,EAAIrT,MAAiC,UAAZqT,EAAIrT,KACpC,OAAOqT,EAAI6B,OAER,GAAgB,QAAZ7B,EAAIrT,KAAgB,CAC3B,GAAI,UAAWqT,EAAK,CAChB,IAAIsB,EAAS,CAAC,EACd,IAAK,IAAIlV,EAAI,EAAGA,EAAI4T,EAAI6B,OAAO7S,OAAQ5C,IACnCkV,EAAOtB,EAAIyB,MAAMrV,IAAM6iB,EAA2BjP,EAAI6B,OAAOzV,IAEjE,OAAOkV,CACX,CAAO,CACH,IAAIA,EAAS,GACb,IAASlV,EAAI,EAAGA,EAAI4T,EAAI6B,OAAO7S,OAAQ5C,IACnCkV,EAAO9Q,KAAKye,EAA2BjP,EAAI6B,OAAOzV,KAEtD,OAAOkV,CACX,CAEJ,CAAO,MAAgB,WAAZtB,EAAIrT,MAIXmf,QAAQC,KAAK,qCAAuC/L,EAAIrT,KAAO,0BAHxD,IAMf,CAOA,IAAAwiB,EAAA,IAAAzM,QAAA0M,EAAA,IAAA1M,QACA,MAAM2M,EAIF5e,WAAAA,CAAY6e,IAAK3L,EAAAA,EAAAA,GAAA,KAAAwL,EAAA,CAAAvL,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAyL,EAAA,CAAAxL,UAAA,EAAAxD,WAAA,KACbyD,EAAAA,EAAAA,GAAA7R,KAAImd,EAAcG,IAClBzL,EAAAA,EAAAA,GAAA7R,KAAIod,EAAmB,CAAC,EAC5B,CAEApL,KAAAA,IACIH,EAAAA,EAAAA,GAAA7R,KAAIod,EAAmB,CAAC,GACpB,UAAOtL,EAAAA,EAAAA,GAAI9R,KAAImd,KACfrL,EAAAA,EAAAA,GAAA9R,KAAImd,GAAYnL,OAExB,CAEA,cAAMqG,CAASZ,GACX,GAAIA,KAAI3F,EAAAA,EAAAA,GAAI9R,KAAIod,GACZ,OAAOtL,EAAAA,EAAAA,GAAA9R,KAAIod,GAAiB3F,GACzB,CACH,IAAID,QAAgB1F,EAAAA,EAAAA,GAAA9R,KAAImd,GAAY9E,SAASZ,GAE7C,OADA3F,EAAAA,EAAAA,GAAA9R,KAAIod,GAAiB3F,GAAQD,EACtBA,CACX,CACJ,CAEAhX,IAAAA,CAAKiX,GACD,OAAO3F,EAAAA,EAAAA,GAAA9R,KAAImd,GAAY3c,KAAKiX,EAChC,EAOJ,IAAA8F,EAAA,IAAA7M,QAAA8M,EAAA,IAAA9M,QAAAyF,EAAA,IAAAzF,QAAA0F,EAAA,IAAA1F,QAAAK,EAAA,IAAAL,QAAA+M,EAAA,IAAAxM,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAuF,EAAA,IAAAvF,QAMO,MAAMyM,EAaTjf,WAAAA,CAAYgZ,EAAMW,IAAWrK,EAAAA,EAAAA,GAAA,KAAAyI,IAAAzI,EAAAA,EAAAA,GAAA,KAAAoD,IAAApD,EAAAA,EAAAA,GAAA,KAAAmD,IAAAnD,EAAAA,EAAAA,GAAA,KAAA0P,IAAA9L,EAAAA,EAAAA,GAAA,KAAA4L,EAAA,CAAA3L,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA6L,EAAA,CAAA5L,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAwE,EAAA,CAAAvE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAyE,EAAA,CAAAxE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAZ,EAAA,CAAAa,UAAA,EAAAxD,WAAA,KACzByD,EAAAA,EAAAA,GAAA7R,KAAIud,EAAS9F,IACb5F,EAAAA,EAAAA,GAAA7R,KAAIwd,EAAc,IAAIH,EAAqBjF,KAC3CvG,EAAAA,EAAAA,GAAA7R,KAAI+Q,EAAY2M,EAA0B3L,aAO1CnE,EAAAA,EAAAA,GAAA5N,KAAIyd,EAAAE,GAAAxb,KAAJnC,KAEJ,CAKA,eAAO+R,GACH,MAAO,CACH6L,cAAe,EACfC,cAAe,EACfC,iBAAkB,EAClBC,cAAe,GACfC,cAAe,mBACfC,iBAAkB,uBAClBhM,0BAA2B,KAC3B8E,0BAA2B,KAC3BC,6BAA8B,KAEtC,CAKAjO,OAAAA,GACI,MAAO,KAAE+I,EAAAA,EAAAA,GAAI9R,KAAI+Q,GACrB,CAgCAmB,UAAAA,CAAWnJ,GACP,IAAK,MAAOpD,EAAGvH,KAAM9B,OAAO2S,QAAQlG,IAChC+I,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUpL,GAAKvH,CAE3B,CAWA4T,KAAAA,IACIpE,EAAAA,EAAAA,GAAA5N,KAAIyd,EAAAE,GAAAxb,KAAJnC,OACA8R,EAAAA,EAAAA,GAAA9R,KAAIwd,GAAYxL,OACpB,CAmCA,aAAMI,GAAgC,IAAxB,MAAEC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QAC/B4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAImR,EAAAoB,GAAApQ,KAAJnC,MAEN,IAAIsP,EAAS,CACTqD,mBAAiBb,EAAAA,EAAAA,GAAE9R,KAAImW,GACvB3D,OAAKV,EAAAA,EAAAA,GAAE9R,KAAIoW,GACX8H,2BAA4BpD,GAAuBhJ,EAAAA,EAAAA,GAAC9R,KAAIud,IAAAzL,EAAAA,EAAAA,GAAQ9R,KAAIwd,KAMxE,OAHKnL,GACDrS,KAAKgS,QAEF1C,CACX,CAoBA,uBAAMsD,GAA0C,IAAxB,MAAEP,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QACzC4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,MAEN,IAAIme,EAAW,CACX7K,KAAKxB,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUgN,cACnB7F,KAAKpG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUiN,cACnB7F,QAAQrG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUkN,kBAGtBvb,EAAUwU,EAAAA,IAAgCpF,EAAAA,EAAAA,GAAC9R,KAAImW,GAAgBgI,GAAQvQ,EAAAA,EAAAA,GAAE5N,KAAIwW,EAAAY,GAAAjV,KAAJnC,OAK7E,OAHKqS,GACDrS,KAAKgS,QAEFtP,CACX,CAqBA,UAAMsN,GAA6B,IAAxB,MAAEqC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QAC5B4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAImR,EAAAoB,GAAApQ,KAAJnC,MAEN,IAAIsP,EAAS,CACTyD,OAAQ,IAAI/D,EAAAA,GACZoE,SAAU,CAAC,EACXZ,OAAKV,EAAAA,EAAAA,GAAE9R,KAAIoW,IAGXgI,EAAU,CACV9K,IAAK,CAAE+K,KAAKvM,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUgN,cAAe5C,OAAOrJ,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU6M,eAC9D1F,IAAK,CAAEmG,KAAKvM,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUiN,cAAe7C,OAAOrJ,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU8M,eAC9D1F,OAAQ,CAAEkG,KAAKvM,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUkN,iBAAkB9C,OAAOrJ,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU+M,mBAGpErD,QAAkB3I,EAAAA,EAAAA,GAAA9R,KAAIwd,GAAYnF,UAAQvG,EAAAA,EAAAA,GAAC9R,KAAIud,IAC/Ce,EAAS,CAAC,EACVC,EAAO,GACX,GAAI,2BAA4B9D,EAAW,CACvC8D,EAAO9D,EAAUE,uBAAuBC,wBACxC,IAAK,MAAMF,KAAO6D,EACdD,EAAO5D,EAAI3Z,MAAQ2Z,EAAIb,SAASpC,IAExC,CAEA,IACI,IAAK,MAAO9R,EAAGvH,KAAM9B,OAAO2S,QAAQmP,GAAU,CAC1C,GAAc,OAAVhgB,EAAEigB,IACF,SAGJ,IAAIlgB,EAAO,KACP4C,EAAO3C,EAAEigB,IACb,GAAoB,iBAATjgB,EAAEigB,IACT,GAAc,KAAVjgB,EAAEigB,IACFlgB,EAAOsc,MACJ,CACH,KAAMrc,EAAEigB,OAAOC,GACX,SAEJngB,QAAa2T,EAAAA,EAAAA,GAAA9R,KAAIwd,GAAYnF,SAASiG,EAAOlgB,EAAEigB,KACnD,KACG,CACH,GAAIjgB,EAAEigB,KAAOE,EAAKvhB,OACd,SAEJ+D,EAAOwd,EAAKngB,EAAEigB,KAAKtd,KACnB5C,QAAa2T,EAAAA,EAAAA,GAAA9R,KAAIwd,GAAYnF,SAASkG,EAAKngB,EAAEigB,KAAKxE,SAASpC,KAC/D,CAEA,IAAIJ,QAAe6D,EAAc/c,EAAMC,EAAE+c,OAAKrJ,EAAAA,EAAAA,GAAE9R,KAAIwd,IAAa,GACjElO,EAAOyD,OAAO9E,IAAItI,EAAG0R,EAAOtE,QAC5BzD,EAAO8D,SAASzN,GAAK8I,EAAAA,IAAWqD,EAAAA,EAAAA,GAAA9R,KAAImW,GAAepV,GAAOsW,EAAOnE,QACrE,CAEA5D,EAAO+D,YAAc6D,EAAAA,GAAyB5H,EAAO8D,UAAQxF,EAAAA,EAAAA,GAAE5N,KAAIwW,EAAAY,GAAAjV,KAAJnC,MAEnE,CAAE,MAAOrG,GAEL,MADAqV,EAAAA,GAAWM,EAAOyD,QACZpZ,CACV,CAKA,OAHK0Y,GACDrS,KAAKgS,QAEF1C,CACX,EACH,SAAAqO,KAxLO9L,EAAAA,EAAAA,GAAA7R,KAAImW,EAAiB,OACrBtE,EAAAA,EAAAA,GAAA7R,KAAIoW,EAAc,KACtB,CAAC,eAAA9D,IAY8B,QAAvBR,EAAAA,EAAAA,GAAA9R,KAAImW,KAGRtE,EAAAA,EAAAA,GAAA7R,KAAImW,QAAuBgE,GAAoBrI,EAAAA,EAAAA,GAAC9R,KAAIud,IAAAzL,EAAAA,EAAAA,GAAQ9R,KAAIwd,IAEpE,CAAC,eAAAjL,IAGG,GAAwB,QAApBT,EAAAA,EAAAA,GAAA9R,KAAIoW,GACJ,OAEJ,IACIoI,SADkB1M,EAAAA,EAAAA,GAAA9R,KAAIwd,GAAYnF,UAAQvG,EAAAA,EAAAA,GAAC9R,KAAIud,KAC1BjD,sBAAsBmE,YAAY5E,SAASpC,MACpE5F,EAAAA,EAAAA,GAAA7R,KAAIoW,QAAoBjG,EAAgBqO,GAAQ1M,EAAAA,EAAAA,GAAE9R,KAAIwd,IAE1D,CAAC,SAAApG,IAkCG,MAAO,CACH9D,KAAKxB,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUkB,0BACnBiG,KAAKpG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUgG,0BACnBoB,QAAQrG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUiG,6BAE9B,CA4HJ,IAAA0H,EAAA,IAAAhO,QAAAiO,EAAA,IAAAjO,QAAAkO,EAAA,IAAAlO,QAAAmO,EAAA,IAAAnO,QAAAoO,EAAA,IAAApO,QAAAqO,EAAA,IAAArO,QAAAsO,EAAA,IAAA/N,QAAAgO,EAAA,IAAAhO,QAAAiO,EAAA,IAAAjO,QAAAkO,EAAA,IAAAlO,QAAAmO,EAAA,IAAAnO,QAIO,MAAMoO,EAcT5gB,WAAAA,CAAYgZ,EAAMW,IAAWrK,EAAAA,EAAAA,GAAA,KAAAqR,IAAArR,EAAAA,EAAAA,GAAA,KAAAoR,IAAApR,EAAAA,EAAAA,GAAA,KAAAmR,IAAAnR,EAAAA,EAAAA,GAAA,KAAAkR,IAAAlR,EAAAA,EAAAA,GAAA,KAAAiR,IAAArN,EAAAA,EAAAA,GAAA,KAAA+M,EAAA,CAAA9M,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAgN,EAAA,CAAA/M,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAiN,EAAA,CAAAhN,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAkN,EAAA,CAAAjN,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmN,EAAA,CAAAlN,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoN,EAAA,CAAAnN,UAAA,EAAAxD,WAAA,KACzByD,EAAAA,EAAAA,GAAA7R,KAAI0e,EAASjH,IACb5F,EAAAA,EAAAA,GAAA7R,KAAI2e,EAAc,IAAItB,EAAqBjF,KAC3CvG,EAAAA,EAAAA,GAAA7R,KAAI+e,EAAYM,EAAyBtN,aAGzCnE,EAAAA,EAAAA,GAAA5N,KAAIgf,EAAAM,GAAAnd,KAAJnC,KACJ,CAKA,eAAO+R,GACH,MAAO,CACHwN,aAAc,EACdC,qBAAqB,EACrBC,sBAAuB,KAE/B,CAKA1W,OAAAA,GACI,MAAO,KAAE+I,EAAAA,EAAAA,GAAI9R,KAAI+e,GACrB,CAmBA7M,UAAAA,CAAWnJ,GAEP,IAAK,MAAOpD,EAAGvH,KAAM9B,OAAO2S,QAAQlG,IAChC+I,EAAAA,EAAAA,GAAA9R,KAAI+e,GAAUpZ,GAAK8I,EAAAA,GAAWrQ,EAEtC,CAYA4T,KAAAA,IACIpE,EAAAA,EAAAA,GAAA5N,KAAIgf,EAAAM,GAAAnd,KAAJnC,OACA8R,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAY3M,OACpB,CA6DA,aAAMI,GAAgC,IAAxB,MAAEC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QAC/B4I,EAAAA,EAAAA,GAAM5N,KAAIif,EAAAS,GAAAvd,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAIkf,EAAAS,GAAAxd,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAImf,EAAAS,GAAAzd,KAAJnC,MAEN,IAAIsP,EAAS,CACTqD,mBAAiBb,EAAAA,EAAAA,GAAE9R,KAAI4e,GACvBpM,OAAKV,EAAAA,EAAAA,GAAE9R,KAAI6e,GACXX,2BAA4BpD,GAAuBhJ,EAAAA,EAAAA,GAAC9R,KAAI0e,IAAA5M,EAAAA,EAAAA,GAAQ9R,KAAI2e,IACpEkB,wBAAyB,GACzBC,gBAAchO,EAAAA,EAAAA,GAAE9R,KAAI8e,IAGpBrE,QAAkB3I,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAYtG,UAAQvG,EAAAA,EAAAA,GAAC9R,KAAI0e,IACnD,GAAI,2BAA4BjE,EAAW,CACvC,IAAIsF,EAActF,EAAUE,uBAAuBqF,yBACnDpS,EAAAA,EAAAA,GAAM5N,KAAIof,EAAAa,IAAA9d,KAAJnC,KAA2B+f,EAAazQ,EAAOuQ,wBACzD,CAKA,OAHKxN,GACDrS,KAAKgS,QAEF1C,CACX,CAmBA,UAAMU,GAA6B,IAAxB,MAAEqC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QAC5B4I,EAAAA,EAAAA,GAAM5N,KAAIif,EAAAS,GAAAvd,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAIkf,EAAAS,GAAAxd,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAImf,EAAAS,GAAAzd,KAAJnC,MAEN,IAAIya,QAAkB3I,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAYtG,UAAQvG,EAAAA,EAAAA,GAAC9R,KAAI0e,IAE/CpP,EAAS,CACTyD,OAAQ,IAAI/D,EAAAA,GACZoE,SAAU,CAAC,EACXZ,OAAKV,EAAAA,EAAAA,GAAE9R,KAAI6e,GACXmB,mBAAoB,CAAC,EACrBF,gBAAchO,EAAAA,EAAAA,GAAE9R,KAAI8e,IAIxB,CACI,IAAIoB,GAAUpO,EAAAA,EAAAA,GAAA9R,KAAI+e,GAAUU,sBACxBM,EAActF,EAAUE,uBAAuBqF,mBAOnD,GALe,MAAXE,IACAA,EAAU,SACVtS,EAAAA,EAAAA,GAAM5N,KAAIof,EAAAa,IAAA9d,KAAJnC,KAA2B+f,EAAaG,IAG9CA,EAAQljB,OAAS,EAAG,CACpB,IAAImjB,EAAS,CAAC,EACd,IAAK,MAAM3T,KAAOuT,EACdI,EAAO3T,EAAIzL,MAAQyL,EAAIqN,SAASpC,KAGpC,IAAK,MAAM9R,KAAKua,EAAS,CACrB,IAAIE,QAAgBtO,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAYtG,SAAS8H,EAAOxa,IAChD0a,EAAOD,EAAQE,MAAMrG,WACrBsG,QAAoBzO,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAYne,KAAK4f,EAAQ3I,MAEjD+I,EAAWxR,EAAAA,GAAkBuR,GAC7BE,EAAW,GACf,IACI,IAEInI,EAFU,IAAItJ,EAAAA,GAAawR,EAAS/I,MAClBlU,KAAK6c,EAAQvE,iBAAiBC,QAAS,CAAE9L,MAAM,IAC9CH,OACvB,IAAK,IAAItR,EAAI,EAAGA,EAAI8hB,EAAK,GAAI9hB,IACzBkiB,EAASjiB,KAAK8Z,EAASzc,MAAM0C,EAAI8hB,EAAK,IAAK9hB,EAAI,GAAK8hB,EAAK,IAEjE,CAAE,QACEG,EAAS9I,OACb,CAEApI,EAAO0Q,mBAAmBra,GAAK8a,CACnC,CACJ,CACJ,CAGA,CACI,IAAInC,EAAS,CAAC,EACd,GAAI,2BAA4B7D,EAC5B,IAAK,MAAMC,KAAOD,EAAUE,uBAAuBC,wBAC/C0D,EAAO5D,EAAI3Z,MAAQ2Z,EAAIb,SAASpC,KAIxC,IACI,IAAK,MAAO9R,EAAGvH,KAAM9B,OAAO2S,SAAO6C,EAAAA,EAAAA,GAAC9R,KAAI4e,IAAiB,CACrD,IAAI8B,GAAW5O,EAAAA,EAAAA,GAAA9R,KAAI+e,GAAUQ,aAC7B,GAAuB,iBAAZmB,EAAsB,CAC7B,KAAI/a,KAAK+a,GAGL,SAFAA,EAAWA,EAAS/a,EAI5B,CAEA,IASIxH,EATAwiB,GAAgB7O,EAAAA,EAAAA,GAAA9R,KAAI+e,GAAUS,oBACN,iBAAjBmB,IAEHA,IADAhb,KAAKgb,IACWA,EAAchb,IAQlCxH,EADM,KAANwH,EACO8U,QAEM3I,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAYtG,SAASiG,EAAO3Y,IAGjD,IAAI0R,QAAe6D,EAAc/c,EAAMuiB,GAAQ5O,EAAAA,EAAAA,GAAE9R,KAAI2e,IAAcgC,GAGnE,GAFArR,EAAOyD,OAAO9E,IAAItI,EAAG0R,EAAOtE,SAEvB4N,EAAe,CAChB,IAAIC,EAAS5R,EAAAA,GAAoBqI,EAAOtE,OAAQ,CAAE8N,YAAY,IAC9DvR,EAAOyD,OAAO9E,IAAItI,EAAGib,EACzB,CAEuB,OAAnBvJ,EAAOnE,QACP5D,EAAO8D,SAASzN,GAAK8I,EAAAA,IAAWqD,EAAAA,EAAAA,GAAA9R,KAAI4e,GAAejZ,GAAI0R,EAAOnE,SAE9D5D,EAAO8D,SAASzN,IAAKmM,EAAAA,EAAAA,GAAA9R,KAAI4e,GAAejZ,EAEhD,CAEJ,CAAE,MAAOhM,GAEL,MADAqV,EAAAA,GAAWM,EAAOyD,QACZpZ,CACV,CACJ,CAKA,OAHK0Y,GACDrS,KAAKgS,QAEF1C,CACX,EACH,SAAAgQ,KAvOOzN,EAAAA,EAAAA,GAAA7R,KAAI4e,EAAiB,OACrB/M,EAAAA,EAAAA,GAAA7R,KAAI6e,EAAc,OAClBhN,EAAAA,EAAAA,GAAA7R,KAAI8e,EAAc,KACtB,CAAC,eAAAY,IAY8B,QAAvB5N,EAAAA,EAAAA,GAAA9R,KAAI4e,KAGR/M,EAAAA,EAAAA,GAAA7R,KAAI4e,QAAuBzE,GAAoBrI,EAAAA,EAAAA,GAAC9R,KAAI0e,IAAA5M,EAAAA,EAAAA,GAAQ9R,KAAI2e,IAEpE,CAAC,eAAAgB,IAGG,GAAwB,QAApB7N,EAAAA,EAAAA,GAAA9R,KAAI6e,GACJ,OAEJ,IACIL,SADkB1M,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAYtG,UAAQvG,EAAAA,EAAAA,GAAC9R,KAAI0e,KAC1BpE,sBAAsBmE,YAAY5E,SAASpC,MACpE5F,EAAAA,EAAAA,GAAA7R,KAAI6e,QAAoB1O,EAAgBqO,GAAQ1M,EAAAA,EAAAA,GAAE9R,KAAI2e,IAE1D,CAAC,eAAAiB,IAGG,GAAwB,QAApB9N,EAAAA,EAAAA,GAAA9R,KAAI8e,GACJ,OAGJ,IAAIrE,QAAkB3I,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAYtG,UAAQvG,EAAAA,EAAAA,GAAC9R,KAAI0e,IACnD,GAAI,eAAgBjE,EAAUH,sBAAuB,CACjD,IAAIqC,EAAalC,EAAUH,sBAAsBwG,WAAWjH,SAASpC,MACrE5F,EAAAA,EAAAA,GAAA7R,KAAI8e,QAAoBpC,EAAmBC,GAAU7K,EAAAA,EAAAA,GAAE9R,KAAI2e,IAC/D,MACI9M,EAAAA,EAAAA,GAAA7R,KAAI8e,EAAc,CAAC,EAG3B,CAAC,eAAAmB,GAE2Bc,EAASC,GACjC,IAAK,MAAMxU,KAAOuU,EAAS,CACvB,IAAIX,QAAgBtO,EAAAA,EAAAA,GAAA9R,KAAI2e,GAAYtG,SAAS7L,EAAIqN,SAASpC,MACtD2I,EAAiB,QAAE5H,WAAW,sBAA2D,GAAnC4H,EAAQE,MAAMrG,WAAWjd,QAC/EgkB,EAAMxiB,KAAKgO,EAAIzL,KAEvB,CACJ,0ICr2BG,MAAMkgB,EAMTxiB,WAAAA,CAAY0J,GAAyB,IAAtB,KAAEpH,EAAO,MAAMiE,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9B,IAD+B2M,EAAAA,EAAAA,GAAA,KAAAuP,EAAA,CAAAtP,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAwP,EAAA,CAAAvP,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAyP,EAAA,CAAAxP,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA0P,EAAA,CAAAzP,UAAA,EAAAxD,WAAA,IAC3BjG,aAAa9L,MACbwV,EAAAA,EAAAA,GAAA7R,KAAIkhB,EAAS,SACbrP,EAAAA,EAAAA,GAAA7R,KAAIohB,EAASjZ,GACA,OAATpH,IACAA,EAAOoH,EAAEpH,OAEb8Q,EAAAA,EAAAA,GAAA7R,KAAIqhB,EAAStgB,OACV,MAAIoH,aAAa2N,YAQpB,MAAM,IAAIrY,MAAM,wBAA0B0K,EAAK,gCAL/C,IAFA0J,EAAAA,EAAAA,GAAA7R,KAAIkhB,EAAS,WACbrP,EAAAA,EAAAA,GAAA7R,KAAImhB,EAAWhZ,GACF,OAATpH,EACA,MAAM,IAAItD,MAAM,4EAEpBoU,EAAAA,EAAAA,GAAA7R,KAAIqhB,EAAStgB,EAGjB,CACJ,CAEAyS,MAAAA,GAA8B,IAAvB,KAAE8N,GAAO,GAAOtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvB,GAAkB,SAAd8M,EAAAA,EAAAA,GAAA9R,KAAIkhB,GAAkB,CACtB,IACIznB,GADS,IAAI4K,gBACFkd,mBAAiBzP,EAAAA,EAAAA,GAAC9R,KAAIohB,IACrC,OAAO,IAAItL,WAAWrc,EAC1B,CACI,OAAI6nB,GACOxP,EAAAA,EAAAA,GAAA9R,KAAImhB,GAAStlB,SAEpBiW,EAAAA,EAAAA,GAAO9R,KAAImhB,EAGvB,CAEA3c,IAAAA,GACI,MAAkB,SAAdsN,EAAAA,EAAAA,GAAA9R,KAAIkhB,IACGpP,EAAAA,EAAAA,GAAA9R,KAAIohB,GAAO5c,MAEXsN,EAAAA,EAAAA,GAAA9R,KAAImhB,GAASnkB,MAE5B,CAEA+D,IAAAA,GACI,OAAA+Q,EAAAA,EAAAA,GAAO9R,KAAIqhB,EACf,CAEA7J,OAAAA,GAA+B,IAAvB,KAAE8J,GAAO,GAAOtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxB,OAAOhF,KAAKwT,OAAO,CAAE8N,KAAMA,GAC/B,wJChDJE,EAAA,IAAA9Q,QAAA+Q,EAAA,IAAA/Q,QAAAgR,EAAA,IAAAhR,QAAAiR,EAAA,IAAAjR,QAAAyF,EAAA,IAAAzF,QAAA0F,EAAA,IAAA1F,QAAAK,EAAA,IAAAL,QAAA2F,EAAA,IAAApF,QAAA2Q,EAAA,IAAA3Q,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAsF,EAAA,IAAAtF,QAAAuF,EAAA,IAAAvF,QAGO,MAAM4Q,EAmCTpjB,WAAAA,CAAYqjB,EAAYC,EAAaC,GAO7B,IAP0C,mBAC9CpL,EAAqB,kBAAiB,mBACtCC,EAAqB,mBAAkB,sBACvCC,EAAwB,uBAAsB,0BAC9C7E,EAA4B,EAAC,0BAC7B8E,EAA4B,EAAC,6BAC7BC,EAA+B,GAClChS,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GAAC+I,EAAAA,EAAAA,GAAA,KAAAyI,IAAAzI,EAAAA,EAAAA,GAAA,KAAAwI,IAAAxI,EAAAA,EAAAA,GAAA,KAAAoD,IAAApD,EAAAA,EAAAA,GAAA,KAAAmD,IAAAnD,EAAAA,EAAAA,GAAA,KAAA6T,IAAA7T,EAAAA,EAAAA,GAAA,KAAAsI,IAAA1E,EAAAA,EAAAA,GAAA,KAAA6P,EAAA,CAAA5P,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA8P,EAAA,CAAA7P,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA+P,EAAA,CAAA9P,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAgQ,EAAA,CAAA/P,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAwE,EAAA,CAAAvE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAyE,EAAA,CAAAxE,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAZ,EAAA,CAAAa,UAAA,EAAAxD,WAAA,IACE0T,aAAsBnL,EAAAA,GACtB9E,EAAAA,EAAAA,GAAA7R,KAAIwhB,EAAgBM,IAEpBjQ,EAAAA,EAAAA,GAAA7R,KAAIwhB,EAAgB,IAAI7K,EAAAA,EAAiBmL,IAGzCC,aAAuBpL,EAAAA,GAAmC,MAAfoL,GAC3ClQ,EAAAA,EAAAA,GAAA7R,KAAIyhB,EAAiBM,IAErBlQ,EAAAA,EAAAA,GAAA7R,KAAIyhB,EAAiB,IAAI9K,EAAAA,EAAiBoL,IAG1CC,aAAuBrL,EAAAA,GAAmC,MAAfqL,GAC3CnQ,EAAAA,EAAAA,GAAA7R,KAAI0hB,EAAiBM,IAErBnQ,EAAAA,EAAAA,GAAA7R,KAAI0hB,EAAiB,IAAI/K,EAAAA,EAAiBqL,KAG9CnQ,EAAAA,EAAAA,GAAA7R,KAAI+Q,EAAY8Q,EAAwB9P,YACxC/R,KAAKgS,OACT,CAKA,eAAOD,GACH,MAAO,CACH6E,mBAAoB,kBACpBC,mBAAoB,mBACpBC,sBAAuB,uBACvB7E,0BAA2B,EAC3B8E,0BAA2B,EAC3BC,6BAA8B,EAEtC,CAKAjO,OAAAA,GACI,MAAO,KAAE+I,EAAAA,EAAAA,GAAI9R,KAAI+Q,GACrB,CAwBAmB,UAAAA,CAAWnJ,GACP,IAAK,MAAOpD,EAAGvH,KAAM9B,OAAO2S,QAAQlG,IAChC+I,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUpL,GAAKvH,CAE3B,CAMA4T,KAAAA,IACIH,EAAAA,EAAAA,GAAA7R,KAAI2hB,EAAe,OACnB9P,EAAAA,EAAAA,GAAA7R,KAAImW,EAAiB,OACrBtE,EAAAA,EAAAA,GAAA7R,KAAIoW,EAAc,KACtB,CAMA,aAAO3L,GACH,MAAO,cACX,CAMA0H,UAAAA,CAAW0B,GACP,OAAAjG,EAAAA,EAAAA,GAAO5N,KAAIqW,EAAAY,GAAA9U,KAAJnC,MAAmBjH,IAAc,CAAEgI,KAAMhI,EAAEgI,OAAQyD,KAAMzL,EAAEyL,UACtE,CAwHA,aAAM4N,GAAgC,IAAxB,MAAEC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QAC/B4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAImR,EAAAoB,GAAApQ,KAAJnC,MAEN,IAAIsP,EAAS,CACT,kBAAqB4H,EAAAA,IAAqBpF,EAAAA,EAAAA,GAAC9R,KAAImW,GAAgB,QAC/D,OAAOrE,EAAAA,EAAAA,GAAE9R,KAAIoW,IAMjB,OAHK/D,GACDrS,KAAKgS,QAEF1C,CACX,CA2BA,uBAAMsD,GAA0C,IAAxB,MAAEP,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QACzC4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,MACN,IAAI0C,EAAUwU,EAAAA,IAA6BpF,EAAAA,EAAAA,GAAC9R,KAAImW,GAAgB,QAAMvI,EAAAA,EAAAA,GAAE5N,KAAIuW,EAAAY,GAAAhV,KAAJnC,MAA8B,OAAK4N,EAAAA,EAAAA,GAAE5N,KAAIwW,EAAAY,GAAAjV,KAAJnC,OAI7G,OAHKqS,GACDrS,KAAKgS,QAEFtP,CACX,CAwBA,UAAMsN,GAA6B,IAAxB,MAAEqC,GAAQ,GAAOrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,QAC5B4I,EAAAA,EAAAA,GAAM5N,KAAIkR,EAAAoB,GAAAnQ,KAAJnC,YACN4N,EAAAA,EAAAA,GAAM5N,KAAImR,EAAAoB,GAAApQ,KAAJnC,MAEN,IAAIiiB,GAAQnQ,EAAAA,EAAAA,GAAA9R,KAAIwhB,GAAczgB,OAAOmhB,SAAS,OAC9C,IAAI7K,EAASrI,EAAAA,IAA6C8C,EAAAA,EAAAA,GAAA9R,KAAIwhB,GAAchK,UAAW,CAAE,WAAcyK,IAEnG3S,EAAS4H,EAAAA,GAAmCG,GAAMvF,EAAAA,EAAAA,GAAE9R,KAAImW,GAAgB,QAAMvI,EAAAA,EAAAA,GAAE5N,KAAIuW,EAAAY,GAAAhV,KAAJnC,MAA8B,OAQlH,OAPAsP,EAAOkD,OAAKV,EAAAA,EAAAA,GAAG9R,KAAIoW,GAEnB9G,EAAO+D,YAAc6D,EAAAA,GAAyB5H,EAAO8D,UAAQxF,EAAAA,EAAAA,GAAE5N,KAAIwW,EAAAY,GAAAjV,KAAJnC,OAE1DqS,GACDrS,KAAKgS,QAEF1C,CACX,CAWA,eAAMiE,GACF,OAAA3F,EAAAA,EAAAA,GAAO5N,KAAIqW,EAAAY,GAAA9U,KAAJnC,MAAmBjH,GAAKA,GACnC,CAQA,wBAAa6a,CAAYrT,EAAOwI,GAC5B,IAAI8K,EAAO,CAAC,EACZ,IAAK,MAAM1L,KAAK5H,EAAO,CACnB,GAAI4H,EAAExN,QAAQkZ,EACV,MAAM,IAAIpW,MAAM,2BAA6B0K,EAAExN,KAAO,kDAE1DkZ,EAAK1L,EAAExN,MAAQwN,EAAE3H,IACrB,CAEA,KAAM,QAASqT,GACX,MAAM,IAAIpW,MAAM,uEAGpB,IAAI0kB,EAAO,KACP,UAAWtO,IACXsO,EAAOtO,EAAKuO,OAGhB,IAAIC,EAAU,KACV,gBAAiBxO,IACjBwO,EAAUxO,EAAKyO,aAGnB,IAAIhT,EAAS,IAAIuS,EAAwBhO,EAAK0O,IAAKJ,EAAME,GAEzD,OADA/S,EAAO4C,WAAWnJ,GACXuG,CACX,EACH,SAAA2H,EA9XiB1F,GACV,IAAIhR,EAAQ,CAAC,CAAE5F,KAAM,MAAO6F,KAAM+Q,GAAGO,EAAAA,EAAAA,GAAC9R,KAAIwhB,MAW1C,OAT2B,QAAvB1P,EAAAA,EAAAA,GAAA9R,KAAIyhB,IACJlhB,EAAM/B,KAAK,CAAE7D,KAAM,QAAS6F,KAAM+Q,GAAGO,EAAAA,EAAAA,GAAC9R,KAAIyhB,MAGnB,QAAvB3P,EAAAA,EAAAA,GAAA9R,KAAI0hB,IACJnhB,EAAM/B,KAAK,CAAE7D,KAAM,cAAe6F,KAAM+Q,GAAGO,EAAAA,EAAAA,GAAC9R,KAAI0hB,MAI7C,CAAEnhB,QAAOwI,QADF/I,KAAK+I,UAEvB,CAAC,SAAAyZ,IAqHG,GAAyB,QAArB1Q,EAAAA,EAAAA,GAAA9R,KAAI2hB,GACJ,OAEJ,IAAIM,GAAQnQ,EAAAA,EAAAA,GAAA9R,KAAIwhB,GAAczgB,OAAOmhB,SAAS,OAC9C,IAAIO,EAAUzT,EAAAA,IAAoC8C,EAAAA,EAAAA,GAAA9R,KAAIwhB,GAAchK,UAAW,CAAE,WAAcyK,KAC/FpQ,EAAAA,EAAAA,GAAA7R,KAAI2hB,EAAe,CAACc,EAAQC,KAAMD,EAAQjlB,SAC9C,CAAC,eAAA8U,IAGG,GAA2B,QAAvBR,EAAAA,EAAAA,GAAA9R,KAAImW,GACJ,QAGJvI,EAAAA,EAAAA,GAAA5N,KAAI4hB,EAAAY,GAAArgB,KAAJnC,MACA,IAAIwQ,GAAKsB,EAAAA,EAAAA,GAAA9R,KAAI2hB,GAAa,GAC1B,GAA0B,OAAtB7P,EAAAA,EAAAA,GAAA9R,KAAIyhB,GAEJ,YADA5P,EAAAA,EAAAA,GAAA7R,KAAImW,EAAiB,IAAI1H,EAAAA,GAAe,CAAC,EAAG,CAAEwG,aAAczE,KAIhE,IAAImS,GAAQ7Q,EAAAA,EAAAA,GAAA9R,KAAIyhB,GAAe1gB,OAC/B,IAAIkhB,EAAQU,EAAMT,SAAS,OAC3B,IAAIzJ,QAAeX,EAAAA,IAAkBhG,EAAAA,EAAAA,GAAA9R,KAAIyhB,GAAejK,UAAW,CAAEuF,YAAckF,EAAQ,KAAO,SAElG,GAAIxJ,EAAOzb,QAAUwT,EAAK,EAAG,CAEzB,IAAIlB,EAAS,CAAC,EAMd,OALcmJ,EAAOnT,QACbM,SAAQ,CAACuC,EAAG/N,KAChBkV,EAAOnH,GAAKsQ,EAAO3S,KAAInJ,GAAKA,EAAEvC,IAAG,SAErCyX,EAAAA,EAAAA,GAAA7R,KAAImW,EAAiB7G,EAEzB,CAGA,GAAImJ,EAAOzb,SAAWwT,EAClB,MAAM,IAAI/S,MAAM,gEAAkEklB,EAAQ,KAG9F,IAAIpO,EAAM,GAAIqO,EAAO,GACrBnK,EAAO7S,SAAQuC,IACXoM,EAAI/V,KAAK2J,EAAE,IACXya,EAAKpkB,KAAK2J,EAAE,GAAG,IAGnB,IAAImH,EAAS,IAAIb,EAAAA,GAAe,CAAC,EAAG,CAAEwG,aAAczE,IAIpD,GAHAlB,EAAO0I,WAAW,KAAMzD,GACxBjF,EAAO0I,WAAW,OAAQ4K,GAEtBnK,EAAO,GAAGzb,OAAS,EAAG,CACtB,IAAI6lB,EAAQ,GACZpK,EAAO7S,SAAQuC,IAAO0a,EAAMrkB,KAAK2J,EAAE,GAAG,IACtCmH,EAAO0I,WAAW,OAAQ6K,EAC9B,EAEAhR,EAAAA,EAAAA,GAAA7R,KAAImW,EAAiB7G,EAEzB,CAAC,eAAAiD,IAGG,GAAwB,QAApBT,EAAAA,EAAAA,GAAA9R,KAAIoW,GACJ,OAIJ,IADAxI,EAAAA,EAAAA,GAAA5N,KAAI4hB,EAAAY,GAAArgB,KAAJnC,MAC0B,OAAtB8R,EAAAA,EAAAA,GAAA9R,KAAI0hB,GAEJ,YADA7P,EAAAA,EAAAA,GAAA7R,KAAIoW,EAAc,IAAI3H,EAAAA,GAAe,CAAC,EAAG,CAAEwG,cAAcnD,EAAAA,EAAAA,GAAA9R,KAAI2hB,GAAa,MAI9E,IAAImB,GAAQhR,EAAAA,EAAAA,GAAA9R,KAAI0hB,GAAe3gB,OAC/B,IAAIkhB,EAAQa,EAAMZ,SAAS,OAC3B,IAKIO,EALAhK,QAAeX,EAAAA,IAAkBhG,EAAAA,EAAAA,GAAA9R,KAAI0hB,GAAelK,UAAW,CAAEuF,YAAckF,EAAQ,KAAO,SAI9Fc,GAAOjR,EAAAA,EAAAA,GAAA9R,KAAI2hB,GAAa,GAAKlJ,EAAOzb,OAExC,GAAY,GAAR+lB,EACAN,EAAUhK,EAAO,OACd,KAAa,GAATsK,EAGP,MAAM,IAAItlB,MAAM,mEAAqEqlB,EAAQ,KAF7FL,EAAUhK,EAAOnT,OAGrB,CAEA,IAAIgd,EAAc,CAAC,EACnBG,EAAQ7c,SAAQ,CAACuC,EAAG/N,KAChBkoB,EAAYna,GAAKsQ,EAAO3S,KAAInJ,GAAKA,EAAEvC,IAAG,IAG1C,IAAK,MAAOuL,EAAGvH,KAAM9B,OAAO2S,QAAQqT,GAAc,CAC9C,IAAIU,EAAOlL,EAAAA,GAAuB1Z,GACrB,OAAT4kB,IACAV,EAAY3c,GAAKqd,EAEzB,EAEAnR,EAAAA,EAAAA,GAAA7R,KAAIoW,EAAc,IAAI3H,EAAAA,GAAe6T,GAEzC,CAAC,SAAAnL,IAgCG,MAAO,CACH7D,KAAKxB,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU6F,mBACnBsB,KAAKpG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU8F,mBACnBsB,QAAQrG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAU+F,sBAE9B,CAAC,SAAAM,IAGG,MAAO,CACH9D,KAAKxB,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUkB,0BACnBiG,KAAKpG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUgG,0BACnBoB,QAAQrG,EAAAA,EAAAA,GAAA9R,KAAI+Q,GAAUiG,6BAE9B,8BCxSG,SAASxa,EAAOgE,EAAMuB,EAAWkhB,EAAUC,EAASC,GACvDA,EAAO,mDACX,CAEO,SAASC,EAAK5iB,EAAMtH,GACvB,MAAM,IAAIuE,MAAM,mDACpB,+JCDO,SAAS4lB,EAAmBxU,EAAQ9N,GACvC,KAAMA,KAAQ8N,EAAO8I,UACjB,OAAO,KAGX,GAA8B,YAA1B9I,EAAO8I,SAAS5W,GAChB,OAAO,KAGX,IAAIyW,EAAU3I,EAAOtL,KAAKxC,GAC1B,MAAqB,WAAjByW,EAAQ7c,KACD,KAGJ6c,EAAQxH,MACnB,CAoBO,SAASsT,EAAehD,GAA4B,IAArB,MAAEiD,EAAQ,IAAIve,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,GAAIsb,aAAiBpjB,MAAO,CACxB,IAAIsmB,EAAStmB,MAAMumB,KAAK,IAAIC,IAAIpD,IAChCkD,EAAOG,OACP,IAAItb,GAAY,EAKhB,OAJImb,EAAOxmB,OAASumB,IAChBC,EAASA,EAAO3nB,MAAM,EAAG0nB,GACzBlb,GAAY,GAET,CACH,KAAQ,cACR,OAAUmb,EACV,UAAanb,EAErB,CAAO,CACH,IAAI9D,EAAM0I,OAAO2W,kBAAmB5X,EAAMiB,OAAO4W,kBAUjD,OATAvD,EAAM1a,SAAQuC,IACNA,EAAI5D,IACJA,EAAM4D,GAENA,EAAI6D,IACJA,EAAM7D,EACV,IAGG,CACH,KAAQ,aACR,IAAO5D,EACP,IAAOyH,EAEf,CACJ,CAEA,SAAS8X,EAAkB3b,EAAG4U,GAC1B,GAAoB,OAAhBA,EACA,OAAOA,EAGX,IAAIvJ,EAQJ,OANIA,EADArL,aAAa2N,WACJ3N,EAEA4b,EAAAA,EAAa5b,EAAG,GAIzBqL,EAAOxW,QAAU,GAAkB,IAAbwW,EAAO,IAA2B,KAAbA,EAAO,IAA2B,GAAbA,EAAO,GAChE,KAGJ,MACX,CAEO,SAASwQ,EAAWxQ,GAAqC,IAA7B,YAAEuJ,EAAc,MAAM/X,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzD+X,EAAc+G,EAAkBtQ,EAAQuJ,GACxC,IAAIkH,EAAuB,OAAhBlH,EAAuBmH,EAAAA,GAAY1Q,GAAUA,EAExD,OADY,IAAIO,aACLC,OAAOiQ,EACtB,CAYA,SAASE,EAAYC,EAAWC,GAC5B,IAAIrX,EAAQ,EACZ,IAAK,MAAM7E,KAAKic,EACZpX,GAAS7E,EAAEnL,OAGf,IAAIsnB,EAAW,IAAIxO,WAAW9I,GAC9BA,EAAQ,EACR,IAAK,MAAM7E,KAAKic,EACZE,EAASC,IAAIpc,EAAG6E,GAChBA,GAAS7E,EAAEnL,OAGf,OAAOqnB,EAAQrQ,OAAOsQ,EAC1B,CAEA7O,eAAe+O,EAAgBrc,EAAG4U,EAAahb,EAAWkhB,GAEtC,iBAAL9a,GAEAA,aAAa2N,aAGpB3N,EADOA,aAAawO,EAAAA,EAChBxO,EAAEqP,UAED,IAAIb,EAAAA,EAAiBxO,EAAG,CAAEpH,KAAM,UAAYyW,WAGZ,MAArCsM,EAAkB3b,EAAG4U,GAsBT,iBAAL5U,EAKX8a,EAAS9a,SAJE,IAAIsc,SAAQ,CAACvB,EAASC,IAAWY,EAAAA,EAAe5b,EAAGpG,EAAWkhB,EAAUC,EAASC,WAtBjF,IAAIsB,SAAQ,CAACvB,EAASC,KACzB,IAAIuB,EAAK,IAAIR,EAAAA,GAAa,CAAEniB,UAAWA,IACvC2iB,EAAGC,OAAS1B,EACZyB,EAAGE,MAAQ/gB,IACHA,EACAsf,EAAO,8BAAgCuB,EAAGG,KAE1C3B,EAAQ,KACZ,EAGY,iBAAL/a,EACP4b,EAAAA,EAAe5b,EAAGpG,GAAW5G,GAASupB,EAAGlmB,KAAKrD,IAAQ,KAAMgoB,GAE5DuB,EAAGlmB,KAAK2J,EACZ,GAaZ,CAkBOsN,eAAeqP,EAAW3c,GAAmD,IAAhD,YAAE4U,EAAc,KAAI,UAAEhb,EAAY,OAAOiD,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7E,MAAM8O,EAAM,IAAIC,YAChB,IAAIqQ,EAAY,GACZW,EAAQ,GA6BZ,aANMP,EAAgBrc,EAAG4U,EAAahb,GArBtB5G,IACZ,IAAI6pB,EAAO,EACX,IAAK,IAAI5qB,EAAI,EAAGA,EAAIe,EAAM6B,OAAQ5C,IAC9B,GAAgB,IAAZe,EAAMf,GAAU,CAChB,IAAIue,EAAUxd,EAAM8pB,SAASD,EAAM5qB,GAC/BgqB,EAAUpnB,QACVonB,EAAU5lB,KAAKma,GACfoM,EAAMvmB,KAAK2lB,EAAYC,EAAWtQ,IAClCsQ,EAAY,IAEZW,EAAMvmB,KAAKsV,EAAIE,OAAO2E,IAE1BqM,EAAO5qB,EAAI,CACf,CAGA4qB,GAAQ7pB,EAAM6B,QACdonB,EAAU5lB,KAAKrD,EAAMU,MAAMmpB,GAC/B,IAKAZ,EAAUpnB,QACV+nB,EAAMvmB,KAAK2lB,EAAYC,EAAWtQ,IAG/BiR,CACX,CAmCOtP,eAAeyP,EAAW/c,GAAmE,IAAhE,YAAE4U,EAAc,KAAI,MAAErE,EAAQ,KAAI,UAAE3W,EAAY,SAASiD,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7F,MAAM8O,EAAM,IAAIC,YAEhB,IAAI2O,EAAO,GACPhpB,EAASyrB,IACT,IAAIpM,EAAMqM,EAAAA,MAAUD,EAAK,CAAEvoB,UAAW8b,IACtC,GAAIK,EAAI5a,KAAKoE,QAAS,CAClB,IAAIsiB,EAAM,iCACV,IAAK,MAAMlrB,KAAKof,EAAIlX,OAChBgjB,GAAO,KAAOlrB,EAAEiK,QAEpB,MAAM,IAAInG,MAAMonB,EACpB,CACA,IAAK,MAAM1c,KAAK4Q,EAAI9a,KAChBykB,EAAKlkB,KAAK2J,EACd,EAGAic,EAAY,GACZiB,EAAY,EAgChB,SAFMb,EAAgBrc,EAAG4U,EAAahb,GA7BtB5G,IACZ,IAAI6pB,EAAO,EACX,IAAK,IAAI5qB,EAAI,EAAGA,EAAIe,EAAM6B,OAAQ5C,IAO9B,GAAgB,IAAZe,EAAMf,IAAaA,EAAI4qB,EAAQK,GAAatjB,EAAW,CACvD,IAAI4W,EAAUxd,EAAM8pB,SAASD,EAAM5qB,GAC/BgqB,EAAUpnB,QACVonB,EAAU5lB,KAAKma,GACfjf,EAAMyqB,EAAYC,EAAWtQ,IAC7BsQ,EAAY,IAEZ1qB,EAAMoa,EAAIE,OAAO2E,IAErBqM,EAAO5qB,EAAI,EACXirB,EAAY,CAChB,CAGAL,GAAQ7pB,EAAM6B,SACdonB,EAAU5lB,KAAKrD,EAAMU,MAAMmpB,IAC3BK,GAAalqB,EAAM6B,OAASgoB,EAChC,IAKAZ,EAAUpnB,OAAQ,CAClB,IAAIsnB,EAAWH,EAAYC,EAAWtQ,GACtCpa,EAAM4qB,GAC+B,MAAjCA,EAASA,EAAStnB,OAAS,IAC3B0lB,EAAK4C,KAEb,CAEA,OAAO5C,CACX,CAWO,SAAS6C,EAAgBpd,GAC5B,IAAIqd,EAAS,IAAI1M,aAAa3Q,EAAEnL,QAEhC,IAAK,MAAO5C,EAAGgE,KAAM9B,OAAO2S,QAAQ9G,GAAI,CAEpC,IAAIsd,EAAOxY,OAAO7O,GACdsnB,EAAO3f,WAAW3H,GACtB,GAAKgP,MAAMqY,IAAUrY,MAAMsY,GAEpB,GAAU,KAANtnB,GAAkB,OAANA,GAAmB,MAALA,GAAkB,OAALA,GAAmB,OAALA,EAC5DonB,EAAOprB,GAAK8iB,SACT,GAAS,OAAL9e,GAAmB,OAALA,EACrBonB,EAAOprB,GAAK6S,OAAO2W,sBAChB,IAAS,QAALxlB,GAAoB,QAALA,EAGtB,OAAO,KAFPonB,EAAOprB,GAAK6S,OAAO4W,iBAGvB,MATI2B,EAAOprB,GAAKqrB,CAUpB,CAEA,OAAOD,CACX,6GCtVA,SAASG,EAA2BvX,EAAOwX,GACvC,IAAItW,EAAS,CAAC,EAEd,OADAA,EAAOsW,GAAYxX,EACZkB,CACX,CAEO,SAASuW,EAAeC,EAAaC,GACxC,GAAID,EAAY1Q,UAAU2Q,GAAY,CAClC,IAAIC,EAAUvX,EAAAA,GAAoBqX,EAAYxQ,OAAOyQ,IACjDzE,EAAOwE,EAAYG,aAAaF,GACpC,OAAOtX,EAAAA,GAAW6S,EAAM0E,EAC5B,CACI,OAAOL,EAA2BG,EAAa,GAEvD,CAcA,SAASI,EAAiB1qB,EAAO2qB,GAC7B,IAAI7W,EAAS,CAAC,EACd,IAAK,MAAO3J,EAAGvH,KAAM9B,OAAO2S,QAAQkX,GACtB,OAAN/nB,GAAcA,KAAK5C,IACnB8T,EAAO3J,GAAKnK,EAAM4C,IAG1B,OAAOkR,CACX,CAEA,SAAS8W,EAAgBhT,EAAU2S,EAAWI,GAC1C,IAAIH,EAAUvX,EAAAA,GAAoB2E,EAASkC,OAAOyQ,IAClD,OAA2B,OAAvBI,EACOH,EAEJE,EAAiBF,EAASG,EACrC,CAqBO,SAASE,EAAuBjT,EAAU2S,EAAWI,EAAoBG,EAAoBC,GAChG,GAAkB,OAAdR,GAAsB3S,EAASgC,UAAU2Q,GAAY,CACrD,IAAIC,EAAUI,EAAgBhT,EAAU2S,EAAWI,GACnD,IAAK,MAAOxgB,EAAGvH,KAAM9B,OAAO2S,QAAQ+W,GAAU,CAC1C,IAAIQ,EAAMC,EAAuB9gB,EAAGyN,EAAUmT,GAC9CP,EAAQrgB,GAAK8I,EAAAA,GAAW+X,EAAKpoB,EACjC,CACA,OAAO4nB,CACX,CAGA,IAAIU,EA9BR,SAA4BP,EAAoBG,GAC5C,IAAIK,EAAQ,KACRC,GAAW,EACf,IAAK,MAAOjhB,EAAGvH,KAAM9B,OAAO2S,QAAQkX,GACtB,OAAN/nB,IACc,OAAVuoB,IACAC,GAAW,GAEfD,EAAQhhB,GAIhB,OAAc,OAAVghB,GAAkBC,EACXN,EAEAK,CAEf,CAasBE,CAAmBV,EAAoBG,GACrDhX,EAAS,CAAC,EAEd,OADAA,EAAOoX,GAAeD,EAAuBC,EAAatT,EAAUmT,GAC7DjX,CACX,CAEO,SAASwX,EAA4BzP,EAAQyO,EAAaC,EAAWI,EAAoBG,GAC5F,IAAIhX,EAAS,CAAEyD,OAAQ,IAAI/D,EAAAA,IAE3B,IACI,IAGI+X,EAHAC,EAAU3P,EAAOtE,OAUrB,GATAzD,EAAOyD,OAAO9E,IAAI,GAAI+Y,GAIlBD,EADmB,OAAnB1P,EAAOnE,QACYzE,EAAAA,GAAWqX,EAAazO,EAAOnE,SAE/BzE,EAAAA,GAAWqX,EAAa,CAAEmB,UAAU,IAGzC,OAAdlB,GAAsBgB,EAAiB3R,UAAU2Q,GAAY,CAC7D,IAAIC,EAAUI,EAAgBW,EAAkBhB,EAAWI,GACvDe,EAAY5qB,OAAO0B,KAAKgoB,GACxBmB,EAnFhB,SAAwBC,EAASC,GAC7B,GAAID,EAAQpqB,QAAUqqB,EAClB,OAAO,EAEX,IAAK,IAAIjtB,EAAI,EAAGA,EAAIitB,EAAajtB,IAC7B,GAAIA,IAAMgtB,EAAQhtB,GACd,OAAO,EAGf,OAAO,CACX,CAyE8BktB,CAAeJ,EAAU,GAAIF,EAAQ/R,gBAEvD,GAAIiS,EAAUlqB,OAAS,IAAMmqB,EAAa,CACtC,IAAI7N,EAAc,IAAItK,EAAAA,GAAkB,CAAEgS,MAAOhS,EAAAA,GAAgBgY,EAAShB,KAC1EhX,EAAAA,GAAWM,EAAOyD,QAClBzD,EAAOyD,OAASuG,CACpB,MACIhK,EAAOyD,OAAOwU,OAAO,GAAIL,EAAU,WAGhCH,EAAiBhB,GACxBzW,EAAO8D,SAAW3E,EAAAA,GAAWsY,EAAkBf,EAEnD,MACI1W,EAAOyD,OAAOwU,OAAO,GAAIjB,GACzBhX,EAAO8D,SAAWuS,EAA2BoB,EAAkBT,EAEvE,CAAE,MAAO3sB,GAEL,MADAqV,EAAAA,GAAWM,EAAOyD,QACZpZ,CACV,CAEA,OAAO2V,CACX,CAEA,SAASmX,EAAuBb,EAAUjT,EAAmB4T,GACzD,KAAMX,KAAYW,GACd,MAAM,IAAI9oB,MAAM,aAAemoB,EAAW,mCAE9C,IAAI7qB,EAAKwrB,EAAQX,GAEjB,MAAkB,iBAAN7qB,GAAkB4X,EAAkByC,UAAUra,IAAsB,iBAANA,GAAkBA,EAAK4X,EAAkB0C,kBACxG1C,EAAkB2C,OAAOva,GAG7B4X,EAAkB4C,UAC7B,CAEO,SAASiS,EAAkBpU,EAAUmT,GACxC,IAAIjX,EAAS,CAAC,EACd,IAAK,MAAO3J,EAAGvH,KAAM9B,OAAO2S,QAAQmE,GAChC9D,EAAO3J,GAAK8gB,EAAuB9gB,EAAGvH,EAAGmoB,GAE7C,OAAOjX,CACX,CAEO,SAASmY,EAA0BrU,EAAU+S,EAAoBI,GAEpE,OAAOiB,EADOtB,EAAiB9S,EAAU+S,GACPI,EACtC,+BChJO,SAASmB,IACZ,OAAO,IAAI9sB,OAAO,IAAIP,IAAI,kBAAuC,CAAEM,UAAM,GAC7E,CAEO,SAASgtB,IACZ,OAAO,IAAI/sB,OAAO,IAAIP,IAAI,kBAAuC,CAAEM,UAAM,GAC7E,wLCPO,MAAMitB,EAAY,oBAEzB,IAAAC,EAAA,IAAAnX,QAAAoX,EAAA,IAAApX,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAAAuX,EAAA,IAAAhX,QASO,MAAMiX,EAMTzpB,WAAAA,CAAY0pB,EAAIrrB,GAAyC,IAAjCsrB,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC/C,IA+DJ+I,EAAAA,EAAAA,GAAA,KAAAka,IAAAtW,EAAAA,EAAAA,GAAA,KAAAkW,EAAA,CAAAjW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MA/DU+Z,aAAcE,EAAAA,IAChB,MAAM,IAAI5qB,MAAM,kDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI6nB,EAAOM,KAELrrB,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,mDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,IAEf+U,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,QAC5BN,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQS,cAC5BhW,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQU,WAC5BjW,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQW,mBAChC,CAMAC,KAAAA,GAEI,OADe9W,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASe,sBACZ/a,IAAI,MACxB,CAMAgb,qBAAAA,GAII,MAHM,WAAQhX,EAAAA,EAAAA,GAAI9R,KAAIgoB,KAClBpa,EAAAA,EAAAA,GAAA5N,KAAIioB,EAAAc,GAAA5mB,KAAJnC,OAEG8R,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,MACvB,CAOAiW,gBAAAA,GACI,IAAIC,EAKJ,OAJInX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQU,YACZO,EAAOxW,EAAAA,IAA0BX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQU,UAAU1rB,OAAQ,gBAAc8U,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,sBAC5FhZ,EAAAA,IAAwB8C,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQU,UAAW,CAAElV,OAAQyV,EAAMC,OAAOpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,wBAEhFF,CACX,CAKAG,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAkCAsB,OAAAA,CAAQjB,GACJ,MAAM,QAAEkB,EAAO,aAAEC,GAAiBnB,EAClC,IAAIoB,GAAc,EAOlB,GANI,gBAAiBpB,IACjBoB,EAAcpB,EAAWoB,aAG7BxpB,KAAKuoB,SAAU,IAEXzW,EAAAA,EAAAA,GAAA9R,KAAI6nB,GAAKU,UACTzW,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASS,SACbiB,KAAgB1X,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAayB,aAE7BA,IAEIF,KAAYxX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauB,SAC7BC,IAAgBzX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAawB,gBAIrCvpB,KAAK4oB,QAAS,CACd,IAAItM,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASe,sBAAsBY,IAAI,OACjD,IAAIhB,EAAeiB,EAAAA,GAAiB5X,EAAAA,EAAAA,GAAC9R,KAAI6nB,IAAA/V,EAAAA,EAAAA,GAAM9R,KAAI8nB,GAAUxL,GAAGxK,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,gBAC/E,IAAIkB,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBACrBT,EAAYjW,EAAAA,GAA0B6J,EAAIjH,kBAAmB,gBAAcvD,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,aAE1FwB,EACAxa,EAAAA,GAA0BsN,EAAK,CAC3BqN,OAAQlB,EACRS,MAAOA,EACP1V,OAAQkV,EACRkB,YAAaN,EACbO,iBAAkBN,IAGtBva,EAAAA,GAAwByZ,EAAc,CAAEjV,OAAQkV,EAAWQ,MAAOA,IAGtElpB,KAAKuoB,SAAU,CACnB,EAIJzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAayB,YAAcA,GAC/B1X,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauB,QAAUA,GAC3BxX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAawB,aAAeA,EAE5BvpB,KAAKuoB,SACDvoB,KAAK4oB,UACLhb,EAAAA,EAAAA,GAAA5N,KAAIioB,EAAAc,GAAA5mB,KAAJnC,KAKZ,CAEA,eAAO+R,GACH,MAAO,CACJyX,aAAa,EACbF,QAAS,GACTC,aAAc,GAErB,EAGJ,SAAAR,IA5FQ,IAAIzM,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASe,sBAAsBY,IAAI,OAC7CP,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBAErB3V,GAAS1B,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQU,UACzB,GAAIlV,EAAOxW,QAAUsf,EAAIjH,kBACrB,MAAM,IAAI5X,MAAM,wEAGpBgV,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,SAC5BjB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,OAAS/D,EAAAA,GAAoBsN,EAAK,CAAEC,YAAa/I,EAAQ0V,MAAOA,EAAOrI,YAAY,GAEnG,oIClGG,MAAM+G,EAAY,UAEzB,IAAAE,EAAA,IAAApX,QAAAoZ,EAAA,IAAApZ,QAAAsX,EAAA,IAAAtX,QAAAqX,EAAA,IAAArX,QASO,MAAMqZ,EAMTtrB,WAAAA,CAAY3B,EAAQktB,GAAuC,IAAjC5B,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KACjD,IADqD2M,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmY,EAAA,CAAAlY,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,MAC/CtR,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,kDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,KAETktB,aAAgBC,EAAAA,IAClB,MAAM,IAAIxsB,MAAM,oDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI8pB,EAASE,IAEbnY,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,IAChC,CAMAtB,KAAAA,GACI,OAAO9W,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOlB,OACtB,CAMAuB,QAAAA,GACI,OAAOrY,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,GACvB,CAKAd,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAgBAsB,OAAAA,CAAQjB,GACJ,IAAI,QAAEkB,EAAO,aAAEc,GAAiBhC,EAGhC,GAFApoB,KAAKuoB,SAAU,GAEXzW,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOvB,SAAWe,KAAYxX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauB,SAAWc,KAAiBtY,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqC,aAAc,CAC9G,GAAIpqB,KAAK4oB,QAAS,CACd,IAAIM,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBACzB,IAAI7M,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOhB,wBACrBrW,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,MAC5BpY,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,IAAMlb,EAAAA,GAAasN,EAAK,CAAEsN,YAAaN,EAASJ,MAAOA,EAAOmB,YAAaD,IAEvFpqB,KAAKuoB,SAAU,CACnB,EAEAzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauB,QAAUA,GAC3BxX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqC,aAAeA,CACpC,CAGJ,CAEA,eAAOrY,GACH,MAAO,CACHuX,QAAS,GACTc,aAAc,OAEtB,2HCrGG,MAAMxC,EAAY,sBAgBzB,IAAA0C,EAAA,IAAA5Z,QAAAsX,EAAA,IAAAtX,QAAAqX,EAAA,IAAArX,QAWO,MAAM6Z,EAKT9rB,WAAAA,CAAY+rB,GAAyC,IAAjCpC,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC3C,IAD+C2M,EAAAA,EAAAA,GAAA,KAAA2Y,EAAA,CAAA1Y,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,MACzCoc,aAAkBC,EAAAA,IACpB,MAAM,IAAIhtB,MAAM,yDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAIsqB,EAAWE,IAEf3Y,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,SAC5BjY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAC5BlY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ4C,gBAC5BnY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,eAChC,CAMAjC,KAAAA,GAEI,OADY9W,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAASQ,mBACZhd,IAAI,MACrB,CAKAsb,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAMAgD,YAAAA,GACI,OAAOjZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,OACvB,CAOAK,aAAAA,GACI,OAAOlZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,cACvB,CAMAI,YAAAA,GACI,OAAOnZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,OACvB,CAMA,eAAO3Y,GACH,MAAO,CACHmZ,WAAW,EACXC,cAAe,KACfC,WAAY,MACZC,MAAO,EACPC,kBAAmB,GAE3B,CAEA,iCAAOC,CAA2BC,EAAWlJ,GACzC,IAAIjH,EAAUoQ,IACV,IAAIvyB,EAAI,EAMR,OALAuyB,EAAI7lB,SAAQuC,IACJA,EAAE9H,cAAcmY,WAAWgT,IAC3BtyB,GACJ,IAEGA,CAAC,EAGRwyB,EAAW,KACXC,EAAO,EAEPC,EAAKtJ,EAAY/M,WACV,OAAPqW,IACAD,EAAOtQ,EAAQuQ,IAGnB,IAAK,MAAMC,KAAOvJ,EAAYwJ,cAAe,CACzC,IAAIC,EAAS1Q,EAAQiH,EAAYhN,OAAOuW,IACpCE,EAASJ,IACTD,EAAWG,EACXF,EAAOI,EAEf,CAEA,OAAOL,CACX,CAsBArC,OAAAA,CAAQjB,GACJ,IAGI8C,EACAC,GAJA,WAAEC,EAAU,MAAEC,EAAK,kBAAEC,GAAsBlD,EAa/C,GAZApoB,KAAKuoB,SAAU,EAIX,cAAeH,GACf8C,EAAY9C,EAAW8C,UACvBC,EAAgB/C,EAAW+C,gBAE3BD,GAAY,EACZC,EAAgB,OAIhBrZ,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS/B,SACb2C,KAAcpZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamD,WAC/BE,KAAetZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqD,aAC9BF,GAAaC,KAAkBrZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoD,cAIlD,GAFA1Y,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,SAExB1qB,KAAK4oB,QAAS,CACd,IAAIoD,GAAWla,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS2B,0BAA+B,IACvDC,EAAUzZ,EAAAA,GAA0BuZ,EAAS/W,eAAgB,cAAYnD,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,kBAG5F,GAFAkE,EAAQC,KAAK,GAEM,OAAff,EAAqB,CACrB,IAAII,EAAYJ,EAAW/qB,cAC3B,IAAIwrB,EAAMV,EACND,IACAW,EAAMtB,EAAuBgB,2BAA2BC,EAAWQ,IAGvE,IAAIP,EAAc,MAAPI,EAAcG,EAASzW,WAAayW,EAAS1W,OAAOuW,GAC/D,GAAY,OAARJ,EAAc,CACd,IAAIW,EAAUF,EAAQ5L,QACtBmL,EAAI7lB,SAAQ,CAACuC,EAAG/N,KACR+N,EAAE9H,cAAcmY,WAAWgT,KAC3BY,EAAQhyB,GAAK,EACjB,GAER,CACJ,CAEA,IAAIkiB,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAASQ,mBAAmBrB,IAAI,QAC9C3X,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAU1b,EAAAA,GAA0BsN,EAAK,CAAC4P,IACtDlsB,KAAKuoB,SAAU,CACnB,aACWzW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAQ3B,IAJA5Y,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamD,UAAYA,GAC7BpZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoD,cAAgBA,GACjCrZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqD,WAAaA,EAE1BprB,KAAKuoB,SAAW8C,KAAUvZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasD,OAASC,KAAsBxZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauD,kBAAmB,CAG9G,GAFA7Y,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAExB3qB,KAAK4oB,QAAS,CACd,IAAIM,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS+B,cACzBva,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,QAAU3b,EAAAA,IAA0B8C,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAS,CAAE4B,aAAcjB,EAAOkB,gBAAiBjB,EAAmBpC,MAAOA,IACvI,IAAIsD,EAAU/Z,EAAAA,IAA0BX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAQ+B,gBAAiB,cAAY3a,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,mBACxGlW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,QAAQ7tB,QAAOgV,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAS,CAAExB,MAAOA,EAAO1V,OAAQgZ,IACxExsB,KAAKuoB,SAAU,CACnB,aACWzW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAGvB7Y,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasD,MAAQA,GACzBvZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauD,kBAAoBA,CACzC,CAGJ,qICrOG,MAAM1D,EAAY,mBAEzB,IAAAE,EAAA,IAAApX,QAAAgc,EAAA,IAAAhc,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAQO,MAAMic,EAMTluB,WAAAA,CAAY3B,EAAQwnB,GAA2C,IAAjC8D,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KACrD,IADyD2M,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA+a,EAAA,CAAA9a,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MACnDtR,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,kDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,KAETwnB,aAAoBsI,EAAAA,IACtB,MAAM,IAAInvB,MAAM,oDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI0sB,EAAapI,IAEjBzS,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6E,UAChC,CAWAC,cAAAA,GACI,OAAOhb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6E,SACvB,CAKAE,kBAAAA,GACI,OAAOjb,EAAAA,EAAAA,GAAA9R,KAAI0sB,GAAWK,oBAC1B,CAKAC,uBAAAA,GACI,OAAOlb,EAAAA,EAAAA,GAAA9R,KAAI0sB,GAAWM,yBAC1B,CAKA5D,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAkBAsB,OAAAA,CAAQjB,GACJ,IAAI,OAAE9Z,EAAM,cAAE2e,EAAa,YAAEC,GAAe9E,EAC5CpoB,KAAKuoB,SAAU,IAEXzW,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASS,UAAWzW,EAAAA,EAAAA,GAAA9R,KAAI0sB,GAAWnE,WACvCvoB,KAAKuoB,SAAU,GAEnB,IAAIW,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBACrBgE,EAA8B,OAAV7e,GAA6B,OAAV4a,EAE3C,IAAIlpB,KAAKuoB,SAAWja,KAAWwD,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAazZ,QAAU2e,KAAkBnb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAakF,eAAiBC,KAAgBpb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamF,cACvIC,EAAkB,CAClB,IAAIjD,GAAMpY,EAAAA,EAAAA,GAAA9R,KAAI0sB,GAAWU,gBACrBP,EAAYpa,EAAAA,GAA0ByX,EAAIltB,OAAQ,gBAAc8U,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,aACnFhZ,EAAAA,GAAiBkb,EAAKhB,EAAO,CACzBvjB,EAAGsnB,EACHzZ,OAAQqZ,EACRJ,eAAe3a,EAAAA,EAAAA,GAAA9R,KAAI0sB,GAAWK,qBAC9BM,cAAcvb,EAAAA,EAAAA,GAAA9R,KAAI0sB,GAAWM,0BAC7BE,YAAaA,IAEjBltB,KAAKuoB,SAAU,CACnB,CAGAvoB,KAAKuoB,UAGA4E,IACD1a,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6E,YAC5B/a,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6E,WAAY/a,EAAAA,EAAAA,GAAA9R,KAAI0sB,GAAWU,gBAAgBE,UAK/Dxb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAazZ,OAASA,GAC1BwD,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAakF,cAAgBA,GACjCnb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamF,YAAcA,CAEnC,CAEA,eAAOnb,GACH,MAAO,CACHzD,OAAQ,MACR2e,cAAe,GACfC,aAAa,EAErB,2KCnIG,MAAMtF,EAAY,iBAEzB,SAAS2F,EAA4BC,EAAWC,GAC5C,IAAIC,EAAMjb,EAAAA,GAA8B+a,GACpCG,EAAS,GACb,IAAK,MAAMhoB,KAAK+nB,EACRD,EAAO9nB,IACPgoB,EAAOnvB,KAAKgvB,EAAU7nB,IAG9B,OAAOgoB,CACX,CAEA,IAAArD,EAAA,IAAA5Z,QAAAkd,EAAA,IAAAld,QAAAsX,EAAA,IAAAtX,QAAAqX,EAAA,IAAArX,QAAAmd,EAAA,IAAA5c,QAAA6c,EAAA,IAAA7c,QAWO,MAAM8c,EAMTtvB,WAAAA,CAAY+rB,EAAQgD,GAA4C,IAAjCpF,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KACtD,IAD0D+I,EAAAA,EAAAA,GAAA,KAAA+f,IA6E9D/f,EAAAA,EAAAA,GAAA,KAAA8f,IAAAlc,EAAAA,EAAAA,GAAA,KAAA2Y,EAAA,CAAA1Y,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAic,EAAA,CAAAhc,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,MA5EUoc,aAAkBC,EAAAA,IACpB,MAAM,IAAIhtB,MAAM,4CAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAIsqB,EAAWE,KAETgD,EAAUla,eAAe0a,EAAAA,IAC3B,MAAM,IAAIvwB,MAAM,6DAEpB,KAAM+vB,EAAUtV,eAAe+V,EAAAA,IAC3B,MAAM,IAAIxwB,MAAM,6DAEpB,KAAM+vB,EAAUrV,kBAAkB+V,EAAAA,IAC9B,MAAM,IAAIzwB,MAAM,oEAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI4tB,EAAcJ,IAElB3b,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQmG,cAC5B1b,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,gBAC5BpY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,OAChC,CAUA8V,mBAAAA,GAII,MAHM,WAAQ/W,EAAAA,EAAAA,GAAI9R,KAAIgoB,KAClBpa,EAAAA,EAAAA,GAAA5N,KAAI6tB,EAAAO,GAAAjsB,KAAJnC,OAEG8R,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,MACvB,CAQAoW,kBAAAA,GAII,MAHM,iBAAcrX,EAAAA,EAAAA,GAAI9R,KAAIgoB,KACxBpa,EAAAA,EAAAA,GAAA5N,KAAI8tB,EAAAO,GAAAlsB,KAAJnC,OAEG8R,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQmG,YACvB,CAQAnD,aAAAA,GACI,MAAI,mBAAgBlZ,EAAAA,EAAAA,GAAI9R,KAAIgoB,IACjBlW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,eAEZ,IAEf,CAKAzB,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAsDAsB,OAAAA,CAAQjB,GACJ,IAAI,QAAEkG,EAAO,QAAEC,EAAO,WAAEC,GAAepG,EACvCpoB,KAAKuoB,SAAU,GAEXzW,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS/B,UACbvoB,KAAKuoB,SAAU,IAGfzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauG,UAAYA,IAAWxc,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAawG,UAAYA,IAAWzc,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAayG,aAAeA,KAChH1c,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauG,QAAUA,GAC3Bxc,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAawG,QAAUA,GAC3Bzc,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAayG,WAAaA,EAC9BxuB,KAAKuoB,SAAU,GAGnB,IAAIoF,EAASJ,GAA2Bzb,EAAAA,EAAAA,GAAC9R,KAAI4tB,GAAa,CAAEta,IAAKgb,EAASpW,IAAKqW,EAASpW,OAAQqW,IAChG,IAAKxuB,KAAKuoB,QACN,IAAK,MAAM/uB,KAAKm0B,EACZ,GAAIn0B,EAAE+uB,QAAS,CACXvoB,KAAKuoB,SAAU,EACf,KACJ,CAIR,GAAIvoB,KAAKuoB,QAAS,CACd,GAAIoF,EAAO3wB,OAAS,EAAG,CACnB,IAAIyxB,EAAQd,EAAO,GAAG3C,gBAEtB,GAAI2C,EAAO3wB,OAAS,EAAG,CAEnB,IAAI0xB,EAAcjc,EAAAA,GAA0Bgc,EAAMzxB,OAAQ,cAAY8U,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,kBACrF0G,EAAYvC,KAAK,GAEjB,IAAIwC,EAAWD,EAAYpO,QAC3B,IAAK,MAAM9mB,KAAKm0B,EACZn0B,EAAEwxB,gBAAgBplB,SAAQ,CAACjJ,EAAGvC,KAAQu0B,EAASv0B,IAAMuC,CAAC,GAE9D,MAGI8V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,iBAC5B/Y,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,eAAiB4D,EAAMnB,MAG3C,MAEI7a,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,uBACrB/Y,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,gBAGvBjd,EAAAA,EAAAA,GAAA5N,KAAI6tB,EAAAO,GAAAjsB,KAAJnC,OACA4N,EAAAA,EAAAA,GAAA5N,KAAI8tB,EAAAO,GAAAlsB,KAAJnC,KACJ,CACJ,CAEA,eAAO+R,GACH,MAAO,CACHuc,SAAS,EACTC,SAAS,EACTC,YAAY,EAEpB,CAcAI,WAAAA,CAAYzmB,GAER,IADiB2J,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAASQ,mBAAmBzV,mBAC/BlN,EAAEnL,OAChB,MAAM,IAAIS,MAAM,kFAGpB,GAAM,mBAAgBqU,EAAAA,EAAAA,GAAI9R,KAAIgoB,GAEvB,CACH,IAAIwE,GAAU1a,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,eAAevK,QACzC,OAAOnY,EAAErL,QAAO,CAACH,EAAGvC,KAAOoyB,EAAQpyB,IACvC,CAJI,OAAO+N,EAAEtM,OAKjB,CAaAgzB,UAAAA,CAAWzH,GACP,IAAI0H,EAAY9uB,KAAK6oB,sBAAsBxT,kBAC3C,IAAK,MAAMlN,KAAKif,EACZ,GAAIjf,EAAI,GAAKA,GAAK2mB,EACd,MAAM,IAAIrxB,MAAM,wFAIxB,KAAM,mBAAgBqU,EAAAA,EAAAA,GAAI9R,KAAIgoB,IAC1B,OAGJ,IAAI+G,EAAO,IACXjd,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,eAAejlB,SAAQ,CAACuC,EAAG/N,KAC1B,GAAL+N,GACA4mB,EAAKvwB,KAAKpE,EACd,IAGJgtB,EAAQxhB,SAAQ,CAACuC,EAAG/N,KAChBgtB,EAAQhtB,GAAK20B,EAAK5mB,EAAE,GAE5B,EAGJ,SAAAimB,IA7KQ3b,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,SAC5BjB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,OAAS,IAAI/D,EAAAA,GAEzB,IAAIwb,GAAS1Y,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAASQ,mBAC1B,IAAK,MAAMvxB,KAAKixB,EAAOwE,YAAa,CAChC,IAEIC,EAFAC,EAAM1E,EAAOf,IAAIlwB,GAIjB01B,EADA,mBAAgBnd,EAAAA,EAAAA,GAAI9R,KAAIgoB,GAClBhZ,EAAAA,GAAkBkgB,GAAKpd,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,gBAEnCqE,EAAIC,SAGdrd,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,OAAO9E,IAAI1U,EAAG01B,EAC9B,CACJ,CAAC,SAAAZ,IAGG5b,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQmG,cAE5B,IAAIjF,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS+B,aACzB,GAAc,OAAVnD,EACA,GAAI,mBAAgBpX,EAAAA,EAAAA,GAAI9R,KAAIgoB,GAAS,CAGjC,IAAIoH,EAAiBpvB,KAAK6oB,sBAAsBxT,kBAC5Cga,EAAS5c,EAAAA,GAA0B2c,EAAgB,cAAYtd,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,gBAClFhZ,EAAAA,GAAkBka,GAAOpX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,eAAgB,CAAErX,OAAQ6b,GACnE,MACIvd,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQmG,aAAejF,EAAMoE,YAGrCxb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQmG,aAAe,IAEnC,wHCrJJmB,EAAA,IAAA5e,QAAA6e,EAAA,IAAA7e,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAQO,MAAM8e,EAMT/wB,WAAAA,CAAYgxB,EAAKC,GAAyC,IAAjCtH,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAChD,IADoD2M,EAAAA,EAAAA,GAAA,KAAA2d,EAAA,CAAA1d,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA4d,EAAA,CAAA3d,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MAC9CqhB,aAAeE,EAAAA,IACjB,MAAM,IAAIlyB,MAAM,gEAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAIsvB,EAAgBG,KAEdC,aAAkBE,EAAAA,GACpB,MAAM,IAAInyB,MAAM,iEAEpBoU,EAAAA,EAAAA,GAAA7R,KAAIuvB,EAAmBG,IAEvB7d,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GAAQ,CAURqH,aAAAA,GACI,MAA+B,cAA3B/d,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAazZ,QACVwD,EAAAA,EAAAA,GAAA9R,KAAIsvB,GAAcO,gBACS,WAA3B/d,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAazZ,QACjBwD,EAAAA,EAAAA,GAAA9R,KAAIuvB,GAAiBM,qBADzB,CAGX,CAKAzG,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAcAsB,OAAAA,CAAQjB,GACJ,IAAI,OAAE9Z,GAAW8Z,EACjBpoB,KAAKuoB,SAAU,EAEXja,IAAUwD,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAazZ,SACb,aAAVA,GACKwD,EAAAA,EAAAA,GAAA9R,KAAIsvB,GAAc/G,UACnBvoB,KAAKuoB,SAAU,GAEF,UAAVja,KACFwD,EAAAA,EAAAA,GAAA9R,KAAIuvB,GAAiBhH,UACtBvoB,KAAKuoB,SAAU,MAK3BzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAazZ,OAASA,CAE9B,8ICpFG,MAAMsZ,EAAY,qBAEzB,SAASkI,EAA6BC,EAAYC,GAC9C,IAAItC,EAAMjb,EAAAA,GAA8Bsd,GACpCpC,EAAS,GACb,IAAK,MAAMhoB,KAAK+nB,EACRsC,EAAQrqB,GAAK,GACbgoB,EAAOnvB,KAAKmH,GAGpB,OAAOgoB,CACX,CAEA,IAAAsC,EAAA,IAAAvf,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAQO,MAAMwf,EAKTzxB,WAAAA,CAAYsxB,GAA6C,IAAjC3H,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC/C,IADmD2M,EAAAA,EAAAA,GAAA,KAAAse,EAAA,CAAAre,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MAC7C2hB,EAAWzc,eAAe6c,EAAAA,IAC5B,MAAM,IAAI1yB,MAAM,oDAEpB,KAAMsyB,EAAW7X,eAAekY,EAAAA,IAC5B,MAAM,IAAI3yB,MAAM,oDAEpB,KAAMsyB,EAAW5X,kBAAkBkY,EAAAA,IAC/B,MAAM,IAAI5yB,MAAM,2DAEpBoU,EAAAA,EAAAA,GAAA7R,KAAIiwB,EAAeF,IAEnBle,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQsI,gBAChC,CAWAlD,aAAAA,GACI,OAAOtb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQsI,eACvB,CAMAvD,kBAAAA,GACI,OAAOjb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQuI,SACvB,CAMAvD,uBAAAA,GACI,OAAOlb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQwI,UACvB,CAKApH,eAAAA,GAEI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAMA,eAAOhW,GACH,MAAO,CACH0e,WAAY,EACZC,WAAY,EACZC,cAAe,EACfzD,aAAa,EAErB,CAEA,oBAAO0D,CAAcve,EAAOwe,GACxBpe,EAAAA,GAAgBJ,EAAMie,iBACtBje,EAAMie,gBAAkBO,EAASC,oBAAoB,CAAExP,KAAM,SAAUgM,OACvEjb,EAAMke,UAAYM,EAASpE,gBAC3Bpa,EAAMme,WAAaK,EAASjH,aAChC,CAaAP,OAAAA,CAAQjB,GACJ,IAAI,WAAEqI,EAAU,WAAEC,EAAU,cAAEC,EAAa,YAAEzD,GAAgB9E,EAC7DpoB,KAAKuoB,SAAU,EAEf,IAAK,MAAMnqB,KAAK9B,OAAOuT,QAAMiC,EAAAA,EAAAA,GAAC9R,KAAIiwB,IAC9B,GAAI7xB,EAAEmqB,QAAS,CACXvoB,KAAKuoB,SAAU,EACf,KACJ,CAeJ,GAZI2E,KAAgBpb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamF,eACjCpb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamF,YAAcA,EAC/BltB,KAAKuoB,SAAU,GAGfkI,KAAe3e,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa0I,YAAcC,KAAe5e,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa2I,YAAcC,KAAkB7e,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa4I,iBAC/H7e,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa0I,WAAaA,GAC9B3e,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa2I,WAAaA,GAC9B5e,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa4I,cAAgBA,EACjC3wB,KAAKuoB,SAAU,GAGfvoB,KAAKuoB,QAAS,CACd,MAAMyH,EAAU,CAAE1c,IAAKmd,EAAYvY,IAAKwY,EAAYvY,OAAQwY,GAC5D,IAAIhD,EAASmC,GAA4Bhe,EAAAA,EAAAA,GAAC9R,KAAIiwB,GAAcD,GAE5D,GAAIrC,EAAO3wB,OAAS,EAAG,CACnB,IAAI+zB,EAAapD,EAAO7nB,KAAIqC,GAAK6nB,EAAQ7nB,KACrC6oB,EAAY,GACZhkB,EAAQ,EACRikB,EAAS,KAEb,IAAK,MAAMtrB,KAAKgoB,EAAQ,CACpB,IAAIuD,GAASpf,EAAAA,EAAAA,GAAA9R,KAAIiwB,GAAatqB,GAAGwkB,WAEjC,GADA6G,EAAUxyB,KAAK0yB,EAAOJ,oBAAoB,CAAExP,KAAM,UACpC,MAAV2P,EACAA,EAASC,EAAOzE,qBACb,GAAIwE,IAAWC,EAAOzE,gBACzB,MAAM,IAAIhvB,MAAM,8DAEpBuP,GAASkkB,EAAOtH,aACpB,CAEA,IAAIpW,EAASf,EAAAA,GAA0Bwe,EAASjkB,EAAO,gBAAc8E,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,mBACpFhZ,EAAAA,GAAuBgiB,EAAWC,EAAQ,CAAEzd,OAAQA,EAAQwc,QAASe,EAAY7D,YAAaA,KAC9Fpb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQuI,UAAYU,GACxBnf,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQwI,WAAaxjB,CAE7B,KAAO,CAGH,IAAIkd,GAAMpY,EAAAA,EAAAA,GAAA9R,KAAIiwB,GAAatC,EAAO,IAAIxD,WACtCnqB,KAAKvB,YAAYmyB,eAAa9e,EAAAA,EAAAA,GAAC9R,KAAIgoB,GAASkC,EAChD,CACJ,CAKJ,iKC/KG,MAAMtC,EAAY,uBAEzB,IAAAC,EAAA,IAAAnX,QAAAoX,EAAA,IAAApX,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAAAuX,EAAA,IAAAhX,QAQO,MAAMkgB,EAMT1yB,WAAAA,CAAY0pB,EAAIrrB,GAAyC,IAAjCsrB,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC/C,IA8DJ+I,EAAAA,EAAAA,GAAA,KAAAka,IAAAtW,EAAAA,EAAAA,GAAA,KAAAkW,EAAA,CAAAjW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MA9DU+Z,aAAcE,EAAAA,IAChB,MAAM,IAAI5qB,MAAM,qDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI6nB,EAAOM,KAELrrB,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,mDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,IAEf+U,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,QAC5BN,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQS,cAC5BhW,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoJ,gBAChC,CAMAxI,KAAAA,GAEI,OADe9W,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASe,sBACZ/a,IAAI,SACxB,CAMAgb,qBAAAA,GAII,MAHM,WAAQhX,EAAAA,EAAAA,GAAI9R,KAAIgoB,KAClBpa,EAAAA,EAAAA,GAAA5N,KAAIioB,EAAAc,GAAA5mB,KAAJnC,OAEG8R,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,MACvB,CAOAiW,gBAAAA,GACI,IAAIC,EAKJ,OAJInX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQqJ,aACZpI,EAAOxW,EAAAA,IAA0BX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQqJ,WAAWr0B,OAAQ,gBAAc8U,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,mBAC7FhZ,EAAAA,IAAwB8C,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQqJ,WAAY,CAAE7d,OAAQyV,EAAMC,OAAOpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,wBAEjFF,CACX,CAKAG,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAuBAsB,OAAAA,CAAQjB,GACJpoB,KAAKuoB,SAAU,IACXzW,EAAAA,EAAAA,GAAA9R,KAAI6nB,GAAKU,UAAWzW,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASS,UAC7BvoB,KAAK4oB,WACLhb,EAAAA,EAAAA,GAAA5N,KAAIioB,EAAAc,GAAA5mB,KAAJnC,MACAA,KAAKuoB,SAAU,EAK3B,CAEA,eAAOxW,GACH,MAAO,CAAC,CACZ,CAMAwB,SAAAA,CAAU1E,GACN,IAAImK,EAAUnK,EAAOyiB,YAAY1J,GACnB5O,EAAQsY,YAAY,cACpBtY,EAAQsY,YAAY,UACtC,EAGJ,SAAAvI,IA3CQ,IAAIzM,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASe,sBAAsBY,IAAI,UACjD,IAAIjW,EAASkW,EAAAA,GAAiB5X,EAAAA,EAAAA,GAAC9R,KAAI6nB,IAAA/V,EAAAA,EAAAA,GAAM9R,KAAI8nB,GAAUxL,GAAGxK,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,cAEzE,IAAIkB,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBACzB1W,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,SAC5BjB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,OAAS/D,EAAAA,GAAoBsN,EAAK,CAAEC,YAAa/I,EAAQ0V,MAAOA,EAAOrI,YAAY,GAEnG,oIC5FG,MAAM+G,EAAY,aAEzB,IAAAE,EAAA,IAAApX,QAAAoZ,EAAA,IAAApZ,QAAAsX,EAAA,IAAAtX,QAAAqX,EAAA,IAAArX,QASO,MAAM6gB,EAMT9yB,WAAAA,CAAY3B,EAAQktB,GAAuC,IAAjC5B,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KACjD,IADqD2M,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmY,EAAA,CAAAlY,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,MAC/CtR,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,kDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,KAETktB,aAAgBC,EAAAA,IAClB,MAAM,IAAIxsB,MAAM,uDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI8pB,EAASE,IAEbnY,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,IAChC,CAMAtB,KAAAA,GACI,OAAO9W,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOlB,OACtB,CAMAuB,QAAAA,GACI,OAAOrY,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,GACvB,CAKAd,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAgBAsB,OAAAA,CAAQjB,GACJ,IAAI,QAAEkB,EAAO,aAAEc,GAAiBhC,EAGhC,GAFApoB,KAAKuoB,SAAU,GAEXzW,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOvB,SAAWe,KAAYxX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauB,SAAWc,KAAiBtY,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqC,aAAc,CAC9G,GAAIpqB,KAAK4oB,QAAS,CACd,IAAIM,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBACzB,IAAI7M,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOhB,wBACrBrW,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,MAC5BpY,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,IAAMlb,EAAAA,GAAasN,EAAK,CAAEsN,YAAaN,EAASJ,MAAOA,EAAOmB,YAAaD,IAEvFpqB,KAAKuoB,SAAU,CACnB,EAEAzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauB,QAAUA,GAC3BxX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqC,aAAeA,CACpC,CAGJ,CAEA,eAAOrY,GACH,MAAO,CACHuX,QAAS,GACTc,aAAc,OAEtB,2HCrGG,MAAMxC,EAAY,yBAgBzB,IAAA0C,EAAA,IAAA5Z,QAAAsX,EAAA,IAAAtX,QAAAqX,EAAA,IAAArX,QAWO,MAAM8gB,EAKT/yB,WAAAA,CAAY+rB,GAAyC,IAAjCpC,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC3C,IAD+C2M,EAAAA,EAAAA,GAAA,KAAA2Y,EAAA,CAAA1Y,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,MACzCoc,aAAkBC,EAAAA,IACpB,MAAM,IAAIhtB,MAAM,yDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAIsqB,EAAWE,IAEf3Y,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,SAC5BjY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAC5BlY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ4C,gBAC5BnY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,eAChC,CAMAjC,KAAAA,GAEI,OADY9W,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAASQ,mBACZhd,IAAI,SACrB,CAKAsb,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAMAgD,YAAAA,GACI,OAAOjZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,OACvB,CAOAK,aAAAA,GACI,OAAOlZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,cACvB,CAMAI,YAAAA,GACI,OAAOnZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,OACvB,CAMA,eAAO3Y,GACH,MAAO,CACHsZ,MAAO,EAEf,CAUAhC,OAAAA,CAAQjB,GACJ,IAAI,MAAEiD,GAAUjD,EAGhB,GAFApoB,KAAKuoB,SAAU,GAEXzW,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS/B,QAGb,GAFA9V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,SAExB1qB,KAAK4oB,QAAS,CACd,IAAItM,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAASQ,mBAAmBrB,IAAI,WAC9C3X,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAU1b,EAAAA,GAA6BsN,GACnDtc,KAAKuoB,SAAU,CACnB,aACWzW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAI3B,GAAI1qB,KAAKuoB,SAAW8C,KAAUvZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasD,MAAO,CAGlD,GAFA5Y,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAExB3qB,KAAK4oB,QAAS,CACd,IAAIM,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS+B,cACzBva,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,QAAU3b,EAAAA,IAA6B8C,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAS,CAAE4B,aAAcjB,EAAOnC,MAAOA,IACtG,IAAIsD,EAAU/Z,EAAAA,IAA0BX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAQ+B,gBAAiB,cAAY3a,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,mBACxGlW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,QAAQ7tB,QAAOgV,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAS,CAAExB,MAAOA,EAAO1V,OAAQgZ,IACxExsB,KAAKuoB,SAAU,CACnB,aACWzW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAGvB7Y,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasD,MAAQA,CAC7B,CAGJ,2HCtIJvD,EAAA,IAAApX,QAAAoZ,EAAA,IAAApZ,QAAAsX,EAAA,IAAAtX,QAAAqX,EAAA,IAAArX,QAQO,MAAM+gB,EAMThzB,WAAAA,CAAY3B,EAAQktB,GAAuC,IAAjC5B,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KACjD,IADqD2M,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmY,EAAA,CAAAlY,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,MAC/CtR,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,kDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,KAETktB,aAAgBC,EAAAA,IAClB,MAAM,IAAIxsB,MAAM,qDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI8pB,EAASE,IAEbnY,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,OAChC,CAMA6V,KAAAA,GACI,OAAO9W,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOlB,OACtB,CAMA8I,YAAAA,GACI,OAAO5f,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQrlB,OACvB,CAOAgvB,oBAAAA,GACI,OAAO7f,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ4J,gBACvB,CAKAxI,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAcAsB,OAAAA,CAAQjB,GACJ,IAAI,KAAEyJ,GAASzJ,EAGf,GAFApoB,KAAKuoB,SAAU,GAEXzW,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOvB,SAAWsJ,IAAQ/f,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa8J,KAAM,CAGrD,GAFApf,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQrlB,SAExB3C,KAAK4oB,QAAS,CACd,IAAItM,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOhB,wBACjBI,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,sBACzBrX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQrlB,QAAUqM,EAAAA,GAAmBsN,EAAK,CAAEuV,KAAMA,EAAM3I,MAAOA,KAEnEpX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ4J,kBAAmB9f,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQrlB,QAAQmvB,YAAYj2B,SAC/DiW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ4J,iBAAiBjO,OAE7B3jB,KAAKuoB,SAAU,CACnB,EAEAzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa8J,KAAOA,CAC5B,CAGJ,oIC5GJE,EAAA,IAAArhB,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAAAshB,EAAA,IAAA/gB,QAQO,MAAMghB,EAKTxzB,WAAAA,CAAYyzB,GAA0C,IAAjC9J,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC5C,IAqCJ+I,EAAAA,EAAAA,GAAA,KAAAikB,IAAArgB,EAAAA,EAAAA,GAAA,KAAAogB,EAAA,CAAAngB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MArCU8jB,aAAmBC,EAAAA,IACrB,MAAM,IAAI10B,MAAM,sDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI+xB,EAAYG,IAEhBrgB,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,IAChC,CAUAvC,aAAAA,GACI,IAAIjiB,EAAAA,EAAAA,GAAC5N,KAAIgyB,EAAAK,GAAAlwB,KAAJnC,MAGD,OAAO8R,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,IAAIE,SAAS,CAAEhR,KAAM,SAFxC,MAAM,IAAI7jB,MAAM,sDAIxB,CAKA2rB,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAmBAsB,OAAAA,CAAQkJ,EAAQnK,GACZ,IAAI,EAAEziB,GAAMyiB,EAGZ,GAFApoB,KAAKuoB,SAAU,GAEXzW,EAAAA,EAAAA,GAAA9R,KAAI+xB,GAAUxJ,SAAW5iB,IAAKmM,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAapiB,KAAMiI,EAAAA,EAAAA,GAAC5N,KAAIgyB,EAAAK,GAAAlwB,KAAJnC,OAAiBuyB,EAAS,CAGhF,GAFA9f,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,KAExBG,EAAQ,CACR,IAAIrI,GAAMpY,EAAAA,EAAAA,GAAA9R,KAAI+xB,GAAUjF,kBACxBhb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,IAAMpjB,EAAAA,GAAoBkb,EAAKvkB,EAAG,CAC1C0nB,cAAcvb,EAAAA,EAAAA,GAAA9R,KAAI+xB,GAAU/E,0BAC5BP,eAAe3a,EAAAA,EAAAA,GAAA9R,KAAI+xB,GAAUhF,qBAC7ByF,WAAY,YAEpB,aACW1gB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,KAGvBtgB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAapiB,EAAIA,EACrB3F,KAAKuoB,SAAU,CACnB,CAGJ,EAGJ,SAAA8J,IAtCQ,MAAO,QAAKvgB,EAAAA,EAAAA,GAAI9R,KAAIgoB,EACxB,oLCpDG,MAAMJ,EAAY,mBAazB,SAAS6K,EAAcpgB,GACnB,IAAK,MAAMjU,KAAK9B,OAAOuT,OAAOwC,EAAM+f,KAChC3f,EAAAA,GAAgBrU,GAEpBiU,EAAM+f,IAAM,CAAC,EACbM,EAAAA,GAA0BrgB,EAAMsgB,eACzBtgB,EAAMsgB,MACjB,CAEA,SAASC,EAAeC,EAAMC,EAAOC,EAAUT,GAAoF,IAA1E,MAAEjgB,EAAQ,CAAC,EAAC,MAAE6W,EAAQ,KAAI,cAAE8J,EAAgB,EAAC,YAAEC,GAAc,GAAMjuB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxHkuB,EAAaR,EAAAA,GAA0BG,EAAMC,EAAOzgB,GACpD8gB,EAAcD,EAAWE,WAAa,EAAI,EAC1CC,EAAeH,EAAWE,WAAa,EAAI,EAE/C,GAAIF,EAAWI,IAAK,CAChB,IAAIC,EAAe,GACfxE,EAAO,GACPyE,GAAY,EAAOC,GAAa,EAapC,GAZAnB,EAAS1sB,SAAQ,CAACuC,EAAG/N,KACb+N,GAAK0qB,GACLU,EAAa/0B,KAAK20B,GAClBpE,EAAKvwB,KAAKpE,GACVo5B,GAAY,GACLrrB,GAAK2qB,IACZS,EAAa/0B,KAAK60B,GAClBtE,EAAKvwB,KAAKpE,GACVq5B,GAAa,EACjB,KAGCD,IAAcC,EACf,MAAM,IAAIh2B,MAAM,iFAGpBi1B,EAAAA,GAA6BK,EAAUQ,EAAcrK,EAAO6F,EAAMmE,EAAW1kB,OAAQwkB,EAAeC,EACxG,CAEA,MAAO,CACHtwB,QAASuwB,EAAW1kB,OACpBqkB,KAAMM,EACNL,MAAOO,EAEf,CAMA,IAAAvL,EAAA,IAAApX,QAAAgjB,EAAA,IAAAhjB,QAAAijB,EAAA,IAAAjjB,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QASO,MAAMkjB,EAOTn1B,WAAAA,CAAY3B,EAAQ+2B,EAAaC,GAAyC,IAAjC1L,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAChE,IADoE2M,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA+hB,EAAA,CAAA9hB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAgiB,EAAA,CAAA/hB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MAC9DtR,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,gEAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,KAET+2B,EAAYvgB,eAAeygB,EAAAA,IAC7B,MAAM,IAAIt2B,MAAM,+DAEpB,KAAMo2B,EAAY3b,eAAe8b,EAAAA,IAC7B,MAAM,IAAIv2B,MAAM,+DAEpB,KAAMo2B,EAAY1b,kBAAkB8b,EAAAA,IAChC,MAAM,IAAIx2B,MAAM,qEAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI0zB,EAAgBG,KAEdC,aAAkBI,EAAAA,GACpB,MAAM,IAAIz2B,MAAM,oEAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI2zB,EAAWG,IAEfjiB,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAE,IAAO,CAAC,GAAMA,GAChDrS,KAAKuoB,SAAU,CACnB,CAKAC,IAAAA,GACIiK,GAAa3gB,EAAAA,EAAAA,GAAC9R,KAAIgoB,GACtB,CASA0J,YAAAA,GACI,OAAO5f,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,GACvB,CAQAhJ,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAYAsB,OAAAA,CAAQjB,GACJ,IAAI,cAAE4K,EAAa,YAAEC,GAAgB7K,EACrCpoB,KAAKuoB,SAAU,EACf,IAAI4L,EAAkBnB,KAAkBlhB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaiL,eAAiBC,KAAgBnhB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAakL,YAE3G,IAAK,MAAOttB,EAAGvH,KAAM9B,OAAO2S,SAAO6C,EAAAA,EAAAA,GAAC9R,KAAI0zB,IACpC,GAAKt1B,EAAEwqB,WAIH9W,EAAAA,EAAAA,GAAA9R,KAAI2zB,GAASpL,SAAWnqB,EAAEmqB,SAAW4L,GAAgB,CACrD,IAAI7X,EAAMle,EAAE0qB,wBACRwJ,GAAWxgB,EAAAA,EAAAA,GAAA9R,KAAI2zB,GAAS9D,gBACxB3G,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBAEzB1W,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,IAAIzsB,KAChCmM,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,IAAIzsB,GAAKqJ,EAAAA,GAAmBsN,EAAKgW,EAAU,CAAEpJ,MAAOA,EAAOkL,aAAcpB,EAAeqB,WAAYpB,IAEhHjzB,KAAKuoB,SAAU,CACnB,EAGJzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaiL,cAAgBA,GACjClhB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAakL,YAAcA,EAC3BjzB,KAAKuoB,SACLmK,EAAAA,IAA0B5gB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2K,OAI9C,CAKA,eAAO5gB,GACH,MAAO,CACHihB,cAAe,EACfC,aAAa,EAErB,CAGA,0BAAOqB,CAAoBzB,EAAMC,EAAOC,EAAUT,GAAoF,IAA1E,MAAEjgB,EAAQ,CAAC,EAAC,MAAE6W,EAAQ,KAAI,cAAE8J,EAAgB,EAAC,YAAEC,GAAc,GAAMjuB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/H,OAAOuvB,cAAc1B,EAAMC,EAAOC,EAAUT,EAAU,CAAEjgB,QAAO6W,QAAO8J,gBAAeC,eACzF,CAkBAsB,aAAAA,CAAc1B,EAAMC,GAChB,IAAIR,GAAWxgB,EAAAA,EAAAA,GAAA9R,KAAI2zB,GAAS9D,gBACxB3G,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBAGzB,IAAI4J,EAAW,IAAI/jB,EAAAA,GACnB,IAAK,MAAO4W,EAAU4O,KAAUl4B,OAAO2S,SAAO6C,EAAAA,EAAAA,GAAC9R,KAAI0zB,IAC1Cc,EAAM5L,SAGXmK,EAAS9kB,IAAI2X,EAAU4O,EAAM1L,yBAOjC,MAJM,WAAQhX,EAAAA,EAAAA,GAAI9R,KAAIgoB,MAClBlW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAgB,OAAI,CAAC,GAGtB4K,EAAeC,EAAMC,EAAOC,EAAUT,EAAU,CACnDjgB,OAAOP,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2K,OACnBzJ,MAAOA,EACP8J,eAAelhB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaiL,cAChCC,aAAanhB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAakL,aAEtC,EAOJ,IAAAwB,EAAA,IAAA/jB,QAAAgkB,EAAA,IAAAhkB,QAAAikB,EAAA,IAAAjkB,QAAAkkB,EAAA,IAAAlkB,QAAAmkB,EAAA,IAAAnkB,QAAAokB,EAAA,IAAApkB,QAAAqkB,EAAA,IAAArkB,QAMO,MAAMskB,EAkBTv2B,WAAAA,CAAYw2B,EAAYC,GAA+B,IAAvB,MAAEhM,EAAQ,MAAMlkB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GAAC2M,EAAAA,EAAAA,GAAA,KAAA8iB,EAAA,CAAA7iB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA+iB,EAAA,CAAA9iB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAgjB,EAAA,CAAA/iB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAijB,EAAA,CAAAhjB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAkjB,EAAA,CAAAjjB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmjB,EAAA,CAAAljB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAojB,EAAA,CAAAnjB,UAAA,EAAAxD,WAAA,IAEjD,IAAIpH,EAAIkuB,EAAOl4B,OAEf,IAAK,MAAM2I,KAAKsvB,EAAWjG,YAAa,CAEpC,GADQiG,EAAWxL,IAAI9jB,GACjB0P,mBAAqBrO,EACvB,MAAM,IAAIvJ,MAAM,gGAExB,CAEA,GAAc,OAAVyrB,GACIA,EAAMlsB,QAAUgK,EAChB,MAAM,IAAIvJ,MAAM,+DAIxB,IAAI03B,EAAS,CAAED,GACD,OAAVhM,GACAiM,EAAO32B,KAAK0qB,GAEhB,IAGIkM,EAHAC,EAAO5iB,EAAAA,GAA2B0iB,GAItC,GAAoB,OAAhBE,EAAKC,OAAiB,CACtBF,EAAe,IAAIpmB,EAAAA,GACnB,IAAIumB,EAAOvmB,EAAAA,GAA2BqmB,EAAKC,OAAOt4B,QAClD,IACIu4B,EAAKhR,IAAI8Q,EAAKC,QACd,IAAK,MAAM3vB,KAAKsvB,EAAWjG,YACvBoG,EAAannB,IAAItI,EAAGqJ,EAAAA,GAAoBimB,EAAWxL,IAAI9jB,GAAI4vB,GAEnE,CAAE,MAAO57B,GAEL,MADAy7B,EAAa5M,OACP7uB,CACV,CAAE,QACEqV,EAAAA,GAAWumB,EACf,CACJ,MACIH,EAAeH,EAAW9F,SAG9Btd,EAAAA,EAAAA,GAAA7R,KAAIy0B,EAAaW,IACjBvjB,EAAAA,EAAAA,GAAA7R,KAAI00B,EAAWW,EAAKF,OAAO,GAAG5gB,MAC9B1C,EAAAA,EAAAA,GAAA7R,KAAI20B,EAAiBU,EAAKF,OAAO,GAAGK,QAEtB,OAAVtM,IACArX,EAAAA,EAAAA,GAAA7R,KAAI40B,EAAUS,EAAKF,OAAO,GAAG5gB,MAC7B1C,EAAAA,EAAAA,GAAA7R,KAAI60B,EAAiBQ,EAAKF,OAAO,GAAGK,WAEpC3jB,EAAAA,EAAAA,GAAA7R,KAAI40B,EAAU,OACd/iB,EAAAA,EAAAA,GAAA7R,KAAI60B,EAAiB,QAGzBhjB,EAAAA,EAAAA,GAAA7R,KAAI80B,EAAU,CAAE1C,IAAK,CAAC,EAAGqD,MAAM,KAC/B5jB,EAAAA,EAAAA,GAAA7R,KAAI+0B,EAAenB,EAAqB7hB,YACxC/R,KAAKuoB,SAAU,CACnB,CAKAC,IAAAA,GACIxZ,EAAAA,IAAU8C,EAAAA,EAAAA,GAAC9R,KAAI00B,IACf1lB,EAAAA,IAAU8C,EAAAA,EAAAA,GAAC9R,KAAI40B,IACf5lB,EAAAA,IAAU8C,EAAAA,EAAAA,GAAC9R,KAAIy0B,IACfhC,GAAa3gB,EAAAA,EAAAA,GAAC9R,KAAI80B,GACtB,CAQApD,YAAAA,GACI,OAAO5f,EAAAA,EAAAA,GAAA9R,KAAI80B,GAAQ1C,GACvB,CAKAhJ,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+0B,GACpB,CAUAW,gBAAAA,GAAuC,IAAtB,KAAEpU,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5B2wB,GAAG7jB,EAAAA,EAAAA,GAAG9R,KAAI20B,GACd,OAAQrT,EAAOqU,EAAI95B,QAAU85B,CACjC,CAUAC,gBAAAA,GAAuC,IAAtB,KAAEtU,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5B2wB,GAAG7jB,EAAAA,EAAAA,GAAG9R,KAAI60B,GACd,OAAQvT,EAAOqU,EAAI95B,QAAU85B,CACjC,CAGAE,aAAAA,GACI,OAAA/jB,EAAAA,EAAAA,GAAO9R,KAAIy0B,EACf,CAEAqB,WAAAA,GACI,OAAAhkB,EAAAA,EAAAA,GAAO9R,KAAI00B,EACf,CAEAqB,UAAAA,GACI,OAAAjkB,EAAAA,EAAAA,GAAO9R,KAAI40B,EACf,CASAoB,aAAAA,CAAc5N,IACNtW,EAAAA,EAAAA,GAAA9R,KAAI+0B,GAAa/B,gBAAkB5K,EAAW4K,gBAAiBlhB,EAAAA,EAAAA,GAAA9R,KAAI+0B,GAAa9B,cAAgB7K,EAAW6K,aAE3GR,GAAa3gB,EAAAA,EAAAA,GAAC9R,KAAI80B,KAEtBjjB,EAAAA,EAAAA,GAAA7R,KAAI+0B,EAAe,IAAK3M,GAE5B,CAOA6N,UAAAA,GACI,IAAI,cAAEjD,EAAa,YAAEC,IAAanhB,EAAAA,EAAAA,GAAG9R,KAAI+0B,GACzC,IAAK,MAAMpvB,KAAKmM,EAAAA,EAAAA,GAAA9R,KAAIy0B,GAAWzF,YAAa,CACxC,IAAI1S,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAIy0B,GAAWhL,IAAI9jB,GAC7B8M,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAI80B,GAAQ1C,IAAIzsB,KAChCmM,EAAAA,EAAAA,GAAA9R,KAAI80B,GAAQ1C,IAAIzsB,GAAKqJ,EAAAA,GAAmBsN,GAAGxK,EAAAA,EAAAA,GAAE9R,KAAI00B,GAAU,CAAExL,OAAKpX,EAAAA,EAAAA,GAAE9R,KAAI40B,GAASR,aAAcpB,EAAeqB,WAAYpB,GAC9H,CAEJ,CAkBAsB,aAAAA,CAAc1B,EAAMC,GAIhB,MAHM,WAAQhhB,EAAAA,EAAAA,GAAI9R,KAAI80B,MAClBhjB,EAAAA,EAAAA,GAAA9R,KAAI80B,GAAgB,OAAI,CAAC,GAEtBlC,EAAeC,EAAMC,GAAKhhB,EAAAA,EAAAA,GAAE9R,KAAIy0B,IAAA3iB,EAAAA,EAAAA,GAAY9R,KAAI00B,GAAU,CAC7DriB,OAAOP,EAAAA,EAAAA,GAAA9R,KAAI80B,GAAQnC,OACnBzJ,OAAKpX,EAAAA,EAAAA,GAAE9R,KAAI40B,GACX5B,eAAelhB,EAAAA,EAAAA,GAAA9R,KAAI+0B,GAAa/B,cAChCC,aAAanhB,EAAAA,EAAAA,GAAA9R,KAAI+0B,GAAa9B,aAEtC,8IC9bG,MAAMrL,EAAY,iBAEzB,IAAAmK,EAAA,IAAArhB,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAAAuX,EAAA,IAAAhX,QAQO,MAAMilB,EAKTz3B,WAAAA,CAAYyzB,GAA0C,IAAjC9J,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC5C,IADgD+I,EAAAA,EAAAA,GAAA,KAAAka,IAAAtW,EAAAA,EAAAA,GAAA,KAAAogB,EAAA,CAAAngB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MAC1C8jB,aAAmBC,EAAAA,IACrB,MAAM,IAAI10B,MAAM,sDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI+xB,EAAYG,IAEhBrgB,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,IAChC,CAUA+D,UAAAA,GAII,MAHM,QAAKrkB,EAAAA,EAAAA,GAAI9R,KAAIgoB,KACfpa,EAAAA,EAAAA,GAAA5N,KAAIioB,EAAAc,GAAA5mB,KAAJnC,MAAkB8R,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamF,cAEhCpb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,GACvB,CAKAhJ,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAMA,eAAOhW,GACH,MAAO,CACHmb,aAAa,EAErB,CAoBA7D,OAAAA,CAAQjB,GACJ,IAAI,YAAE8E,GAAgB9E,EACtBpoB,KAAKuoB,SAAU,IAEXzW,EAAAA,EAAAA,GAAA9R,KAAI+xB,GAAUxJ,SAAW2E,IAAepb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamF,eACzDza,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,MAC5BxkB,EAAAA,EAAAA,GAAA5N,KAAIioB,EAAAc,GAAA5mB,KAAJnC,KAAkBktB,IAClBpb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamF,YAAcA,EAC/BltB,KAAKuoB,SAAU,EAIvB,EAGJ,SAAAQ,EAjCiBmE,IACTpb,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQoK,IAAMpjB,EAAAA,IAA+B8C,EAAAA,EAAAA,GAAA9R,KAAI+xB,GAAUjF,iBAAkB,CAC7EI,YAAaA,EACbG,cAAcvb,EAAAA,EAAAA,GAAA9R,KAAI+xB,GAAU/E,0BAC5BP,eAAe3a,EAAAA,EAAAA,GAAA9R,KAAI+xB,GAAUhF,sBAGrC,+JCnEG,MAAMnF,EAAY,oBAEzB,IAAAC,EAAA,IAAAnX,QAAAoX,EAAA,IAAApX,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAAAuX,EAAA,IAAAhX,QAQO,MAAMmlB,EAMT33B,WAAAA,CAAY0pB,EAAIrrB,GAAyC,IAAjCsrB,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC/C,IA6DJ+I,EAAAA,EAAAA,GAAA,KAAAka,IAAAtW,EAAAA,EAAAA,GAAA,KAAAkW,EAAA,CAAAjW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MA7DU+Z,aAAcE,EAAAA,IAChB,MAAM,IAAI5qB,MAAM,kDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI6nB,EAAOM,KAELrrB,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,mDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,IAEf+U,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,QAC5BN,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQqJ,WAChC,CAMAzI,KAAAA,GAEI,OADe9W,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASe,sBACZ/a,IAAI,MACxB,CAMAgb,qBAAAA,GAII,MAHM,WAAQhX,EAAAA,EAAAA,GAAI9R,KAAIgoB,KAClBpa,EAAAA,EAAAA,GAAA5N,KAAIioB,EAAAc,GAAA5mB,KAAJnC,OAEG8R,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,MACvB,CAOAiW,gBAAAA,GACI,IAAIC,EAKJ,OAJInX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQqJ,aACZpI,EAAOxW,EAAAA,IAA0BX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQqJ,WAAWr0B,OAAQ,gBAAc8U,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,mBAC7FhZ,EAAAA,IAAwB8C,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQqJ,WAAY,CAAE7d,OAAQyV,EAAMC,OAAOpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,wBAEjFF,CACX,CAKAG,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAuBAsB,OAAAA,CAAQjB,GACJpoB,KAAKuoB,SAAU,IACXzW,EAAAA,EAAAA,GAAA9R,KAAI6nB,GAAKU,UAAWzW,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASS,UAC7BvoB,KAAK4oB,UACL5oB,KAAKuoB,SAAU,GAInBvoB,KAAKuoB,UACL3a,EAAAA,EAAAA,GAAA5N,KAAIioB,EAAAc,GAAA5mB,KAAJnC,KAGR,CAEA,eAAO+R,GACH,MAAO,CAAC,CACZ,EAGJ,SAAAgX,IAnCQ,IAAIzM,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASe,sBAAsBY,IAAI,OACjD,IAAIjW,EAASkW,EAAAA,GAAiB5X,EAAAA,EAAAA,GAAC9R,KAAI6nB,IAAA/V,EAAAA,EAAAA,GAAM9R,KAAI8nB,GAAUxL,GAAGxK,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,cAEzE,IAAIkB,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBACzB1W,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,SAC5BjB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQjV,OAAS/D,EAAAA,GAAoBsN,EAAK,CAAEC,YAAa/I,EAAQ0V,MAAOA,EAAOrI,YAAY,GAEnG,6IC1FG,MAAM+G,EAAY,UASzB,IAAAE,EAAA,IAAApX,QAAAoZ,EAAA,IAAApZ,QAAA2lB,EAAA,IAAA3lB,QAAAsX,EAAA,IAAAtX,QAAAqX,EAAA,IAAArX,QASO,MAAM4lB,EAOT73B,WAAAA,CAAY3B,EAAQktB,EAAM7H,GAAuC,IAAjCiG,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KACvD,IAD2D2M,EAAAA,EAAAA,GAAA,KAAAmW,EAAA,CAAAlW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmY,EAAA,CAAAlY,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA0kB,EAAA,CAAAzkB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,MACrDtR,aAAkBwrB,EAAAA,IACpB,MAAM,IAAI7qB,MAAM,kDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI8nB,EAAWhrB,KAETktB,aAAgBC,EAAAA,IAClB,MAAM,IAAIxsB,MAAM,oDAIpB,IAFAoU,EAAAA,EAAAA,GAAA7R,KAAI8pB,EAASE,KAEP7H,aAAgBoU,EAAAA,GAClB,MAAM,IAAI94B,MAAM,oDAEpBoU,EAAAA,EAAAA,GAAA7R,KAAIq2B,EAASlU,IAEbtQ,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQwO,YAC5B/jB,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,IAChC,CAMAtB,KAAAA,GACI,OAAO9W,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOlB,OACtB,CAKAuB,QAAAA,GACI,OAAOrY,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,GACvB,CAKAd,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAqBAsB,OAAAA,CAAQjB,GACJ,IAAI,SAAEqO,EAAQ,QAAEnN,EAAO,aAAEc,GAAiBhC,EAY1C,GAXApoB,KAAKuoB,SAAU,IAEXzW,EAAAA,EAAAA,GAAA9R,KAAIq2B,GAAO9N,SAAWkO,KAAa3kB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa0O,YAChDz2B,KAAK4oB,UACL8N,EAAYD,GAAQ3kB,EAAAA,EAAAA,GAAE9R,KAAIq2B,IAAAvkB,EAAAA,EAAAA,GAAQ9R,KAAIgoB,IACtChoB,KAAKuoB,SAAU,IAGnBzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa0O,SAAWA,GAG5Bz2B,KAAKuoB,UAAWzW,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOvB,SAAWe,KAAYxX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauB,SAAWc,KAAiBtY,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqC,aAAc,CAG9H,GAFA3X,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,KAExBlqB,KAAK4oB,QAAS,CACd,IAAIqG,GAAMnd,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQwO,WAClBtN,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAI8nB,GAASqB,qBACzB,IAAI7M,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAI8pB,GAAOhB,yBACrBhX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQkC,IAAMlb,EAAAA,GAAasN,EAAK,CAAElJ,SAAU6b,EAAKrF,YAAaN,EAASJ,MAAOA,EAAOmB,YAAaD,IACtGpqB,KAAKuoB,SAAU,CACnB,EAEAzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauB,QAAUA,GAC3BxX,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqC,aAAeA,CACpC,CAGJ,CAEA,eAAOrY,GACH,MAAO,CACH0kB,SAAU,IACVnN,QAAS,GACTc,aAAc,OAEtB,EAOJ,SAASsM,EAAYD,EAAUtU,EAAM9P,GACjC,IAAIskB,EAAgBxU,EAAKwP,uBACrB1C,EAAMxc,EAAAA,GAA0BkkB,EAAc35B,OAAQ,aAAcqV,EAAO,cAE/E,GAAIokB,EAAWE,EAAc35B,OAAQ,CACjC,IAAI45B,EAAeD,EAAcA,EAAc35B,OAASy5B,GACpDI,EAAkB1U,EAAKuP,eAAeI,UAAU,CAAExQ,MAAM,IAC5D2N,EAAI3O,QAAQ1a,SAAQ,CAACkxB,EAAShvB,EAAOwY,KACjCA,EAAMxY,GAAS+uB,EAAgB/uB,IAAU8uB,CAAY,GAE7D,MACI3H,EAAI9C,KAAK,GAGb,OAAO8C,CACX,gMCvJA,MAEarH,EAAY,sBAgBzB,IAAA0C,EAAA,IAAA5Z,QAAAsX,EAAA,IAAAtX,QAAAqX,EAAA,IAAArX,QAAAqmB,EAAA,IAAArmB,QAAAsmB,EAAA,IAAA/lB,QAWO,MAAMgmB,EAMTx4B,WAAAA,CAAY+rB,GAAyC,IAAjCpC,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC3C,IAkHJ+I,EAAAA,EAAAA,GAAA,KAAAipB,IAAArlB,EAAAA,EAAAA,GAAA,KAAA2Y,EAAA,CAAA1Y,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAolB,EAAA,CAAAnlB,UAAA,EAAAxD,WAAA,MAlHUoc,aAAkBC,EAAAA,IACpB,MAAM,IAAIhtB,MAAM,6CAEpBoU,EAAAA,EAAAA,GAAA7R,KAAIsqB,EAAWE,IAEf3Y,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,IACrCR,EAAAA,EAAAA,GAAA7R,KAAI+2B,GAAc,GAClB/2B,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,SAC5BjY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAC5BlY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ4C,gBAC5BnY,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,eAChC,CAMAjC,KAAAA,GAEI,OADY9W,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAASQ,mBACZhd,IAAI,MACrB,CAKAsb,eAAAA,GACI,IAAI9Z,EAAS,KAAEwC,EAAAA,EAAAA,GAAG9R,KAAI+nB,IAEtB,OADAzY,EAAO4nB,QAAUzoB,EAAAA,GAAWa,EAAO4nB,SAC5B5nB,CACX,CAMA0b,aAAAA,GACI,OAAOlZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ6C,cACvB,CAKAE,YAAAA,GACI,OAAOjZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,OACvB,CAKAM,YAAAA,GACI,OAAOnZ,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,OACvB,CAMA,eAAO3Y,GACH,MAAO,CACHmZ,WAAW,EACXiM,eAAgB,KAChBC,oBAAoB,EACpBF,QAAS,GACTG,aAAc,UACdC,YAAa,MACbjM,MAAO,EAEf,CAEA,iCAAOE,CAA2B6L,EAAoBG,GAClD,IAAI7L,EAAW,KACXC,EAAO,CAAEhxB,KAAM,SAAUu8B,QAAS,QAASM,WAAY,GAE3D,GAAI,cAAeD,EAAS,CACxB,IAAI9L,EAAM8L,EAAQjnB,UACdmb,EAAI+L,WAAa7L,EAAK6L,aAAeJ,GAAkC,UAAZ3L,EAAI9wB,QAC/DgxB,EAAOF,EAEf,CAEA,IAAK,MAAOI,EAAKJ,KAAQnvB,OAAO2S,QAAQsoB,EAAQ/5B,SACxCiuB,EAAI+L,WAAa7L,EAAK6L,aAAeJ,GAAkC,UAAZ3L,EAAI9wB,QAC/DgxB,EAAOF,EACPC,EAAWG,GAInB,MAAO,CACHsL,eAAgBzL,EAChBwL,QAAS,CAACvL,EAAKuL,SACfG,aAAc1L,EAAKhxB,KAAKwF,cAEhC,CAgDA,YAAOuX,IACHvJ,EAAAA,EAAAA,GAAA8oB,EAzJKA,EAAsBQ,EAyJU,CAAC,EAE1C,CAaA,kBAAOC,CAAYnmB,GACf,IAAIC,GAAQtD,EAAAA,EAAAA,GAAG+oB,EAzKVA,EAAsBxlB,GA2K3B,OADAtD,EAAAA,EAAAA,GAAA8oB,EA1KKA,EAAsBxlB,EA0KWF,GAC/BC,CACX,CAoCA,aAAM6X,CAAQjB,GACV,IACI8C,EACAkM,EACAD,EACAD,EACAG,GALA,YAAEC,EAAW,MAAEjM,GAAUjD,EAQ7B,GAAI,uBAAwBA,EACxB8C,EAAY9C,EAAW8C,UACvBkM,EAAqBhP,EAAWgP,mBAChCD,EAAiB/O,EAAW+O,eAC5BD,EAAU9O,EAAW8O,QACrBG,EAAejP,EAAWiP,iBACvB,CACHnM,GAAY,EACZkM,EAAqBhP,EAAWuP,iBAChC,IAAIC,EAAMX,EAAuBllB,WACjColB,EAAiBS,EAAIT,eACrBD,EAAUU,EAAIV,QACdG,EAAeO,EAAIP,YACvB,CAIA,GAFAr3B,KAAKuoB,SAAU,GAGXzW,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS/B,SACb2C,KAAcpZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamD,WAC/BkM,KAAuBtlB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqP,qBAEnClM,IAEGiM,KAAmBrlB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoP,iBAClCC,GAAsBE,KAAgBxlB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauP,aAErDF,IAEI3kB,EAAAA,GAAwBykB,GAASplB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamP,UAClDG,KAAiBvlB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasP,eAQlD,GAFA5kB,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,SAExB1qB,KAAK4oB,QAAS,CACd,IAAIiP,EAAkBV,EAClBW,EAAWZ,EACXa,EAAgBV,EAEpB,GAAInM,EAAW,CACX,IAAIqM,GAAUzlB,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS0N,uBACvBC,EAAWhB,EAAuB1L,2BAA2B6L,EAAoBG,GACrFM,EAAkBI,EAASd,eAC3BW,EAAWG,EAASf,QACpBa,EAAgBE,EAASZ,YAC7B,CAEA,IAAIa,GAAYpmB,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS2B,0BAA+B,IAC5D,IAAIR,EAA0B,MAAnBoM,EAA0BK,EAAU3iB,WAAa2iB,EAAU5iB,OAAOuiB,GAC7E,IAAI3L,EAAUzZ,EAAAA,GAA0BylB,EAAUjjB,eAAgB,cAAYnD,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,kBAG7F,GAFAkE,EAAQC,KAAK,GAED,OAARV,EACA,GAAI2L,EAAoB,CACpB,IAAIe,QAAQvqB,EAAAA,EAAAA,GAAM5N,KAAIg3B,EAAAoB,GAAAj2B,KAAJnC,KAAwB83B,EAAUC,GACpD,IAAI3L,EAAUF,EAAQ5L,QACtBmL,EAAI7lB,SAAQ,CAACuC,EAAG/N,KACR+9B,EAAMrqB,IAAI3F,KACVikB,EAAQhyB,GAAK,EACjB,GAER,MAAO,GAAoB,OAAhBk9B,EAAsB,CAC7B,IAAIe,EAAaf,EAAYj3B,cACzB+rB,EAAUF,EAAQ5L,QACtBmL,EAAI7lB,SAAQ,CAACuC,EAAG/N,KACT+N,EAAE9H,cAAcmY,WAAW6f,KAC1BjM,EAAQhyB,GAAK,EACjB,GAER,CAGJ,IAAIkiB,GAAMxK,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAASQ,mBAAmBrB,IAAI,QAC9C3X,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAU1b,EAAAA,GAA0BsN,EAAK,CAAC4P,IACtDlsB,KAAKuoB,SAAU,CACnB,aACWzW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAW3B,IAPA5Y,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamD,UAAYA,GAC7BpZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoP,eAAiBA,GAClCrlB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqP,mBAAqBA,GACtCtlB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAamP,QAAUzoB,EAAAA,GAAWyoB,IACtCplB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasP,aAAeA,GAChCvlB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauP,YAAcA,EAE3Bt3B,KAAKuoB,SAAW8C,KAAUvZ,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasD,MAAO,CAGlD,GAFA5Y,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAExB3qB,KAAK4oB,QAAS,CACd,IAAIM,GAAQpX,EAAAA,EAAAA,GAAA9R,KAAIsqB,GAAS+B,cACzBva,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,QAAU3b,EAAAA,IAA0B8C,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAS,CAAE4B,aAAcjB,EAAOnC,MAAOA,IACnG,IAAIsD,EAAU/Z,EAAAA,IAA0BX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAQ+B,gBAAiB,cAAY3a,EAAAA,EAAAA,GAAE9R,KAAIgoB,GAAS,mBACxGlW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,QAAQ7tB,QAAOgV,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ0C,QAAS,CAAExB,MAAOA,EAAO1V,OAAQgZ,IACxExsB,KAAKuoB,SAAU,CACnB,aACWzW,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQ2C,SAGvB7Y,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasD,MAAQA,CAC7B,CAGJ,EArU+B,eAAA+M,EA6HNlB,EAASoB,GAC9B,IAAIhpB,EAAS,IAAIoU,IACb6U,GAAUrqB,EAAAA,EAAAA,GAAG+oB,EA/HZA,EAAsBQ,GAiI3B,IAAK,MAAM3+B,KAAKo+B,EAAS,CACrB,IAAIvyB,EAAS7L,EAAI,SAAWw/B,EAAaj4B,cAAgB,UACzD,KAAMsE,KAAU4zB,GAAa,CACzB,IAAIjgB,QAAWpK,EAAAA,EAAAA,GAAM+oB,EApIxBA,EAAsBxlB,GAAAtP,KAoIE80B,EAAoCvoB,+EAAgB/J,GACrEogB,QAAcyT,EAAAA,GAAkBlgB,EAAU,CAAEyE,YAAa,OAC7Dwb,EAAW5zB,GAAUogB,CACzB,CAEAwT,EAAW5zB,GAAQiB,SAAQuC,IAAOmH,EAAOrB,IAAI9F,EAAE,GACnD,CAEA,OAAOmH,CACX,CA2LJkG,EAxUayhB,GA6IRwB,EAAAA,EAAAA,GA7IQxB,EAAsB,sBA8GF,CACzB,OACA,QACA,OACA,QACA,OACA,OACA,OACA,SACH,IAAAQ,EAAA,CAAA7lB,UAAA,EAAAxD,MAwBoB,CAAC,GAACqD,EAAA,CAAAG,UAAA,EAAAxD,MAcDqE,EAAAA,+IC5LnB,MAAMmV,EAAY,oBAEzB,IAAA8Q,EAAA,IAAAhoB,QAAAqX,EAAA,IAAArX,QAAAsX,EAAA,IAAAtX,QAAAshB,EAAA,IAAA/gB,QAAA0nB,EAAA,IAAA1nB,QAAA2nB,EAAA,IAAA3nB,QAAA4nB,EAAA,IAAA5nB,QAQO,MAAM6nB,EAKTr6B,WAAAA,CAAYqJ,GAAwC,IAAjCsgB,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMqN,EAAKrN,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC1C,IAD8C+I,EAAAA,EAAAA,GAAA,KAAA8qB,IAAA9qB,EAAAA,EAAAA,GAAA,KAAA6qB,IAAA7qB,EAAAA,EAAAA,GAAA,KAAA4qB,IAwClD5qB,EAAAA,EAAAA,GAAA,KAAAikB,IAAArgB,EAAAA,EAAAA,GAAA,KAAA+mB,EAAA,CAAA9mB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqW,EAAA,CAAApW,UAAA,EAAAxD,WAAA,MAvCUtG,aAAiBixB,EAAAA,IACnB,MAAM,IAAIt7B,MAAM,gEAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI04B,EAAU5wB,IAEd+J,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAIgoB,EAAqB,OAAV3V,EAAiB,CAAC,EAAIA,GACrCrS,KAAKuoB,SAAU,CACnB,CAEAC,IAAAA,GACI/V,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQgR,WAC5BvmB,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQiR,OAC5BxmB,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQsK,SAChC,CAUAzC,aAAAA,GACI,IAAIjiB,EAAAA,EAAAA,GAAC5N,KAAIgyB,EAAAK,GAAAlwB,KAAJnC,MAGD,OAAO8R,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQsK,SAAS4G,WAAW,CAAE5X,KAAM,SAF/C,KAAM,iDAId,CAKA8H,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAqCA,eAAOhW,GACH,MAAO,CACHpM,EAAG,GACHwzB,OAAQ,OACRC,UAAW,aACXC,sBAAuB,EACvBC,kBAAmB,EACnBC,eAAgB,EAExB,CAkBAlQ,OAAAA,CAAQkJ,EAAQnK,GACZ,IAAI,EAAEziB,EAAC,OAAEwzB,EAAM,UAAEC,EAAS,sBAAEC,EAAqB,kBAAEC,EAAiB,eAAEC,GAAmBnR,EACzFpoB,KAAKuoB,SAAU,IAEXzW,EAAAA,EAAAA,GAAA9R,KAAI04B,GAAQnQ,SAAW5iB,KAAMmM,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAapiB,KAC9C8M,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQgR,WACxBzG,GACA3kB,EAAAA,EAAAA,GAAA5N,KAAI24B,EAAAa,GAAAr3B,KAAJnC,KAAwB2F,UAEjBmM,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQgR,WAEvBlnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAapiB,EAAIA,EACrB3F,KAAKuoB,SAAU,IAGfvoB,KAAKuoB,SAAW4Q,KAAWrnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoR,UAC5C1mB,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQiR,OACxB1G,GACA3kB,EAAAA,EAAAA,GAAA5N,KAAI44B,EAAAa,GAAAt3B,KAAJnC,KAAoBm5B,UAEbrnB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQiR,OAEvBnnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoR,OAASA,EAC1Bn5B,KAAKuoB,SAAU,IAGfvoB,KAAKuoB,SACF6Q,KAActnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqR,WAC/BC,KAA0BvnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasR,uBAC3CC,KAAsBxnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauR,mBACvCC,KAAmBznB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAawR,kBACnC3rB,EAAAA,EAAAA,GAAC5N,KAAIgyB,EAAAK,GAAAlwB,KAAJnC,OAAiBuyB,KAEtB9f,EAAAA,IAAgBX,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQsK,UACxBC,GACA3kB,EAAAA,EAAAA,GAAA5N,KAAI64B,EAAAa,GAAAv3B,KAAJnC,KAAuBo5B,EAAWC,EAAuBC,EAAmBC,UAErEznB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQsK,UAGvBxgB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqR,UAAYA,GAC7BtnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAasR,sBAAwBA,GACzCvnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAauR,kBAAoBA,GACrCxnB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAawR,eAAiBA,EAClCv5B,KAAKuoB,SAAU,EAIvB,EAGJ,SAAA8J,IA5GQ,MAAO,aAAUvgB,EAAAA,EAAAA,GAAI9R,KAAIgoB,EAC7B,CAAC,SAAAwR,EAEkB7zB,IACfmM,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQgR,UAAYhqB,EAAAA,IAA2B8C,EAAAA,EAAAA,GAAA9R,KAAI04B,GAAQvC,aAAcxwB,EAEjF,CAAC,SAAA8zB,EAEcN,GACL,cAAWrnB,EAAAA,EAAAA,GAAI9R,KAAIgoB,KACrBpa,EAAAA,EAAAA,GAAA5N,KAAI24B,EAAAa,GAAAr3B,KAAJnC,MAAwB8R,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAapiB,IAE7CmM,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQiR,MAAQjqB,EAAAA,IAAoB8C,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQgR,UAAW,CAAEG,OAAQA,GAE7E,CAAC,SAAAO,EAEiBN,EAAWC,EAAuBC,EAAmBC,GAC7D,UAAOznB,EAAAA,EAAAA,GAAI9R,KAAIgoB,KACjBpa,EAAAA,EAAAA,GAAA5N,KAAI44B,EAAAa,GAAAt3B,KAAJnC,MAAoB8R,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoR,SAEzCrnB,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQsK,SAAWtjB,EAAAA,IAAsB8C,EAAAA,EAAAA,GAAA9R,KAAIgoB,GAAQiR,MAAO,CAC5D3qB,OAAQ8qB,EACRO,qBAAsBN,EACtBO,iBAAkBN,EAClBO,2BAA2B,EAC3BC,cAAeP,GAGvB,uJCtFJb,EAAA,IAAAhoB,QAAAqX,EAAA,IAAArX,QAAAqpB,EAAA,IAAArpB,QAAAspB,EAAA,IAAAtpB,QAAAupB,EAAA,IAAAvpB,QAAAwpB,EAAA,IAAAxpB,QAAAypB,EAAA,IAAAlpB,QAQO,MAAMmpB,EAUT37B,WAAAA,CAAYqJ,GAA2C,IAApCsgB,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMq1B,EAAQr1B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC7C,IA0EJ+I,EAAAA,EAAAA,GAAA,KAAAosB,IAAAxoB,EAAAA,EAAAA,GAAA,KAAA+mB,EAAA,CAAA9mB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAooB,EAAA,CAAAnoB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqoB,EAAA,CAAApoB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAsoB,EAAA,CAAAroB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAuoB,EAAA,CAAAtoB,UAAA,EAAAxD,WAAA,MA1EUtG,aAAiBixB,EAAAA,IACnB,MAAM,IAAIt7B,MAAM,gEAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI04B,EAAU5wB,IAEd+J,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAI+5B,EAAaM,GACjBr6B,KAAKuoB,SAAU,EAEf,IAAIruB,EAASogC,EAAAA,KACT,UAAEC,EAAS,MAAEC,GAAUC,EAAAA,GAA0BvgC,EAAQugC,EAAAA,KAC7D5oB,EAAAA,EAAAA,GAAA7R,KAAIg6B,EAAcO,IAClB1oB,EAAAA,EAAAA,GAAA7R,KAAIi6B,EAAUO,IAEd3oB,EAAAA,EAAAA,GAAA7R,KAAIk6B,EAAQ,KAChB,CAEAM,KAAAA,GAGI,OAAA1oB,EAAAA,EAAAA,GAAO9R,KAAIi6B,EACf,CAEAzR,IAAAA,GACI,OAAOiS,EAAAA,IAAmB3oB,EAAAA,EAAAA,GAAC9R,KAAIg6B,GACnC,CASA5Q,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAeA,kBAAM2J,GAAmC,IAAtB,KAAEpQ,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClC,GAAuB,QAAnB8M,EAAAA,EAAAA,GAAA9R,KAAI+5B,GAAqB,CACzB,IAAIzqB,EAAS,CACTnH,GAAG2J,EAAAA,EAAAA,GAAA9R,KAAI+5B,GAAW5xB,EAClBxL,GAAGmV,EAAAA,EAAAA,GAAA9R,KAAI+5B,GAAWp9B,GAStB,OANI2kB,IACAhS,EAAOnH,EAAImH,EAAOnH,EAAEtM,QACpByT,EAAO3S,EAAI2S,EAAO3S,EAAEd,SAGxByT,EAAOorB,YAAa5oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa2S,WAC9BprB,CACX,CAII,aADAwC,EAAAA,EAAAA,GAAM9R,KAAIk6B,GACHO,EAAAA,IAAiB3oB,EAAAA,EAAAA,GAAC9R,KAAIg6B,GAAa,CAAE,IAAO,SAE3D,CAwCA3Q,OAAAA,CAAQjB,GACJ,IAAI,WAAEuS,EAAU,WAAED,EAAU,QAAEE,GAAYxS,EAEtCyS,IAAmB/oB,EAAAA,EAAAA,GAAA9R,KAAI04B,GAAQnQ,SAAWoS,KAAe7oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa4S,WAC9E,OAAIE,GAAkBH,IAAc5oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa2S,YACjD16B,KAAKuoB,SAAU,EACR,IAAI9D,SAAQvB,GAAWA,EAAQ,UAKnB,QAAnBpR,EAAAA,EAAAA,GAAA9R,KAAI+5B,KACJc,GAAiB,GACjBhpB,EAAAA,EAAAA,GAAA7R,KAAI+5B,EAAa,QAGrBnsB,EAAAA,EAAAA,GAAA5N,KAAIm6B,EAAAW,GAAA34B,KAAJnC,KAAW26B,EAAYD,EAAYE,GAAUC,IAE7C/oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa4S,WAAaA,GAC9B7oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa2S,WAAaA,GAC9B5oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa6S,QAAUA,EAE3B56B,KAAKuoB,SAAU,GACfzW,EAAAA,EAAAA,GAAO9R,KAAIk6B,GACf,CAYAU,OAAAA,GACI,OAAuB,QAAnB9oB,EAAAA,EAAAA,GAAA9R,KAAI+5B,KACJloB,EAAAA,EAAAA,GAAA7R,KAAI+5B,EAAa,OAGjBnsB,EAAAA,EAAAA,GAAA5N,KAAIm6B,EAAAW,GAAA34B,KAAJnC,MAAW8R,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa4S,YAAY7oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa2S,YAAY,GAAM,IAGpE5oB,EAAAA,EAAAA,GAAA9R,KAAIk6B,GACNa,MAAKziB,IACK,CACH,KAAQ,aACR,KAAQ,CAAE,OAAU,gBAIzBmiB,EAAAA,IAAiB3oB,EAAAA,EAAAA,GAAC9R,KAAIg6B,GAAa,CAAE,IAAO,SAE3D,EAGJ,SAAAc,EA1FUH,EAAYD,EAAYE,EAASI,GACnC,IAAIC,EAAS,KACb,GAAID,EAAY,CACZ,IAAIr1B,EAAIqJ,EAAAA,GAA4B2rB,GACpCM,EAASR,EAAAA,IAAyB3oB,EAAAA,EAAAA,GAAC9R,KAAI04B,GAAS/yB,EACpD,CAEA,IAAIkO,EAAO,CACP,WAAc8mB,EACd,WAAcD,EACd,QAAWE,IAQf/oB,EAAAA,EAAAA,GAAA7R,KAAIk6B,EAAQO,EAAAA,IAAyB3oB,EAAAA,EAAAA,GAAC9R,KAAIg6B,GAAanmB,EAAMonB,GAEjE,uJCrHJvC,EAAA,IAAAhoB,QAAAqX,EAAA,IAAArX,QAAAqpB,EAAA,IAAArpB,QAAAspB,EAAA,IAAAtpB,QAAAupB,EAAA,IAAAvpB,QAAAwpB,EAAA,IAAAxpB,QAAAypB,EAAA,IAAAlpB,QAQO,MAAMiqB,EAUTz8B,WAAAA,CAAYqJ,GAA2C,IAApCsgB,EAAUpjB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAAMq1B,EAAQr1B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KAC7C,IAyEJ+I,EAAAA,EAAAA,GAAA,KAAAosB,IAAAxoB,EAAAA,EAAAA,GAAA,KAAA+mB,EAAA,CAAA9mB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoW,EAAA,CAAAnW,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAooB,EAAA,CAAAnoB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqoB,EAAA,CAAApoB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAsoB,EAAA,CAAAroB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAuoB,EAAA,CAAAtoB,UAAA,EAAAxD,WAAA,MAzEUtG,aAAiBixB,EAAAA,IACnB,MAAM,IAAIt7B,MAAM,gEAEpBoU,EAAAA,EAAAA,GAAA7R,KAAI04B,EAAU5wB,IAEd+J,EAAAA,EAAAA,GAAA7R,KAAI+nB,EAA+B,OAAfK,EAAsB,CAAC,EAAIA,IAC/CvW,EAAAA,EAAAA,GAAA7R,KAAI+5B,EAAaM,GACjBr6B,KAAKuoB,SAAU,EAEf,IAAIruB,EAASogC,EAAAA,KACT,UAAEC,EAAS,MAAEC,GAAUC,EAAAA,GAA0BvgC,EAAQugC,EAAAA,KAC7D5oB,EAAAA,EAAAA,GAAA7R,KAAIg6B,EAAcO,IAClB1oB,EAAAA,EAAAA,GAAA7R,KAAIi6B,EAAUO,IAEd3oB,EAAAA,EAAAA,GAAA7R,KAAIk6B,EAAQ,KAChB,CAEAM,KAAAA,GAGI,OAAA1oB,EAAAA,EAAAA,GAAO9R,KAAIi6B,EACf,CAEAzR,IAAAA,GACI,OAAOiS,EAAAA,IAAmB3oB,EAAAA,EAAAA,GAAC9R,KAAIg6B,GACnC,CAmBA,kBAAMtI,GAAmC,IAAtB,KAAEpQ,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClC,GAAuB,QAAnB8M,EAAAA,EAAAA,GAAA9R,KAAI+5B,GAAqB,CACzB,IAAIzqB,EAAS,CACTnH,GAAG2J,EAAAA,EAAAA,GAAA9R,KAAI+5B,GAAW5xB,EAClBxL,GAAGmV,EAAAA,EAAAA,GAAA9R,KAAI+5B,GAAWp9B,GAStB,OANI2kB,IACAhS,EAAOnH,EAAImH,EAAOnH,EAAEtM,QACpByT,EAAO3S,EAAI2S,EAAO3S,EAAEd,SAGxByT,EAAOorB,YAAa5oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoT,WAC9B7rB,CACX,CAII,aADAwC,EAAAA,EAAAA,GAAM9R,KAAIk6B,GACHO,EAAAA,IAAiB3oB,EAAAA,EAAAA,GAAC9R,KAAIg6B,GAAa,CAAE,IAAO,SAE3D,CAKA5Q,eAAAA,GACI,MAAO,KAAEtX,EAAAA,EAAAA,GAAG9R,KAAI+nB,GACpB,CAwCAsB,OAAAA,CAAQjB,GACJ,IAAI,cAAE6E,EAAa,WAAEkO,EAAU,SAAEC,EAAQ,QAAER,GAAYxS,EAEnDyS,IAAmB/oB,EAAAA,EAAAA,GAAA9R,KAAI04B,GAAQnQ,UAAWzW,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAakF,gBAAkBA,EACjF,OAAI4N,GAAkBM,KAAerpB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoT,YAAcC,KAAatpB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqT,UAC9Fp7B,KAAKuoB,SAAU,EACR,IAAI9D,SAAQvB,GAAWA,EAAQ,UAKnB,QAAnBpR,EAAAA,EAAAA,GAAA9R,KAAI+5B,KACJc,GAAiB,GACjBhpB,EAAAA,EAAAA,GAAA7R,KAAI+5B,EAAa,QAGrBnsB,EAAAA,EAAAA,GAAA5N,KAAIm6B,EAAAW,GAAA34B,KAAJnC,KAAWitB,EAAekO,EAAYC,EAAUR,GAAUC,IAE1D/oB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAakF,cAAgBA,GACjCnb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoT,WAAaA,GAC9BrpB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqT,SAAWA,GAC5BtpB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAa6S,QAAUA,EAE3B56B,KAAKuoB,SAAU,GACfzW,EAAAA,EAAAA,GAAO9R,KAAIk6B,GACf,CAYAU,OAAAA,GACI,OAAuB,QAAnB9oB,EAAAA,EAAAA,GAAA9R,KAAI+5B,KACJloB,EAAAA,EAAAA,GAAA7R,KAAI+5B,EAAa,OAGjBnsB,EAAAA,EAAAA,GAAA5N,KAAIm6B,EAAAW,GAAA34B,KAAJnC,MAAW8R,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAakF,eAAenb,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaoT,YAAYrpB,EAAAA,EAAAA,GAAA9R,KAAI+nB,GAAaqT,UAAU,GAAM,IAGlGtpB,EAAAA,EAAAA,GAAA9R,KAAIk6B,GACNa,MAAKziB,IACK,CACH,KAAQ,aACR,KAAQ,CAAE,OAAU,gBAIzBmiB,EAAAA,IAAiB3oB,EAAAA,EAAAA,GAAC9R,KAAIg6B,GAAa,CAAE,IAAO,SAE3D,EAGJ,SAAAc,EA5FU7N,EAAekO,EAAYC,EAAUR,EAASI,GAChD,IAAIC,EAAS,KACTD,IACAC,EAASR,EAAAA,IAAyB3oB,EAAAA,EAAAA,GAAC9R,KAAI04B,GAASzL,IAGpD,IAAIpZ,EAAO,CACP,cAAiBoZ,EACjB,WAAckO,EACd,SAAYC,EACZ,QAAWR,IAQf/oB,EAAAA,EAAAA,GAAA7R,KAAIk6B,EAAQO,EAAAA,IAAyB3oB,EAAAA,EAAAA,GAAC9R,KAAIg6B,GAAanmB,EAAMonB,GAEjE,+BC1HG,SAASI,EAAiBnhC,EAAQ+oB,GACrC/oB,EAAOW,UAAYooB,CAEvB,CAEO,SAASqY,EAAYphC,EAAQ0J,EAAS23B,GACzCrhC,EAAOd,YAAYwK,EAAS23B,EAEhC,CAEO,SAASC,EAAgBthC,GAC5BA,EAAOoO,WAEX,iKCXO,SAASmzB,EAAUC,GAEtB1sB,EAAAA,GAAW0sB,EAEf,CAEA,SAASC,EAAyBxzB,EAAGxL,EAAGi/B,EAAOC,GAG3C,IAAKD,IACGzzB,aAAa2zB,aAAeA,YAAYC,OAAO5zB,IAC/C,MAAM,IAAI1K,MAAM,yDAGxB,IAAKo+B,IACGl/B,aAAam/B,aAAeA,YAAYC,OAAOp/B,IAC/C,MAAM,IAAIc,MAAM,wDAG5B,CAEO,SAASu+B,EAAkB7zB,EAAGxL,GACjC,UAAWwL,UAAYxL,EAEnB,OADAg/B,EAAyBxzB,EAAGxL,GAAG,GAAO,IAC/B,EACJ,GAAgB,iBAALwL,EACd,OAAOA,GAAKxL,EAIhB,IAAIs/B,EAAc,OAAN9zB,EACR+zB,EAAc,OAANv/B,EACZ,GAAIs/B,IAAUC,EAEV,OADAP,EAAyBxzB,EAAGxL,EAAGs/B,EAAOC,IAC/B,EACJ,GAAID,EACP,OAAO,EAIX,IAAIE,EAAOh0B,aAAajL,MACpBk/B,EAAOz/B,aAAaO,MACxB,GAAIi/B,GAAQC,EAER,OADAT,EAAyBxzB,EAAGxL,EAAGw/B,EAAMC,IAC9B,EACJ,GAAID,EAAM,CACb,GAAIh0B,EAAEnL,QAAUL,EAAEK,OACd,OAAO,EAGX,IAAK,IAAI5C,EAAI,EAAGA,EAAI+N,EAAEnL,OAAQ5C,IAC1B,GAAI4hC,EAAkB7zB,EAAE/N,GAAIuC,EAAEvC,IAC1B,OAAO,EAIf,OAAO,CACX,CAEAuhC,EAAyBxzB,EAAGxL,GAAG,GAAO,GAItC,IAAI0/B,EAAQ//B,OAAO0B,KAAKmK,GACpBm0B,EAAQhgC,OAAO0B,KAAKrB,GACxB,GAAI0/B,EAAMr/B,QAAUs/B,EAAMt/B,OACtB,OAAO,EAGXq/B,EAAM1Y,OACN2Y,EAAM3Y,OACN,IAASvpB,EAAI,EAAGA,EAAIiiC,EAAMr/B,OAAQ5C,IAC9B,GAAIiiC,EAAMjiC,IAAMkiC,EAAMliC,GAClB,OAAO,EAIf,IAAK,MAAMuL,KAAK02B,EACZ,GAAIL,EAAkB7zB,EAAExC,GAAIhJ,EAAEgJ,IAC1B,OAAO,EAIf,OAAO,CACX,CAEO,SAAS42B,EAAoB/3B,EAAM7J,EAAM0X,GAAwB,IAAjBtR,EAAIiE,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,SAC1D,IAAIw3B,GAAa,EACjB,GAAIz7B,KAAQsR,EAAO,CACf,IAAIoqB,EAAYpqB,EAAMtR,GAKlB07B,EAAUj4B,MAAQA,GAAQi4B,EAAUh+B,YAAYyQ,WAAavU,GAA4B,OAApB8hC,EAAUC,MAC/ED,EAAUjU,OAEVgU,GAAa,CAErB,CAEA,GAAIA,EACA,OAAQ7hC,GACJ,IAAK,aACD0X,EAAMtR,GAAQiO,EAAAA,GAA2BxK,GACzC,MACJ,IAAK,aACD6N,EAAMtR,GAAQiO,EAAAA,GAA2BxK,GACzC,MACJ,IAAK,eACD6N,EAAMtR,GAAQiO,EAAAA,GAA6BxK,GAC3C,MACJ,QAGI,KAAM,eAAiB7J,EAAO,sBAI1C,OAAO0X,EAAMtR,EACjB,CAEO,SAAS47B,EAAwBC,EAAQ/X,GAC5C,IAAI8I,EAAS,GACb,IAAK,MAAOhoB,EAAGvH,KAAM9B,OAAO2S,QAAQ2tB,GAC5Bx+B,EAAEwqB,SACF+E,EAAOnvB,KAAKmH,GAGpB,GAAqB,GAAjBgoB,EAAO3wB,OACP,MAAM,IAAIS,MAAM,wCAA0ConB,EAAM,UAEpE,OAAO8I,CACX,CAEO,SAASkP,EAAazV,EAASpb,GAClC,GAAY,OAARA,EACA,IAAK,MAAM5R,KAAKgtB,EACZ,GAAIhtB,EAAI,GAAKA,GAAK4R,EACd,MAAM,IAAIvO,MAAM,mCAK5B,IAAK,IAAIrD,EAAI,EAAGA,EAAIgtB,EAAQpqB,OAAQ5C,IAChC,GAAIgtB,EAAQhtB,IAAMgtB,EAAQhtB,EAAE,GACxB,MAAM,IAAIqD,MAAM,2CAG5B,CAEOgY,eAAeqnB,EAAgBlnB,GAClC,IAAIF,QAAaC,MAAMC,GACvB,IAAKF,EAAKG,GACN,MAAM,IAAIpY,MAAM,8BAAgCmY,EAAM,IAAMF,EAAK7R,OAAS,KAE9E,OAAO,IAAIiS,iBAAiBJ,EAAKK,cACrC,CAEO,SAASgnB,EAAkB3a,GAC9B,IAAI9S,EAAS,CAAE9R,QAAS,CAAC,GAErBouB,EAAKxJ,EAAM7M,WACJ,OAAPqW,IACAtc,EAAOgB,UAAYtB,EAAAA,GAAoB4c,EAAI,CAAEoR,eAAe,KAGhE,IAAK,MAAMnR,KAAOzJ,EAAM0J,cAAe,CACtB1J,EAAM9M,OAAOuW,aACJ3uB,QAClBoS,EAAO9R,QAAQquB,GAAO7c,EAAAA,GAAoBoT,EAAM9M,OAAOuW,GAAM,CAAEmR,eAAe,IAEtF,CAEA,OAAO1tB,CACX,CAEO,SAAS2tB,EAAqB9H,GACjC,IAAInuB,EAAImuB,EAAO,GAAGn4B,OACdsS,EAAS,CAAE6lB,OAAQ,GAAIG,OAAQ,MAE/B4H,EAAU,IAAIpnB,WAAW9O,GAC7Bk2B,EAAQ/Q,KAAK,GACb,IAAK,MAAMhkB,KAAKgtB,EAAQ,CACpB,IAAIgI,EAAcnuB,EAAAA,GAAgB7G,EAAG,CAAEtH,OAAQ,OAAQ2Y,aAAc,IACrElK,EAAO6lB,OAAO32B,KAAK2+B,GACnBA,EAAY5oB,IAAI3O,SAAQ,CAACjJ,EAAGvC,MACd,GAANuC,IACAugC,EAAQ9iC,GAAK,EACjB,GAER,CAEA,IAAIgjC,EAAc,EAElB,GADAF,EAAQt3B,SAAQjJ,IAAOygC,GAAezgC,CAAC,IACpB,GAAfygC,EACA,OAAO9tB,EAGX,IAAIgmB,EAAS,IAAIzc,WAAW7R,EAAIo2B,GAChC,CACI,IAAI/hB,EAAU,EACd,IAAK,IAAIjhB,EAAI,EAAGA,EAAI4M,EAAG5M,IACD,GAAd8iC,EAAQ9iC,KACRk7B,EAAOja,GAAWjhB,EAClBihB,IAGZ,CACA/L,EAAOgmB,OAASA,EAEhB,IAASl7B,EAAI,EAAGA,EAAIkV,EAAO6lB,OAAOn4B,OAAQ5C,IAAK,CAC3C,IAAI+N,EAAImH,EAAO6lB,OAAO/6B,GAClBijC,EAAUruB,EAAAA,GAAkB7G,EAAEoM,IAAK+gB,GAEnCgI,EADYtuB,EAAAA,GAAsBquB,GACXv3B,KAAI1L,GAAK+N,EAAEqtB,OAAOp7B,KAE7C4U,EAAAA,GAAW7G,EAAEoM,KACbpM,EAAEoM,IAAM8oB,EACRl1B,EAAEqtB,OAAS8H,CACf,CAEA,OAAOhuB,CACX,kGC/NO,MAAMiuB,EAAgB,CAAE,IAAO,EAAG,KAAQ,EAAG,SAAY,GAoEzD,SAASC,EAAoB76B,EAASuW,EAAOukB,GAKhD,IAAIC,EAJCD,QAA6Bz0B,IAAfy0B,IACfA,EAAa,kBAIjB,CAGI,IAAIE,EACAC,GAAa,EAEb91B,EAAQ,EAQZ,GAPI21B,EAAW/xB,MAAM,SACjB5D,EAAQ,EACD21B,EAAW/xB,MAAM,gBACxBkyB,GAAa,EACb91B,EAAQ,GAGR21B,EAAW/xB,MAAM,WACjBiyB,EAAUh7B,EAAQk7B,MAAM3kB,EAAO,CAAE9G,QAAStK,EAAOwZ,MAAM,SACpD,GAAImc,EAAW/xB,MAAM,SACxBiyB,EAAUh7B,EAAQm7B,IAAI5kB,EAAO,CAAE9G,QAAStK,EAAOwZ,MAAM,SAClD,GAAImc,EAAW/xB,MAAM,SACxBiyB,EAAUh7B,EAAQo7B,IAAI7kB,EAAO,CAAE9G,QAAStK,EAAOwZ,MAAM,QAClD,KAAImc,EAAW/xB,MAAM,aAGxB,KAAM,sBAAwB+xB,EAAa,IAF3CE,EAAUh7B,EAAQq7B,cAAc9kB,EAAO,CAAE9G,QAAStK,EAAOwZ,MAAM,GAGnE,CAGAoc,EAAW,IAAI7kB,WAAW8kB,EAAQ3gC,QAClC,IAAK,IAAI5C,EAAI,EAAGA,EAAIsjC,EAAS1gC,OAAQ5C,IACjCsjC,EAAStjC,GAAKA,EAEdwjC,EACAF,EAAS/Z,MAAK,CAAC5qB,EAAGD,IAAO6kC,EAAQ5kC,GAAK4kC,EAAQ7kC,KAE9C4kC,EAAS/Z,MAAK,CAAC5qB,EAAGD,IAAO6kC,EAAQ7kC,GAAK6kC,EAAQ5kC,IAEtD,CAGA,IAAIklC,EAAU,SAASC,GAEnB,IADA,IAAIC,EAAQ,IAAIrlB,aAAaolB,EAAMlhC,QAC1B5C,EAAI,EAAGA,EAAIsjC,EAAS1gC,OAAQ5C,IACjC+jC,EAAM/jC,GAAK8jC,EAAMR,EAAStjC,IAE9B,OAAO+jC,CACX,EAEIC,EAAgBH,EAAQt7B,EAAQ07B,SAASnlB,EAAO,CAAEoI,MAAM,KACxDgd,EAAYL,EAAQt7B,EAAQ47B,MAAMrlB,EAAO,CAAEoI,MAAM,KACjDkd,EAAWP,EAAQt7B,EAAQo7B,IAAI7kB,EAAO,CAAE9G,QAAS,EAAGkP,MAAM,KAC1Dmd,EAAeR,EAAQt7B,EAAQq7B,cAAc9kB,EAAO,CAAE9G,QAAS,EAAGkP,MAAM,KAE5E,MAAO,CACH,SAAYoc,EACZ,MAASY,EACT,SAAYF,EACZ,IAAOI,EACP,eAAkBC,EAE1B,CAEO,SAASC,EAAkB7L,EAAMC,EAAOzgB,GAC3C,IAAI+gB,EAAaP,EAAOC,EAEpB6L,EAAQvL,EAAaN,EAAQD,EAC3B8L,KAAQtsB,IACVA,EAAMssB,GAAQ,CAAC,GAEnB,IAAIC,EAAavsB,EAAMssB,GAEnBE,EAAQzL,EAAaP,EAAOC,EAC5BgM,IAAUD,KAAQD,GAKtB,OAJIE,IACAF,EAAWC,GAAQ,CAAC,GAGjB,CACHrwB,OAAQowB,EAAWC,GACnBvL,IAAKwL,EACL1L,WAAYA,EAEpB,CAEO,SAAS2L,EAAkB1sB,GAC9B,GAAIA,EAAO,CACP,IAAK,MAAMjU,KAAK9B,OAAOuT,OAAOwC,GAC1B,IAAK,MAAM9G,KAAMjP,OAAOuT,OAAOzR,GAC3B,IAAK,MAAM1B,KAAKJ,OAAOuT,OAAOtE,GAC1ByD,EAAAA,GAAWtS,GAIvB,IAAK,MAAMiJ,KAAKrJ,OAAO0B,KAAKqU,UACjBA,EAAM1M,EAErB,CACJ,CAEO,SAASq5B,EAAqBjM,EAAUT,EAAUpJ,EAAO6F,EAAM1c,EAAO2gB,EAAeC,GACxF,IAAIgM,EAAY,KACF,OAAV/V,IACA+V,EAAYjwB,EAAAA,GAAkBka,EAAO6F,GACrC/f,EAAAA,GAAsBiwB,IAG1B,IAAK,MAAMrZ,KAAYmN,EAAS/D,YAAa,CACzC,IACIC,EADAiQ,EAASnM,EAAStJ,IAAI7D,GAE1B,IACIqJ,EAAMjgB,EAAAA,GAAoBkwB,EAAQnQ,GAClC1c,EAAMuT,GAAY5W,EAAAA,GAAmBigB,EAAKqD,EAAU,CAAEpJ,MAAO+V,EAAW7K,aAAcpB,EAAeqB,WAAYpB,GACrH,CAAE,QACEjkB,EAAAA,GAAWigB,EACf,CACJ,CACJ,6DC7LO,SAASkQ,EAAWhX,EAAIrrB,EAAQwf,EAAKjK,EAAOtR,GAC/C,IAAIuO,EAASmD,EAAAA,GAA0B6J,EAAIjH,kBAAmB,eAAgBhD,EAAOtR,GACjFq+B,EAAWtiC,EAAOkuB,gBAGlBqU,EAAOlX,EAAG8C,eAAeoU,KAAK,CAAE/d,MAAM,IAE1C,GAAgB,MAAZ8d,EACA9vB,EAAOiV,IAAI8a,OACR,CACH,IAAIC,EAAOhwB,EAAOgR,QAClB,IAAI5Z,EAAI,EAUR,GATA04B,EAASx5B,SAAQ,CAACuC,EAAG/N,KACjB,IAAK+N,EAAG,CACJ,GAAIzB,GAAK4I,EAAOtS,OACZ,MAAM,IAAIS,MAAM,+CAEpB6hC,EAAK54B,GAAK24B,EAAKjlC,GACfsM,GACJ,KAEAA,IAAM4I,EAAOtS,OACb,MAAM,IAAIS,MAAM,8CAExB,CAEA,OAAO6R,CACX,yJCfO,SAASiwB,EAAOp3B,GACnB,GAAI,yBAA0BA,EAC1B,OAAOA,EAAEq3B,uBAGb,IAAK/sB,EAAAA,GAAkBtK,GACnB,MAAM,IAAI1K,MAAM,8BAAgC0K,EAAE1J,YAAYsC,KAAO,cAGzE,OAAOoH,EAAEnL,MACb,CAsBO,SAASyiC,EAAMt3B,EAAG/N,GAA+B,IAA5B,UAAEslC,GAAY,GAAO16B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjD,GAAI,wBAAyBmD,EAAG,CAC5B,IAAImH,EAAS,IAAInH,EAAE1J,YAEnB,OADA0J,EAAEw3B,oBAAoBrwB,EAAQlV,EAAG,CAAEslC,cAC5BpwB,CACX,CAEA,IAAKmD,EAAAA,GAAkBtK,GACnB,MAAM,IAAI1K,MAAM,6BAA+B0K,EAAE1J,YAAYsC,KAAO,cAGxE,GAAI3G,EAAEqE,aAAenC,OACjB,OAAIojC,GAAa5D,YAAYC,OAAO5zB,GACzBA,EAAE8c,SAAS7qB,EAAEwlC,MAAOxlC,EAAEylC,KAEtB13B,EAAEtM,MAAMzB,EAAEwlC,MAAOxlC,EAAEylC,KAE3B,CACH,IAAIvwB,EAAS,IAAInH,EAAE1J,YAAYrE,EAAE4C,QAIjC,OAHA5C,EAAEwL,SAAQ,CAACjJ,EAAG+J,KACV4I,EAAO5I,GAAKyB,EAAExL,EAAE,IAEb2S,CACX,CACJ,CAqBO,SAASwwB,EAAQC,GACpB,IAAI53B,EAAI43B,EAAQ,GAChB,GAAI,0BAA2B53B,EAAG,CAC9B,IAAImH,EAAS,IAAInH,EAAE1J,YAEnB,OADA0J,EAAE63B,sBAAsB1wB,EAAQywB,GACzBzwB,CACX,CAEA,IAAKmD,EAAAA,GAAkBtK,GACnB,MAAM,IAAI1K,MAAM,+BAAiC0K,EAAE1J,YAAYsC,KAAO,cAI1E,IAAIk/B,EAAe,EACfxhC,EAAc0J,EAAE1J,YAEpB,IAAK,MAAMuP,KAAO+xB,EACdE,GAAgBjyB,EAAIhR,OACpByB,EAAcgU,EAAAA,GAA8BhU,EAAauP,EAAIvP,aAGjE,IAAI6Q,EAAS,IAAI7Q,EAAYwhC,GACzBC,EAAW,EACf,IAAK,MAAMlyB,KAAO+xB,EACV,QAASzwB,GACTA,EAAOiV,IAAIvW,EAAKkyB,GAChBA,GAAYlyB,EAAIhR,QAEhBgR,EAAIpI,SAAQuC,IACRmH,EAAO4wB,GAAY/3B,EACnB+3B,GAAU,IAKtB,OAAO5wB,CACX,CAoBO,SAAS6wB,EAAMh4B,GAA6B,IAA1B,SAAE8e,GAAW,GAAMjiB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5C,GAAImD,aAAa7L,OAAQ,CACrB,IAAIyM,EAAU,CAAEke,YAChB,GAAI,wBAAyB9e,EAAG,CAC5B,IAAImH,EAAS,IAAInH,EAAE1J,YAEnB,OADA0J,EAAEi4B,oBAAoB9wB,EAAQvG,GACvBuG,CACX,CAEA,GAAImD,EAAAA,GAAkBtK,GAClB,OAAIA,EAAE1J,aAAevB,MACViL,EAAErC,KAAInJ,GAAKwjC,EAAMxjC,EAAGoM,KACpBke,EACA9e,EAAEtM,QAEFsM,EAAE8c,WAIjB,GAAI9c,EAAE1J,aAAenC,OAAQ,CACzB,GAAI2qB,EAAU,CACV,IAAI3X,EAAS,CAAC,EACd,IAAK,MAAO3J,EAAGvH,KAAM9B,OAAO2S,QAAQ9G,GAChCmH,EAAO3J,GAAKw6B,EAAM/hC,GAEtB,OAAOkR,CACX,CACI,MAAO,IAAKnH,EAEpB,CAEA,GAAIA,EAAE1J,aAAe4hC,IAAK,CACtB,IAAI/wB,EAAS,IAAI+wB,IACjB,IAAK,MAAO16B,EAAGvH,KAAM+J,EACjBmH,EAAOiV,IAAI5e,EAAGshB,EAAWkZ,EAAM/hC,GAAKA,GAExC,OAAOkR,CACX,CAEA,GAAInH,EAAE1J,aAAeilB,IAAK,CACtB,IAAIpU,EAAS,IAAIoU,IACjB,IAAK,MAAM/d,KAAKwC,EACZmH,EAAOrB,IAAIgZ,EAAWkZ,EAAMx6B,GAAKA,GAErC,OAAO2J,CACX,CAGA,MAAM,IAAI7R,MAAM,kDAAoD0K,EAAE1J,YAAYsC,KAAO,IAC7F,CAGA,OAAOoH,CACX,CAgBO,SAASm4B,EAAMn4B,EAAGo4B,GAKrB,GAJIA,EAAO9hC,aAAenC,SACtBikC,EAASC,EAAAA,EAAoBD,IAG7B,wBAAyBp4B,EACzB,OAAOA,EAAEs4B,oBAAoBF,GAGjC,IAAIjxB,EAAS,CAAC,EACd,IAAK,MAAO3J,EAAGvH,KAAM9B,OAAO2S,QAAQsxB,GAChCjxB,EAAO3J,GAAK85B,EAAMt3B,EAAG/J,GAGzB,OAAOkR,CACX,CASO,SAASoxB,EAAev4B,GAC3B,KAAM,iCAAkCA,GACpC,MAAM,IAAI1K,MAAM,6CAA+C0K,EAAE1J,YAAYsC,KAAO,cAExF,OAAOoH,EAAEw4B,8BACb,CASO,SAASC,EAAkBz4B,GAC9B,KAAM,oCAAqCA,GACvC,MAAM,IAAI1K,MAAM,gDAAkD0K,EAAE1J,YAAYsC,KAAO,cAE3F,OAAOoH,EAAE04B,iCACb,CAyBO,SAASC,EAAS34B,EAAGua,EAAMllB,GAAqC,IAA5B,UAAEkiC,GAAY,GAAO16B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChE,KAAM,2BAA4BmD,GAC9B,MAAM,IAAI1K,MAAM,uCAAyC0K,EAAE1J,YAAYsC,KAAO,cAElF,IAAIuO,EAAS,IAAInH,EAAE1J,YAEnB,OADA0J,EAAE44B,uBAAuBzxB,EAAQoT,EAAMllB,EAAS,CAAEkiC,cAC3CpwB,CACX,CAeO,SAAS0xB,EAAajB,GACzB,IAAI53B,EAAI43B,EAAQ,GAChB,KAAM,+BAAgC53B,GAClC,MAAM,IAAI1K,MAAM,2CAA6C0K,EAAE1J,YAAYsC,KAAO,cAEtF,IAAIuO,EAAS,IAAInH,EAAE1J,YAEnB,OADA0J,EAAE84B,2BAA2B3xB,EAAQywB,GAC9BzwB,CACX,CAeO,SAAS4xB,EAAgBnB,GAC5B,IAAI53B,EAAI43B,EAAQ,GAChB,KAAM,kCAAmC53B,GACrC,MAAM,IAAI1K,MAAM,8CAAgD0K,EAAE1J,YAAYsC,KAAO,cAEzF,IAAIuO,EAAS,IAAInH,EAAE1J,YAEnB,OADA0J,EAAEg5B,8BAA8B7xB,EAAQywB,GACjCzwB,CACX,wECzUO,MAAM8xB,EAIT3iC,WAAAA,CAAY4Z,GACgB,GAApBrT,UAAUhI,SAIdgD,KAAKqhC,UAAY5uB,EAAAA,GAAiB4F,GACtC,CASAA,QAAAA,GACI,OAAOrY,KAAKqhC,SAChB,CAeAC,WAAAA,CAAYlzB,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClCL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAO08B,UAAY5uB,EAAAA,GAAiBrE,GAC7BzJ,CACX,CAMA88B,YAAAA,CAAarzB,GACT,OAAOpO,KAAKshC,YAAYlzB,EAAO,CAAEmzB,SAAS,GAC9C,CAMAnB,mBAAAA,CAAoB9wB,EAAMoyB,GAAuB,IAArB,SAAEza,GAAW,GAAMya,EAC3CpyB,EAAO+xB,UAAYG,EAAAA,EAAkBxhC,KAAKqhC,UAAWpa,EAEzD,wHCnCG,MAAM0a,UAAkBC,EAAAA,EAe3BnjC,WAAAA,CAAYjB,GAA2F,IAAlF,aAAEyX,EAAe,KAAI,SAAEM,EAAW,KAAI,YAAEyE,EAAc,KAAI,SAAE3B,EAAW,CAAC,GAAGrT,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChG,GAAwB,GAApBA,UAAUhI,OAAd,CAKA6kC,MAAMxpB,GACNrY,KAAK8hC,cAAgB7sB,EACrBjV,KAAK+hC,UAAYxsB,EAEjB,IACIvV,KAAKgiC,SAAW,IAAIC,EAAAA,EAAgBzkC,EAASwc,EACjD,CAAE,MAAOrgB,GACL,MAAM,IAAI8D,MAAM,yCAA2CuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACvH,CAEA,IAAK,MAAMgM,KAAK3F,KAAKgiC,SAASvyB,QAAS,CACnC,IAAIvW,EAAIipC,EAAAA,GAAgBniC,KAAKgiC,SAASI,MAAMz8B,IAC5C,GAA0B,MAAtB3F,KAAK8hC,cACL9hC,KAAK8hC,cAAgB5oC,OAClB,GAAIA,GAAK8G,KAAK8hC,cACjB,MAAM,IAAIrkC,MAAM,wDAExB,CAEgB,MAAZ8X,IAC0B,MAAtBvV,KAAK8hC,gBACL9hC,KAAK8hC,cAAgBvsB,EAASvY,QAElCyV,EAAAA,GAAsB8C,EAAU,aAAcvV,KAAK8hC,cAAe,wDAG5C,MAAtB9hC,KAAK8hC,gBACL9hC,KAAK8hC,cAAgB,EA7BzB,MAFID,OAiCR,CAWAtsB,QAAAA,GACI,OAAOvV,KAAK+hC,SAChB,CAKAjW,WAAAA,GACI,OAAO9rB,KAAKgiC,SAASvyB,OACzB,CAMA2F,SAAAA,CAAUrU,GACN,OAAOf,KAAKgiC,SAASl0B,IAAI/M,EAC7B,CAKAkU,YAAAA,GACI,OAAOjV,KAAK8hC,aAChB,CAKAzsB,eAAAA,GACI,OAAOrV,KAAKgiC,SAASK,iBACzB,CAMA/sB,MAAAA,CAAOlb,GACH,OAAO4F,KAAKgiC,SAASI,MAAMhoC,EAC/B,CAeA6rB,YAAAA,CAAa7rB,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/BL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOq9B,SAAWhiC,KAAKgiC,SAASM,OAAOloC,EAAG,CAAEmnC,YACrC58B,CACX,CAMA49B,aAAAA,CAAcnoC,GACV,OAAO4F,KAAKimB,aAAa7rB,EAAG,CAAEmnC,SAAS,GAC3C,CAgBAiB,SAAAA,CAAUpoC,EAAGgU,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvC,GAAIm9B,EAAAA,GAAgB/zB,IAAUpO,KAAK8hC,cAC/B,MAAM,IAAIrkC,MAAM,yEAGpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOq9B,SAAWhiC,KAAKgiC,SAASzd,IAAInqB,EAAGgU,EAAO,CAAEmzB,YACzC58B,CACX,CAYAqT,UAAAA,CAAW5d,EAAGgU,GACV,OAAOpO,KAAKwiC,UAAUpoC,EAAGgU,EAAO,CAAEmzB,SAAS,GAC/C,CAYAkB,cAAAA,CAAehzB,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrCL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOq9B,SAAWr9B,EAAOq9B,SAASU,SAASjzB,EAAO,CAAE8xB,YAC7C58B,CACX,CAOAg+B,eAAAA,CAAgBlzB,GACZ,OAAOzP,KAAKyiC,eAAehzB,EAAO,CAAE8xB,SAAS,GACjD,CAcAqB,WAAAA,CAAYnzB,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzB,MAATyK,GACAgD,EAAAA,GAAsBhD,EAAO,sBAAuBzP,KAAK8hC,cAAe,oBAG5E,IAAIn9B,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOo9B,UAAYtyB,EACZ9K,CACX,CASAk+B,YAAAA,CAAapzB,GACT,OAAOzP,KAAK4iC,YAAYnzB,EAAO,CAAE8xB,SAAS,GAC9C,CAYAuB,YAAAA,CAAa1oC,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/BL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOq9B,SAAWhiC,KAAKgiC,SAASnmC,MAAMzB,EAAG,CAAEmnC,YACpC58B,CACX,CAYAo+B,aAAAA,CAAc3oC,GACV,OAAO4F,KAAK8iC,aAAa1oC,EAAG,CAAEmnC,SAAS,GAC3C,CAMA/B,oBAAAA,GACI,OAAOx/B,KAAKiV,cAChB,CAEA0qB,mBAAAA,CAAoBrwB,EAAQlV,EAACsnC,GAAyB,IAM9CsB,GANuB,UAAEtD,GAAY,GAAOgC,EAC5C34B,EAAU,CAAE22B,aAEZhmB,EAAc1Z,KAAKgiC,SAASj9B,OAAM3G,GAAK+jC,EAAAA,GAAe/jC,EAAGhE,EAAG2O,KAC5Dk6B,EAAkC,MAAlBjjC,KAAK+hC,UAAoB,KAAOI,EAAAA,GAAeniC,KAAK+hC,UAAW3nC,EAAG2O,GAIlFi6B,EADA5oC,EAAEqE,aAAenC,OACElC,EAAEylC,IAAMzlC,EAAEwlC,MAEVxlC,EAAE4C,OAGzBsS,EAAOyyB,UAAYkB,EACnB3zB,EAAO0yB,SAAWtoB,EAClBpK,EAAOwyB,cAAgBkB,EACvB1zB,EAAO+xB,UAAYrhC,KAAKqhC,SAE5B,CAEArB,qBAAAA,CAAsB1wB,EAAQywB,GAC1B,IAAIrmB,EAAcuoB,EAAAA,EAAgBiB,gBAAgBnD,EAAQj6B,KAAIqC,GAAKA,EAAE65B,WAAWG,EAAAA,IAE5EgB,EAAQ,GACRC,EAAQ,GACZ,IAAK,MAAMC,KAAMtD,EACboD,EAAM3kC,KAAK6kC,EAAG9tB,YACd6tB,EAAM5kC,KAAK6kC,EAAGpuB,gBAGlB,IAAI+tB,EAAmBvwB,EAAAA,GAAU2wB,GAC7BH,EAAexwB,EAAAA,GAAmB0wB,EAAOC,EAAOJ,GAEpD1zB,EAAOyyB,UAAYkB,EACnB3zB,EAAO0yB,SAAWtoB,EAClBpK,EAAOwyB,cAAgBkB,EACvB1zB,EAAO+xB,UAAYrhC,KAAKqhC,SAE5B,CAEAjB,mBAAAA,CAAoB9wB,EAAMg0B,GAAuB,IAArB,SAAErc,GAAW,GAAMqc,EAC3CzB,MAAMzB,oBAAoB9wB,EAAQ,CAAE2X,aACpC3X,EAAO0yB,SAAWR,EAAAA,EAAkBxhC,KAAKgiC,SAAU/a,GACnD3X,EAAOyyB,UAAYP,EAAAA,EAAkBxhC,KAAK+hC,UAAW9a,GACrD3X,EAAOwyB,cAAgB9hC,KAAK8hC,aAEhC,EAYG,SAASyB,EAAoBxD,GAChC,IAAIyD,EAAQ,IAAI9f,IACZ+f,EAAS,GACb,IAAK,MAAM9qB,KAAWonB,EAAS,CAC3B,IAAI2D,EAAS/qB,EAAQmT,cACrB,IAAK,MAAMvyB,KAAKmqC,EACPF,EAAM11B,IAAIvU,KACXiqC,EAAMv1B,IAAI1U,GACVkqC,EAAOjlC,KAAKjF,GAGxB,CAEA,IAAIoqC,EAAS,GACb,IAAK,MAAMhrB,KAAWonB,EAAS,CAC3B,IAAI6D,EAAQ,IAAI1mC,MAAMyb,EAAQ1D,gBAC9B2uB,EAAMzX,KAAK,MACX,IAAI7K,EAAO6gB,EAAAA,GAAexpB,EAAS,CAAEsO,UAAU,IAE/C,IAAK,MAAM1tB,KAAKkqC,EACP9qB,EAAQvD,UAAU7b,IACnB+nB,EAAKtJ,WAAWze,EAAGqqC,GAI3BtiB,EAAK0gB,SAAW1gB,EAAK0gB,SAAS/D,QAAQwF,GACtCE,EAAOnlC,KAAK8iB,EAChB,CAEA,OAAO6gB,EAAAA,GAAiBwB,EAC5B,EAzCClL,EAAAA,EAAAA,GAtTYkJ,EAAS,YAoDC,qFChFvBkC,EAAA,IAAA5yB,QAAA6yB,EAAA,IAAA7yB,QAAA8yB,EAAA,IAAA9yB,QAAA+yB,EAAA,IAAA/yB,QA+YC,SAAAgzB,EA3Uc7pC,EAAG8pC,EAAUC,EAAYzE,EAAW0E,GAC3C,GAAKA,EASE,CACH,IAAIxE,EAAQxlC,EAAI+pC,EACZtE,EAAMD,EAAQuE,EAClB,OAAIzE,EACO1/B,KAAKqkC,QAAQpf,SAAS2a,EAAOC,GAE7B7/B,KAAKqkC,QAAQxoC,MAAM+jC,EAAOC,EAEzC,CAjBmB,CACf,IAAIvwB,EAAS,IAAItP,KAAKqkC,QAAQ5lC,YAAY0lC,GACtCG,EAASlqC,EACb,IAAK,IAAItB,EAAI,EAAGA,EAAIqrC,EAAYrrC,IAC5BwW,EAAOxW,GAAKkH,KAAKqkC,QAAQC,GACzBA,GAAUJ,EAEd,OAAO50B,CAEX,CASJ,CAAC,SAAAi1B,EA+DSnqC,EAAG8pC,EAAUC,EAAYC,EAAc9qB,GAC7C,GAAK8qB,EAOE,CACH,IAAIxE,EAAQxlC,EAAI+pC,EAChBnkC,KAAKqkC,QAAQ9f,IAAIjL,EAAasmB,EAClC,KAVmB,CACF,IAAI5/B,KAAKqkC,QAAQ5lC,YAAY0lC,GAA1C,IACIG,EAASlqC,EACb,IAAK,IAAItB,EAAI,EAAGA,EAAIqrC,EAAYrrC,IAC5BkH,KAAKqkC,QAAQC,GAAUhrB,EAAYxgB,GACnCwrC,GAAUJ,CAElB,CAIJ,CAAC,SAAAM,EAuGcC,EAAcC,EAAaC,EAAgBC,EAAYC,EAAgBC,EAAeC,EAAkBC,EAAgBC,EAAiBC,GACpJ,GAAIR,EACA,IAAK,IAAI1oC,EAAI,EAAGA,EAAI4oC,EAAY5oC,KAC5B4R,EAAAA,EAAAA,GAAA5N,KAAIgkC,EAAAmB,GAAAhjC,KAAJnC,KAAsB6kC,EAAgBC,EAAeC,EAAkBC,EAAgBC,EAAiBC,EAAclpC,EAAGA,QAE1H,GAAI2oC,EACP,IAAS3oC,EAAIyoC,EAAa7E,MAAO5jC,EAAIyoC,EAAa5E,IAAK7jC,KACnD4R,EAAAA,EAAAA,GAAA5N,KAAIgkC,EAAAmB,GAAAhjC,KAAJnC,KAAsB6kC,EAAgBC,EAAeC,EAAkBC,EAAgBC,EAAiBC,EAAclpC,EAAGA,EAAIyoC,EAAa7E,YAG9I,IAAK,IAAIwF,EAAK,EAAGA,EAAKX,EAAaznC,OAAQooC,KACvCx3B,EAAAA,EAAAA,GAAA5N,KAAIgkC,EAAAmB,GAAAhjC,KAAJnC,KAAsB6kC,EAAgBC,EAAeC,EAAkBC,EAAgBC,EAAiBC,EAAcT,EAAaW,GAAKA,EAGpJ,CAAC,SAAAD,EAEgBN,EAAgBC,EAAeC,EAAkBC,EAAgBC,EAAiBC,EAAcG,EAAWC,GACxH,IAAIC,EAAYF,EAAYL,EACxBQ,EAAaF,EAAaL,EAE9B,GAAIH,EAAe,CACf,IAAIxX,EAAOttB,KAAKqkC,QAAQpf,SAASsgB,EAAWA,EAAYP,GACxDE,EAAa3gB,IAAI+I,EAAMkY,EAC3B,MAAO,GAAIT,EACP,IAAK,IAAIjsC,EAAI+rC,EAAejF,MAAO9mC,EAAI+rC,EAAehF,IAAK/mC,IACvDosC,EAAaM,EAAa1sC,EAAI+rC,EAAejF,OAAS5/B,KAAKqkC,QAAQkB,EAAYzsC,QAGnF,IAAK,IAAI2sC,EAAK,EAAGA,EAAKZ,EAAe7nC,OAAQyoC,IACzCP,EAAaM,EAAaC,GAAMzlC,KAAKqkC,QAAQkB,EAAYV,EAAeY,GAGpF,EAAChN,EAAAA,EAAAA,GA9RE,MASHh6B,WAAAA,CAAYwW,EAAcI,EAAiBxF,GAAqC,IAA7B,YAAE61B,GAAc,GAAM1gC,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzE,IAD0E+I,EAAAA,EAAAA,GAAA,KAAAi2B,IAAAj2B,EAAAA,EAAAA,GAAA,KAAAg2B,IAAAh2B,EAAAA,EAAAA,GAAA,KAAA+1B,IAAA/1B,EAAAA,EAAAA,GAAA,KAAA81B,GAClD,GAApB7+B,UAAUhI,SAIdgD,KAAK8hC,cAAgB7sB,EACrBjV,KAAK2lC,iBAAmBtwB,EACxBrV,KAAKqkC,QAAUx0B,EACf7P,KAAK4lC,aAAeF,EAChBzwB,EAAeI,GAAmBxF,EAAO7S,QACzC,MAAM,IAAIS,MAAM,oEAExB,CAWAwX,YAAAA,GACI,OAAOjV,KAAK8hC,aAChB,CAKAzsB,eAAAA,GACI,OAAOrV,KAAK2lC,gBAChB,CAKAE,aAAAA,GACI,OAAO7lC,KAAK4lC,YAChB,CAKA/1B,MAAAA,GACI,OAAO7P,KAAKqkC,OAChB,CAiCAp+B,GAAAA,CAAI7L,GAA+B,IAA5B,UAAEslC,GAAY,GAAO16B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5B,OAAA4I,EAAAA,EAAAA,GAAO5N,KAAI6jC,EAAAI,GAAA9hC,KAAJnC,KAAgB5F,EAAG4F,KAAK8hC,cAAe9hC,KAAK2lC,iBAAkBjG,GAAY1/B,KAAK4lC,aAC1F,CAYAtwB,MAAAA,CAAOlb,GAA+B,IAA5B,UAAEslC,GAAY,GAAO16B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/B,OAAA4I,EAAAA,EAAAA,GAAO5N,KAAI6jC,EAAAI,GAAA9hC,KAAJnC,KAAgB5F,EAAG4F,KAAK2lC,iBAAkB3lC,KAAK8hC,cAAepC,EAAW1/B,KAAK4lC,aACzF,CAgBAE,SAAAA,CAAUj2B,GAAkC,IAA1B,QAAE0xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrC,GAAI6K,EAAO7S,SAAWgD,KAAKqkC,QAAQrnC,OAC/B,MAAM,IAAIS,MAAM,+DAGpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAO0/B,QAAUx0B,EACVlL,CACX,CAOAohC,UAAAA,CAAWl2B,GACP,OAAO7P,KAAK8lC,UAAUj2B,EAAQ,CAAE0xB,SAAS,GAC7C,CA0BAyE,MAAAA,CAAO5rC,EAAGyV,GAAkC,IAA1B,QAAE0xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrC,GAAI6K,EAAO7S,SAAWgD,KAAK2lC,iBACvB,MAAM,IAAIloC,MAAM,mEAGpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAMvC,OALKA,IACD58B,EAAO0/B,QAAU1/B,EAAO0/B,QAAQxoC,UAGpC+R,EAAAA,EAAAA,GAAAjJ,EAAMm/B,EAAAS,GAAApiC,KAANwC,EAAiBvK,EAAGuK,EAAOm9B,cAAen9B,EAAOghC,kBAAmBhhC,EAAOihC,aAAc/1B,GAClFlL,CACX,CAOAshC,OAAAA,CAAQ7rC,EAAGgU,GACP,OAAOpO,KAAKgmC,OAAO5rC,EAAGgU,EAAO,CAAEmzB,SAAS,GAC5C,CAYAiB,SAAAA,CAAUpoC,EAAGyV,GAAkC,IAA1B,QAAE0xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxC,GAAI6K,EAAO7S,SAAWgD,KAAK8hC,cACvB,MAAM,IAAIrkC,MAAM,mEAGpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAMvC,OALKA,IACD58B,EAAO0/B,QAAU1/B,EAAO0/B,QAAQxoC,UAGpC+R,EAAAA,EAAAA,GAAAjJ,EAAMm/B,EAAAS,GAAApiC,KAANwC,EAAiBvK,EAAGuK,EAAOghC,iBAAkBhhC,EAAOm9B,cAAen9B,EAAOihC,aAAc/1B,GACjFlL,CACX,CAOAqT,UAAAA,CAAW5d,EAAGgU,GACV,OAAOpO,KAAKwiC,UAAUpoC,EAAGgU,EAAO,CAAEmzB,SAAS,GAC/C,CAMAZ,4BAAAA,GACI,OAAO3gC,KAAKiV,cAChB,CAEA4rB,+BAAAA,GACI,OAAO7gC,KAAKqV,iBAChB,CAEA0rB,sBAAAA,CAAuBzxB,EAAQoT,EAAMllB,EAAOkkC,GAAM,MAAFA,EACxCwE,EAAsB,OAATxjB,EACbyjB,GAAiBD,GAAaxjB,EAAKjkB,aAAenC,OAClD8pC,EAAWF,EAAYlmC,KAAK8hC,cAAiBqE,EAAezjB,EAAKmd,IAAMnd,EAAKkd,MAAQld,EAAK1lB,OAC7FsS,EAAOwyB,cAAgBsE,EAEvB,IAAIC,EAA4B,OAAZ7oC,EAChB8oC,GAAoBD,GAAgB7oC,EAAQiB,aAAenC,OAC3Dod,EAAc2sB,EAAermC,KAAK2lC,iBAAoBW,EAAkB9oC,EAAQqiC,IAAMriC,EAAQoiC,MAAQpiC,EAAQR,OAClHsS,EAAOq2B,iBAAmBjsB,EAE1B,IAAI6sB,EAAa,IAAIvmC,KAAKqkC,QAAQ5lC,YAAY2nC,EAAW1sB,GACzDpK,EAAO+0B,QAAUkC,EAEbvmC,KAAK4lC,cACLh4B,EAAAA,EAAAA,GAAA5N,KAAI+jC,EAAAS,GAAAriC,KAAJnC,KAAoBxC,EAAS6oC,EAAcC,EAAiBtmC,KAAK2lC,iBAAkBjjB,EAAMwjB,EAAWC,EAAcnmC,KAAK8hC,cAAesE,EAAUG,IAEhJ34B,EAAAA,EAAAA,GAAA5N,KAAI+jC,EAAAS,GAAAriC,KAAJnC,KAAoB0iB,EAAMwjB,EAAWC,EAAcnmC,KAAK8hC,cAAetkC,EAAS6oC,EAAcC,EAAiBtmC,KAAK2lC,iBAAkBjsB,EAAa6sB,GAEvJj3B,EAAOs2B,aAAe5lC,KAAK4lC,YAE/B,CAoCAY,SAAAA,CAAUzG,EAAS0G,EAAYC,EAAcC,EAAgBC,GACzD,IAAIC,EAAcJ,EAAW1G,EAAQ,IACjC+G,EAAgBJ,EAAa3G,EAAQ,IACzC,IAAK,IAAI3lC,EAAI,EAAGA,EAAI2lC,EAAQ/iC,OAAQ5C,IAAK,CACrC,GAAIssC,EAAa3G,EAAQ3lC,MAAQ0sC,EAC7B,MAAM,IAAIrpC,MAAM,4CAA8CmpC,GAElEC,GAAeJ,EAAW1G,EAAQ3lC,GACtC,CAEA,IAAI2sC,EAAgBJ,EAAe5G,EAAQ,IACvClwB,EAAS,IAAIkwB,EAAQ,GAAGsE,QAAQ5lC,YAAYooC,EAAcC,GAE9D,GAAIC,EAAe,CACf,IAAIC,EAAe,EACnB,IAAS5sC,EAAI,EAAGA,EAAI2lC,EAAQ/iC,OAAQ5C,IAAK,CACrC,IAAIue,EAAUonB,EAAQ3lC,GAClB6sC,EAAcR,EAAW9tB,GACzB6sB,EAAawB,EAAeF,EAEhC,GAAIH,EAAehuB,GACf9I,EAAO0U,IAAI5L,EAAQ0rB,QAASmB,QAE5B,IAAK,IAAI1sC,EAAI,EAAGA,EAAIguC,EAAehuC,IAAK,CACpC,IAAIysC,EAAYzsC,EAAImuC,EAChBC,EAAc1B,EAAa1sC,EAC/B,IAAK,IAAIkD,EAAI,EAAGA,EAAIirC,EAAajrC,IAC7B6T,EAAOq3B,EAAclrC,EAAI8qC,GAAiBnuB,EAAQ0rB,QAAQkB,EAAYvpC,EAE9E,CAGJgrC,GAAgBC,CACpB,CACJ,KAAO,CACH,IAAID,EAAe,EACnB,IAAS5sC,EAAI,EAAGA,EAAI2lC,EAAQ/iC,OAAQ5C,IAAK,CACrC,IAAIue,EAAUonB,EAAQ3lC,GAClB6sC,EAAcR,EAAW9tB,GAE7B,GAAKguB,EAAehuB,GAOhB,IAAS3c,EAAI,EAAGA,EAAIirC,EAAajrC,IAAK,CAClC,IAAIupC,EAAYvpC,EAAI8qC,EAChBtB,EAAawB,EAAehrC,EAChC,IAASlD,EAAI,EAAGA,EAAIguC,EAAehuC,IAC/B+W,EAAO21B,EAAa1sC,EAAI+tC,GAAeluB,EAAQ0rB,QAAQkB,EAAYzsC,EAE3E,MAZA,IAAK,IAAIA,EAAI,EAAGA,EAAIguC,EAAehuC,IAAK,CACpC,IAAIquC,EAAcruC,EAAImuC,EAClB3Z,EAAO3U,EAAQ0rB,QAAQpf,SAASkiB,EAAaA,EAAcF,GAC/Dp3B,EAAO0U,IAAI+I,EAAM0Z,EAAeluC,EAAI+tC,EACxC,CAWJG,GAAgBC,CACpB,CACJ,CAEA,MAAO,CAAEJ,cAAaC,gBAAej3B,SAAQk3B,gBACjD,CAEA9F,0BAAAA,CAA2B3xB,EAAQywB,GAC/B,IAAIzb,EAAWtkB,KAAKwmC,UAAUzG,GAC1B53B,GAAKA,EAAE25B,gBACP35B,GAAKA,EAAEw9B,mBACPx9B,IAAOA,EAAEy9B,cACT,WAGJt2B,EAAOwyB,cAAgBxd,EAASuiB,YAChCv3B,EAAOq2B,iBAAmBrhB,EAASwiB,cACnCx3B,EAAO+0B,QAAU/f,EAASzU,OAC1BP,EAAOs2B,cAAiBthB,EAASyiB,aAErC,CAEA5F,6BAAAA,CAA8B7xB,EAAQywB,GAClC,IAAIzb,EAAWtkB,KAAKwmC,UAAUzG,GAC1B53B,GAAKA,EAAEw9B,mBACPx9B,GAAKA,EAAE25B,gBACP35B,GAAKA,EAAEy9B,cACP,QAGJt2B,EAAOq2B,iBAAmBrhB,EAASuiB,YACnCv3B,EAAOwyB,cAAgBxd,EAASwiB,cAChCx3B,EAAO+0B,QAAU/f,EAASzU,OAC1BP,EAAOs2B,aAAethB,EAASyiB,aAEnC,CAEA3G,mBAAAA,CAAoB9wB,GAAkC,IAA1B,SAAE2X,GAAW,GAAMjiB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/CsK,EAAO+0B,QAAWpd,EAAWjnB,KAAKqkC,QAAQxoC,QAAUmE,KAAKqkC,QACzD/0B,EAAOwyB,cAAgB9hC,KAAK8hC,cAC5BxyB,EAAOq2B,iBAAmB3lC,KAAK2lC,iBAC/Br2B,EAAOs2B,aAAe5lC,KAAK4lC,YAE/B,GAnYoB,OAuBN,uIChBX,MAAMwB,UAAgBC,EAAAA,EA+BzB5oC,WAAAA,CAAY6oC,EAAUC,GAAqF,IAA7E,OAAEC,EAAS,KAAI,MAAE/3B,EAAQ,KAAI,gBAAEg4B,EAAkB,KAAI,SAAEpvB,EAAW,CAAC,GAAGrT,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpG,GAAwB,GAApBA,UAAUhI,OAEV,YADA6kC,QAIJA,MAAMyF,EAAStqC,OAAQ,CAAEyS,QAAOg4B,kBAAiBpvB,aAEjD5F,EAAAA,GAAuB60B,EAAU,YACjCtnC,KAAK0nC,UAAYJ,EAEjB,IAAIpuC,EAAIouC,EAAStqC,OACjB,GAAI9D,IAAMipC,EAAAA,GAAgBoF,GACtB,MAAM90B,EAAAA,GAAwB,WAAY,cAI9C,GAFAzS,KAAK2nC,QAAUJ,EAEA,OAAXC,EAAiB,CACjB,GAAItuC,IAAMsuC,EAAOxqC,OACb,MAAMyV,EAAAA,GAAwB,WAAY,cAE9C+0B,GAAMn5B,EAAAA,EAAAA,GAAG+4B,EApDRA,EAAOQ,GAAAzlC,KAoDCilC,EAA4BI,IACrCn5B,EAAAA,EAAAA,GAAA+4B,EArDCA,EAAOS,GAAA1lC,KAqDRilC,EAA2BI,EAC/B,MACIA,EAAS,IAAIM,UAAU5uC,GACvBsuC,EAAOrb,KAAK,GAEhBnsB,KAAK+nC,QAAUP,CACnB,CASA5H,KAAAA,GACI,OAAO5/B,KAAK2nC,QAAQ/H,OACxB,CAKAC,GAAAA,GACI,OAAO7/B,KAAK2nC,QAAQ9H,KACxB,CAKAmI,KAAAA,GACI,OAAOhoC,KAAK2nC,QAAQK,OACxB,CAKAV,QAAAA,GACI,OAAOtnC,KAAK0nC,SAChB,CAKAH,MAAAA,GACI,OAAOvnC,KAAK2nC,OAChB,CAKAH,MAAAA,GACI,OAAOxnC,KAAK+nC,OAChB,CAeAE,WAAAA,CAAYX,GAAoC,IAA1B,QAAE/F,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzCyN,EAAAA,GAAsB60B,EAAU,yBAA0BnF,EAAAA,GAAgBniC,MAAO,uBACjF,IAAI2E,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAO+iC,UAAYJ,EACZ3iC,CACX,CAMAujC,YAAAA,CAAaZ,GACT,OAAOtnC,KAAKioC,YAAYX,EAAU,CAAE/F,SAAS,GACjD,CAYA4G,SAAAA,CAAUZ,GAAkC,IAA1B,QAAEhG,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrC,KAAMuiC,aAAkBa,EAAAA,GACpB,MAAM,IAAI3qC,MAAM,wCAGpB,GAAI0kC,EAAAA,GAAgBoF,KAAYpF,EAAAA,GAAgBniC,KAAK2nC,SACjD,MAAMl1B,EAAAA,GAAwB,uBAAwB,uBAG1D,IAAI9N,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOgjC,QAAUJ,EACV5iC,CACX,CAOA0jC,UAAAA,CAAWd,GACP,OAAOvnC,KAAKmoC,UAAUZ,EAAQ,CAAEhG,SAAS,GAC7C,CAaA+G,SAAAA,CAAUd,GAAkC,IAA1B,QAAEjG,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrC,GAAIhF,KAAK+nC,QAAQ/qC,SAAWwqC,EAAOxqC,OAC/B,MAAMyV,EAAAA,GAAwB,WAAY,cAE9C+0B,GAAMn5B,EAAAA,EAAAA,GAAG+4B,EAvLJA,EAAOQ,GAAAzlC,KAuLHilC,EAA4BI,IACrCn5B,EAAAA,EAAAA,GAAA+4B,EAxLKA,EAAOS,GAAA1lC,KAwLZilC,EAA2BI,GAE3B,IAAI7iC,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOojC,QAAUP,EACV7iC,CACX,CASA4jC,UAAAA,CAAWf,GACP,OAAOxnC,KAAKsoC,UAAUd,EAAQ,CAAEjG,SAAS,GAC7C,CAeAiH,iBAAAA,GAA+E,IAA7D,mBAAEC,EAAqB,KAAI,iBAAEC,EAAmB,MAAM1jC,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpEoiB,EAAU3U,EAAAA,GAAqB0vB,EAAAA,GAAgBniC,OAC/C2oC,EAAaxG,EAAAA,GAAe/a,EAASpnB,KAAK0nC,WAC1CkB,EAAS5oC,KAAK4/B,QACdiJ,EAAO7oC,KAAK6/B,MAEW,OAAvB4I,GAA+BA,aAA8BvrC,QAC7DurC,EAAqB,IAAI/kB,IAAI+kB,IAER,OAArBC,GAA6BA,aAA4BxrC,QACzDwrC,EAAmB,IAAIhlB,IAAIglB,IAG/B,IAAK,MAAM3nC,KAAQzE,OAAO0B,KAAK2qC,GAAa,CACxC,GAA2B,OAAvBF,IAAgCA,EAAmB36B,IAAI/M,GAAO,QACvD4nC,EAAW5nC,GAClB,QACJ,CACA,IAAI+nC,EAAkBH,EAAW5nC,GAC7BgoC,EAAiB5G,EAAAA,GAAeniC,KAAK+nC,QAASe,GAC9CE,EAAY7G,EAAAA,GAAe2G,EAAiBC,GAEhD,IAAK,MAAM5jB,KAAO7oB,OAAO0B,KAAKgrC,GAAY,CACtC,GAAyB,OAArBN,IAA8BA,EAAiB56B,IAAIb,OAAOkY,IAAO,QAC1D6jB,EAAU7jB,GACjB,QACJ,CACA,IAAI8jB,EAAcD,EAAU7jB,GAC5B6jB,EAAU7jB,GAAO+jB,EAAAA,GAAuBN,EAAQC,EAAM,CAAEhtC,MAAOotC,GACnE,CACAN,EAAW5nC,GAAQioC,CACvB,CAEA,OAAO,IAAIG,EAAoBR,EACnC,CAMAnJ,oBAAAA,GACI,OAAOx/B,KAAK0nC,UAAU1qC,MAC1B,CAEA2iC,mBAAAA,CAAoBrwB,EAAQlV,EAACsnC,GAAyB,IAAvB,UAAEhC,GAAY,GAAOgC,EAChDG,MAAMlC,oBAAoBrwB,EAAQlV,EAAG,CAAEslC,cACvCpwB,EAAOo4B,UAAYvF,EAAAA,GAAeniC,KAAK0nC,UAAWttC,EAAG,CAAEslC,cACvDpwB,EAAOq4B,QAAUxF,EAAAA,GAAeniC,KAAK2nC,QAASvtC,EAAG,CAAEslC,cACnDpwB,EAAOy4B,QAAU5F,EAAAA,GAAeniC,KAAK+nC,QAAS3tC,EAAG,CAAEslC,aAEvD,CAEAM,qBAAAA,CAAsB1wB,EAAQywB,GAC1B8B,MAAM7B,sBAAsB1wB,EAAQywB,GAEpC,IAAIqJ,EAAS,GACTC,EAAS,GACTC,EAAS,GACb,IAAK,MAAMnhC,KAAK43B,EACZqJ,EAAO5qC,KAAK2J,EAAEu/B,WACd2B,EAAO7qC,KAAK2J,EAAEw/B,SACd2B,EAAO9qC,KAAK2J,EAAE4/B,SAGlBz4B,EAAOo4B,UAAYvF,EAAAA,GAAiBiH,GACpC95B,EAAOq4B,QAAUxF,EAAAA,GAAiBkH,GAClC/5B,EAAOy4B,QAAU5F,EAAAA,GAAiBmH,EAEtC,CAEAlJ,mBAAAA,CAAoB9wB,EAAMg0B,GAAuB,IAArB,SAAErc,GAAW,GAAMqc,EAC3CzB,MAAMzB,oBAAoB9wB,EAAQ,CAAE2X,aACpC3X,EAAOo4B,UAAYlG,EAAAA,EAAkBxhC,KAAK0nC,UAAWzgB,GACrD3X,EAAOq4B,QAAUnG,EAAAA,EAAkBxhC,KAAK2nC,QAAS1gB,GACjD3X,EAAOy4B,QAAUvG,EAAAA,EAAkBxhC,KAAK+nC,QAAS9gB,EAErD,CASA,YAAOsiB,GACH,OAAO,IAAInC,EAAQ,GAAIgB,EAAAA,EAAWmB,QACtC,EAGJ,SAAA3B,EAhT+Bz/B,GACvB,OAAIA,aAAa2/B,UACN3/B,EAEA,IAAI2/B,UAAU3/B,EAE7B,CAAC,SAAA0/B,EAEyBL,GACtB,IAAK,MAAM7qC,KAAK6qC,EACZ,GAAI7qC,GAAK,GAAKA,EAAI,EACd,MAAM,IAAIc,MAAM,8BAG5B,CAySG,MAAM0rC,EACT1qC,WAAAA,CAAYqJ,GACR9H,KAAK04B,OAAS5wB,CAClB,CAUA0hC,OAAAA,CAAQC,GAAqC,IAA9B,aAAEC,GAAe,GAAM1kC,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClC9L,EAAIipC,EAAAA,GAAgBsH,GACpB9mC,EAAU,IAAIzF,MAAMhE,GACpB0vC,EAASa,EAAM7J,QACfiJ,EAAOY,EAAM5J,MAEjB,IAAK,IAAIzlC,EAAI,EAAGA,EAAIlB,EAAGkB,IAAK,CACxBuI,EAAQvI,GAAK,GACb,IAAIuvC,EAAahnC,EAAQvI,GAErB2G,EAAO0oC,EAAM/B,UAAUttC,GAC3B,KAAM2G,KAAQf,KAAK04B,QACf,SAEJ,IAGIkR,EAHAC,EAAY7pC,KAAK04B,OAAO33B,GAExBymC,EAASiC,EAAM1B,QAAQ3tC,GAE3B,GAAIsvC,GAA0B,GAAVlC,EAChBoC,EAAkBttC,OAAO0B,KAAK6rC,OAC3B,CACH,IAAIC,EAAO9qC,OAAOwoC,GAClB,KAAMsC,KAAQD,GACV,SAEJD,EAAkB,CAAEE,EACxB,CAEA,IAAIlK,EAAQgJ,EAAOxuC,GACfylC,EAAMgJ,EAAKzuC,GACf,IAAK,MAAM+qB,KAAOykB,EAAiB,CACbV,EAAAA,GAAuBtJ,EAAOC,EAAKgK,EAAU1kB,IACnDvf,SAAQuC,GAAKwhC,EAAWnrC,KAAK2J,IAC7C,CACJ,CAEA,OAAOxF,CACX,kKCxXJonC,EAAA,IAAAr5B,QAAAs5B,EAAA,IAAA/4B,QAeO,MAAMg5B,UAAuB5C,EAAAA,EA6BhC5oC,WAAAA,CAAY8oC,GAA2F,IAAnF,aAAE2C,EAAe,KAAI,MAAEz6B,EAAQ,KAAI,gBAAEg4B,EAAkB,KAAI,SAAEpvB,EAAW,CAAC,GAAGrT,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChG,GAAwB,GAApBA,UAAUhI,OAEV,OADA6kC,SAAQ9zB,EAAAA,EAAAA,GAAA,KAAAi8B,QAAAr4B,EAAAA,EAAAA,GAAA,KAAAo4B,EAAA,CAAAn4B,UAAA,EAAAxD,MApBG,OAwBf,GAAIm5B,EAAO9oC,aAAevB,MAAO,CAC7B2kC,MAAM0F,EAAOvqC,OAAQ,CAAEyS,QAAOg4B,kBAAiBpvB,cAAYtK,EAAAA,EAAAA,GAAA,KAAAi8B,IAAAr4B,EAAAA,EAAAA,GAAA,KAAAo4B,EAAA,CAAAn4B,UAAA,EAAAxD,MAzBhD,OA0BX87B,EAAe,IAAIrxB,WAAW0uB,EAAOvqC,QACrC,IAAK,IAAI5C,EAAI,EAAGA,EAAI8vC,EAAaltC,OAAQ5C,IAAK,CAC1C,KAAMmtC,EAAOntC,aAAc+vC,EAAAA,GACvB,MAAM,IAAI1sC,MAAM,gEAEpBysC,EAAa9vC,GAAK+nC,EAAAA,GAAgBoF,EAAOntC,GAC7C,CACAmtC,EAASpF,EAAAA,GAAiBoF,EAE9B,KAAO,CACH,KAAMA,aAAkB4C,EAAAA,GACpB,MAAM,IAAI1sC,MAAM,gEAEpB,GAAoB,MAAhBysC,EACA,MAAM,IAAIzsC,MAAM,iEAEpBokC,MAAMqI,EAAaltC,OAAQ,CAAEyS,QAAOg4B,kBAAiBpvB,cAAYtK,EAAAA,EAAAA,GAAA,KAAAi8B,IAAAr4B,EAAAA,EAAAA,GAAA,KAAAo4B,EAAA,CAAAn4B,UAAA,EAAAxD,MA1CtD,OA2CX87B,EAAez3B,EAAAA,GAA0By3B,GACzCz3B,EAAAA,GAAuBy3B,EAC3B,CAEAlqC,KAAK2nC,QAAUJ,EACfvnC,KAAKoqC,cAAgBF,EAErB,IAAIG,GAAWh8B,EAAAA,EAAAA,GAAG47B,EA7DbA,EAAcK,GAAAnoC,KA6DD8nC,EAA8BC,GAGhD,GAFAlqC,KAAKuqC,aAAeF,EAAYzB,OAE5ByB,EAAYr9B,QAAUm1B,EAAAA,GAAgBoF,GACtC,MAAM,IAAI9pC,MAAM,gEAExB,CASA8pC,MAAAA,GAEI,OADA35B,EAAAA,EAAAA,GAAA5N,KAAIgqC,EAAAQ,GAAAroC,KAAJnC,MACOA,KAAK2nC,OAChB,CAKA8C,WAAAA,GAEI,OADA78B,EAAAA,EAAAA,GAAA5N,KAAIgqC,EAAAQ,GAAAroC,KAAJnC,MACOA,KAAKuqC,YAChB,CAKAL,YAAAA,GAEI,OADAt8B,EAAAA,EAAAA,GAAA5N,KAAIgqC,EAAAQ,GAAAroC,KAAJnC,MACOA,KAAKoqC,aAChB,CASAlxB,KAAAA,CAAM9e,GAA+B,IAA5B,UAAEslC,GAAY,GAAO16B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GAC9B4I,EAAAA,EAAAA,GAAA5N,KAAIgqC,EAAAQ,GAAAroC,KAAJnC,MACA,IAAIlH,EAAIkH,KAAKuqC,aAAanwC,GAC1B,OAAO+nC,EAAAA,GAAeniC,KAAK2nC,QAAS,CAAE/H,MAAO9mC,EAAG+mC,IAAK/mC,EAAIkH,KAAKoqC,cAAchwC,IAAM,CAAEslC,aACxF,CAKAgL,cAAAA,GACI,OAAO1qC,KAAKuqC,aAAavtC,MAC7B,CAeAmrC,SAAAA,CAAUZ,GAAkC,IAA1B,QAAEhG,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrC,KAAMuiC,aAAkB4C,EAAAA,GACpB,MAAM,IAAI1sC,MAAM,gCAIpB,IADAmQ,EAAAA,EAAAA,GAAA5N,KAAIgqC,EAAAQ,GAAAroC,KAAJnC,MACImiC,EAAAA,GAAgBoF,KAAYpF,EAAAA,GAAgBniC,KAAK2nC,SACjD,MAAMl1B,EAAAA,GAAwB,WAAY,oBAG9C,IAAI9N,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOgjC,QAAUJ,EACV5iC,CACX,CAMA0jC,UAAAA,CAAWd,GACP,OAAOvnC,KAAKmoC,UAAUZ,EAAQ,CAAEhG,SAAS,GAC7C,CAsEAoJ,QAAAA,CAASvwC,EAAGmtC,GAAkC,IAA1B,QAAEhG,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnCL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACP,QAA5BzvB,EAAAA,EAAAA,GAAAnN,EAAMolC,IACNl4B,EAAAA,EAAAA,GAAAlN,EAAMolC,EAAoB,IAClBxI,IACR1vB,EAAAA,EAAAA,GAAAlN,EAAMolC,GAAoBj4B,EAAAA,EAAAA,GAAAnN,EAAMolC,GAAkBluC,SAGjD0lC,IACD58B,EAAO4lC,aAAe5lC,EAAO4lC,aAAa1uC,QAC1C8I,EAAOylC,cAAgBzlC,EAAOylC,cAAcvuC,SAGhD,IAAI+uC,GAAO94B,EAAAA,EAAAA,GAAAnN,EAAMolC,GAAkB/sC,OAEnC,OADA8U,EAAAA,EAAAA,GAAAnN,EAAMolC,GAAkBvrC,KAAK,CAACpE,EAAGwwC,EAAMrD,IAChC5iC,CACX,CAUAkmC,SAAAA,CAAUzwC,EAAGmtC,GACT,OAAOvnC,KAAK2qC,SAASvwC,EAAGmtC,EAAQ,CAAEhG,SAAS,GAC/C,CAeAiH,iBAAAA,GAA+E,IAA7D,mBAAEC,EAAqB,KAAI,iBAAEC,EAAmB,MAAM1jC,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAExE,OADA4I,EAAAA,EAAAA,GAAA5N,KAAIgqC,EAAAQ,GAAAroC,KAAJnC,MACO,IAAI8qC,EACP9qC,KAAK2nC,QAAQa,kBAAkB,CAAEC,qBAAoBC,qBACrDvG,EAAAA,GAAgBniC,KAAK2nC,SACrB3nC,KAAKuqC,aACLvqC,KAAKoqC,cAEb,CAMA5K,oBAAAA,GACI,OAAOx/B,KAAKuqC,aAAavtC,MAC7B,CAEA2iC,mBAAAA,CAAoBrwB,EAAQlV,GAA+B,IAA5B,UAAEslC,GAAY,GAAO16B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD68B,MAAMlC,oBAAoBrwB,EAAQlV,EAAG,CAAEslC,eACvC9xB,EAAAA,EAAAA,GAAA5N,KAAIgqC,EAAAQ,GAAAroC,KAAJnC,MAEAsP,EAAO86B,cAAgBjI,EAAAA,GAAeniC,KAAKoqC,cAAehwC,EAAG,CAAEslC,cAC/D,IAAI2K,GAAWh8B,EAAAA,EAAAA,GAAG47B,EA/RbA,EAAcK,GAAAnoC,KA+RD8nC,EAA8B36B,EAAO86B,eAGvD,GAFA96B,EAAOi7B,aAAeF,EAAYzB,OAE9BxuC,EAAEqE,aAAenC,OAAQ,CAEzB,IAAIxD,EAAIkH,KAAKuqC,aAAanwC,EAAEwlC,OAC5BtwB,EAAOq4B,QAAUxF,EAAAA,GAAeniC,KAAK2nC,QAAS,CAAE/H,MAAO9mC,EAAG+mC,IAAK/mC,EAAIuxC,EAAYr9B,OAAS,CAAE0yB,aAC9F,KAAO,CACH,IAAI3Q,EAAO,IAAIlW,WAAWwxB,EAAYr9B,OAElCqO,EAAU,EACd,IAAK,MAAM3U,KAAKtM,EAAG,CACf,IAAIwlC,EAAQ5/B,KAAKuqC,aAAa7jC,GAC1Bm5B,EAAMD,EAAQ5/B,KAAKoqC,cAAc1jC,GACrC,IAAK,IAAIf,EAAIi6B,EAAOj6B,EAAIk6B,EAAKl6B,IACzBopB,EAAK1T,GAAW1V,EAChB0V,GAER,CAEA/L,EAAOq4B,QAAUxF,EAAAA,GAAeniC,KAAK2nC,QAAS5Y,EAAM,CAAE2Q,aAC1D,CAGJ,CAEAM,qBAAAA,CAAsB1wB,EAAQywB,GAC1B8B,MAAM7B,sBAAsB1wB,EAAQywB,GAGpC,IAAK,MAAM1mC,KAAK0mC,GACZnyB,EAAAA,EAAAA,GAAAvU,EAAC2wC,EAAAQ,GAAAroC,KAAD9I,GAGJiW,EAAO86B,cAAgBjI,EAAAA,GAAiBpC,EAAQj6B,KAAIqC,GAAKA,EAAE+hC,kBAC3D,IAAIG,GAAWh8B,EAAAA,EAAAA,GAAG47B,EAlUbA,EAAcK,GAAAnoC,KAkUD8nC,EAA8B36B,EAAO86B,eACvD96B,EAAOi7B,aAAeF,EAAYzB,OAClCt5B,EAAOq4B,QAAUxF,EAAAA,GAAiBpC,EAAQj6B,KAAIqC,GAAKA,EAAEw/B,UAGzD,CAEAvH,mBAAAA,CAAoB9wB,EAAMoyB,GAAuB,IAArB,SAAEza,GAAW,GAAMya,EAC3CG,MAAMzB,oBAAoB9wB,EAAQ,CAAE2X,cAEpCpV,EAAAA,EAAAA,GAAAvC,EAAMy6B,EAAoBvI,EAAAA,GAAiB1vB,EAAAA,EAAAA,GAAC9R,KAAI+pC,GAAmB9iB,IACnE3X,EAAO86B,cAAgB5I,EAAAA,EAAkBxhC,KAAKoqC,cAAenjB,GAC7D3X,EAAOi7B,aAAe/I,EAAAA,EAAkBxhC,KAAKuqC,aAActjB,GAC3D3X,EAAOq4B,QAAUnG,EAAAA,EAAkBxhC,KAAK2nC,QAAS1gB,EAGrD,CAWA,YAAOsiB,CAAMmB,GACT,IAAIK,EAAO,IAAIlyB,WAAW6xB,GAE1B,OADAK,EAAK5e,KAAK,GACH,IAAI8d,EAAeE,EAAAA,EAAWZ,QAAS,CAAEW,aAAca,GAClE,EAGJ,SAAAT,EAnW0BU,GAClB,IAAIpC,EAAS,IAAI/vB,WAAWmyB,EAAQhuC,QAChCgoB,EAAO,EACX,IAAK,IAAI5qB,EAAI,EAAGA,EAAI4wC,EAAQhuC,OAAQ5C,IAChCwuC,EAAOxuC,GAAK4qB,EACZA,GAAQgmB,EAAQ5wC,GAEpB,MAAO,CAAEwuC,OAAQA,EAAQ57B,MAAOgY,EACpC,CAAC,SAAAwlB,IAiJG,IAAIS,GAAMn5B,EAAAA,EAAAA,GAAG9R,KAAI+pC,GACjB,GAAe,OAAXkB,EACA,OAGJA,EAAOtnB,MAAK,CAACpqB,EAAGE,KACZ,IAAIspB,EAAOxpB,EAAE,GAAKE,EAAE,GACpB,OAAiB,IAATspB,EAAaxpB,EAAE,GAAKE,EAAE,GAAKspB,CAAI,IAG3C,IAAI1H,EAAU,EACVgvB,EAAc,EACda,EAAa,EACbC,EAAc,GAEdC,EAAUprC,KAAK0qC,iBACnB,IAAK,IAAItuC,EAAI,EAAGA,EAAIgvC,EAAShvC,IAAK,CAC9B,GAAIif,EAAU4vB,EAAOjuC,QAAUZ,GAAK6uC,EAAO5vB,GAAS,GAAI,CACpD,IAMI/B,EANA+xB,EAAgBrrC,KAAKuqC,aAAanuC,GAClC8uC,EAAaG,GACbF,EAAY3sC,KAAK2jC,EAAAA,GAAeniC,KAAK2nC,QAAS,CAAE/H,MAAOsL,EAAYrL,IAAKwL,KAE5EH,EAAaG,EAAgBrrC,KAAKoqC,cAAchuC,GAGhD,GACIkd,EAAc2xB,EAAO5vB,GAAS,GAC9BA,UACKA,EAAU4vB,EAAOjuC,QAAUZ,GAAK6uC,EAAO5vB,GAAS,IAEzD8vB,EAAY3sC,KAAK8a,GACjBtZ,KAAKoqC,cAAchuC,GAAK+lC,EAAAA,GAAgB7oB,EAC5C,CAEAtZ,KAAKuqC,aAAanuC,GAAKiuC,EACvBA,GAAerqC,KAAKoqC,cAAchuC,EACtC,CAEA,IAAIkvC,EAAUnJ,EAAAA,GAAgBniC,KAAK2nC,SAC/BuD,EAAaI,GACbH,EAAY3sC,KAAK2jC,EAAAA,GAAeniC,KAAK2nC,QAAS,CAAE/H,MAAOsL,EAAYrL,IAAKyL,KAG5E,IACItrC,KAAK2nC,QAAUxF,EAAAA,GAAiBgJ,EACpC,CAAE,MAAOxxC,GACL,MAAM,IAAI8D,MAAM,oDAAsD9D,EAAEiK,QAC5E,EAEAiO,EAAAA,EAAAA,GAAA7R,KAAI+pC,EAAoB,KAE5B,CA8JG,MAAMe,EACTrsC,WAAAA,CAAYqJ,EAAOyjC,EAAYd,EAAaP,GACxClqC,KAAK04B,OAAS5wB,EACd9H,KAAKuqC,aAAeE,EACpBzqC,KAAKoqC,cAAgBF,EAErB,IAAIsB,EAAU,IAAI3yB,WAAW0yB,GAC7B,IAAK,IAAInxC,EAAI,EAAGA,EAAIqwC,EAAYztC,OAAQ5C,IAAK,CACzC,IAAIwlC,EAAQ6K,EAAYrwC,GACpBylC,EAAMD,EAAQsK,EAAa9vC,GAC/B,IAAK,IAAItB,EAAI8mC,EAAO9mC,EAAI+mC,EAAK/mC,IACzB0yC,EAAQ1yC,GAAKsB,CAErB,CACA4F,KAAKyrC,gBAAkBD,CAC3B,CAUAhC,OAAAA,CAAQC,GAAqC,IAA9B,aAAEC,GAAe,GAAM1kC,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClCsK,EAAS,IAAIpS,MAAM8C,KAAKuqC,aAAavtC,QACrCwuC,EAAUxrC,KAAKyrC,gBAEnB,GAAIhC,aAAiBQ,EAAgB,CACjC,IAAIyB,EAAW1rC,KAAK04B,OAAO8Q,QAAQC,EAAM9B,SACzC,IAAK,IAAIvtC,EAAI,EAAGA,EAAIqvC,EAAMc,aAAavtC,OAAQ5C,IAAK,CAChD,IAAIwlC,EAAQ6J,EAAMc,aAAanwC,GAC3BylC,EAAMD,EAAQ6J,EAAMW,cAAchwC,GAElCuI,EAAU,IAAI+gB,IAClB,IAAK,IAAI5qB,EAAI8mC,EAAO9mC,EAAI+mC,EAAK/mC,IACzB4yC,EAAS5yC,GAAG8M,SAAQuC,GAAKxF,EAAQsL,IAAIu9B,EAAQrjC,MAEjDmH,EAAOlV,GAAK8C,MAAMumB,KAAK9gB,EAC3B,CAEJ,KAAO,CACH,IAAI+oC,EAAW1rC,KAAK04B,OAAO8Q,QAAQC,GACnC,IAASrvC,EAAI,EAAGA,EAAIsxC,EAAS1uC,OAAQ5C,IAAK,CACtC,IAAIuI,EAAU,IAAI+gB,IAClBgoB,EAAStxC,GAAGwL,SAAQuC,GAAKxF,EAAQsL,IAAIu9B,EAAQrjC,MAC7CmH,EAAOlV,GAAK8C,MAAMumB,KAAK9gB,EAC3B,CACJ,CAEA,OAAO2M,CACX,0HCjaG,MAAMq8B,UAAgBtE,EAAAA,EAiBzB5oC,WAAAA,CAAYmhC,EAAOoI,GAAqE,IAA9D,MAAEv4B,EAAQ,KAAI,gBAAEg4B,EAAkB,KAAI,SAAEpvB,EAAW,CAAC,GAAGrT,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjF,GAAwB,GAApBA,UAAUhI,QAcd,GATA6kC,MAAMjC,EAAM5iC,OAAQ,CAAEyS,QAAOg4B,kBAAiBpvB,aAE9CrY,KAAKyB,OAASgR,EAAAA,GAA0BmtB,GACxCntB,EAAAA,GAAuBzS,KAAKyB,OAAQ,SAEpCzB,KAAK4rC,OAASn5B,EAAAA,GAA0Bu1B,GACxCv1B,EAAAA,GAAuBzS,KAAK4rC,OAAQ,SAE5B5rC,KAAKyB,OAAOzE,SACVgD,KAAK4rC,OAAO5uC,OAClB,MAAM,IAAIS,MAAM,wDAdhBokC,OAgBR,CAWAjC,KAAAA,GACI,OAAO5/B,KAAKyB,MAChB,CAKAo+B,GAAAA,GACI,OAAO7/B,KAAKyB,OAAOqE,KAAI,CAACqC,EAAG/N,IAAM+N,EAAInI,KAAK4rC,OAAOxxC,IACrD,CAKA4tC,KAAAA,GACI,OAAOhoC,KAAK4rC,MAChB,CAgBAC,QAAAA,CAASz9B,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/By3B,EAAYhqB,EAAAA,GAA0BrE,GAC1C,GAAIquB,EAAUz/B,SAAWmlC,EAAAA,GAAgBniC,MACrC,MAAM,IAAIvC,MAAM,0DAEpBgV,EAAAA,GAAuBgqB,EAAW,SAElC,IAAI93B,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOlD,OAASg7B,EACT93B,CACX,CAOAmnC,SAAAA,CAAU19B,GACN,OAAOpO,KAAK6rC,SAASz9B,EAAO,CAAEmzB,SAAS,GAC3C,CAYAwK,QAAAA,CAAS39B,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/By3B,EAAYhqB,EAAAA,GAA0BrE,GAC1C,GAAIquB,EAAUz/B,SAAWmlC,EAAAA,GAAgBniC,MACrC,MAAM,IAAIvC,MAAM,0DAEpBgV,EAAAA,GAAuBgqB,EAAW,SAElC,IAAI93B,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOinC,OAASnP,EACT93B,CACX,CAOAqnC,SAAAA,CAAU59B,GACN,OAAOpO,KAAK+rC,SAAS39B,EAAO,CAAEmzB,SAAS,GAC3C,CASAiH,iBAAAA,GACI,IAAIyD,EAAO/C,EAAAA,GAAuBlpC,KAAKyB,OAAQzB,KAAK6/B,OACpD,OAAO,IAAIqM,EAAoBD,EACnC,CAMAzM,oBAAAA,GACI,OAAOx/B,KAAKyB,OAAOzE,MACvB,CAEA2iC,mBAAAA,CAAoBrwB,EAAQlV,EAACsnC,GAAyB,IAAvB,UAAEhC,GAAY,GAAOgC,EAChDG,MAAMlC,oBAAoBrwB,EAAQlV,EAAG,CAAEslC,cACvCpwB,EAAO7N,OAAS0gC,EAAAA,GAAeniC,KAAKyB,OAAQrH,EAAG,CAAEslC,cACjDpwB,EAAOs8B,OAASzJ,EAAAA,GAAeniC,KAAK4rC,OAAQxxC,EAAG,CAAEslC,aAErD,CAEAM,qBAAAA,CAAsB1wB,EAAQywB,GAC1B8B,MAAM7B,sBAAsB1wB,EAAQywB,GAEpC,IAAIoM,EAAQ,GACRC,EAAQ,GACZ,IAAK,MAAMjkC,KAAK43B,EACZoM,EAAM3tC,KAAK2J,EAAE1G,QACb2qC,EAAM5tC,KAAK2J,EAAEyjC,QAGjBt8B,EAAO7N,OAAS0gC,EAAAA,GAAiBgK,GACjC78B,EAAOs8B,OAASzJ,EAAAA,GAAiBiK,EAErC,CAEAhM,mBAAAA,CAAoB9wB,EAAMg0B,GAAuB,IAArB,SAAErc,GAAW,GAAMqc,EAC3CzB,MAAMzB,oBAAoB9wB,EAAQ,CAAE2X,aACpC3X,EAAO7N,OAAS+/B,EAAAA,EAAkBxhC,KAAKyB,OAAQwlB,GAC/C3X,EAAOs8B,OAASpK,EAAAA,EAAkBxhC,KAAK4rC,OAAQ3kB,EAEnD,CASA,YAAOsiB,GACH,OAAO,IAAIoC,EAAQ,IAAI9yB,WAAY,IAAIA,WAC3C,GAGJ4f,EAAAA,EAAAA,GA/LakT,EAAO,YAqCG,WAiKhB,MAAMO,EACTztC,WAAAA,CAAYwtC,GACRjsC,KAAKqsC,MAAQJ,CACjB,CAOAzC,OAAAA,CAAQC,GACJ,IAAIvwC,EAAIipC,EAAAA,GAAgBsH,GACpBn6B,EAAS,IAAIpS,MAAMhE,GACvB,IAAK,IAAIkB,EAAI,EAAGA,EAAIlB,EAAGkB,IACnBkV,EAAOlV,GAAK8uC,EAAAA,GAAuBO,EAAMhoC,OAAOrH,GAAIqvC,EAAMhoC,OAAOrH,GAAKqvC,EAAMmC,OAAOxxC,GAAI4F,KAAKqsC,OAEhG,OAAO/8B,CACX,gHCxOyCg9B,EAAA,IAAAr7B,QAEtC,MAAMs7B,EACT9tC,WAAAA,CAAYwQ,EAASu9B,GACjB,IADwBz+B,EAAAA,EAAAA,GAAA,KAAAu+B,GACA,GAApBtnC,UAAUhI,OACV,OAGJiS,EAAUwD,EAAAA,GAAiBxD,GAE3B,IAAIw9B,EAAWvvC,MAAMumB,KAAKxU,EAAQjR,QAClC,GAAc,OAAVwuC,EAAgB,CAChB/5B,EAAAA,GAAsB+5B,EAAO,UAAWC,EAASzvC,OAAQ,2BACzD,IAAI0vC,EAAWF,EAAM3wC,QAAQ8nB,OAG7B,GAFA8oB,EAAS9oB,QAEJlR,EAAAA,GAAqBi6B,EAAUD,GAChC,MAAM,IAAIhvC,MAAM,gEAExB,MACI+uC,EAAQC,EAGZzsC,KAAK2sC,SAAW19B,EAChBjP,KAAK4sC,OAASJ,CAClB,CAQA/8B,KAAAA,GACI,OAAOzP,KAAK4sC,MAChB,CAEAvK,eAAAA,GACI,OAAOriC,KAAK4sC,OAAO5vC,MACvB,CAQAolC,KAAAA,CAAMhoC,GACF,GAAgB,iBAALA,EAAe,CACtB,IAAK4F,KAAK2sC,SAAS7+B,IAAI1T,GACnB,MAAM,IAAIqD,MAAM,aAAerD,EAAI,qBAAuB4F,KAAKvB,YAAYyQ,WAE/E,OAAOlP,KAAK2sC,SAASljB,IAAIrvB,EAC7B,CAEI,OADAwT,EAAAA,EAAAA,GAAA5N,KAAIssC,EAAAO,GAAA1qC,KAAJnC,KAAwB5F,GACjB4F,KAAK2sC,SAASljB,IAAIzpB,KAAK4sC,OAAOxyC,GAE7C,CAEA0T,GAAAA,CAAI/M,GACA,OAAOf,KAAK2sC,SAAS7+B,IAAI/M,EAC7B,CAMAuhC,OAAOloC,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzBL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAOvC,GANKA,IAED58B,EAAOioC,OAASjoC,EAAOioC,OAAO/wC,QAC9B8I,EAAOgoC,SAAW,IAAItM,IAAI17B,EAAOgoC,WAGrB,iBAALvyC,EAAe,CACtB,IAAI0yC,EAAKnoC,EAAOioC,OAAO7vC,QAAQ3C,GAC/B,GAAI0yC,EAAK,EACL,MAAM,IAAIrvC,MAAM,aAAerD,EAAI,qBAAuB4F,KAAKvB,YAAYyQ,WAE/EvK,EAAOioC,OAAO5rC,OAAO8rC,EAAI,GACzBnoC,EAAOgoC,SAASrK,OAAOloC,EAC3B,KAAO,EACHwT,EAAAA,EAAAA,GAAA5N,KAAIssC,EAAAO,GAAA1qC,KAAJnC,KAAwB5F,GACxB,IAAIlB,EAAIyL,EAAOioC,OAAOxyC,GACtBuK,EAAOioC,OAAO5rC,OAAO5G,EAAG,GACxBuK,EAAOgoC,SAASrK,OAAOppC,EAC3B,CAEA,OAAOyL,CACX,CAEA4f,GAAAA,CAAInqB,EAAGgU,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7BL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAmBvC,OAlBKA,IAED58B,EAAOgoC,SAAW,IAAItM,IAAI17B,EAAOgoC,WAGrB,iBAALvyC,GACFuK,EAAOgoC,SAAS7+B,IAAI1T,KAChBmnC,IACD58B,EAAOioC,OAASjoC,EAAOioC,OAAO/wC,SAElC8I,EAAOioC,OAAOpuC,KAAKpE,IAEvBuK,EAAOgoC,SAASpoB,IAAInqB,EAAGgU,MAEvBR,EAAAA,EAAAA,GAAA5N,KAAIssC,EAAAO,GAAA1qC,KAAJnC,KAAwB5F,GACxBuK,EAAOgoC,SAASpoB,IAAI5f,EAAOioC,OAAOxyC,GAAIgU,IAGnCzJ,CACX,CAEA+9B,QAAAA,CAASjzB,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnCyN,EAAAA,GAAsBhD,EAAO,sBAAuBzP,KAAK4sC,OAAO5vC,OAAQ,uBAExE,IAAI+vC,EAAc,IAAI1M,IACtB,IAAK,IAAIjmC,EAAI,EAAGA,EAAIqV,EAAMzS,OAAQ5C,IAAK,CACnC,GAAI2yC,EAAYj/B,IAAI2B,EAAMrV,IACtB,MAAM,IAAIqD,MAAM,6BAA+BgS,EAAMrV,GAAK,4BAE9D2yC,EAAYxoB,IAAI9U,EAAMrV,GAAI4F,KAAK2sC,SAASljB,IAAIzpB,KAAK4sC,OAAOxyC,IAC5D,CAEA,IAAIuK,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAGvC,OAFA58B,EAAOgoC,SAAWI,EAClBpoC,EAAOioC,OAASn9B,EACT9K,CACX,CAEA9I,KAAAA,CAAMurB,GAAmC,IAA1B,QAAEma,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9B+nC,EAAc,IAAI1M,IAClB2M,EAAY,GAEhB,IAAK,IAAIF,KAAM1lB,EAAS,CAKpB,GAJiB,iBAAN0lB,KACPl/B,EAAAA,EAAAA,GAAA5N,KAAIssC,EAAAO,GAAA1qC,KAAJnC,KAAwB8sC,GACxBA,EAAK9sC,KAAK4sC,OAAOE,IAEjBC,EAAYj/B,IAAIg/B,GAChB,MAAM,IAAIrvC,MAAM,+CACb,IAAKuC,KAAK2sC,SAAS7+B,IAAIg/B,GAC1B,MAAM,IAAIrvC,MAAM,iCAAmCqvC,EAAK,MAG5DC,EAAYxoB,IAAIuoB,EAAI9sC,KAAK2sC,SAASljB,IAAIqjB,IACtCE,EAAUxuC,KAAKsuC,EACnB,CAEA,IAAInoC,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAGvC,OAFA58B,EAAOgoC,SAAWI,EAClBpoC,EAAOioC,OAASI,EACTroC,CACX,CAEAs5B,OAAAA,CAAQ7W,GAAmC,IAA1B,QAAEma,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAGpC,GAAIoiB,EAAQpqB,SAAWgD,KAAK4sC,OAAO5vC,OAC/B,MAAMyV,EAAAA,GAAwB,oBAAqB,kCAGvD,IAAIu6B,EAAY,GAChB,IAAK,IAAIF,KAAM1lB,EAAS,CAKpB,GAJiB,iBAAN0lB,KACPl/B,EAAAA,EAAAA,GAAA5N,KAAIssC,EAAAO,GAAA1qC,KAAJnC,KAAwB8sC,GACxBA,EAAK9sC,KAAK4sC,OAAOE,KAEhB9sC,KAAK2sC,SAAS7+B,IAAIg/B,GACnB,MAAM,IAAIrvC,MAAM,kBAAoBqvC,EAAK,iCAE7CE,EAAUxuC,KAAKsuC,EACnB,CAEA,IAAInoC,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOioC,OAASI,EACTroC,CACX,CAMAy7B,mBAAAA,CAAoB9wB,GAAkC,IAA1B,SAAE2X,GAAW,GAAMjiB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/CsK,EAAOq9B,SAAY1lB,EAAWkb,EAAAA,GAAeniC,KAAK2sC,UAAY3sC,KAAK2sC,SACnEr9B,EAAOs9B,OAAU3lB,EAAWkb,EAAAA,GAAeniC,KAAK4sC,QAAU5sC,KAAK4sC,MAEnE,CAMA7nC,KAAAA,CAAMkoC,GAA+B,IAA1B,QAAE1L,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1B+nC,EAAexL,EAAUvhC,KAAK2sC,SAAW,IAAItM,IACjD,IAAK,MAAO16B,EAAGvH,KAAM4B,KAAK2sC,SACtBI,EAAYxoB,IAAI5e,EAAGsnC,EAAI7uC,IAE3B,OAAQmjC,EAAUvhC,KAAO,IAAIusC,EAAaQ,EAAa/sC,KAAK4sC,OAChE,CAEA,sBAAO1J,CAAgBnD,EAASmN,GAC5B,IAAIC,EAAcpN,EAAQ,GAAG6M,OAC7B,IAAK,IAAIxyC,EAAI,EAAGA,EAAI2lC,EAAQ/iC,OAAQ5C,IAChC,IAAKqY,EAAAA,GAAqB06B,EAAapN,EAAQ3lC,GAAGwyC,QAC9C,MAAM,IAAInvC,MAAM,iEAAmEuB,OAAO5E,GAAK,mBAIvG,IAAI2yC,EAAc,IAAI1M,IACtB,IAAK,MAAM16B,KAAKwnC,EAAa,CACzB,IAAIxmB,EAAQoZ,EAAQj6B,KAAIqC,GAAKA,EAAEwkC,SAASljB,IAAI9jB,KAC5ConC,EAAYxoB,IAAI5e,EAAGunC,EAASvmB,GAChC,CAEA,OAAO,IAAI4lB,EAAaQ,EAAaI,EACzC,EACH,SAAAN,EAlLsBzyC,GACf,GAAIA,EAAI,GAAKA,GAAK4F,KAAK4sC,OAAO5vC,OAC1B,MAAM,IAAIS,MAAM,WAAauB,OAAO5E,GAAK,2BAA6B4F,KAAKvB,YAAYyQ,UAE/F,EAACupB,EAAAA,EAAAA,GA3CQ8T,EAAY,YAyBF,iJCtBvBa,EAAA,IAAAn8B,QAgBO,MAAMo8B,UAAmCC,EAAAA,EAoB5C7uC,WAAAA,CAAYwc,EAAQsyB,GAAyB,IAAdxkC,EAAO/D,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtC,GAAwB,GAApBA,UAAUhI,OAEV,OADA6kC,aAAQ9zB,EAAAA,EAAAA,GAAA,KAAAq/B,GAIZvL,MAAM5mB,EAAQlS,IAASgF,EAAAA,EAAAA,GAAA,KAAAq/B,GAEL,OAAdG,EACAA,EAAYC,EAAAA,EAAmBjE,MAAMvpC,KAAKiV,iBAE1CrH,EAAAA,EAAAA,GAAA5N,KAAIotC,EAAAK,GAAAtrC,KAAJnC,KAAsButC,GAE1BvtC,KAAK0tC,WAAaH,CAGtB,CASAA,SAAAA,GACI,OAAOvtC,KAAK0tC,UAChB,CAgBAC,YAAAA,CAAav/B,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GACvC4I,EAAAA,EAAAA,GAAA5N,KAAIotC,EAAAK,GAAAtrC,KAAJnC,KAAsBoO,GACtB,IAAIzJ,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAO+oC,WAAat/B,EACbzJ,CACX,CAOAipC,aAAAA,CAAcx/B,GACV,OAAOpO,KAAK2tC,aAAav/B,EAAO,CAAEmzB,SAAS,GAC/C,CAMAR,sBAAAA,CAAuBzxB,EAAQoT,EAAMllB,EAAOkkC,GAAyB,IAAvB,UAAEhC,GAAY,GAAOgC,EAC/DG,MAAMd,uBAAuBzxB,EAAQoT,EAAMllB,EAAS,CAAEkiC,cAElDpwB,EAAOo+B,WADE,OAAThrB,EACoByf,EAAAA,GAAeniC,KAAK0tC,WAAYhrB,GAEhC1iB,KAAK0tC,UAEjC,CAEAzM,0BAAAA,CAA2B3xB,EAAQywB,GAC/B8B,MAAMZ,2BAA2B3xB,EAAQywB,GAEzC,IAAI/O,EAAY,GACZ6c,GAAY,EACZC,GAAU,EAEd,IAAK,IAAI1zC,EAAI,EAAGA,EAAI2lC,EAAQ/iC,OAAQ5C,IAAK,CACrC,IAAI+N,EAAI43B,EAAQ3lC,GAChB,GAAI+N,aAAaklC,EAA4B,CACzC,IAAI1wC,EAAIwL,EAAEulC,WACN/wC,aAAa6wC,EAAAA,IACbM,GAAU,GAEd9c,EAAUxyB,KAAK7B,EACnB,KAAO,MAAIwL,aAAamlC,EAAAA,GAIpB,MAAM,IAAI7vC,MAAM,4EAA8EuB,OAAO5E,GAAK,KAH1GyzC,GAAY,EACZ7c,EAAUxyB,KAAK,KAGnB,CACJ,CAGA,GAAIqvC,GAAaC,EACb,IAAS1zC,EAAI,EAAGA,EAAI42B,EAAUh0B,OAAQ5C,IAAK,CACvC,IAAIue,EAAUqY,EAAU52B,GAExB,GAAIue,aAAmBwxB,EAAAA,EAAY,CAC/B,IAAI4D,EAAS,IAAIl1B,WAAWspB,EAAAA,GAAgBxpB,IAC5Co1B,EAAO5hB,KAAK,GAEZ,IAAIpjB,EAAU,CACVmhC,aAAc6D,EACdt+B,MAAOkJ,EAAQlJ,QACfg4B,gBAAiB9uB,EAAQ8uB,kBACzBpvB,SAAUM,EAAQN,YAGA,OAAlBtP,EAAQ0G,QACRkJ,EAAUA,EAAQ+pB,SAAS,QAG3B35B,EAAQ0+B,gBAAgBpvB,WAAW7T,KAAO,GAAKuE,EAAQ0+B,gBAAgBpyB,kBAAoB,KAC3FsD,EAAUA,EAAQq1B,mBAAmB,OAGrCjlC,EAAQsP,SAAS7T,KAAO,IACxBmU,EAAUA,EAAQ2oB,YAAY,IAAIjB,MAGtCrP,EAAU52B,GAAK,IAAIozC,EAAAA,EAAmB70B,EAAS5P,EAEnD,MAAuB,OAAZ4P,IACPqY,EAAU52B,GAAKozC,EAAAA,EAAmBjE,MAAMxJ,EAAQ3lC,GAAG6a,gBAE3D,CAGJ3F,EAAOo+B,WAAavL,EAAAA,GAAiBnR,EAGzC,CAEAmQ,6BAAAA,CAA8B7xB,EAAQywB,GAClC8B,MAAMV,8BAA8B7xB,EAAQywB,GAE5CzwB,EAAOo+B,WAAa3N,EAAQ,GAAG2N,UAGnC,CAEAtN,mBAAAA,CAAoB9wB,EAAMg0B,GAAgB,IAAd,SAAErc,GAAUqc,EACpCzB,MAAMzB,oBAAoB9wB,EAAQ,CAAE2X,aAEpC3X,EAAOo+B,WAAalM,EAAAA,EAAkBxhC,KAAK0tC,WAAYzmB,EAG3D,EACH,SAAAwmB,EA1KoBtlC,GACb,KAAMA,aAAagiC,EAAAA,MAAiBhiC,aAAaqlC,EAAAA,GAC7C,MAAM,IAAI/vC,MAAM,kEAEpB,GAAI0kC,EAAAA,GAAgBh6B,KAAOnI,KAAKiuC,SAASh5B,eACrC,MAAMxC,EAAAA,GAAwB,cAAe,qBAErD,+FCRG,MAAMy7B,UAA6BC,EAAAA,EActC1vC,WAAAA,CAAYwc,GAAoB,IAAZlS,EAAO/D,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAC,CAAC,EACzB,GAAwB,GAApBA,UAAUhI,OAEV,YADA6kC,QAIJ,IAAI,kBAAEuM,EAAoB,CAAC,EAAC,sBAAEC,EAAwB,KAAI,uBAAEC,EAAyB,CAAC,EAAC,2BAAEC,EAA6B,KAAI,UAAEhB,EAAY,MAASxkC,EACjJ84B,MAAM5mB,EAAQsyB,EAAWxkC,GACzB,IAAIylC,EAAQxuC,KAAKqV,kBAEjB,IACIrV,KAAKyuC,mBAAqB,IAAIxM,EAAAA,EAAgBmM,EAAmBC,EACrE,CAAE,MAAO10C,GACL,MAAM,IAAI8D,MAAM,wDAA0DuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACtI,CACA,IAAK,MAAMgM,KAAK3F,KAAKyuC,mBAAmBh/B,QAAS,CAC7C,IAAIrR,EAAI4B,KAAKyuC,mBAAmBrM,MAAMz8B,GACtC,GAAIw8B,EAAAA,GAAwB/jC,KAAOowC,EAC/B,MAAM,IAAI/wC,MAAM,yCAA2CkI,EAAI,gDAAkD3F,KAAKvB,YAAYyQ,UAE1I,CAEA,IACIlP,KAAK0uC,wBAA0B,IAAIzM,EAAAA,EAAgBqM,EAAwBC,EAC/E,CAAE,MAAO50C,GACL,MAAM,IAAI8D,MAAM,6DAA+DuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GAC3I,CACA,IAAK,MAAMgM,KAAK3F,KAAK0uC,wBAAwBj/B,QAAS,CAClD,IAAIrR,EAAI4B,KAAK0uC,wBAAwBtM,MAAMz8B,GAC3C,KAAMvH,aAAakvC,EAAAA,GACf,MAAM,IAAI7vC,MAAM,2BAA6BkI,EAAI,mCAErD,GAAIvH,EAAEiX,gBAAgBjX,KAAOowC,EACzB,MAAM,IAAI/wC,MAAM,iDAAmDkI,EAAI,gDAAkD3F,KAAKvB,YAAYyQ,UAElJ,CAGJ,CAWAuQ,qBAAAA,GACI,OAAOzf,KAAKyuC,mBAAmBh/B,OACnC,CAMAk/B,gBAAAA,CAAiBv0C,GACb,IAAIkV,EACJ,IACIA,EAAStP,KAAKyuC,mBAAmBrM,MAAMhoC,EAC3C,CAAE,MAAOT,GACL,MAAM,IAAI8D,MAAM,gEAAkEuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GAC9I,CACA,OAAO2V,CACX,CAKAs/B,0BAAAA,GACI,OAAO5uC,KAAK0uC,wBAAwBj/B,OACxC,CAMAo/B,qBAAAA,CAAsBz0C,GAClB,IAAIkV,EACJ,IACIA,EAAStP,KAAK0uC,wBAAwBtM,MAAMhoC,EAChD,CAAE,MAAOT,GACL,MAAM,IAAI8D,MAAM,qEAAuEuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACnJ,CACA,OAAO2V,CACX,CAeAw/B,sBAAAA,CAAuB10C,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzCL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAO8pC,mBAAqB9pC,EAAO8pC,mBAAmBnM,OAAOloC,EAAG,CAAEmnC,WACtE,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,8DAAgEuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GAC5I,CACA,OAAOgL,CACX,CAMAoqC,uBAAAA,CAAwB30C,GACpB,OAAO4F,KAAK8uC,uBAAuB10C,EAAG,CAAEmnC,SAAS,GACrD,CAgBAyN,mBAAAA,CAAoB50C,EAAGgU,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjD,GAAIm9B,EAAAA,GAAwB/zB,IAAUpO,KAAKqV,kBACvC,MAAM,IAAI5X,MAAM,sGAEpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAO8pC,mBAAqB9pC,EAAO8pC,mBAAmBlqB,IAAInqB,EAAGgU,EAAO,CAAEmzB,YAC/D58B,CACX,CAYAsqC,oBAAAA,CAAqB70C,EAAGgU,GACpB,OAAOpO,KAAKgvC,oBAAoB50C,EAAGgU,EAAO,CAAEmzB,SAAS,GACzD,CAYA2N,wBAAAA,CAAyBz/B,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/CL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAO8pC,mBAAqB9pC,EAAO8pC,mBAAmB/L,SAASjzB,EAAO,CAAE8xB,WAC5E,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,sDAAwDuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACpI,CACA,OAAOgL,CACX,CAOAwqC,yBAAAA,CAA0B1/B,GACtB,OAAOzP,KAAKkvC,yBAAyBz/B,EAAO,CAAE8xB,SAAS,GAC3D,CAYA6N,sBAAAA,CAAuBh1C,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzCL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAO8pC,mBAAqBzuC,KAAKyuC,mBAAmB5yC,MAAMzB,EAAG,CAAEmnC,WACnE,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,mDAAqDuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACjI,CACA,OAAOgL,CACX,CAOA0qC,uBAAAA,CAAwBj1C,GACpB,OAAO4F,KAAKovC,uBAAuBh1C,EAAG,CAAEmnC,SAAS,GACrD,CAWA+N,2BAAAA,CAA4Bl1C,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9CL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAO+pC,wBAA0B/pC,EAAO+pC,wBAAwBpM,OAAOloC,EAAG,CAAEmnC,WAChF,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,mEAAqEuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACjJ,CACA,OAAOgL,CACX,CAMA4qC,4BAAAA,CAA6Bn1C,GACzB,OAAO4F,KAAKsvC,4BAA4Bl1C,EAAG,CAAEmnC,SAAS,GAC1D,CAgBAiO,wBAAAA,CAAyBp1C,EAAGgU,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtD,KAAMoJ,aAAiBk/B,EAAAA,IAA4BnL,EAAAA,GAA2B/zB,IAAUpO,KAAKqV,kBACzF,MAAM,IAAI5X,MAAM,yGAEpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAO+pC,wBAA0B/pC,EAAO+pC,wBAAwBnqB,IAAInqB,EAAGgU,EAAO,CAAEmzB,YACzE58B,CACX,CAYA8qC,yBAAAA,CAA0Br1C,EAAGgU,GACzB,OAAOpO,KAAKwvC,yBAAyBp1C,EAAGgU,EAAO,CAAEmzB,SAAS,GAC9D,CAYAmO,6BAAAA,CAA8BjgC,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpDL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAO+pC,wBAA0B/pC,EAAO+pC,wBAAwBhM,SAASjzB,EAAO,CAAE8xB,WACtF,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,2DAA6DuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACzI,CACA,OAAOgL,CACX,CAOAgrC,8BAAAA,CAA+BlgC,GAC3B,OAAOzP,KAAK0vC,8BAA8BjgC,EAAO,CAAE8xB,SAAS,GAChE,CAYAqO,2BAAAA,CAA4Bx1C,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9CL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAO+pC,wBAA0B1uC,KAAK0uC,wBAAwB7yC,MAAMzB,EAAG,CAAEmnC,WAC7E,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,wDAA0DuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACtI,CACA,OAAOgL,CACX,CAOAkrC,4BAAAA,CAA6Bz1C,GACzB,OAAO4F,KAAK4vC,4BAA4Bx1C,EAAG,CAAEmnC,SAAS,GAC1D,CAOAR,sBAAAA,CAAuBzxB,EAAQoT,EAAMllB,EAAOkkC,GAAyB,IAAvB,UAAEhC,GAAY,GAAOgC,EAC/DG,MAAMd,uBAAuBzxB,EAAQoT,EAAMllB,EAAS,CAAEkiC,cAEtC,OAAZliC,GACA8R,EAAOm/B,mBAAqBzuC,KAAKyuC,mBAAmB1pC,OAAM3G,GAAK+jC,EAAAA,GAAkB/jC,EAAGZ,EAAS,KAAM,CAAEkiC,gBACrGpwB,EAAOo/B,wBAA0B1uC,KAAK0uC,wBAAwB3pC,OAAM3G,GAAK+jC,EAAAA,GAAkB/jC,EAAG,KAAMZ,EAAS,CAAEkiC,kBAE/GpwB,EAAOm/B,mBAAqBzuC,KAAKyuC,mBACjCn/B,EAAOo/B,wBAA0B1uC,KAAK0uC,wBAE9C,CAEAzN,0BAAAA,CAA2B3xB,EAAQywB,GAC/B8B,MAAMZ,2BAA2B3xB,EAAQywB,GAEzCzwB,EAAOm/B,mBAAqBzuC,KAAKyuC,mBACjCn/B,EAAOo/B,wBAA0B1uC,KAAK0uC,uBAG1C,CAEAvN,6BAAAA,CAA8B7xB,EAAQywB,GAClC8B,MAAMV,8BAA8B7xB,EAAQywB,GAE5C,IACIzwB,EAAOm/B,mBAAqBxM,EAAAA,EAAgBiB,gBAAgBnD,EAAQj6B,KAAIqC,GAAKA,EAAEsmC,qBAAqBtM,EAAAA,GACxG,CAAE,MAAOxoC,GACL,MAAM,IAAI8D,MAAM,4CAA8CuC,KAAKvB,YAAYyQ,UAAY,aAAevV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GAClI,CAEA,IACI2V,EAAOo/B,wBAA0BzM,EAAAA,EAAgBiB,gBAAgBnD,EAAQj6B,KAAIqC,GAAKA,EAAEumC,0BAA0BvM,EAAAA,EAClH,CAAE,MAAOxoC,GACL,MAAM,IAAI8D,MAAM,iDAAmDuC,KAAKvB,YAAYyQ,UAAY,aAAevV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACvI,CAGJ,CAEAymC,mBAAAA,CAAoB9wB,EAAMg0B,GAAgB,IAAd,SAAErc,GAAUqc,EACpCzB,MAAMzB,oBAAoB9wB,EAAQ,CAAE2X,aAEpC3X,EAAOm/B,mBAAqBjN,EAAAA,EAAkBxhC,KAAKyuC,mBAAoBxnB,GACvE3X,EAAOo/B,wBAA0BlN,EAAAA,EAAkBxhC,KAAK0uC,wBAAyBznB,EAGrF,GACHwR,EAAAA,EAAAA,GAlZYyV,EAAoB,YAsDV,+IC/ChB,MAAM4B,UAA6BlO,EAAAA,EAoBtCnjC,WAAAA,CAAYwc,GAA2H,IAAnH,WAAE80B,EAAa,KAAI,QAAEC,EAAU,KAAI,WAAEC,EAAa,KAAI,SAAE16B,EAAW,KAAI,YAAEuW,EAAc,KAAI,SAAEzT,EAAW,CAAC,GAAGrT,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChI,GAAwB,GAApBA,UAAUhI,OAEV,YADA6kC,QAIJA,MAAMxpB,GAGN,IACIrY,KAAKkwC,QAAU,IAAIjO,EAAAA,EAAgBhnB,EAAQ80B,EAC/C,CAAE,MAAOp2C,GACL,MAAM,IAAI8D,MAAM,kEAAoE9D,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GAC5G,CAEA,IAAIw2C,EAAQ,KACR3B,EAAQ,KACZ,IAAK,MAAM7oC,KAAK3F,KAAKkwC,QAAQzgC,QAAS,CAClC,IAAIkJ,EAAU3Y,KAAKkwC,QAAQ9N,MAAMz8B,GAC7ByqC,EAAKjO,EAAAA,GAAwBxpB,GAC7B03B,EAAKlO,EAAAA,GAA2BxpB,GACpC,GAAa,MAATw3B,EACAA,EAAQC,EACR5B,EAAQ6B,OACL,GAAIF,IAAUC,GAAM5B,IAAU6B,EACjC,MAAM,IAAI5yC,MAAM,8EAExB,CAGA,GAAgB,OAAZuyC,EAAkB,CAClB,GAAa,MAATG,EACA,MAAM,IAAI1yC,MAAM,oDAEpBuyC,EAAU,IAAIM,EAAAA,EAAa,CAAC,EAAG,CAAEr7B,aAAck7B,GACnD,MACI,GAAc,OAAVA,GAAkBA,IAAUhO,EAAAA,GAAgB6N,GAC5C,MAAM,IAAIvyC,MAAM,oEAMxB,GAHAuC,KAAKiuC,SAAW+B,EAGG,OAAfC,EAAqB,CACrB,GAAa,MAATzB,EACA,MAAM,IAAI/wC,MAAM,uDAEpBwyC,EAAa,IAAIK,EAAAA,EAAa,CAAC,EAAG,CAAEr7B,aAAcu5B,GACtD,MACI,GAAc,OAAVA,GAAkBA,IAAUrM,EAAAA,GAAgB8N,GAC5C,MAAM,IAAIxyC,MAAM,0EAGxBuC,KAAKuwC,YAAcN,EAGH,MAAZ16B,GACA9C,EAAAA,GAAsB8C,EAAU,aAAcvV,KAAKiuC,SAASh5B,eAAgB,uCAEhFjV,KAAK+hC,UAAYxsB,EAEE,MAAfuW,GACArZ,EAAAA,GAAsBqZ,EAAa,gBAAiB9rB,KAAKuwC,YAAYt7B,eAAgB,0CAEzFjV,KAAKwwC,aAAe1kB,CACxB,CAWA2kB,UAAAA,GACI,OAAOzwC,KAAKkwC,QAAQzgC,OACxB,CAKAihC,cAAAA,GACI,OAAO1wC,KAAKkwC,QAAQ7N,iBACxB,CAMAlnB,KAAAA,CAAM/gB,GACF,IAAIkV,EACJ,IACIA,EAAStP,KAAKkwC,QAAQ9N,MAAMhoC,EAChC,CAAE,MAAOT,GACL,MAAM,IAAI8D,MAAM,oDAAsDuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GAClI,CACA,OAAO2V,CACX,CAKA0gC,OAAAA,GACI,OAAOhwC,KAAKiuC,QAChB,CAKAh5B,YAAAA,GACI,OAAOjV,KAAKiuC,SAASh5B,cACzB,CAKAM,QAAAA,GACI,OAAOvV,KAAK+hC,SAChB,CAKAkO,UAAAA,GACI,OAAOjwC,KAAKuwC,WAChB,CAKAl7B,eAAAA,GACI,OAAOrV,KAAKuwC,YAAYt7B,cAC5B,CAKA6W,WAAAA,GACI,OAAO9rB,KAAKwwC,YAChB,CAeAG,WAAAA,CAAYv2C,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9BL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAOurC,QAAUvrC,EAAOurC,QAAQ5N,OAAOloC,EAAG,CAAEmnC,WAChD,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,2BAAyC,iBAALrD,EAAgB,IAAMA,EAAI,IAAM4E,OAAO5E,IAAM,cAAgB4F,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GAC7K,CACA,OAAOgL,CACX,CAMAisC,YAAAA,CAAax2C,GACT,OAAO4F,KAAK2wC,YAAYv2C,EAAG,CAAEmnC,SAAS,GAC1C,CAgBAsP,QAAAA,CAASz2C,EAAGgU,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtC,GAAIm9B,EAAAA,GAAwB/zB,KAAWpO,KAAKiV,gBAAkBktB,EAAAA,GAA2B/zB,KAAWpO,KAAKqV,kBACrG,MAAM,IAAI5X,MAAM,+EAEpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOurC,QAAUvrC,EAAOurC,QAAQ3rB,IAAInqB,EAAGgU,EAAO,CAAEmzB,YACzC58B,CACX,CAYAmsC,SAAAA,CAAU12C,EAAGgU,GACT,OAAOpO,KAAK6wC,SAASz2C,EAAGgU,EAAO,CAAEmzB,SAAS,GAC9C,CAYAwP,aAAAA,CAActhC,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpCL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAOurC,QAAUvrC,EAAOurC,QAAQxN,SAASjzB,EAAO,CAAE8xB,WACtD,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,0CAA4CuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACxH,CACA,OAAOgL,CACX,CAOAqsC,cAAAA,CAAevhC,GACX,OAAOzP,KAAK+wC,cAActhC,EAAO,CAAE8xB,SAAS,GAChD,CAYA0P,WAAAA,CAAY72C,GAA6B,IAA1B,QAAEmnC,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9BL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GACvC,IACI58B,EAAOurC,QAAUlwC,KAAKkwC,QAAQr0C,MAAMzB,EAAG,CAAEmnC,WAC7C,CAAE,MAAO5nC,GACL,MAAM,IAAI8D,MAAM,uCAAyCuC,KAAKvB,YAAYyQ,UAAY,KAAOvV,EAAEiK,QAAS,CAAEs+B,MAAOvoC,GACrH,CACA,OAAOgL,CACX,CAOAusC,YAAAA,CAAa92C,GACT,OAAO4F,KAAKixC,YAAY72C,EAAG,CAAEmnC,SAAS,GAC1C,CAYA4P,UAAAA,CAAW/iC,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrC,KAAMoJ,aAAiBkiC,EAAAA,GACnB,MAAM,IAAI7yC,MAAM,iCAGpB,GAAI2Q,EAAM6G,iBAAmBjV,KAAKiV,eAC9B,MAAM,IAAIxX,MAAM,mFAGpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOspC,SAAW7/B,EACXzJ,CACX,CAOAysC,WAAAA,CAAYhjC,GACR,OAAOpO,KAAKmxC,WAAW/iC,EAAO,CAAEmzB,SAAS,GAC7C,CAYA8P,aAAAA,CAAcjjC,GAAiC,IAA1B,QAAEmzB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxC,KAAMoJ,aAAiBkiC,EAAAA,GACnB,MAAM,IAAI7yC,MAAM,iCAGpB,GAAI2Q,EAAM6G,iBAAmBjV,KAAKqV,kBAC9B,MAAM,IAAI5X,MAAM,4GAGpB,IAAIkH,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAO4rC,YAAcniC,EACdzJ,CACX,CAOA2sC,cAAAA,CAAeljC,GACX,OAAOpO,KAAKqxC,cAAcjjC,EAAO,CAAEmzB,SAAS,GAChD,CAYAqB,WAAAA,CAAYnzB,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxB,OAAVyK,GACAgD,EAAAA,GAAsBhD,EAAO,sBAAuBzP,KAAKiV,eAAgB,oBAG7E,IAAItQ,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOo9B,UAAYtyB,EACZ9K,CACX,CAQAk+B,YAAAA,CAAapzB,GACT,OAAOzP,KAAK4iC,YAAYnzB,EAAO,CAAE8xB,SAAS,GAC9C,CAYAkB,cAAAA,CAAehzB,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3B,OAAVyK,GACAgD,EAAAA,GAAsBhD,EAAO,sBAAuBzP,KAAKqV,kBAAmB,uBAGhF,IAAI1Q,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAO6rC,aAAe/gC,EACf9K,CACX,CAYAg+B,eAAAA,CAAgBlzB,GACZ,OAAOzP,KAAKyiC,eAAehzB,EAAO,CAAE8xB,SAAS,GACjD,CAMAZ,4BAAAA,GACI,OAAO3gC,KAAKiV,cAChB,CAEA4rB,+BAAAA,GACI,OAAO7gC,KAAKqV,iBAChB,CAEA0rB,sBAAAA,CAAuBzxB,EAAQoT,EAAMllB,EAAOkkC,GAAyB,IAAvB,UAAEhC,GAAY,GAAOgC,EAC/DpyB,EAAO4gC,QAAUlwC,KAAKkwC,QAAQnrC,OAAM3G,GAAK+jC,EAAAA,GAAkB/jC,EAAGskB,EAAMllB,EAAS,CAAEkiC,gBAElE,OAAThd,GACApT,EAAO2+B,SAAW9L,EAAAA,GAAeniC,KAAKiuC,SAAUvrB,EAAM,CAAEgd,cACxDpwB,EAAOyyB,UAA+B,MAAlB/hC,KAAK+hC,UAAoB,KAAOI,EAAAA,GAAeniC,KAAK+hC,UAAWrf,EAAM,CAAEgd,gBAE3FpwB,EAAO2+B,SAAWjuC,KAAKiuC,SACvB3+B,EAAOyyB,UAAY/hC,KAAK+hC,WAGZ,OAAZvkC,GACA8R,EAAOihC,YAAcpO,EAAAA,GAAeniC,KAAKuwC,YAAa/yC,EAAS,CAAEkiC,cACjEpwB,EAAOkhC,aAAqC,MAArBxwC,KAAKwwC,aAAuB,KAAOrO,EAAAA,GAAeniC,KAAKwwC,aAAchzC,EAAS,CAAEkiC,gBAEvGpwB,EAAOihC,YAAcvwC,KAAKuwC,YAC1BjhC,EAAOkhC,aAAexwC,KAAKwwC,cAG/BlhC,EAAO+xB,UAAYrhC,KAAKqhC,SAE5B,CAEAJ,0BAAAA,CAA2B3xB,EAAQywB,GAC/BzwB,EAAO4gC,QAAUjO,EAAAA,EAAgBiB,gBAAgBnD,EAAQj6B,KAAIqC,GAAKA,EAAE+nC,UAAU/N,EAAAA,IAE9E,IAAIoP,EAAUxR,EAAQj6B,KAAIqC,GAAKA,EAAE8lC,WACjC3+B,EAAO2+B,SAAW9L,EAAAA,GAAiBoP,GAEnC,IAAIpO,EAAQpD,EAAQj6B,KAAIqC,GAAKA,EAAE45B,YAC3BqB,EAAQrD,EAAQj6B,KAAIqC,GAAKA,EAAE8M,iBAC/B3F,EAAOyyB,UAAYtvB,EAAAA,GAAmB0wB,EAAOC,GAE7C9zB,EAAOihC,YAAcvwC,KAAKuwC,YAC1BjhC,EAAOkhC,aAAexwC,KAAKwwC,aAC3BlhC,EAAO+xB,UAAYrhC,KAAKqhC,SAC5B,CAEAF,6BAAAA,CAA8B7xB,EAAQywB,GAClCzwB,EAAO4gC,QAAUjO,EAAAA,EAAgBiB,gBAAgBnD,EAAQj6B,KAAIqC,GAAKA,EAAE+nC,UAAU/N,EAAAA,GAE9E,IAAIoP,EAAUxR,EAAQj6B,KAAIqC,GAAKA,EAAEooC,cACjCjhC,EAAOihC,YAAcpO,EAAAA,GAAiBoP,GAEtC,IAAIpO,EAAQpD,EAAQj6B,KAAIqC,GAAKA,EAAEqoC,eAC3BpN,EAAQrD,EAAQj6B,KAAIqC,GAAKA,EAAEkN,oBAC/B/F,EAAOkhC,aAAe/9B,EAAAA,GAAmB0wB,EAAOC,GAEhD9zB,EAAO2+B,SAAWjuC,KAAKiuC,SACvB3+B,EAAOyyB,UAAY/hC,KAAK+hC,UACxBzyB,EAAO+xB,UAAYrhC,KAAKqhC,SAC5B,CAEAjB,mBAAAA,CAAoB9wB,EAAMg0B,GAAuB,IAArB,SAAErc,GAAW,GAAMqc,EAC3CzB,MAAMzB,oBAAoB9wB,EAAQ,CAAE2X,aAEpC3X,EAAO4gC,QAAU1O,EAAAA,EAAkBxhC,KAAKkwC,QAASjpB,GACjD3X,EAAO2+B,SAAWzM,EAAAA,EAAkBxhC,KAAKiuC,SAAUhnB,GACnD3X,EAAOyyB,UAAYP,EAAAA,EAAkBxhC,KAAK+hC,UAAW9a,GAErD3X,EAAOihC,YAAc/O,EAAAA,EAAkBxhC,KAAKuwC,YAAatpB,GACzD3X,EAAOkhC,aAAehP,EAAAA,EAAkBxhC,KAAKwwC,aAAcvpB,EAE/D,GACHwR,EAAAA,EAAAA,GA/eYqX,EAAoB,YAuFV,2HC/GvB,SAAS0B,EAAsB/J,EAAiBgK,EAAaviC,GACzD,GAAwB,OAApBu4B,EAA0B,CAC1B,KAAMA,aAA2B6I,EAAAA,GAC7B,MAAM,IAAI7yC,MAAM,2CAEpB,GAAI0kC,EAAAA,GAAgBsF,KAAqBgK,EACrC,MAAM,IAAIh0C,MAAM,qEAAuEyR,EAAY,MAE3G,MACIu4B,EAAkB,IAAI6I,EAAAA,EAAa,CAAC,EAAG,CAAEr7B,aAAcw8B,IAE3D,OAAOhK,CACX,CASO,MAAMiK,UAAe9P,EAAAA,EAQxBnjC,WAAAA,CAAYzB,GAAsE,IAA9D,MAAEyS,EAAQ,KAAI,gBAAEg4B,EAAkB,KAAI,SAAEpvB,EAAW,CAAC,GAAGrT,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnD,GAApBA,UAAUhI,QAKd6kC,MAAMxpB,GAENrY,KAAK2xC,iBAAmBH,EAAsB/J,EAAiBzqC,EAAQgD,KAAKvB,YAAYyQ,WAE1E,OAAVO,GACAgD,EAAAA,GAAsBhD,EAAO,UAAWzS,EAAQ,YAAcgD,KAAKvB,YAAYyQ,UAAY,OAE/FlP,KAAK4xC,OAASniC,GAXVoyB,OAYR,CASA4F,eAAAA,GACI,OAAOznC,KAAK2xC,gBAChB,CAKAliC,KAAAA,GACI,OAAOzP,KAAK4xC,MAChB,CAiBA5D,kBAAAA,CAAmBvG,GAA2C,IAA1B,QAAElG,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnDL,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOgtC,iBAAmBH,EAAsB/J,EAAiBtF,EAAAA,GAAgBx9B,GAASA,EAAOlG,YAAYyQ,WACtGvK,CACX,CASAktC,mBAAAA,CAAoBpK,GAChB,OAAOznC,KAAKguC,mBAAmBvG,EAAiB,CAAElG,SAAS,GAC/D,CAaAmB,QAAAA,CAASjzB,GAAiC,IAA1B,QAAE8xB,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrB,OAAVyK,GACAgD,EAAAA,GAAsBhD,EAAO,sBAAuB0yB,EAAAA,GAAgBniC,MAAO,YAAcA,KAAKvB,YAAYyQ,UAAY,OAE1H,IAAIvK,EAAS68B,EAAAA,EAAoBxhC,KAAMuhC,GAEvC,OADA58B,EAAOitC,OAASniC,EACT9K,CACX,CASAmtC,SAAAA,CAAUriC,GACN,OAAOzP,KAAK0iC,SAASjzB,EAAO,CAAE8xB,SAAS,GAC3C,CAMA5B,mBAAAA,CAAoBrwB,EAAQlV,EAACsnC,GAAyB,IAAvB,UAAEhC,GAAY,GAAOgC,EAChDpyB,EAAOqiC,iBAAmBxP,EAAAA,GAAeniC,KAAK2xC,iBAAkBv3C,EAAG,CAAEslC,cACrEpwB,EAAOsiC,OAA0B,OAAhB5xC,KAAK4xC,OAAkB,KAAOzP,EAAAA,GAAeniC,KAAK4xC,OAAQx3C,EAAG,CAAEslC,cAChFpwB,EAAO+xB,UAAYrhC,KAAKqhC,SAE5B,CAEArB,qBAAAA,CAAsB1wB,EAAQywB,GAC1B,IAAIgS,EAAS,GACT5O,EAAQ,GACRC,EAAQ,GAEZ,IAAK,MAAMj7B,KAAK43B,EACZgS,EAAOvzC,KAAK2J,EAAEwpC,kBACdxO,EAAM3kC,KAAK2J,EAAEypC,QACbxO,EAAM5kC,KAAK2jC,EAAAA,GAAgBh6B,IAG/BmH,EAAOqiC,iBAAmBxP,EAAAA,GAAiB4P,GAC3CziC,EAAOsiC,OAASn/B,EAAAA,GAAmB0wB,EAAOC,EAE9C,CAEAhD,mBAAAA,CAAoB9wB,EAAMg0B,GAAuB,IAArB,SAAErc,GAAW,GAAMqc,EAC3CzB,MAAMzB,oBAAoB9wB,EAAQ,CAAE2X,aACpC3X,EAAOqiC,iBAAmBnQ,EAAAA,EAAkBxhC,KAAK2xC,iBAAkB1qB,GACnE3X,EAAOsiC,OAASpQ,EAAAA,EAAkBxhC,KAAK4xC,OAAQ3qB,EAEnD,uEClKG,SAAS+qB,EAAatW,EAAQ6F,GACjC,OAAQA,EAAU7F,EAASyG,EAAAA,GAAezG,EAAQ,CAAEzU,UAAU,GAClE,CAEO,SAASgrB,EAAW7jC,EAAO6Y,GAC9B,OAAQA,EAAWkb,EAAAA,GAAe/zB,GAASA,CAC/C,iPCkBO,SAAS8jC,EAAe3R,GAC3B,IAAI4R,EAAK,CAAC,EAOV,OANA5R,EAAO36B,SAAQ,CAACuC,EAAG/N,KACT+N,KAAKgqC,IACPA,EAAGhqC,GAAK,IAEZgqC,EAAGhqC,GAAG3J,KAAKpE,EAAE,IAEV+3C,CACX,wFC0BO,SAASC,EAAkBxS,EAAOC,GAA4B,IAAvB,MAAEhkC,EAAQ,MAAMmJ,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GAC1D,cAAEqtC,EAAa,WAAEC,EAAU,SAAEC,GA5D9B,SAA+B3S,EAAOC,GAA4B,IAAvB,MAAEhkC,EAAQ,MAAMmJ,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9D9L,EAAc,MAAT2C,EAAgB+jC,EAAM5iC,OAASnB,EAAMmB,OAE1Cw1C,EAAY,IAAI35B,WAAe,EAAJ3f,GAC3B+U,EAAM,IAAI6H,WAAe,EAAJ5c,GACrB4O,EAAQ,IAAI+Q,WAAe,EAAJ3f,GAE3B,CACI,IAAImiB,EAAU,EACVo3B,EAAYr4C,IACZ,IAAIs4C,EAAe,EAAVr3B,EACLs3B,EAAOD,EAAK,EAChBF,EAAUE,GAAM9S,EAAMxlC,GACtBo4C,EAAUG,GAAQ9S,EAAIzlC,GACtB6T,EAAIykC,GAAM,EACVzkC,EAAI0kC,GAAQ,EACZ7qC,EAAM4qC,GAAMr3B,EACZvT,EAAM6qC,GAAQt3B,EACdA,GAAS,EAGb,GAAc,OAAVxf,EACA,IAAK,IAAIzB,EAAI,EAAGA,EAAIlB,EAAGkB,IACnBq4C,EAAUr4C,QAGd,IAAK,MAAMA,KAAKyB,EACZ42C,EAAUr4C,EAGtB,CAEA,IAAIoyC,EAAQ/5B,EAAAA,GAAqB+/B,EAAUx1C,QAC3CwvC,EAAM7oB,MAAK,CAACvpB,EAAGsM,IAAM8rC,EAAUp4C,GAAKo4C,EAAU9rC,KAE9C,IAAI2rC,EAAgB,GAChBO,EAAa,IAAI/5B,WAAW3f,GAC5B25C,EAAW,IAAIh6B,WAAW3f,GAE1B8rB,EAAO,KACX,IAAK,MAAM5qB,KAAKoyC,EAAO,CACnB,IAAIsG,EAAMN,EAAUp4C,GAChBoa,EAAM1M,EAAM1N,GAEZ04C,IAAQ9tB,IACRqtB,EAAc7zC,KAAKs0C,GACnB9tB,EAAO8tB,GAGP7kC,EAAI7T,GACJw4C,EAAWp+B,GAAO69B,EAAcr1C,OAAS,EAEzC61C,EAASr+B,GAAO69B,EAAcr1C,OAAS,CAE/C,CAEA,MAAO,CAAEq1C,gBAAeC,WAAYM,EAAYL,SAAUM,EAC9D,CAGkDE,CAAsBnT,EAAOC,EAAK,CAAEhkC,UAG9EowC,EAAO,CAAE+G,EAAY,EAAGX,EAAcr1C,SAC1C,GAAc,OAAVnB,EACA,IAAK,IAAIzB,EAAI,EAAGA,EAAIk4C,EAAWt1C,OAAQ5C,IACnC64C,EAAqBX,EAAWl4C,GAAIm4C,EAASn4C,GAAIA,EAAG6xC,EAAM,QAG9D,IAAS7xC,EAAI,EAAGA,EAAIk4C,EAAWt1C,OAAQ5C,IACnC64C,EAAqBX,EAAWl4C,GAAIm4C,EAASn4C,GAAIyB,EAAMzB,GAAI6xC,EAAM,GAKzE,IAAIiH,EAAoBb,EAAcr1C,OAAS,EAAIq1C,EAAcA,EAAcr1C,OAAS,GAAK,EAAI,EACjGq1C,EAAc7zC,KAAK00C,GAEnB,IAAK,MAAM/qC,KAAK8jC,EAAM,CAClB9jC,EAAEgrC,WAAad,EAAclqC,EAAEgrC,YAC/BhrC,EAAEirC,YAAcf,EAAclqC,EAAEirC,aAChCjrC,EAAEqU,OAAS61B,EAAclqC,EAAEqU,QAG3B,IAAI62B,EAAwBlrC,EAAEujC,SAAS7vC,QAAQ8nB,MAAK,CAACpqB,EAAGE,IAAMmmC,EAAMrmC,GAAKqmC,EAAMnmC,KAC3E65C,EAAsBnrC,EAAEujC,SAAS/nB,MAAK,CAACpqB,EAAGE,IAAMomC,EAAIpmC,GAAKomC,EAAItmC,KACjE4O,EAAEujC,SAAW,CACT9L,MAAOyT,EAAsBvtC,KAAI1L,GAAK,CAACwlC,EAAMxlC,GAAIA,KACjDylC,IAAKyT,EAAoBxtC,KAAI1L,GAAK,CAACylC,EAAIzlC,GAAIA,KAEnD,CAEA,OAAO6xC,CACX,CAEA,SAAS+G,EAAYG,EAAYC,GAC7B,MAAO,CACHD,WAAYA,EACZC,YAAaA,EACb52B,OAAQ22B,EAAa7uC,KAAKyH,OAAOqnC,EAAcD,GAAc,GAC7DI,UAAW,KACXC,WAAY,KACZ9H,SAAU,GAElB,CAEA,SAASuH,EAAqBrT,EAAOC,EAAK/3B,EAAOmkC,EAAMwH,GACnD,IAAI96B,EAAUszB,EAAKwH,GAEf7T,EAAQjnB,EAAQ6D,QACW,OAAvB7D,EAAQ66B,aACR76B,EAAQ66B,WAAavH,EAAKjvC,OAC1BivC,EAAKztC,KAAKw0C,EAAYr6B,EAAQ6D,OAAQ7D,EAAQy6B,eAElDH,EAAqBrT,EAAOC,EAAK/3B,EAAOmkC,EAAMtzB,EAAQ66B,aAE/C3T,EAAMlnB,EAAQ6D,QAAWqjB,GAAOlnB,EAAQ6D,QAAUqjB,EAAMD,GACrC,OAAtBjnB,EAAQ46B,YACR56B,EAAQ46B,UAAYtH,EAAKjvC,OACzBivC,EAAKztC,KAAKw0C,EAAYr6B,EAAQw6B,WAAYx6B,EAAQ6D,UAEtDy2B,EAAqBrT,EAAOC,EAAK/3B,EAAOmkC,EAAMtzB,EAAQ46B,YAMtD56B,EAAQ+yB,SAASltC,KAAKsJ,EAE9B,CAEO,SAAS4rC,EAAkB9T,EAAOC,EAAKoM,GAC1C,IAAItpC,EAAU,GACd,OAAIi9B,EAAQqM,EAAKmH,aAIbvT,EAAMoM,EAAKkH,YAAetT,GAAOoM,EAAKkH,YAActT,EAAMD,GAI9D+T,EAAqB/T,EAAOC,EAAKoM,EAAM,EAAGtpC,GAP/BA,CASf,CAEA,SAASgxC,EAAqB/T,EAAOC,EAAKoM,EAAMwH,EAAM9wC,GAClD,IAAIgW,EAAUszB,EAAKwH,GAEnB,GAAI7T,EAAQjnB,EAAQ6D,OAAQ,CACxB,IAAK,MAAMgtB,KAAW7wB,EAAQ+yB,SAAS7L,IAAK,CACxC,KAAI2J,EAAQ,GAAK5J,GAGb,MAFAj9B,EAAQnE,KAAKgrC,EAAQ,GAI7B,CAC2B,OAAvB7wB,EAAQ66B,YACRG,EAAqB/T,EAAOC,EAAKoM,EAAMtzB,EAAQ66B,WAAY7wC,EAGnE,MAAO,GAAIk9B,EAAMlnB,EAAQ6D,QAAWqjB,GAAOlnB,EAAQ6D,QAAUqjB,EAAMD,EAAQ,CACvE,IAAK,MAAM4J,KAAW7wB,EAAQ+yB,SAAS9L,MAAO,CAC1C,KAAI4J,EAAQ,GAAK3J,GAAQ2J,EAAQ,IAAM3J,GAAOD,GAASC,GAGnD,MAFAl9B,EAAQnE,KAAKgrC,EAAQ,GAI7B,CAC0B,OAAtB7wB,EAAQ46B,WACRI,EAAqB/T,EAAOC,EAAKoM,EAAMtzB,EAAQ46B,UAAW5wC,EAGlE,KAAO,CACH,IAAK,MAAM6mC,KAAW7wB,EAAQ+yB,SAAS9L,MACnCj9B,EAAQnE,KAAKgrC,EAAQ,IAGrB3J,EAAMlnB,EAAQ6D,QACa,OAAvB7D,EAAQ66B,YACRG,EAAqB/T,EAAOC,EAAKoM,EAAMtzB,EAAQ66B,WAAY7wC,GAG/Di9B,EAAQjnB,EAAQ6D,QACU,OAAtB7D,EAAQ46B,WACRI,EAAqB/T,EAAOC,EAAKoM,EAAMtzB,EAAQ46B,UAAW5wC,EAGtE,CACJ,+BC9LO,SAASixC,EAAezrC,EAAGxL,GAC9B,GAAIwL,EAAEnL,SAAWL,EAAEK,OACf,OAAO,EAGX,IAAK,IAAI5C,EAAI,EAAGA,EAAI+N,EAAEnL,OAAQ5C,IAC1B,GAAI+N,EAAE/N,IAAMuC,EAAEvC,GACV,OAAO,EAIf,OAAO,CACX,CAEO,SAASy5C,EAAY1rC,GACxB,OAAOA,EAAE1J,aAAevB,OAAS4+B,YAAYC,OAAO5zB,EACxD,CAEO,SAAS2rC,EAAwBC,EAAMC,GAC1C,OAAID,GAAQC,EACDD,EAGPA,GAAQ72C,OAAS82C,GAAQ92C,OAIzB62C,GAAQE,eAAiBD,GAAQC,eAAiBF,GAAQG,gBAAkBF,GAAQE,eAH7Eh3C,MAOJ4b,YACX,CAEO,SAASq7B,EAAkBthB,EAAMC,GACpC,OAAO,IAAIr1B,MAAMo1B,EAAO,gCAAkCC,EAC9D,CAEO,SAASshB,EAAiB3kC,EAAO4kC,GACpC,IAAK,MAAMlsC,KAAKsH,EACZ,GAAiB,kBAANtH,EACP,MAAM,IAAI1K,MAAM42C,EAAc,qCAG1C,CAEO,SAASC,EAAgB7kC,EAAO4kC,EAAa5C,EAAa8C,GAE7D,GADAH,EAAiB3kC,EAAO4kC,GACpB5kC,EAAMzS,QAAUy0C,EAChB,MAAM0C,EAAkBE,EAAc,SAAUE,EAExD,CAEO,SAASC,EAAI73C,GAChB,IAAIqQ,EAAQ,EAEZ,OADArQ,EAAEiJ,SAAQuC,IAAO6E,GAAS7E,CAAC,IACpB6E,CACX,CAEO,SAASynC,EAAaC,EAAWC,GAA6B,IAAhBC,EAAO5vC,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,KACvD6vC,GAAW,EACf,IAAK,IAAIz6C,EAAI,EAAGA,EAAIs6C,EAAU13C,OAAQ5C,IACb,OAAjBs6C,EAAUt6C,KACVy6C,GAAW,GAInB,GAAIA,EACA,OAAO,KAGK,OAAZD,IACAA,EAAUJ,EAAIG,IAGlB,IAAIrlC,EAAS,IAAIpS,MAAM03C,GACnBv5B,EAAU,EACd,IAASjhB,EAAI,EAAGA,EAAIs6C,EAAU13C,OAAQ5C,IAAK,CACvC,IAAIlB,EAAIw7C,EAAUt6C,GACR,OAANlB,GACAoW,EAAO6c,KAAK,GAAI9Q,EAASA,EAAUs5B,EAAYv6C,IAC/CihB,GAAWs5B,EAAYv6C,IAEvBlB,EAAE0M,SAAQuC,IACNmH,EAAO+L,GAAWlT,EAClBkT,GAAS,GAGrB,CAEA,OAAO/L,CACX,CAEO,SAASwlC,EAAe57C,GAC3B,IAAIoW,EAAS,IAAIuJ,WAAW3f,GAC5B,IAAK,IAAIkB,EAAI,EAAGA,EAAIlB,EAAGkB,IACnBkV,EAAOlV,GAAKA,EAEhB,OAAOkV,CACX,CAWO,SAASylC,EAAoB5sC,GAChC,OAAIA,aAAa0Q,WACN1Q,EAEA,IAAI0Q,WAAW1Q,EAE9B,CAEO,SAAS6sC,EAAiB7sC,EAAG0c,GAChC,IAAK,MAAMloB,KAAKwL,EACZ,GAAIxL,EAAI,EACJ,MAAM,IAAIc,MAAM,iCAAmConB,EAAM,IAGrE,CAEO,SAASowB,EAAW9sC,GACvB,GAAIA,EAAE1J,aAAenC,OAAQ,CACzB,IAAIgd,EAAc,IAAI+mB,IACtB,IAAK,MAAO16B,EAAGvH,KAAM9B,OAAO2S,QAAQ9G,GAChCmR,EAAYiL,IAAI5e,EAAGvH,GAEvB,OAAOkb,CACX,CAEA,KAAMnR,aAAak4B,KACf,MAAM,IAAI5iC,MAAM,yCAEpB,OAAO0K,CACX,kLCzII+sC,EAAe,IAAI7U,IA0BhB5qB,eAAe0/B,EAAoBje,GAAmC,IAA1B,SAAEp7B,GAAW,GAAMkJ,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClEL,EAASuwC,EAAazrB,IAAIyN,GAC9B,GAAsB,qBAAXvyB,EACP,OAAOA,EACJ,IAAK7I,EACR,OAAO,KAGX6I,EAAS,GACTuwC,EAAa3wB,IAAI2S,EAASvyB,GAE1B,IAAIywC,QAAaC,EAAAA,EAAAA,IAAmBne,EAAU,uBAC9C,IAAKke,EAAKv/B,GACN,MAAM,IAAIpY,MAAM,uDAAyDy5B,EAAU,KAKvF,IAHA,IAAIoe,GAAYC,EAAAA,EAAAA,UAAsBH,EAAKr/B,eAEvC6pB,EAAQ,EACHxlC,EAAI,EAAGA,EAAIk7C,EAAUt4C,OAAQ5C,IAAK,CAEvC,IAAI6Z,EADIqhC,EAAUl7C,GACF8L,MAAM,MAClBsvC,EAAMvoC,OAAOgH,EAAQ,IACzBtP,EAAOnG,KAAK,CACR,MAASyV,EAAQ,GACjB,YAAeA,EAAQ,GACvB,QAAWA,EAAQ,GACnB,WAAcA,EAAQ,GACtB,OAAUA,EAAQ,GAClB,MAAS2rB,EACT,KAAQ4V,IAEZ5V,GAAS4V,CACb,CAEA,OAAO7wC,CACX,8DC7DI8wC,EAAS,IAAIpV,IAiBV5qB,eAAeigC,EAAcxe,GAAgC,IAAvB,MAAErU,EAAQ,MAAM7d,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChD,MAAT6d,IACAA,EAAQ,CAAE,SAAU,SAAU,YAGlC,IAAIle,EAAS8wC,EAAOhsB,IAAIyN,GACH,oBAAVvyB,IACPA,EAAS,IAAI07B,IACboV,EAAOlxB,IAAI2S,EAASvyB,IAGxB,IAAI2K,EAAS,IAAI+wB,IACbsV,EAAW,GACXC,EAAa,GAEjB,IAAK,MAAMh8C,KAAKipB,EAAO,CACnB,IAAI8D,EAAQhiB,EAAO8kB,IAAI7vB,GACH,oBAAT+sB,GACPgvB,EAASn3C,MAAKq3C,EAAAA,EAAAA,IAAc3e,EAAU,IAAMt9B,EAAI,YAChDg8C,EAAWp3C,KAAK5E,IAEhB0V,EAAOiV,IAAI3qB,EAAG+sB,EAEtB,CAEA,GAAIgvB,EAAS34C,OAAS,EAAG,CACrB,IAAI84C,QAAiBrxB,QAAQsxB,IAAIJ,GACjC,IAAK,IAAIv7C,EAAI,EAAGA,EAAI07C,EAAS94C,OAAQ5C,IAAK,CACtC,IAAI47C,EAAMF,EAAS17C,GACnB,IAAK47C,EAAIngC,GACL,KAAM,+CAEV,IAAIrC,QAAewiC,EAAIjgC,cAEvB,IAAIkgC,GAAYV,EAAAA,EAAAA,IAAgB/hC,GAC5B0iC,EAAY,GAChB,IAAK,MAAM/tC,KAAK8tC,EACH,IAAL9tC,EACA+tC,EAAU13C,KAAK,IAEf03C,EAAU13C,KAAK2J,EAAEjC,MAAM,OAI/B,IAAItM,EAAIg8C,EAAWx7C,GACnBuK,EAAO4f,IAAI3qB,EAAGs8C,GACd5mC,EAAOiV,IAAI3qB,EAAGs8C,EAClB,CACJ,CAEA,OAAO5mC,CACX,wECnEI6mC,EAAQ,IAAI9V,IAsBT5qB,eAAe2gC,EAAalf,GAAmC,IAA1B,SAAEp7B,GAAW,GAAMkJ,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3D2hB,EAAQwvB,EAAM1sB,IAAIyN,GACtB,GAAqB,qBAAVvQ,EACP,OAAOA,EACJ,IAAK7qB,EACR,OAAO,KAGX6qB,EAAQ,GACRwvB,EAAM5xB,IAAI2S,EAASvQ,GAEnB,IAAM0vB,EAAMnB,SAAuBzwB,QAAQsxB,IAAI,EAACV,EAAAA,EAAAA,IAAmBne,EAAU,iBAAiBie,EAAAA,EAAAA,GAAoBje,KAClH,IAAKmf,EAAKxgC,GACN,MAAM,IAAIpY,MAAM,gDAAkDy5B,EAAU,KAIhF,IAFA,IAAIof,GAAWf,EAAAA,EAAAA,UAAsBc,EAAKtgC,eAEjC3b,EAAI,EAAGA,EAAIk8C,EAASt5C,OAAQ5C,IAAK,CAEtC,IAAI6Z,EADIqiC,EAASl8C,GACD8L,MAAM,MACtBygB,EAAMnoB,KAAK,CACP,KAAQyV,EAAQ,GAChB,YAAeA,EAAQ,GACvB,KAAQhH,OAAOgH,EAAQ,KAE/B,CAEA,IAAI2rB,EAAQ,EACZ,IAASxlC,EAAI,EAAGA,EAAI86C,EAAal4C,OAAQ5C,IAAK,CAC1C,IAAIo7C,EAAMN,EAAa96C,GAAGoK,KAG1B,IAAK,IAAIkC,EAAI,EAAGA,EAAI8uC,EAAK9uC,IACrBigB,EAAMjgB,EAAIk5B,GAAO2W,WAAan8C,EAC9BusB,EAAMjgB,EAAIk5B,GAAOn0B,OAAS/E,EAG9Bk5B,GAAS4V,CACb,CAEA,OAAO7uB,CACX,uCChEe,IAAI0Z,gECAnB,MAAMrY,EAAS,IAAIqY,IAeZ5qB,eAAe+gC,EAAqBtf,GAAmC,IAA1B,SAAEp7B,GAAW,GAAMkJ,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnE2hB,EAAQqB,EAAOyB,IAAIyN,GACvB,GAAqB,qBAAVvQ,EACP,OAAOA,EACJ,IAAK7qB,EACR,OAAO,KAGX,IAAIk6C,QAAYvjC,EAAAA,GAAyBykB,EAAU,oBACnD,IAAK8e,EAAIngC,GACL,MAAM,IAAIpY,MAAM,6DAA+Dy5B,EAAU,KAI7F,IAAI7f,EADW5E,EAAAA,SAA4BujC,EAAIjgC,eACzBjQ,IAAI2M,EAAAA,IAE1B,OADAuV,EAAOzD,IAAI2S,EAAS7f,GACbA,CACX,+CC/BgB,IAAIgpB,IACL,IAAIA,gECFnB,MAAMrY,EAAS,IAAIqY,IAeZ5qB,eAAeghC,EAAqBvf,GAAmC,IAA1B,SAAEp7B,GAAW,GAAMkJ,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnE2hB,EAAQqB,EAAOyB,IAAIyN,GACvB,GAAqB,qBAAVvQ,EACP,OAAOA,EACJ,IAAK7qB,EACR,OAAO,KAGX,IAAIk6C,QAAYvjC,EAAAA,GAAyBykB,EAAU,oBACnD,IAAK8e,EAAIngC,GACL,MAAM,IAAIpY,MAAM,6DAA+Dy5B,EAAU,KAI7F,IAAI7f,EADY5E,EAAAA,SAA4BujC,EAAIjgC,eACzBjQ,IAAI2M,EAAAA,IAE3B,OADAuV,EAAOzD,IAAI2S,EAAS7f,GACbA,CACX,8CC/BgB,IAAIgpB,IACL,IAAIA,iDCDJ,IAAIA,IACH,IAAIA,IACL,IAAIA,IACH,IAAIA,yDCFL,IAAIA,IACH,IAAIA,IACL,IAAIA,IACH,IAAIA,IACH,IAAIA,IACI,IAAIA,gECPzBqW,EAAY,IAAIrW,IAChBsW,EAAkB,IAAItW,IAanB5qB,eAAemhC,EAAqB1f,EAASv8B,GAAkC,IAA5B,UAAEk8C,GAAY,GAAO7xC,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3E8xC,EAAQD,EAAYF,EAAkBD,EAEtCK,EAASD,EAAKrtB,IAAIyN,GACA,qBAAX6f,IACPA,EAAS,IAAI1W,IACbyW,EAAKvyB,IAAI2S,EAAS6f,IAGtB,IAAIC,EAASD,EAAOttB,IAAI9uB,GACxB,GAAsB,qBAAXq8C,EAAwB,CAC/BA,EAAS,IAAI3W,IACb0W,EAAOxyB,IAAI5pB,EAAMq8C,GAEjB,IAAIvB,SAAgBC,EAAAA,EAAAA,GAAcxe,EAAS,CAAErU,MAAO,CAAEloB,MAAW8uB,IAAI9uB,GACrE,IAAK,IAAIP,EAAI,EAAGA,EAAIq7C,EAAOz4C,OAAQ5C,IAC/B,IAAK,IAAIuC,KAAK84C,EAAOr7C,GAAI,CACjBy8C,IACAl6C,EAAIA,EAAE0D,eAGV,IAAIsY,EAAUq+B,EAAOvtB,IAAI9sB,GACF,qBAAZgc,EACPA,EAAQ1K,IAAI7T,GAEZ48C,EAAOzyB,IAAI5nB,EAAG,IAAI+mB,IAAI,CAACtpB,IAE/B,CAGJ,IAAK,MAAOyxB,EAAKJ,KAAQurB,EACrBA,EAAOzyB,IAAIsH,EAAK3uB,MAAMumB,KAAKgI,GAEnC,CAEA,OAAOurB,CACX,+BCtCO,SAASC,EAAuBC,EAAaC,GAChD,IAAIC,EAAkB,IAAI/W,IAC1B,IAAK,IAAIjmC,EAAI,EAAGA,EAAI88C,EAAYl6C,OAAQ5C,IACpC,IAAK,MAAMi9C,KAAcH,EAAY98C,GAAI,CACrC,IAAIusB,EAAQywB,EAAgB3tB,IAAI4tB,GACZ,oBAAT1wB,IACPA,EAAQ,IAAIjD,IACZ0zB,EAAgB7yB,IAAI8yB,EAAY1wB,IAEpCA,EAAM1Y,IAAI7T,EACd,CAIJ,IAAK,MAAOuL,EAAGvH,KAAMg5C,EACjBA,EAAgBzxC,GAAK,IAAI2xC,YAAYl5C,GAGzC,IAAIm5C,EAAW,IAAIr6C,MAAMi6C,EAAan6C,QACtC,IAAS5C,EAAI,EAAGA,EAAI+8C,EAAan6C,OAAQ5C,IAAK,CAC1C,IAAIo9C,EAAS,IAAI9zB,IACjB,IAAK,MAAM2zB,KAAcF,EAAa/8C,GAAI,CACtC,IAAIusB,EAAQywB,EAAgB3tB,IAAI4tB,GAChC,GAAqB,qBAAV1wB,EACP,IAAK,MAAM8wB,KAAQ9wB,EACf6wB,EAAOvpC,IAAIwpC,EAGvB,CACAF,EAASn9C,GAAM,IAAIk9C,YAAYE,GAAS7zB,MAC5C,CAEA,OAAO4zB,CACX,+CCjCO,SAASG,EAAuBR,EAAaS,GAChD,IAAIC,EAAW,IAAI16C,MAAMg6C,EAAYl6C,QACrC,IAAK,IAAI5C,EAAI,EAAGA,EAAI88C,EAAYl6C,OAAQ5C,IAAK,CACzC,IAAI42B,EAAY,IAAItN,IACpB,IAAK,MAAM2zB,KAAcH,EAAY98C,GACjC,IAAK,MAAMmqB,KAAOozB,EAAaN,GAC3BrmB,EAAU/iB,IAAIsW,GAGtBqzB,EAASx9C,GAAM,IAAIk9C,YAAYtmB,GAAYrN,MAC/C,CACA,OAAOi0B,CACX,uDC0EgB,IAAIvX,IACH,IAAIA,IACH,IAAIA,IAMN,IAAIA,IACH,IAAIA,IACH,IAAIA,8FC5GtBwX,EAAA,IAAAnnC,QAAAonC,EAAA,IAAApnC,QAIO,MAAMqnC,EAUTt5C,WAAAA,GAAiC,IAArB,MAAEuiB,EAAQ,CAAC,GAAGhc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,GAAC2M,EAAAA,EAAAA,GAAA,KAAAkmC,EAAA,CAAAjmC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmmC,EAAA,CAAAlmC,UAAA,EAAAxD,WAAA,KAC3ByD,EAAAA,EAAAA,GAAA7R,KAAI63C,EAAU72B,IACdnP,EAAAA,EAAAA,GAAA7R,KAAI83C,EAAU,MAEd,IAAI95C,EAAO1B,OAAO0B,KAAKgjB,GACvB,GAAIhjB,EAAKhB,OAEL,IAAK,IAAI2I,EAAI,EAAGA,EAAI3H,EAAKhB,OAAQ2I,IAAK,CAClC,IAAIgT,EAAUqI,EAAMhjB,EAAK2H,IACzB,GAAS,GAALA,GACAkM,EAAAA,EAAAA,GAAA7R,KAAI83C,EAAUn/B,EAAQtD,wBACnB,GAAIsD,EAAQtD,oBAAiBvD,EAAAA,EAAAA,GAAI9R,KAAI83C,GACxC,MAAM,IAAIr6C,MAAM,sDAExB,CAER,CAMA4X,eAAAA,GACI,OAAAvD,EAAAA,EAAAA,GAAO9R,KAAI83C,EACf,CAKA9oB,SAAAA,GACI,OAAO1yB,OAAO0B,MAAI8T,EAAAA,EAAAA,GAAC9R,KAAI63C,GAC3B,CAMA/pC,GAAAA,CAAI1T,GACA,OAAQA,KAAC0X,EAAAA,EAAAA,GAAI9R,KAAI63C,EACrB,CAMApuB,GAAAA,CAAIrvB,GACA,OAAO0X,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQz9C,EACvB,CAQA6T,GAAAA,CAAI7T,EAAG2Y,GACH,GAAoB,QAAhBjB,EAAAA,EAAAA,GAAA9R,KAAI83C,IACJjmC,EAAAA,EAAAA,GAAA7R,KAAI83C,EAAU/kC,EAAOsC,wBAClB,GAAItC,EAAOsC,oBAAiBvD,EAAAA,EAAAA,GAAI9R,KAAI83C,GACvC,MAAM,IAAIr6C,MAAM,uDAGpB,GAAIrD,KAAC0X,EAAAA,EAAAA,GAAI9R,KAAI63C,GAAS,CAClB,IAAIG,GAAMlmC,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQz9C,GACtBqY,EAAAA,GAAWulC,EACf,EAEAlmC,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQz9C,GAAK2Y,CACrB,CAMAklC,MAAAA,CAAO79C,GACHqY,EAAAA,IAAWX,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQz9C,WAChB0X,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQz9C,GACoB,GAAnCkC,OAAO0B,MAAI8T,EAAAA,EAAAA,GAAC9R,KAAI63C,IAAS76C,SACzB6U,EAAAA,EAAAA,GAAA7R,KAAI83C,EAAU,KAEtB,CAMA3oB,KAAAA,GACI,IAAI+oB,EAAa,IAAIH,EACrB,IACI,IAAK,MAAOpyC,EAAGvH,KAAM9B,OAAO2S,SAAO6C,EAAAA,EAAAA,GAAC9R,KAAI63C,IACpCK,EAAWjqC,IAAItI,EAAGvH,EAAE+wB,QAE5B,CAAE,MAAOx1B,GAEL,MADAu+C,EAAW1vB,OACL7uB,CACV,CACA,OAAOu+C,CACX,CAQA3wB,MAAAA,CAAO9D,EAAM00B,GACL10B,IAAS00B,IACLA,KAAErmC,EAAAA,EAAAA,GAAI9R,KAAI63C,IACVplC,EAAAA,IAAWX,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQM,KAE3BrmC,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQM,IAAMrmC,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQp0B,UACvB3R,EAAAA,EAAAA,GAAA9R,KAAI63C,GAAQp0B,GAE3B,CAKA+E,IAAAA,GACI,IAAK,MAAOrgB,EAAG/J,KAAM9B,OAAO2S,SAAO6C,EAAAA,EAAAA,GAAC9R,KAAI63C,IACpCplC,EAAAA,GAAWrU,EAGnB,iHCvIJqS,EAAA,IAAAC,QAAA0nC,EAAA,IAAA1nC,QAIO,MAAM2nC,EAIT55C,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAymC,EAAA,CAAAxmC,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIo4C,EAAWhmB,EAEnB,CAgBA,wBAAOkmB,CAAkB51B,EAAMllB,EAAS8a,GAAqD,IAA3C,YAAEotB,GAAc,EAAI,KAAGpkB,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtF,KAAMsT,aAAoBigC,EAAAA,IACtB,MAAM,IAAI96C,MAAM,2CAEpB,GAAI6a,EAAStb,QAAU0lB,EAAOllB,EAC1B,MAAM,IAAIC,MAAM,yEAEpB,OAAO+6C,EAAAA,GAAQnrC,GAAU,IAAIA,EAAOorC,cAAc/1B,EAAMllB,EAAS8a,EAASgsB,OAAQoB,EAAapkB,IAAO+2B,EAC1G,CAMAlpB,KAAAA,GACI,OAAOqpB,EAAAA,GACHnrC,IAAUyE,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASjpB,SACvBkpB,EAER,CAGA,UAAItlC,GACA,OAAAjB,EAAAA,EAAAA,GAAO9R,KAAIo4C,EACf,CAKAnjC,YAAAA,GACI,OAAOnD,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASloC,MACxB,CAKAmF,eAAAA,GACI,OAAOvD,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASljC,MACxB,CAcAjP,GAAAA,CAAI7L,GAA2B,IAAxB,OAAEoZ,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxB,GAAc,MAAVwO,EAEA,OADA1B,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASnyC,IAAI7L,EAAGoZ,EAAO8wB,QACpB9wB,EAAO8M,QAEd,IAAIhR,EACJkE,EAASf,EAAAA,IAA6BX,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASljC,QACnD,KACIpD,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASnyC,IAAI7L,EAAGoZ,EAAO8wB,QAC3Bh1B,EAASkE,EAAO3X,OACpB,CAAE,QACE2X,EAAOgV,MACX,CACA,OAAOlZ,CAEf,CAcAgG,MAAAA,CAAOlb,GAA2B,IAAxB,OAAEoZ,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3B,GAAc,MAAVwO,EAEA,OADA1B,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAAS9iC,OAAOlb,EAAGoZ,EAAO8wB,QACvB9wB,EAAO8M,QAEd,IAAIhR,EACJkE,EAASf,EAAAA,IAA6BX,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASloC,QACnD,KACI4B,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAAS9iC,OAAOlb,EAAGoZ,EAAO8wB,QAC9Bh1B,EAASkE,EAAO3X,OACpB,CAAE,QACE2X,EAAOgV,MACX,CACA,OAAOlZ,CAEf,CAMAkZ,IAAAA,GACyB,QAAjB1W,EAAAA,EAAAA,GAAA9R,KAAIo4C,KACJI,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIo4C,EAAW,MAGvB,CAKAM,QAAAA,GACI,OAAO5mC,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASO,QACxB,CAGAC,aAAAA,GACI,OAAO9mC,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASS,aACxB,CAGAC,UAAAA,GAAmC,IAAxB,OAAEtlC,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5B,GAAc,MAAVwO,EAEA,OADA1B,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASU,WAAWtlC,EAAO8wB,QACxB9wB,EAAO8M,QAEd,IAAIhR,EACJkE,EAASf,EAAAA,IAA2BX,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASloC,QACjD,KACI4B,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASU,WAAWtlC,EAAO8wB,QAC/Bh1B,EAASkE,EAAO3X,OACpB,CAAE,QACE2X,EAAOgV,MACX,CACA,OAAOlZ,CAEf,CAGAypC,cAAAA,IACIjnC,EAAAA,EAAAA,GAAA9R,KAAIo4C,GAASY,iBAEjB,sEC9KG,SAASzjB,EAAK0jB,EAAQC,GACzB,IAAIC,EACJ,GACIA,EAAUF,EAASj6C,OAAOiO,OAAO,IAAIvO,OAAW,IAAMM,OAAOsF,KAAKwI,MAAsB,IAAhBxI,KAAKwG,WAAqBouC,QAC7FE,EAAAA,GAAmBD,IAC5B,OAAOA,CACX,CAEO,SAASE,EAAa74C,GACzB,MAAM,IAAI/C,MAAM,qDACpB,sGCRAgT,WAAA,IAAAC,SAAA4oC,EAAA,IAAA5oC,QAIO,MAAM6oC,EAIT96C,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,EAEpB,CAKAsY,cAAAA,GACI,OAAO54B,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUE,YACzB,CAKAC,aAAAA,GACI,OAAO3nC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUI,WACzB,CAgBAra,IAAAA,CAAKnmB,GAA6B,IAAtB,KAAEoI,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvBqiC,EAAiB,OAAVnuB,GAAiBpH,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUK,WAAWzgC,IAASpH,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUM,WAC5E,OAAOnnC,EAAAA,GAAmB40B,EAAK/lB,EACnC,CAgBA+c,QAAAA,CAASnlB,GAA6B,IAAtB,KAAEoI,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3BqiC,EAAiB,OAAVnuB,GAAiBpH,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUO,eAAe3gC,IAASpH,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUQ,eAChF,OAAOrnC,EAAAA,GAAmB40B,EAAK/lB,EACnC,CAMAkH,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAkBG,SAASS,EAAqB5xC,EAAG+sB,GAA0D,IAAlD,QAAE8kB,GAAU,EAAK,gBAAEC,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3F,IAAIk1C,EACA5qC,EACJ,IAAI6qC,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IAEI,IADAC,EAAaznC,EAAAA,GAAmByiB,EAAQ,mBACzBl4B,QAAUmL,EAAEkN,kBACvB,MAAM,IAAI5X,MAAM,kEAGpB6R,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO+sC,uBAAuBjyC,EAAE4K,OAAQmnC,EAAW5V,OAAQ0V,EAASG,IAC9EZ,EAGR,CAAE,MAAO5/C,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWynC,EACf,CAEA,OAAO5qC,CACX,8GCrGO,SAAS+qC,EAAYppB,GAAgC,IAIpDqpB,GAJ4B,OAAE9mC,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjDgI,EAAQ,EACZikB,EAAOrrB,SAAQuC,IAAO6E,GAAS7E,CAAC,IAGhC,IACI,GAAc,MAAVqL,EACA8mC,EAAe7nC,EAAAA,GAA2BzF,GAC1CwG,EAAS8mC,OACN,GAAI9mC,EAAOxW,SAAWgQ,EACzB,MAAM,IAAIvP,MAAM,wDAGpB,IAAI88C,EAAO/mC,EAAO8M,QACdk6B,EAAQ,EACZ,IAAK,IAAIpgD,EAAI,EAAGA,EAAI62B,EAAOj0B,OAAQ5C,IAAK,CACpC,IAAI49C,EAAMwC,EACVA,GAASvpB,EAAO72B,GAChBmgD,EAAKpuB,KAAK/xB,EAAG49C,EAAKwC,EACtB,CAEJ,CAAE,MAAO7gD,GAEL,MADA8Y,EAAAA,GAAW6nC,GACL3gD,CACV,CAEA,OAAO6Z,CACX,CAUO,SAASinC,EAAYtyC,EAAGqvC,GAA+C,IAAvC,OAAE16C,EAAS,KAAI,OAAE0W,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvE,OAAOuzC,EAAAA,GAAmBpwC,EAAGqvC,EAAQ,CAAE16C,SAAQ0W,UACnD,CAGO,SAASknC,EAAYvyC,EAAGrL,GAAgC,IAAxB,OAAE0W,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxD,OAAOy1C,EAAYtyC,EAAGrL,EAAQ,CAAE0W,OAAQA,EAAQ1W,QAAQ,GAC5D,CAGO,SAAS69C,EAAgBxyC,GAC5B,OAAOyyC,EAAAA,GAAqBzyC,EAChC,mFCnEA,SAAS0yC,EAAiB1yC,GACtB,IAAImH,EAASmD,EAAAA,GAA+BtK,EAAEnL,QAC1C89C,EAAMxrC,EAAOgR,QACjB,IAAK,IAAIlmB,EAAI,EAAGA,EAAI+N,EAAEnL,OAAQ5C,IAC1B0gD,EAAI1gD,GAAK2gD,OAAO5yC,EAAE/N,GAAG2Y,OAAOioC,GAAGC,KAEnC,OAAO3rC,CACX,CA0EO,SAAS4rC,EAAe/yC,EAAGsH,GAC9B,IAAI0rC,EAEAC,EACAh0B,EAFAi0B,EAAU,GAGV/rC,EAAS,CAAC,EAEd,IAEI,GAAIG,EAAMzS,SAAWmL,EAAEnL,OACnB,MAAM,IAAIS,MAAM,sDAGpB,IAAI69C,EAAS,CAAC,EACVC,EAAW,GACf,IAAK,IAAInhD,EAAI,EAAGA,EAAIqV,EAAMzS,OAAQ5C,IAAK,CACnC,GAAI+N,EAAE/N,GAAG6a,iBAAmBxF,EAAMrV,GAAG4C,OACjC,MAAM,IAAIS,MAAM,6EAEpBgS,EAAMrV,GAAGwL,SAAQuC,IACPA,KAAKmzC,IACPA,EAAOnzC,GAAKozC,EAASv+C,OACrBu+C,EAAS/8C,KAAK2J,GAClB,GAER,CAEAizC,EAAY3oC,EAAAA,GAA+BtK,EAAEnL,QAC7C,CACI,IAAIw+C,EAAYJ,EAAU96B,QAC1B,IAASlmB,EAAI,EAAGA,EAAIqV,EAAMzS,OAAQ5C,IAAK,CACnC,IAAIue,EAAUlJ,EAAMrV,GAChBkf,EAAc7G,EAAAA,GAA2BkG,EAAQ3b,QACjDy+C,EAAkBniC,EAAYgH,QAClC3H,EAAQ/S,SAAQ,CAACuC,EAAG/N,KAChBqhD,EAAgBrhD,GAAKkhD,EAAOnzC,EAAE,IAElCkzC,EAAQ78C,KAAK8a,GACbkiC,EAAUphD,GAAK2gD,OAAOzhC,EAAYgrB,OACtC,CACJ,CAEA6W,EAAWN,EAAiB1yC,GAC5Bif,EAAU3U,EAAAA,GAA2BtK,EAAE,GAAG8M,gBAC1C3F,EAAOyD,OAASylC,EAAAA,GACZnrC,GAAUA,EAAOquC,oBAAoBvzC,EAAEnL,OAAQm+C,EAAS7W,OAAQ8W,EAAU9W,OAAQld,EAAQkd,SAC1F+T,EAAAA,GAGJ/oC,EAAO8X,QAAUA,EAAQvrB,MAAM,EAAGyT,EAAOyD,OAAOkC,gBAChD,IAAI0mC,EAAa,GACjB,IAAK,MAAMvhD,KAAKkV,EAAO8X,QACnBu0B,EAAWn9C,KAAKiR,EAAM,GAAGrV,IAE7BkV,EAAOG,MAAQksC,CAEnB,CAAE,MAAOhiD,GAEL,MADA8Y,EAAAA,GAAWnD,EAAOyD,QACZpZ,CAEV,CAAE,QACE8Y,EAAAA,GAAW0oC,GACX1oC,EAAAA,GAAW2oC,GACX3oC,EAAAA,GAAW2U,GACX,IAAK,MAAMjf,KAAKkzC,EACZ5oC,EAAAA,GAAWtK,EAEnB,CAEA,OAAOmH,CACX,gECvIO,SAASssC,EAAoBzzC,EAAGsD,GAA8C,IAAtC,KAAE6V,GAAO,EAAI,QAAEu6B,GAAU,GAAM72C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAW9E,OAVIsc,IACAnZ,EAAIA,EAAEtM,SAGNsM,aAAajL,MACbiL,EAAEwb,MAAK,CAACpqB,EAAGE,IAAMF,EAAIE,IAErB0O,EAAEwb,OAGU,GAAZxb,EAAEnL,OACKiQ,OAAOiQ,IAGd2+B,EACO1zC,EAAE7D,KAAK0H,IAAI,EAAG7D,EAAEnL,OAASyO,IAEzBtD,EAAE7D,KAAKC,IAAIkH,EAAQtD,EAAEnL,QAAU,EAE9C,iHCpCAyT,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAAorC,EAAA,IAAAprC,QAAAqrC,EAAA,IAAArrC,QAAAsrC,EAAA,IAAAtrC,QAAAurC,EAAA,IAAAvrC,QAAAwrC,EAAA,IAAAxrC,QAAAyrC,EAAA,IAAAzrC,QAIO,MAAM0rC,EAWT39C,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAmqC,EAAA,CAAAlqC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAoqC,EAAA,CAAAnqC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAqqC,EAAA,CAAApqC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAsqC,EAAA,CAAArqC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAuqC,EAAA,CAAAtqC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAwqC,EAAA,CAAAvqC,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAChBvgB,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IAEX8W,EAAAA,EAAAA,GAAA7R,KAAI87C,EAAmBO,IACvBxqC,EAAAA,EAAAA,GAAA7R,KAAI+7C,EAAgBM,IACpBxqC,EAAAA,EAAAA,GAAA7R,KAAIg8C,EAAkBK,IACtBxqC,EAAAA,EAAAA,GAAA7R,KAAIi8C,EAAeI,IACnBxqC,EAAAA,EAAAA,GAAA7R,KAAIk8C,EAAqBG,IACzBxqC,EAAAA,EAAAA,GAAA7R,KAAIm8C,EAAiBE,EAGzB,CAKA5vB,aAAAA,GACI,OAAO3a,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUgD,SACzB,CAKAzyB,gBAAAA,GACI,OAAO/X,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU/vB,cACzB,CAOAgzB,aAAAA,CAAc7hB,IACN5oB,EAAAA,EAAAA,GAAC9R,KAAIk8C,KACLrqC,EAAAA,EAAAA,GAAA7R,KAAIk8C,GAAqB,IAE7BpqC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUkD,eAAe9hB,EAEjC,CAOA+hB,SAAAA,CAAU54C,IACFiO,EAAAA,EAAAA,GAAC9R,KAAIm8C,KACLtqC,EAAAA,EAAAA,GAAA7R,KAAIm8C,GAAiB,IAEzBrqC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUoD,WAAW74C,EAE7B,CAYAyuB,QAAAA,GAAiD,IAAxC,KAAEhR,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1C,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAI87C,IACJ,MAAQjqC,EAAAA,EAAAA,GAAA7R,KAAI87C,GAAmB,EAAI,IACnCc,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUhnB,WAAYsqB,IACrD,WAER,CAYAC,YAAAA,GAAqD,IAAxC,KAAEv7B,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9C,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAI+7C,IACJ,MAAQlqC,EAAAA,EAAAA,GAAA7R,KAAI+7C,GAAgB,EAAI,IAChCa,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUwD,gBAAiBF,IAC1D,eAER,CAYAG,uBAAAA,GAAgE,IAAxC,KAAEz7B,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIi8C,IACJ,MAAQpqC,EAAAA,EAAAA,GAAA7R,KAAIi8C,GAAe,EAAI,IAC/BW,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU0D,OAAQJ,IAEzD,CAaAK,cAAAA,GAAuD,IAAxC,KAAE37B,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIg8C,IACJ,MAAQnqC,EAAAA,EAAAA,GAAA7R,KAAIg8C,GAAkB,EAAI,IAClCY,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU4D,UAAWN,IAE5D,CAMAliB,UAAAA,GACI,OAAI5oB,EAAAA,EAAAA,GAAC9R,KAAIk8C,IAGEpqC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU5e,aAFd,IAIf,CAMA72B,MAAAA,GACI,OAAIiO,EAAAA,EAAAA,GAAC9R,KAAIm8C,IAGErqC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUz1C,SAFd,IAIf,CAMA2kB,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EA4BG,SAAS6D,EAAch1C,EAAGmqB,GAAuJ,IAA7I,aAAEjF,EAAe,KAAI,cAAEZ,EAAgB,KAAI,WAAE+F,EAAa,WAAU,SAAE4qB,EAAW,KAAI,kBAAEC,EAAoB,EAAC,gBAAEpD,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjL,IAAIwO,EACAlE,EACJ,IAAI6qC,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IACI,IAAIqD,EAEJ,GAAIn1C,aAAao1C,EAAAA,GAAe,CAC5BlwB,EAAellB,EAAEyhB,cACjB6C,EAAgBtkB,EAAEskB,gBAClB,IAAIvC,EAAM/hB,EAAE2oB,oBAAoB,CAAExP,MAAM,IACxCg8B,EAAOpzB,EAAIszB,UAEf,KAAO,CACH,GAAqB,OAAjBnwB,GAA2C,OAAlBZ,EACzB,MAAM,IAAIhvB,MAAM,6EAIpB,IADA+V,EAASf,EAAAA,GAAmBtK,EAAG,qBACpBnL,QAAUqwB,EAAeZ,EAChC,MAAM,IAAIhvB,MAAM,2EAGpB6/C,EAAO9pC,EAAO8wB,MAClB,CAEAh1B,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOowC,eAAeH,EAAMjwB,EAAcZ,EAAe6F,EAAUE,EAAY4qB,EAAUC,EAAmBlD,IACtHiC,EAGR,CAAE,MAAOziD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWe,EACf,CAEA,OAAOlE,CACX,6IC/PAmB,EAAA,IAAAC,QAAAgtC,EAAA,IAAAhtC,QAIO,MAAMitC,EAITl/C,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA+rC,EAAA,CAAA9rC,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAI09C,EAAUtrB,EAElB,CAMA5J,IAAAA,GACwB,QAAhB1W,EAAAA,EAAAA,GAAA9R,KAAI09C,KACJlF,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAI09C,EAAU,MAGtB,CAGA,SAAIzkB,GACA,OAAAnnB,EAAAA,EAAAA,GAAO9R,KAAI09C,EACf,EAqBG,SAASE,EAAcz1C,GAAqE,IAAlE,OAAEgxB,EAAS,OAAM,UAAEH,EAAY,GAAE,gBAAEihB,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5F,IAAIsK,EACAuuC,EACJ,IAAI1D,EAAW1nC,EAAAA,GAA4BwnC,GAE3CxnC,EAAAA,GAAmB,SAAU0mB,EAAQ,CAAE,OAAQ,SAAU,YAEzD,IACI,IAAI2kB,EACA31C,aAAa41C,EAAAA,GACbD,EAAM31C,GAEN01C,GAAeG,EAAAA,EAAAA,IAAqB71C,EAAG6wB,EAAW,CAAEihB,gBAAiBE,IACrE2D,EAAMD,GAGVvuC,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO4wC,gBAAgBH,EAAIn7C,QAASw2B,EAAQghB,IACtDwD,EAGR,CAAE,MAAMhkD,GAEJ,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWorC,EACf,CAEA,OAAOvuC,CACX,CAEA,IAAA4uC,EAAA,IAAAxtC,QAAA4oC,EAAA,IAAA5oC,QAAAytC,EAAA,IAAAztC,QAAA0tC,EAAA,IAAA1tC,QAAA2tC,EAAA,IAAA3tC,QAAA4tC,EAAA,IAAArtC,QAIO,MAAMstC,EAQT9/C,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO+I,EAAAA,EAAAA,GAAA,KAAAuwC,IAAA3sC,EAAAA,EAAAA,GAAA,KAAAusC,EAAA,CAAAtsC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAwsC,EAAA,CAAAvsC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAysC,EAAA,CAAAxsC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA0sC,EAAA,CAAAzsC,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIk+C,EAAOnjD,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAIm+C,EAAe9B,IACnBxqC,EAAAA,EAAAA,GAAA7R,KAAIo+C,EAAqB3rC,EAAAA,GAAiBzS,KAAKw+C,iBAAkBnC,KACjExqC,EAAAA,EAAAA,GAAA7R,KAAIq+C,EAAqB5rC,EAAAA,GAAiBzS,KAAKw+C,iBAAkBnC,GAGrE,CAMA1wB,IAAAA,GACI,OAAI7Z,EAAAA,EAAAA,GAAC9R,KAAIm+C,IAGErsC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU3tB,OAFd,IAIf,CAiBA8yB,OAAAA,CAAQ9yB,IACA7Z,EAAAA,EAAAA,GAAC9R,KAAIm+C,KACLtsC,EAAAA,EAAAA,GAAA7R,KAAIm+C,GAAe,IAEvBrsC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUoF,SAAS/yB,EAE3B,CAKA6yB,cAAAA,GACI,OAAO1sC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU7tC,QACzB,CAUAkzC,UAAAA,GAAkC,IAAvB,MAAEC,EAAQ,MAAM55C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE3B,OADA45C,GAAKhxC,EAAAA,EAAAA,GAAG5N,KAAIs+C,EAAAO,GAAA18C,KAAJnC,KAAkB4+C,IACrB9sC,EAAAA,EAAAA,GAAA9R,KAAIo+C,GAAmBQ,IAGjB9sC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUqF,WAAWC,GAFzB,IAIf,CASAE,aAAAA,CAAcF,EAAOD,IACZ7sC,EAAAA,EAAAA,GAAA9R,KAAIo+C,GAAmBQ,MACxB9sC,EAAAA,EAAAA,GAAA9R,KAAIo+C,GAAmBQ,IAAS,IAEpC9sC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUyF,eAAeH,EAAOD,EAExC,CAcAzlB,UAAAA,GAAiE,IAAtD,MAAE0lB,EAAQ,KAAI,KAAEt9B,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE1D,OADA45C,GAAKhxC,EAAAA,EAAAA,GAAG5N,KAAIs+C,EAAAO,GAAA18C,KAAJnC,KAAkB4+C,GACnBnsC,EAAAA,GACHkqC,EACAr7B,GACAxP,EAAAA,EAAAA,GAAA9R,KAAIq+C,GAAmBO,IACvB,MAAQ9sC,EAAAA,EAAAA,GAAA9R,KAAIq+C,GAAmBO,IAAS,CAAI,IAC5ChC,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUpgB,WAAW0lB,GAAQhC,IAEpE,CAMAp0B,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIk+C,KACfrsC,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAGJ,SAAAuF,EAlGiBD,GACT,GAAc,OAAVA,GAEa,OADbA,EAAQ5+C,KAAK2rB,QAET,MAAM,IAAIluB,MAAM,6CAGxB,OAAOmhD,CACX,CAAC,IAAAI,EAAA,IAAAtuC,QAAAuuC,EAAA,IAAAvuC,QAAAwuC,EAAA,IAAAxuC,QAAAyuC,EAAA,IAAAzuC,QAAA0uC,EAAA,IAAA1uC,QA8FE,MAAM2uC,EAQT5gD,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,GAMvB,IAN8B2M,EAAAA,EAAAA,GAAA,KAAAqtC,EAAA,CAAAptC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAstC,EAAA,CAAArtC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAutC,EAAA,CAAAttC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAwtC,EAAA,CAAAvtC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAytC,EAAA,CAAAxtC,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIg/C,EAAOjkD,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIi/C,EAAY7sB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAIk/C,EAAqB7C,IACzBxqC,EAAAA,EAAAA,GAAA7R,KAAIo/C,EAAqB/C,IACpBA,EAAQ,CACT,IAAInjD,EAAI8G,KAAKs/C,qBAAuB,GACpCztC,EAAAA,EAAAA,GAAA7R,KAAIm/C,EAA4B,CAAEI,MAAO9sC,EAAAA,GAAiBvZ,GAAG,GAAQsmD,UAAWtmD,GACpF,CAGJ,CAKAomD,kBAAAA,GACI,OAAOxtC,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAUQ,iBACzB,CAWAd,UAAAA,GAA+B,IAApB,GAAEjM,EAAK,MAAM1tC,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAExB,GAAW,OAAP0tC,EAAa,CACb,KAAI5gC,EAAAA,EAAAA,GAAC9R,KAAIk/C,GACL,OAAO,KAEXxM,GAAM,CACV,MAAO,KAAI5gC,EAAAA,EAAAA,GAAC9R,KAAIk/C,MAAuBptC,EAAAA,EAAAA,GAAA9R,KAAIm/C,GAA0BzM,GACjE,OAAO,KAGX,OAAO5gC,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAUN,WAAWjM,EACpC,CAUAoM,aAAAA,CAAcpM,EAAIiM,IACV7sC,EAAAA,EAAAA,GAAC9R,KAAIk/C,MACLptC,EAAAA,EAAAA,GAAA9R,KAAIm/C,GAA0BI,MAAM7M,IAAM,GAC1C5gC,EAAAA,EAAAA,GAAA9R,KAAIm/C,GAA0BK,YACiB,IAA3C1tC,EAAAA,EAAAA,GAAA9R,KAAIm/C,GAA0BK,YAC9B3tC,EAAAA,EAAAA,GAAA7R,KAAIk/C,GAAqB,KAGjCptC,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAUF,eAAerM,EAAIiM,EAErC,CAYAzlB,UAAAA,GAAmD,IAAxC,KAAE5X,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5C,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIo/C,IACJ,MAAQvtC,EAAAA,EAAAA,GAAA7R,KAAIo/C,GAAqB,EAAI,IACrCxC,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAU/lB,aAAc0jB,IAE/D,CAMAp0B,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIi/C,KACJzG,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIg/C,KACfntC,EAAAA,EAAAA,GAAA7R,KAAIi/C,EAAY,MAGxB,EAGJ,IAAAS,EAAA,IAAAhvC,QAAAivC,EAAA,IAAAjvC,QAAAkvC,EAAA,IAAAlvC,QAAAmvC,EAAA,IAAAnvC,QAIO,MAAMovC,EAOTrhD,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAA+tC,EAAA,CAAA9tC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAguC,EAAA,CAAA/tC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAiuC,EAAA,CAAAhuC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAkuC,EAAA,CAAAjuC,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAI0/C,EAAO3kD,IACX8W,EAAAA,EAAAA,GAAA7R,KAAI2/C,EAAYvtB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAI4/C,EAAqBvD,IACzBxqC,EAAAA,EAAAA,GAAA7R,KAAI6/C,EAAqBxD,EAE7B,CASAsC,UAAAA,GACI,OAAI7sC,EAAAA,EAAAA,GAAC9R,KAAI4/C,IAGE9tC,EAAAA,EAAAA,GAAA9R,KAAI2/C,GAAUhB,aAFd,IAIf,CAOAG,aAAAA,CAAcH,IACN7sC,EAAAA,EAAAA,GAAC9R,KAAI4/C,KACL/tC,EAAAA,EAAAA,GAAA7R,KAAI4/C,GAAqB,IAE7B9tC,EAAAA,EAAAA,GAAA9R,KAAI2/C,GAAUZ,eAAeJ,EAEjC,CAYAzlB,UAAAA,GAAmD,IAAxC,KAAE5X,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5C,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAI6/C,IACJ,MAAQhuC,EAAAA,EAAAA,GAAA7R,KAAI6/C,GAAqB,EAAI,IACrCjD,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAI2/C,GAAUzmB,aAAc0jB,IAE/D,CAMAp0B,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAI2/C,KACJnH,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAI0/C,KACf7tC,EAAAA,EAAAA,GAAA7R,KAAI2/C,EAAY,MAGxB,EAsBG,SAASI,EAAgB53C,GAMxB,IAN2B,OAC/BmG,EAAS,aAAY,qBACrBqrB,EAAuB,EAAC,iBACxBC,EAAmB,EAAC,0BACpBC,GAA4B,EAAK,cACjCC,EAAgB,GACnB90B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACD,IAAIsK,EAEJ,IACI,GAAc,cAAVhB,EACAgB,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO2yC,6BAA6B73C,EAAE8wB,MAAOU,IACvD4kB,QAED,GAAc,YAAVjwC,EACPgB,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO4yC,2BAA2B93C,EAAE8wB,MAAOa,IACrDulB,OAED,IAAc,UAAV/wC,EAMP,MAAM,IAAI7Q,MAAM,mBAAqB6Q,EAAS,KAL9CgB,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO6yC,yBAAyB/3C,EAAE8wB,MAAOW,EAAkBC,IACrEimB,EAIR,CACJ,CAAE,MAAOnmD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CACV,CAEA,OAAO2V,CACX,2FC1aO,SAAS6wC,EAAgBh4C,GAAkG,IAC1HmyC,EAEA8F,GAH2B,YAAEC,GAAc,EAAI,OAAE7sC,EAAS,KAAI,OAAEgiB,EAAS,KAAI,OAAE30B,EAAS,QAAO,YAAE2Y,GAAc,GAAIxU,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAI3H,GAAc,QAAVnE,EAAkB,CAClB,IAAIy/C,GAAS,EACbF,EAAUA,KACDE,IACDxmC,QAAQC,KAAM,wDAA0D/a,OAAOwa,GAAe,KAC9F8mC,GAAS,EACb,CAER,MAAO,GAAc,QAAVz/C,EACPu/C,EAAUA,WACP,IAAc,SAAVv/C,EAKP,MAAM,IAAIpD,MAAM,mBAAqBoD,EAAS,kCAJ9Cu/C,EAAUA,KACN,MAAM,IAAI3iD,MAAM,kDAAkD,CAI1E,CAEA,IACI,GAAc,MAAV+V,EACA8mC,EAAgB+F,EAAc5tC,EAAAA,GAA2BtK,EAAEnL,QAAU,IAAI6b,WAAW1Q,EAAEnL,QACtFwW,EAAS8mC,MACN,CACH,GAAI9mC,EAAOxW,SAAWmL,EAAEnL,OACpB,MAAM,IAAIS,MAAM,oDAEpB4iD,EAAc7sC,aAAkB+kC,EAAAA,EACpC,CAEA,IAAIgC,EAAQ8F,EAAc7sC,EAAO8M,QAAU9M,EACvC4K,EAAU,IAAIiiB,IAElB,GAAc,MAAV7K,EAAgB,CAChBA,EAAS,GACT,IAAK,IAAIp7B,EAAI,EAAGA,EAAI+N,EAAEnL,OAAQ5C,IAAK,CAC/B,IAAIuC,EAAIwL,EAAE/N,GACV,GAAS,MAALuC,GAA0B,iBAALA,IAAkBsQ,OAAOszC,SAAS5jD,GAAK,CAC5DyjD,IACA7F,EAAKngD,GAAKof,EACV,QACJ,CAEA,IAAIgnC,EAAWpiC,EAAQqL,IAAI9sB,GAC3B,GAAuB,oBAAZ6jD,EAAyB,CAChC,IAAItnD,EAAIs8B,EAAOx4B,OACfohB,EAAQmG,IAAI5nB,EAAGzD,GACfs8B,EAAOh3B,KAAK7B,GACZ49C,EAAKngD,GAAKlB,CACd,MACIqhD,EAAKngD,GAAKomD,CAElB,CAGA,GAAIhrB,EAAOirB,OAAMt4C,GAAiB,iBAALA,IAAgB,CACzC,IAAIu4C,EAAYlrB,EAAO35B,QACvB25B,EAAO7R,OACPg9B,EAAY,CAAEpsC,IAAKf,EAAQgiB,OAAQkrB,GAAalrB,EACpD,MAAO,GAAIA,EAAOirB,OAAMt4C,GAAiB,iBAALA,IAAgB,CAChD,IAAIu4C,EAAYlrB,EAAO35B,QACvB25B,EAAO7R,MAAK,CAACpqB,EAAGE,IAAMF,EAAIE,IAC1BknD,EAAY,CAAEpsC,IAAKf,EAAQgiB,OAAQkrB,GAAalrB,EACpD,CAEJ,KAAO,CACH,IAAK,IAAIz5B,EAAI,EAAGA,EAAIy5B,EAAOx4B,OAAQjB,IAC/BqiB,EAAQmG,IAAIiR,EAAOz5B,GAAIA,GAG3B,IAAS3B,EAAI,EAAGA,EAAI+N,EAAEnL,OAAQ5C,IAAK,CAC/B,IAAIuC,EAAIwL,EAAE/N,GACNomD,EAAWpiC,EAAQqL,IAAI9sB,GACJ,oBAAZ6jD,GACPJ,IACA7F,EAAKngD,GAAKof,GAEV+gC,EAAKngD,GAAKomD,CAElB,CACJ,CAEJ,CAAE,MAAO7mD,GAIL,MAHI2gD,aAAwB/B,EAAAA,IACxB9lC,EAAAA,GAAW6nC,GAET3gD,CACV,CAEA,MAAO,CACH4a,IAAKf,EACLgiB,OAAQA,EAEhB,CAGO,SAASorB,EAAUz4C,GACtB,OAAOg4C,EAAgBh4C,EADSnD,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAExC,CAcO,SAAS67C,EAAiB14C,GACzBA,aAAaowC,EAAAA,KAEbpwC,EAAIA,EAAEmY,SAGV,IAAIwgC,EAAO,IAAIp9B,IAAIvb,GACf44C,EAAW7jD,MAAMumB,KAAKq9B,GAAMn9B,OAC5BvF,EAAU,CAAC,EAOf,OANA2iC,EAASn7C,SAAQ,CAACjJ,EAAGvC,KAAQgkB,EAAQzhB,GAAKvC,CAAC,IAE3C+N,EAAEvC,SAAQ,CAACjJ,EAAGvC,KACV+N,EAAE/N,GAAKgkB,EAAQzhB,EAAE,IAGdokD,CACX,CAmBO,SAASJ,EAAYx4C,EAAG64C,GAAwD,IAM/EZ,GANkC,OAAEv/C,EAAS,QAAO,YAAE2Y,GAAc,GAAIxU,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5EoZ,EAAU,IAAIiiB,IAClB,IAAK,IAAIjmC,EAAI,EAAGA,EAAI4mD,EAAUhkD,OAAQ5C,IAClCgkB,EAAQmG,IAAIy8B,EAAU5mD,GAAIA,GAI9B,GAAc,QAAVyG,EAAkB,CAClB,IAAIy/C,GAAS,EACbF,EAAUA,KACDE,IACDxmC,QAAQC,KAAM,wDAA0D/a,OAAOwa,GAAe,KAC9F8mC,GAAS,EACb,CAER,MAAO,GAAc,QAAVz/C,EACPu/C,EAAUA,WACP,IAAc,SAAVv/C,EAKP,MAAM,IAAIpD,MAAM,mBAAqBoD,EAAS,iCAJ9Cu/C,EAAUA,KACN,MAAM,IAAI3iD,MAAM,gEAAgE,CAIxF,CAEA,IAAIwjD,EAAY94C,EAAEqtB,OACd0rB,EAAa,IAAIhkD,MAAM+jD,EAAUjkD,QAErC,IAAS5C,EAAI,EAAGA,EAAI6mD,EAAUjkD,OAAQ5C,IAAK,CACvC,IAAIusB,EAAQvI,EAAQqL,IAAIw3B,EAAU7mD,IACd,oBAATusB,GACPy5B,IACAc,EAAW9mD,GAAKof,GAEhB0nC,EAAW9mD,GAAKusB,CAExB,CACAxe,EAAEqtB,OAASwrB,EAEX,IAAIr8C,EAASwD,EAAEoM,IACX5P,aAAkB4zC,EAAAA,KAElB5zC,EAASA,EAAO2b,SAEpB3b,EAAOiB,SAAQ,CAACjJ,EAAGvC,KACXuC,IAAM6c,IACN7U,EAAOvK,GAAK8mD,EAAWvkD,GAC3B,GAER,wEC/NO,SAASwkD,EAAYh5C,EAAGwiB,GAC3B,IAAIy2B,EACA9xC,EAEJ,IAEI,IADA8xC,EAAc3uC,EAAAA,GAAmBkY,EAAS,mBAC1B3tB,QAAUmL,EAAEkN,kBACxB,MAAM,IAAI5X,MAAM,iEAEpB,IAAIw9C,EAAMmG,EAAY9c,OAEtBh1B,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOg0C,aAAal5C,EAAE4K,OAAQkoC,GAAK,IAC7C9yC,EAAE1J,YAGV,CAAE,MAAM9E,GAEJ,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAW2uC,EACf,CAEA,OAAO9xC,CACX,mICjCAmB,EAAA,IAAAC,QAAAgoB,EAAA,IAAAhoB,QAIO,MAAM4wC,EAIT7iD,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA+mB,EAAA,CAAA9mB,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAI04B,EAAUtG,EAElB,CAKA3F,aAAAA,GACI,OAAO3a,EAAAA,EAAAA,GAAA9R,KAAI04B,GAAQ4jB,SACvB,CAKAjvB,YAAAA,GACI,OAAOvb,EAAAA,EAAAA,GAAA9R,KAAI04B,GAAQ6oB,SACvB,CAMA/4B,IAAAA,GACwB,QAAhB1W,EAAAA,EAAAA,GAAA9R,KAAI04B,KACJ8f,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAI04B,EAAU,MAGtB,CAGA,SAAI5wB,GACA,OAAAgK,EAAAA,EAAAA,GAAO9R,KAAI04B,EACf,EAkBG,SAAS8oB,EAAyBr5C,GAA2E,IAAxE,aAAEklB,EAAe,KAAI,cAAEZ,EAAgB,KAAI,YAAES,GAAc,GAAMloB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7G,IAAIwO,EACAlE,EAEJ,IACI,IAAIguC,EAEJ,GAAIn1C,aAAao1C,EAAAA,GAAe,CAC5BlwB,EAAellB,EAAEyhB,cACjB6C,EAAgBtkB,EAAEskB,gBAClB,IAAIvC,EAAM/hB,EAAE2oB,oBAAoB,CAAExP,MAAM,IACxCg8B,EAAOpzB,EAAIszB,UAEf,KAAO,CACH,GAAqB,OAAjBnwB,GAA2C,OAAlBZ,EACzB,MAAM,IAAIhvB,MAAM,6EAIpB,IADA+V,EAASf,EAAAA,GAAmBtK,EAAG,qBACpBnL,QAAUqwB,EAAeZ,EAChC,MAAM,IAAIhvB,MAAM,2EAGpB6/C,EAAO9pC,EAAO8wB,MAClB,CAEAh1B,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOo0C,qBAAqBnE,EAAMjwB,EAAcZ,EAAeS,IACzEo0B,EAGR,CAAE,MAAO3nD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWe,EACf,CAEA,OAAOlE,CACX,CAEA,IAAA4uC,EAAA,IAAAxtC,QAAA4oC,EAAA,IAAA5oC,QAIO,MAAMqtC,EAITt/C,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAusC,EAAA,CAAAtsC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIk+C,EAAOnjD,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,EAEpB,CAMA5tB,IAAAA,GACI,OAAOsN,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU90C,MACzB,CAKAioB,aAAAA,GACI,OAAO3a,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUgD,SACzB,CAGA,WAAI35C,GACA,OAAAmP,EAAAA,EAAAA,GAAO9R,KAAIs5C,EACf,CAmBA/lC,SAAAA,GAAkE,IAAxD,KAAEw3B,EAAO,KAAI,QAAE3jB,EAAU,KAAI,UAAEs6B,EAAY,MAAM18C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3D,IAKIsK,EAGIqyC,EACAC,EACAC,EAVJvgC,GAAiB,OAATypB,IAA8B,OAAZ3jB,IAAmC,OAAds6B,GACnD,GAAY,GAARpgC,GAAqB,GAARA,EACb,MAAM,IAAI7jB,MAAM,yEAKpB,GAAa,IAAT6jB,EAKA,IACIqgC,EAAWlvC,EAAAA,GAA2BzS,KAAKysB,iBAC3C,IAAI3zB,EAAIkH,KAAKwE,OACbo9C,EAAWnvC,EAAAA,GAA2B3Z,GACtC+oD,EAAYpvC,EAAAA,GAA6B3Z,IACzCgZ,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU/lC,UAAUouC,EAASrd,OAAQsd,EAAStd,OAAQud,EAAUvd,QAEpEh1B,EAAS,CACL,KAAQqyC,EAAS9lD,QACjB,QAAW+lD,EAAS/lD,QACpB,UAAagmD,EAAUhmD,QAE/B,CAAE,QACE4W,EAAAA,GAAWkvC,GACXlvC,EAAAA,GAAWmvC,GACXnvC,EAAAA,GAAWovC,EACf,MAGA/vC,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU/lC,UAAUw3B,EAAKzG,OAAQld,EAAQkd,OAAQod,EAAUpd,QAC/Dh1B,EAAS,CACL,KAAQy7B,EAAKzqB,QACb,QAAW8G,EAAQ9G,QACnB,UAAaohC,EAAUphC,SAI/B,OAAOhR,CACX,CAYA,kBAAOsE,CAAYm3B,EAAM3jB,EAASs6B,GAC9B,IAAIpyC,EACAqyC,EACAC,EACAC,EAEJ,IACIF,EAAWlvC,EAAAA,GAAmBs4B,EAAM,kBACpC6W,EAAWnvC,EAAAA,GAAmB2U,EAAS,kBACvCy6B,EAAYpvC,EAAAA,GAAmBivC,EAAW,oBAC1CpyC,EAASkpC,EAAAA,GACLnrC,GAAU,IAAIA,EAAOy0C,gBAAgB/W,EAAK/tC,OAAQ2kD,EAASrd,OAAQsd,EAAStd,OAAQud,EAAUvd,SAC9FyZ,EAGR,CAAE,MAAOpkD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWkvC,GACXlvC,EAAAA,GAAWmvC,GACXnvC,EAAAA,GAAWovC,EACf,CAEA,OAAOvyC,CACX,CAMAkZ,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIk+C,KACfrsC,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAcG,SAAS0E,EAAqB71C,EAAGxC,GAAoC,IAAjC,gBAAEs0C,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjEm1C,EAAW1nC,EAAAA,GAA4BwnC,GAC3C,OAAOzB,EAAAA,GACHnrC,GAAUA,EAAO00C,uBAAuB55C,EAAEL,MAAOnC,EAAGw0C,IACpD4D,EAER,4FChPO,SAASiE,EAAmB75C,EAAG+sB,GAA0G,IAAlG,OAAE1Y,GAAS,EAAI,OAAEhJ,EAAS,KAAI,WAAEyuC,EAAa,GAAE,UAAEC,EAAY,KAAI,gBAAEjI,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzI,IAAIs1C,EACA6H,EACJ,IAAIhI,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IACI,GAAMzmC,aAAkB+kC,EAAAA,IAGjB,GAAI/kC,EAAOxW,SAAWmL,EAAEkN,kBAC3B,MAAM,IAAI5X,MAAM,yEAHhB68C,EAAe7nC,EAAAA,GAA6BtK,EAAEkN,mBAC9C7B,EAAS8mC,EAKb6H,EAAY1vC,EAAAA,GAAmByiB,EAAQ,kBACtB,MAAbgtB,IACAA,GAAa,GAGjBE,EAAAA,IAAU/0C,GAAUA,EAAOg1C,qBAAqBl6C,EAAE4K,OAAQovC,EAAU7d,OAAQ9nB,EAAQylC,EAAYC,EAAW1uC,EAAO8wB,OAAQ6V,IAE9H,CAAE,MAAOxgD,GAEL,MADA8Y,EAAAA,GAAW6nC,GACL3gD,CAEV,CAAE,QACE8Y,EAAAA,GAAW0vC,EACf,CAEA,OAAO3uC,CACX,+BCxCO,SAAS8uC,EAAclvC,GAA0C,IAAhC,cAAE4pB,GAAgB,GAAOh4B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7Du9C,EAASnvC,EAASpW,OAClBwlD,EAAkBl+C,KAAKm+C,KAAKF,EAAS,GACrC93C,EAASi4C,IACTA,EAAQlrB,YAAc+qB,EACfG,GAOPC,EAAkB,IAAIj/B,IAC1B,IAAK,MAAM3qB,KAAKqa,EACI,iBAALra,GACP4pD,EAAgB10C,IAAIlV,GAI5B,IAAI6pD,EAAgB,EAChBC,EAAgB,EAChBC,EAAe,EACfC,EAAgB,EAChBC,EAAe,EACfC,EAAe,EACfC,EAAe,EACfC,EAAe,EAEfC,EAAe,EACfC,EAAe,EACfC,EAAc,EACdC,EAAc,EAEdC,EAAQxmB,EAAgB,OAAS,QACjCymB,EAAQzmB,EAAgB,QAAU,QAClChM,EAAY,GAGZ0yB,EAAU,EACd,IAAK,MAAMv7C,KAAKw6C,EACRx6C,GAAKA,EAAEuD,MAAM,0BACbg4C,IAIR,GAAIA,EAAS,CACT,IAAK,MAAMv7C,KAAKw6C,EACRx6C,IACIA,EAAEqQ,WAAW,QACboqC,IACOz6C,EAAEqQ,WAAW,WACpBqqC,IACO16C,EAAEqQ,WAAW,WACpBuqC,IACO56C,EAAEqQ,WAAW,WACpBwqC,IACO76C,EAAEqQ,WAAW,WACpB0qC,IACO/6C,EAAEqQ,WAAW,YACpB2qC,KAKZnyB,EAAUxyB,KAAK,CAAE04B,QAASssB,EAAM7oD,KAAM,UAAW68B,WAAYorB,IAC7D5xB,EAAUxyB,KAAK,CAAE04B,QAASusB,EAAM9oD,KAAM,UAAW68B,WAAYqrB,IAC7D7xB,EAAUxyB,KAAK,CAAE04B,QAAS,QAASv8B,KAAM,UAAW68B,WAAYurB,IAChE/xB,EAAUxyB,KAAK,CAAE04B,QAAS,OAAQv8B,KAAM,UAAW68B,WAAYwrB,IAC/DhyB,EAAUxyB,KAAK,CAAE04B,QAAS,OAAQv8B,KAAM,UAAW68B,WAAY0rB,IAC/DlyB,EAAUxyB,KAAK,CAAE04B,QAAS,OAAQv8B,KAAM,UAAW68B,WAAY2rB,IAG/D,IAAK,MAAMh7C,KAAK6oB,EACZ,GAAI7oB,EAAEqvB,YAAcgrB,EAChB,OAAO/3C,EAAOtC,EAG1B,CAKA,IAAK,MAAMA,KAAKw6C,GACRx6C,IAAKA,EAAEuD,MAAM,mBAAsBvD,EAAEuD,MAAM,wBAA2BvD,EAAEuD,MAAM,sBAAyBvD,EAAEuD,MAAM,gBAC/G03C,IAGR,CACI,IAAIV,EAAU,CAAExrB,QAASssB,EAAM7oD,KAAM,SAAU68B,WAAY4rB,GAC3D,GAAIV,EAAQlrB,YAAcgrB,EACtB,OAAO/3C,EAAOi4C,GAElB1xB,EAAUxyB,KAAKkkD,EACnB,CAGA,IAAK,MAAMv6C,KAAKw6C,EACRx6C,GAAKA,EAAEuD,MAAM,mBACb23C,IAGR,CACI,IAAIX,EAAU,CAAExrB,QAASusB,EAAM9oD,KAAM,SAAU68B,WAAY6rB,GAC3D,GAAIX,EAAQlrB,YAAcgrB,EACtB,OAAO/3C,EAAOi4C,GAElB1xB,EAAUxyB,KAAKkkD,EACnB,CAGA,IAAK,MAAMv6C,KAAKw6C,EACRx6C,GAAKA,EAAEuD,MAAM,mBACbo3C,IAGR,CACI,IAAIJ,EAAU,CAAExrB,QAAS,OAAQv8B,KAAM,UAAW68B,WAAYsrB,GAC9D,GAAIJ,EAAQlrB,YAAcgrB,EACtB,OAAO/3C,EAAOi4C,GAElB1xB,EAAUxyB,KAAKkkD,EACnB,CAGA,IAAK,MAAMv6C,KAAKw6C,EACRx6C,GAAKA,EAAEuD,MAAM,iBACbu3C,IAGR,CACI,IAAIP,EAAU,CAAExrB,QAAS,OAAQv8B,KAAM,UAAW68B,WAAYyrB,GAC9D,GAAIP,EAAQlrB,YAAcgrB,EACtB,OAAO/3C,EAAOi4C,GAElB1xB,EAAUxyB,KAAKkkD,EACnB,CAGA,IAAK,MAAMv6C,KAAKw6C,EACRx6C,GAAKA,EAAEuD,MAAM,uBACb43C,IAGR,CACI,IAAIZ,EAAU,CAAExrB,QAAS,OAAQv8B,KAAM,SAAU68B,WAAY8rB,GAC7D,GAAIZ,EAAQlrB,YAAcgrB,EACtB,OAAO/3C,EAAOi4C,GAElB1xB,EAAUxyB,KAAKkkD,EACnB,CAGA,IAAK,MAAMv6C,KAAKw6C,EACRx6C,GAAKA,EAAEuD,MAAM,yBACb63C,IAGR,CACI,IAAIb,EAAU,CAAExrB,QAAS,OAAQv8B,KAAM,SAAU68B,WAAY+rB,GAC7D,GAAIb,EAAQlrB,YAAcgrB,EACtB,OAAO/3C,EAAOi4C,GAElB1xB,EAAUxyB,KAAKkkD,EACnB,CAGA,IAAIiB,EAAU3yB,EAAU,GACxB,IAAK,IAAI52B,EAAI,EAAGA,EAAI42B,EAAUh0B,OAAQ5C,IAC9B42B,EAAU52B,GAAGo9B,WAAamsB,EAAQnsB,aAClCmsB,EAAU3yB,EAAU52B,IAI5B,OAAOqQ,EAAOk5C,EAClB,wFC3KO,SAASC,EAAmBC,EAAcC,EAAiBC,EAAgBC,GAAyE,IACnJC,EACAC,EACAC,EACAC,EAuCA90C,EACA+0C,GA5C4F,gBAAEpK,EAAkB,KAAI,aAAEqK,GAAe,GAAOt/C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAKhJm1C,EAAW1nC,EAAAA,GAA4BwnC,GAEvCsK,EAAS,KACTC,EAAeA,CAAC/nB,EAAW17B,EAAMy5C,KACjC,GAAc,OAAVA,GAAkB/d,EAAUz/B,SAAWw9C,EACvC,MAAM,IAAI/8C,MAAM,wDAA0DsD,EAAO,MAErF,OAAO07B,EAAUz/B,MAAM,EAGA,iBAAhB6mD,EACPA,EAAe,CAACA,GAEhBU,EAASC,EAAaX,EAAc,eAAgBU,GAG1B,iBAAnBT,EACPA,EAAkB,CAACA,GAEnBS,EAASC,EAAaV,EAAiB,kBAAmBS,GAGjC,iBAAlBR,EACPA,EAAiB,CAACA,GAElBQ,EAASC,EAAaT,EAAgB,iBAAkBQ,GAG7B,iBAApBP,EACPA,EAAmB,CAACA,GAEpBO,EAASC,EAAaR,EAAkB,mBAAoBO,GAGlD,MAAVA,IACAA,EAAS,GAMb,IACIN,EAAoBxxC,EAAAA,GAAmBoxC,EAAc,kBACrDK,EAAuBzxC,EAAAA,GAAmBqxC,EAAiB,kBAC3DK,EAAsB1xC,EAAAA,GAAmBsxC,EAAgB,kBACzDK,EAAwB3xC,EAAAA,GAAmBuxC,EAAkB,kBAC7DK,EAAc5xC,EAAAA,GAA6B8xC,GAE3CnC,EAAAA,IAAU/0C,GAAUA,EAAOo3C,oBACvBF,EAC4B,GAA5BN,EAAkBjnD,OAClBinD,EAAkB3f,OACY,GAA9B6f,EAAoBnnD,OACpBmnD,EAAoB7f,OACW,GAA/B4f,EAAqBlnD,OACrBknD,EAAqB5f,OACW,GAAhC8f,EAAsBpnD,OACtBonD,EAAsB9f,OACtBggB,EACAD,EAAY/f,OACZ6V,KAGJ7qC,EAAS+0C,EAAYxoD,OAEzB,CAAE,QACE4W,EAAAA,GAAWwxC,GACXxxC,EAAAA,GAAWyxC,GACXzxC,EAAAA,GAAW0xC,GACX1xC,EAAAA,GAAW2xC,GACX3xC,EAAAA,GAAW4xC,EACf,CAEA,OAAO/0C,CACX,0ICoEO,SAASo1C,EAAuCv8C,GAA+C,IAA5C,WAAEw8C,EAAa,KAAI,QAAEC,GAAU,GAAM5/C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/F,IAAI6/C,EACAv1C,EACAiF,EAAM,KAEV,IACIowC,EAAaG,EAAmBH,GACf,kBAANx8C,GACP08C,EAAWpyC,EAAAA,GAAmBtK,EAAG,kBACjCmH,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO03C,+BAA+BF,EAASvgB,OAAQugB,EAAS7nD,OAAQ2nD,EAAYC,IAC9FvM,EAAAA,IAGJ/oC,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO23C,6BAA6B78C,EAAGw8C,EAAYC,IAC7DvM,EAAAA,GAIJ/oC,EAAOspC,kBACPrkC,EAAMjF,EAAOwpC,aACbxpC,EAAOypC,iBAGf,CAAE,MAAMp/C,GAEJ,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWoyC,EACf,CAEA,MAAO,CAAE,OAAUv1C,EAAQ,QAAWiF,EAC1C,CAEA,SAASuwC,EAAmBH,GACxB,OAAmB,OAAfA,GACQ,EACDA,EACA,EAEA,CAEf,CAgBO,SAASM,EAA8B98C,GAA+B,IAA5B,WAAEw8C,EAAa,MAAM3/C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtE,IAAI6/C,EACA3mB,EAAQzrB,EAAAA,GAA6B,GACzC,IAAInD,EAAS,CAAC,EAEd,IACIq1C,EAAaG,EAAmBH,GACf,kBAANx8C,GACP08C,EAAWpyC,EAAAA,GAAmBtK,EAAG,kBACjCi6C,EAAAA,IAAU/0C,GAAUA,EAAO63C,sCAAsCL,EAASvgB,OAAQugB,EAAS7nD,OAAQ2nD,EAAYzmB,EAAMoG,WAErH8d,EAAAA,IAAU/0C,GAAUA,EAAO83C,oCAAoCh9C,EAAGw8C,EAAYzmB,EAAMoG,UAGxF,IAAI8gB,EAAOlnB,EAAM5d,QACjBhR,EAAOoT,KAAO0iC,EAAK,GACnB91C,EAAO9R,QAAU4nD,EAAK,GACtB91C,EAAOyV,MAAQqgC,EAAK,EAExB,CAAE,QACE3yC,EAAAA,GAAWoyC,GACXpyC,EAAAA,GAAWyrB,EACf,CAEA,OAAO5uB,CACX,CAgCO,SAAS+1C,EAA+B7kD,EAAMO,GAAkH,IAA5G,aAAEqa,GAAe,EAAI,QAAEwpC,GAAU,EAAI,UAAEU,EAAY,KAAI,aAAEC,EAAe,KAAI,UAAEC,EAAY,KAAWxgD,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChK,IACIsK,EADAiF,EAAM,KAEV,IAAIkxC,EAAUC,EAEd,IACI,IAAIC,EAAgC,OAAdL,EAClBM,EAAa,EAAGC,EAAa,EAC7BF,IACAF,EAAWhzC,EAAAA,GAAmB6yC,EAAW,kBACzCM,EAAaH,EAASnhB,OACtBuhB,EAAaJ,EAASzoD,QAG1B,IAAI8oD,EAAmC,OAAjBP,EAClBQ,EAAa,EAAGC,EAAa,EAC7BF,IACAJ,EAAWjzC,EAAAA,GAAmB8yC,EAAc,kBAC5CQ,EAAaL,EAASphB,OACtB0hB,EAAaN,EAAS1oD,SAG1BsS,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO44C,iBAAiBzlD,EAAMO,EAAMqa,EAAcwpC,EAASe,EAAgBC,EAAYC,EAAYC,EAAgBC,EAAYC,EAAYR,IACrJnN,EAAAA,IAGOO,kBACPrkC,EAAMjF,EAAOwpC,aACbxpC,EAAOypC,iBAGf,CAAE,MAAMp/C,GAEJ,MADA8Y,EAAAA,GAAWnD,GACL3V,CACV,CAAE,QACE8Y,EAAAA,GAAWgzC,GACXhzC,EAAAA,GAAWizC,EACf,CAEA,MAAO,CAAE,OAAUp2C,EAAQ,QAAWiF,EAC1C,CAiBO,SAAS2xC,EAAyB1lD,EAAMO,GAC3C,IAAIuO,EAAS,CAAC,EACVwrC,EAAMroC,EAAAA,GAA2B,GACrC,IACI2vC,EAAAA,IAAU/0C,GAAUA,EAAO84C,4BAA4B3lD,EAAMO,EAAM+5C,EAAIxW,UAEvE,IAAI8hB,EAAOtL,EAAIx6B,QACX8lC,EAAK,GAAK,EACV92C,EAAO7E,OAAS,QACT27C,EAAK,GAAK,EACjB92C,EAAO7E,OAAS,MAEhB6E,EAAO7E,OAAS,MAGpB6E,EAAOoT,KAAO0jC,EAAK,GACnB92C,EAAO9R,QAAU4oD,EAAK,GACtB92C,EAAO+2C,QAAUD,EAAK,GAAK,CAC/B,CAAE,QACEtL,EAAItyB,MACR,CACA,OAAOlZ,CACX,CAcO,SAASg3C,EAAoCrxC,EAAcI,EAAiBxF,GAAuC,IAA/B,aAAEuL,GAAe,GAAOpW,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnH,IAAI0oB,EACApe,EAEJ,IACIoe,EAAMjb,EAAAA,GAAmB5C,EAAQ,MACjCP,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOk5C,wBACbtxC,EACAI,EACAqY,EAAI4W,OACJ5W,EAAIjvB,YAAYyQ,UAAUrQ,QAAQ,OAAQ,IAC1Cuc,IAEJi9B,EAAAA,EAER,CAAE,MAAO1+C,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CACV,CAAE,QACE8Y,EAAAA,GAAWib,EACf,CAEA,OAAOpe,CACX,CAwBO,SAASk3C,EAA8Br+C,GAAkE,IAA/D,QAAE8K,GAAU,EAAK,aAAEmI,GAAe,EAAI,QAAEwpC,GAAU,GAAM5/C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzG,IACIsK,EADAiF,EAAM,KAGV,KACIjF,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOo5C,kCAAkCt+C,EAAEuzB,OAAOsf,GAAGC,IAAK7/B,EAAcwpC,EAAS3xC,IAC3FolC,EAAAA,IAGOO,kBACPrkC,EAAMjF,EAAOwpC,aACbxpC,EAAOypC,iBAGf,CAAE,MAAMp/C,GAEJ,MADA8Y,EAAAA,GAAWnD,GACL3V,CACV,CAEA,MAAO,CAAE,OAAU2V,EAAQ,QAAWiF,EAC1C,gFC7bO,SAASmyC,EAAwBh8B,EAASxB,EAAOoK,GACpD,IAAIqzB,EACAr3C,EAEJ,IACI,IAAIs3C,EAAO,EACPC,GAAa,EAEjB,GAAc,OAAV39B,EAAgB,CAEhB,IADAy9B,EAAal0C,EAAAA,GAAmByW,EAAO,mBACxBlsB,QAAU0tB,EAAQ+B,gBAC7B,MAAM,IAAIhvB,MAAM,uEAEpBopD,GAAa,EACbD,EAAOD,EAAWriB,MACtB,CAEAh1B,EAASgkB,EAAI5I,EAASm8B,EAAYD,EAEtC,CAAE,MAAOjtD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWk0C,EACf,CAEA,OAAOr3C,CACX,CAEO,SAASsf,EAAYk4B,EAAYp8B,EAASxB,EAAO1V,GACpD,IAAImzC,EACAI,EACAz3C,EAEJ,IACI,IAAIs3C,EAAO,EACPC,GAAa,EAEjB,GAAc,OAAV39B,EAAgB,CAEhB,IADAy9B,EAAal0C,EAAAA,GAAmByW,EAAO,mBACxBlsB,QAAU0tB,EAAQ+B,gBAC7B,MAAM,IAAIhvB,MAAM,uEAEpBopD,GAAa,EACbD,EAAOD,EAAWriB,MACtB,CAEA,IAAI0iB,EACJ,GAAc,MAAVxzC,EACAuzC,EAAWt0C,EAAAA,GAA2BiY,EAAQ+B,iBAC9Cu6B,EAAOD,EAASziB,WACb,CACH,GAAI9wB,EAAOxW,QAAU0tB,EAAQ+B,gBACzB,MAAM,IAAIhvB,MAAM,wEAEpBupD,EAAOxzC,EAAO8wB,MAClB,CAEA8d,EAAAA,IAAU/0C,GAAUy5C,EAAWhqD,OAAO4tB,EAAQ/nB,QAAQq4C,GAAGC,IAAK4L,EAAYD,EAAMI,KAE5E13C,EADU,MAAVkE,EACSuzC,EAASlrD,QAET2X,EAAO8M,OAGxB,CAAE,MAAO3mB,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWk0C,GACXl0C,EAAAA,GAAWs0C,EACf,CAEA,OAAOz3C,CACX,8EC3EO,SAAS23C,EAAwB9+C,EAAG+jB,EAASoH,GAChD,IAAIhkB,EAEA43C,EADAC,EAAc,GAGlB,IACI,IAAIC,EAAW,EACXC,EAAgB,EAEpB,GAAe,MAAXn7B,EAAiB,CACjBk7B,EAAWl7B,EAAQlvB,OAEnBqqD,GADAH,EAAiBz0C,EAAAA,GAA+B20C,IACjB9iB,OAC/B,IAAIgjB,EAAaJ,EAAe5mC,QAEhC,IAAK,IAAIlmB,EAAI,EAAGA,EAAIgtD,EAAUhtD,IAAK,CAG/B,IAAIue,EAAUlG,EAAAA,GAAmByZ,EAAQ9xB,GAAI,kBAC7C,GAAIue,EAAQ3b,QAAUmL,EAAE8M,eACpB,MAAM,IAAIxX,MAAM,wEAEpB0pD,EAAY3oD,KAAKma,GACjB2uC,EAAWltD,GAAK2gD,OAAOpiC,EAAQ2rB,OACnC,CACJ,CAEAh1B,EAASgkB,EAAInrB,EAAE4K,OAAQq0C,EAAUC,EAErC,CAAE,MAAO1tD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWy0C,GACX,IAAK,MAAMvqD,KAAKwqD,EACZ10C,EAAAA,GAAW9V,EAEnB,CAEA,OAAO2S,CACX,sEC3CO,SAASi4C,EAAe/zC,EAAQw3B,GACnC,IAAIl3B,EAAM,IAAIC,YACVtE,EAAQ,GACR+qC,EAAQ,EACZ,IAAK,MAAMz+C,KAAKivC,EAAS,CACrB,IAAI1d,EAAO9Z,EAAO3X,MAAM2+C,EAAOA,EAAQz+C,GACvC0T,EAAMjR,KAAKsV,EAAIE,OAAOsZ,IACtBktB,GAASz+C,CACb,CACA,OAAO0T,CACX,CAEO,SAAS+3C,EAAer/C,GAC3B,IAAIqL,EACAw3B,EAEJ,IAAK,MAAMruC,KAAKwL,EACZ,GAAkB,iBAALxL,EACT,MAAM,IAAIc,MAAM,kEAIxB,IACIutC,EAAUv4B,EAAAA,GAA2BtK,EAAEnL,QACvC,IAAIyqD,EAAczc,EAAQ1qB,QAEtBtT,EAAQ,EACZ,MAAM06C,EAAM,IAAIj0C,YAChB,IAAI6E,EAAW,IAAIpb,MAAMiL,EAAEnL,QAE3BmL,EAAEvC,SAAQ,CAACjJ,EAAGvC,KACV,IAAIT,EAAI+tD,EAAIh0C,OAAO/W,GACnB8qD,EAAYrtD,GAAKT,EAAEqD,OACnBsb,EAASle,GAAKT,EACdqT,GAASrT,EAAEqD,MAAM,IAGrBwW,EAASf,EAAAA,GAA2BzF,GACpC,IAAI26C,EAAan0C,EAAO8M,QACxBtT,EAAQ,EAERsL,EAAS1S,SAAQjJ,IACbgrD,EAAWpjC,IAAI5nB,EAAGqQ,GAClBA,GAASrQ,EAAEK,MAAM,GAEzB,CAAE,MAAOrD,GAGL,MAFA8Y,EAAAA,GAAWe,GACXf,EAAAA,GAAWu4B,GACLrxC,CACV,CAEA,MAAO,CAACqxC,EAASx3B,EACrB,mLC5CA/C,EAAA,IAAAC,QAAAk3C,EAAA,IAAAl3C,QAIA,MAAMm3C,EAIFppD,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAi2C,EAAA,CAAAh2C,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAI4nD,EAAcx1B,EAEtB,CAGA,aAAI8vB,GACA,OAAApwC,EAAAA,EAAAA,GAAO9R,KAAI4nD,EACf,CAKAE,eAAAA,GACI,OAAOh2C,EAAAA,EAAAA,GAAA9R,KAAI4nD,GAAYG,aAC3B,CAKA/D,gBAAAA,GACI,OAAOlyC,EAAAA,EAAAA,GAAA9R,KAAI4nD,GAAYI,cAC3B,CAKAC,cAAAA,GACI,OAAOn2C,EAAAA,EAAAA,GAAA9R,KAAI4nD,GAAYM,YAC3B,CAMA1/B,IAAAA,GAC4B,QAApB1W,EAAAA,EAAAA,GAAA9R,KAAI4nD,KACJpP,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAI4nD,EAAc,MAE1B,EAuBG,SAASO,EAAiCC,EAAO11B,EAAS21B,GAC7D,IAAI/4C,EACAg5C,EACAC,EACAC,EAEJ,IACIF,EAAS71C,EAAAA,GAAmB21C,EAAO,kBACnCG,EAAU91C,EAAAA,GAAmBigB,EAAS,kBACtC81B,EAAS/1C,EAAAA,GAAmB41C,EAAQ,kBACpC/4C,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOo7C,wBAAwBD,EAAOlkB,OAAQkkB,EAAOxrD,OAAQurD,EAAQjkB,OAAQikB,EAAQvrD,OAAQsrD,EAAOhkB,OAAQgkB,EAAOtrD,SAC7H6qD,EAGR,CAAE,MAAOluD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAW61C,GACX71C,EAAAA,GAAW81C,GACX91C,EAAAA,GAAW+1C,EACf,CAEA,OAAOl5C,CACX,CAEA,IAAA4uC,EAAA,IAAAxtC,QAAAg4C,EAAA,IAAAh4C,QAIA,MAAMi4C,EAIFlqD,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAusC,EAAA,CAAAtsC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA+2C,EAAA,CAAA92C,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIk+C,EAAOnjD,IACX8W,EAAAA,EAAAA,GAAA7R,KAAI0oD,EAAct2B,EAEtB,CAGA,aAAI8vB,GACA,OAAApwC,EAAAA,EAAAA,GAAO9R,KAAI0oD,EACf,CAKAE,cAAAA,GACI,OAAO92C,EAAAA,EAAAA,GAAA9R,KAAI0oD,GAAYG,iBAC3B,CAMArgC,IAAAA,GAC4B,QAApB1W,EAAAA,EAAAA,GAAA9R,KAAI0oD,KACJlQ,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIk+C,KACfrsC,EAAAA,EAAAA,GAAA7R,KAAI0oD,EAAc,MAE1B,EAGJ,SAASI,EAAkB11C,EAAU21C,GACjC,IAAIC,EAAoB,IAAI3oB,IAK5B,IAAK,IAAIjmC,EAAI,EAAGA,EAAIgZ,EAASpW,OAAQ5C,IAAK,CACtC,IAAIW,EAAKqY,EAAShZ,GACP,OAAPW,IACKiuD,EAAkBl7C,IAAI/S,IACvBiuD,EAAkBzkC,IAAIxpB,EAAIX,IAGlC2uD,EAAS3uD,GAAKA,CAClB,CAEA,MAAO,CAAEke,SAAU0wC,EAAmB3tC,QAASjI,EAASpW,OAC5D,CAEA,SAASisD,EAAiB71C,EAAUzE,EAAUo6C,GAC1C,IAAIG,EAAO,IAAIxlC,IACXa,EAAMA,CAACxpB,EAAI+M,KACX,IAAI6e,EAAQhY,EAAS2J,SAASmR,IAAI1uB,GAClC,MAAqB,qBAAV4rB,IACFuiC,EAAKp7C,IAAI6Y,KACVoiC,EAASjhD,GAAS6e,EAClBuiC,EAAKj7C,IAAI0Y,IACF,EAGH,EAGZtL,EAAU1M,EAAS0M,QACvB,IAAK,IAAIjhB,EAAI,EAAGA,EAAIgZ,EAASpW,OAAQ5C,IAAK,CACtC,IAAIuC,EAAIyW,EAAShZ,GACbusB,GAAQ,EAEZ,GAAU,OAANhqB,EACA,GAAIA,aAAaO,OACb,IAAK,MAAMyJ,KAAKhK,EACZ,GAAI4nB,EAAI5d,EAAGvM,GAAI,CACXusB,GAAQ,EACR,KACJ,OAGJA,EAAQpC,EAAI5nB,EAAGvC,GAKlBusB,IACDoiC,EAAS3uD,GAAKihB,IACZA,EAEV,CAGJ,CA4BO,SAAS8tC,EAAuB/1C,EAAUiE,EAAQ+xC,GAA8D,IAA3C,IAAEC,EAAM,GAAE,gBAAEpP,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChH,IAAIskD,EACAC,EACAj6C,EACJ,IAAI6qC,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IACI,IAAIuP,EAAQp2C,EAASpW,OAGrB,GAFAssD,EAAgB72C,EAAAA,GAA2B+2C,GAC3CD,EAAgB92C,EAAAA,GAA2B4E,EAAO2sC,oBAC9CoF,EAAkBpsD,QAAUusD,EAAcvsD,OAC1C,MAAM,IAAIS,MAAM,0FAIpBwrD,EAAiBG,EADFN,EAAkB11C,EAAUk2C,EAAchpC,SACXipC,EAAcjpC,UAE5DhR,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOo8C,yBAAyBD,EAAOF,EAAchlB,OAAQjtB,EAAO6qC,UAAWqH,EAAcjlB,OAAQ+kB,EAAKlP,IACpHwO,IAGGe,yBAA2BF,CAEtC,CAAE,MAAO7vD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAW62C,GACX72C,EAAAA,GAAW82C,EACf,CAEA,OAAOj6C,CACX,CAKA,IAAA0vC,EAAA,IAAAtuC,QAAA4oC,EAAA,IAAA5oC,QAAAi5C,EAAA,IAAAj5C,QAAAk5C,EAAA,IAAAl5C,QAIA,MAAMm5C,EAMFprD,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAqtC,EAAA,CAAAptC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAg4C,EAAA,CAAA/3C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAi4C,EAAA,CAAAh4C,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIg/C,EAAOjkD,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,EAEpB,CAKA61B,cAAAA,GACI,OAAOn2C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU4O,YACzB,CAKAz7B,aAAAA,GACI,OAAO3a,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUyO,aACzB,CASA+B,eAAAA,GAAsC,IAAtB,KAAExoC,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/B,OAAOyN,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUyQ,WAAYzoC,EACxD,CAaA0oC,aAAAA,CAAc5vD,GAAwC,IAArC,KAAEknB,GAAO,EAAI,OAAE9N,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/C,GAAc,MAAVwO,EAKA,MAJgC,oBAA5B1B,EAAAA,EAAAA,GAAO9R,KAAI2pD,KACX93C,EAAAA,EAAAA,GAAA7R,KAAI2pD,EAAgBl3C,EAAAA,IAA6BX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU4O,gBAEnEp2C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU2Q,sBAAsB7vD,GAAG0X,EAAAA,EAAAA,GAAA9R,KAAI2pD,GAAcrlB,QAClD7xB,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAI2pD,GAAcrpC,QAASgB,GAErD,GAAI9N,EAAOxW,UAAW8U,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU4O,aAChC,MAAM,IAAIzqD,MAAM,wDAGpB,OADAqU,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU2Q,sBAAsB7vD,EAAGoZ,EAAO8wB,QACvC9wB,CAEf,CAaA02C,cAAAA,CAAe9vD,GAAwC,IAArC,KAAEknB,GAAO,EAAI,OAAE9N,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChD,GAAc,MAAVwO,EAKA,MAJiC,oBAA7B1B,EAAAA,EAAAA,GAAO9R,KAAI4pD,KACX/3C,EAAAA,EAAAA,GAAA7R,KAAI4pD,EAAiBn3C,EAAAA,IAA6BX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUyO,iBAEpEj2C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU6Q,qBAAqB/vD,GAAG0X,EAAAA,EAAAA,GAAA9R,KAAI4pD,GAAetlB,QAClD7xB,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAI4pD,GAAetpC,QAASgB,GAEtD,GAAI9N,EAAOxW,UAAW8U,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUyO,cAChC,MAAM,IAAItqD,MAAM,uDAGpB,OADAqU,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU6Q,qBAAqB/vD,EAAGoZ,EAAO8wB,QACtC7xB,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAI4pD,GAAetpC,QAASgB,EAE9D,CASA8oC,eAAAA,GAAsC,IAAtB,KAAE9oC,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/B,OAAOyN,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU+Q,YAAa/oC,EACzD,CAMAkH,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIg/C,KACfntC,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAEhB7mC,EAAAA,IAAUX,EAAAA,EAAAA,GAAC9R,KAAI4pD,IACfn3C,EAAAA,IAAUX,EAAAA,EAAAA,GAAC9R,KAAI2pD,IAEvB,EAGJ,SAASW,EAAYniD,EAAGuhD,EAA0B1F,EAAkBv3B,EAAewgB,EAAKpoB,GACpF,IAEI0lC,EAFAj7C,EAAS,KAIb,IACI,IAAI3K,EACJ,GAAIwD,aAAakwC,EAAAA,EACb1zC,EAASwD,EAAE4K,WACR,MAAI5K,aAAaowC,EAAAA,IAIpB,MAAM,IAAI96C,MAAM,wBAFhBkH,GADA4lD,EAAU90B,EAAAA,GAAyCuuB,EAAkBv3B,EAAetkB,EAAG,CAAEiT,cAAc,KACtFrI,MAGrB,CAEA,GAAIpO,EAAOuL,QAAUw5C,EACjB,MAAM,IAAIjsD,MAAM,gFAAkFonB,EAAM,KAG5GvV,EAAS29B,EAAItoC,EAEjB,CAAE,QACE8N,EAAAA,GArBA61C,WAsBA71C,EAAAA,GAAW83C,EACf,CAEA,OAAOj7C,CACX,CAiBO,SAASk7C,EAAWriD,EAAG+5C,GAA2G,IAAhG,iBAAE8B,EAAmB,KAAI,cAAEv3B,EAAgB,KAAI,SAAEg+B,EAAW,GAAG,gBAAExQ,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9Hm1C,EAAW1nC,EAAAA,GAA4BwnC,GAI3C,OAAOqQ,EAAYniD,EAAG+5C,EAAUwH,yBAA0B1F,EAAkBv3B,GAHlEwgB,CAACtoC,EAAQs2C,IACRzC,EAAAA,GAAQnrC,GAAUA,EAAOq9C,aAAa/lD,EAAQu9C,EAAUA,UAAWuI,EAAUtQ,IAAW0P,IAEH,YACpG,CAKA,IAAAnK,EAAA,IAAAhvC,QAAAi6C,EAAA,IAAAj6C,QAIA,MAAMk6C,EAIFnsD,WAAAA,CAAY1D,EAAIq3B,IAAKzgB,EAAAA,EAAAA,GAAA,KAAA+tC,EAAA,CAAA9tC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAg5C,EAAA,CAAA/4C,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAI0/C,EAAO3kD,IACX8W,EAAAA,EAAAA,GAAA7R,KAAI2qD,EAAev4B,EAEvB,CAGA,cAAIy4B,GACA,OAAA/4C,EAAAA,EAAAA,GAAO9R,KAAI2qD,EACf,CAKAG,kBAAAA,GACI,OAAOh5C,EAAAA,EAAAA,GAAA9R,KAAI2qD,GAAaI,gBAC5B,CAMAviC,IAAAA,GAC6B,QAArB1W,EAAAA,EAAAA,GAAA9R,KAAI2qD,KACJnS,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAI0/C,KACf7tC,EAAAA,EAAAA,GAAA7R,KAAI2qD,EAAe,MAE3B,EA0BG,SAASK,EAA4B53C,EAAUiE,EAAQ+xC,EAAmB6B,GAAwC,IACjHC,EACAC,EACAC,EACAC,EACA/7C,GALgF,gBAAE2qC,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAM9Gm1C,EAAW1nC,EAAAA,GAA4BwnC,GAGvCqR,EAAQj0C,EAAOra,OACnB,GAAIosD,EAAkBpsD,QAAUsuD,EAC5B,MAAM,IAAI7tD,MAAM,iEAEpB,GAAIwtD,EAAMjuD,QAAUsuD,EAChB,MAAM,IAAI7tD,MAAM,qDAEpB,IAAK,IAAIrD,EAAI,EAAGA,EAAIkxD,EAAOlxD,IACvB,GAAIid,EAAOjd,GAAG4pD,oBAAsBoF,EAAkBhvD,GAAG4C,OACrD,MAAM,IAAIS,MAAM,8GAIxB,IAAI8tD,EAAU,IAAIruD,MAAMouD,GACxB,IACIJ,EAASz4C,EAAAA,GAA2BW,EAASpW,QAC7C,IAAI2R,EAAWm6C,EAAkB11C,EAAU83C,EAAO5qC,SAElD6qC,EAAc14C,EAAAA,GAA+B64C,GAC7C,IAAIE,EAAML,EAAY7qC,QACtB,IAASlmB,EAAI,EAAGA,EAAIkxD,EAAOlxD,IACvBoxD,EAAIpxD,GAAK2gD,OAAO1jC,EAAOjd,GAAG8nD,UAAUlH,GAAGC,KAG3CmQ,EAAW34C,EAAAA,GAA+B64C,GAC1C,IAAIG,EAAML,EAAS9qC,QACnB,IAASlmB,EAAI,EAAGA,EAAIkxD,EAAOlxD,IAAK,CAC5B,IAAIue,EAAUywC,EAAkBhvD,GAChCmxD,EAAQnxD,GAAKqY,EAAAA,GAA2BkG,EAAQ3b,QAChDisD,EAAiBtwC,EAAShK,EAAU48C,EAAQnxD,GAAGkmB,SAC/CmrC,EAAIrxD,GAAK2gD,OAAOwQ,EAAQnxD,GAAGkqC,OAC/B,CAEA+mB,EAAa54C,EAAAA,GAA+B64C,GAC5C,IAAII,EAAML,EAAW/qC,QACrB,IAASlmB,EAAI,EAAGA,EAAIkxD,EAAOlxD,IACvBsxD,EAAItxD,GAAK2gD,OAAOkQ,EAAM7wD,GAAG8nD,UAAUlH,GAAGC,KAG1C3rC,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOs+C,8BACbv4C,EAASpW,OACTkuD,EAAO5mB,OACPgnB,EACAH,EAAY7mB,OACZ8mB,EAAS9mB,OACT+mB,EAAW/mB,OACX6V,IAEJyQ,GAGJt7C,EAAOo6C,yBAA2Bt2C,EAASpW,MAE/C,CAAE,MAAOrD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWy4C,GACXz4C,EAAAA,GAAW04C,GACX14C,EAAAA,GAAW44C,GACX54C,EAAAA,GAAW24C,GACX,IAAK,MAAMjjD,KAAKojD,EACZ94C,EAAAA,GAAWtK,EAEnB,CAEA,OAAOmH,CACX,CAEA,IAAA2vC,EAAA,IAAAvuC,QAIA,MAAMk7C,EAGFntD,WAAAA,CAAY2zB,IAAKzgB,EAAAA,EAAAA,GAAA,KAAAstC,EAAA,CAAArtC,UAAA,EAAAxD,WAAA,KACbyD,EAAAA,EAAAA,GAAA7R,KAAIi/C,EAAY7sB,EAEpB,CAKA04B,kBAAAA,GACI,OAAOh5C,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAUgJ,gBACzB,CAKAx7B,aAAAA,GACI,OAAO3a,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAUxyB,eACzB,CASAo/B,mBAAAA,GAA0C,IAAtB,KAAEvqC,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnC,OAAOyN,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAU6K,kBAAmBxoC,EAC/D,CAaA0oC,aAAAA,CAAc5vD,GAAwC,IAArC,KAAEknB,GAAO,EAAI,OAAE9N,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/C,OAAO8M,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAU+K,cAAc5vD,EAAG,CAAEknB,OAAM9N,UAClD,CAaAs4C,kBAAAA,CAAmB1xD,GAAwC,IAArC,KAAEknB,GAAO,EAAI,OAAE9N,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,OAAO8M,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAUiL,eAAe9vD,EAAG,CAAEknB,OAAM9N,UACnD,CASA42C,eAAAA,GAAsC,IAAtB,KAAE9oC,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/B,OAAOyN,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAUmL,kBAAmB9oC,EAC/D,CAMAkH,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIi/C,MACJntC,EAAAA,EAAAA,GAAA9R,KAAIi/C,GAAUz2B,QACd3W,EAAAA,EAAAA,GAAA7R,KAAIi/C,EAAY,MAExB,EAqBG,SAAS8M,EAAoB5jD,EAAG6jD,EAAUnB,GAA4G,IAMrJv7C,EACA28C,GAPqD,iBAAEjI,EAAmB,KAAI,cAAEv3B,EAAgB,KAAI,SAAEg+B,EAAW,GAAG,gBAAExQ,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClJsmD,EAAQT,EAAWC,qBACvB,GAAIkB,EAAShvD,QAAUsuD,EACnB,MAAM,IAAI7tD,MAAM,oFAKpB,IAAIyuD,EAAgB,IAAIhvD,MAAMouD,GAC1BnR,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IACIgS,EAAQx5C,EAAAA,GAA+B64C,GACvC,IAAIa,EAAYF,EAAM3rC,QACtB,IAAK,IAAIlmB,EAAI,EAAGA,EAAI4xD,EAAShvD,OAAQ5C,IAAK,CACtC,IAAIue,EAAUqzC,EAAS5xD,GAEnBue,aAAmBkxC,IACnBlxC,EAAUA,EAAQmxC,gBAAgB,CAAExoC,KAAM,UAG9C,IAAI8qC,GAAO,EAQX,GAPIjkD,aAAakwC,EAAAA,EACT1/B,EAAQ3b,QAAUmL,EAAEkN,oBACpB+2C,GAAO,GAEJzzC,EAAQ3b,QAAUyvB,IACzB2/B,GAAO,GAEPA,EACA,MAAM,IAAI3uD,MAAM,oFAGpByuD,EAAc9xD,GAAKqY,EAAAA,GAAmBkG,EAAS,kBAC/CwzC,EAAU/xD,GAAK2gD,OAAOmR,EAAc9xD,GAAGkqC,OAC3C,CAEA,IAAI2I,EAAMA,CAACtoC,EAAQs2C,IACRzC,EAAAA,GAAQnrC,GAAUA,EAAOg/C,mBAAmB1nD,EAAQwnD,EAAU7nB,OAAQumB,EAAWA,WAAYJ,EAAUtQ,IAAW0P,GAE7Hv6C,EAASg7C,EAAYniD,EAAG0iD,EAAWnB,yBAA0B1F,EAAkBv3B,EAAewgB,EAAK,aAEvG,CAAE,QACEx6B,EAAAA,GAAWw5C,GACX,IAAK,MAAM9jD,KAAK+jD,EACZz5C,EAAAA,GAAWtK,EAEnB,CAEA,OAAO,IAAIyjD,EAA2Bt8C,EAC1C,oGCltBO,SAASg9C,EAAcnkD,GAAiF,IAA9E,YAAEoU,EAAc,KAAI,OAAEC,GAAS,EAAI,MAAE0M,EAAQ,KAAI,WAAErI,GAAa,GAAO7b,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxG,IAAIunD,EACA5F,EACAr3C,EAEJ,IACI,IAAIk9C,EAAQ,EACRC,GAAS,EAEb,GAAoB,OAAhBlwC,EAAsB,CAEtB,IADAgwC,EAAU95C,EAAAA,GAAmB8J,EAAa,qBAC9Bvf,QAAUmL,EAAEkN,kBACpB,MAAM,IAAI5X,MAAM,qEAEpB+uD,EAAQD,EAAQjoB,OAChBmoB,GAAS,CACb,CAEA,IAAI7F,EAAO,EACPC,GAAa,EAEjB,GAAc,OAAV39B,EAAgB,CAEhB,IADAy9B,EAAal0C,EAAAA,GAAmByW,EAAO,mBACxBlsB,QAAUmL,EAAEkN,kBACvB,MAAM,IAAI5X,MAAM,mEAEpBopD,GAAa,EACbD,EAAOD,EAAWriB,MACtB,CAEAh1B,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOq/C,gBAAgBvkD,EAAE4K,OAAQ05C,EAAQD,EAAO3F,EAAYD,EAAMpqC,EAAQqE,IACpF1Y,EAAE1J,YAGV,CAAE,MAAO9E,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAW85C,GACX95C,EAAAA,GAAWk0C,EACf,CAEA,OAAOr3C,CACX,CAgBO,SAASq9C,EAAkBpwC,GAAmD,IAC7E+9B,EACAqM,GAFuC,MAAEz9B,EAAQ,KAAI,OAAE1V,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAI9E,IACmB,OAAXwO,IACA8mC,EAAe7nC,EAAAA,GAA6B8J,EAAYvf,QACxDwW,EAAS8mC,GAGT9mC,IAAW+I,GACX/I,EAAO+Q,IAAIhI,aAAuBg8B,EAAAA,GAAeh8B,EAAY+D,QAAU/D,GAG3E,IAAIqqC,EAAO,EACPC,GAAa,EAEjB,GAAc,OAAV39B,EAAgB,CAEhB,GADAy9B,EAAal0C,EAAAA,GAAmByW,EAAO,kBACnCy9B,EAAW3pD,QAAUwW,EAAOxW,OAC5B,MAAM,IAAIS,MAAM,4DAEpBopD,GAAa,EACbD,EAAOD,EAAWriB,MACtB,CAEA8d,EAAAA,IAAU/0C,GAAUA,EAAOu/C,oBAAoBp5C,EAAOxW,OAAQwW,EAAO8wB,OAAQuiB,EAAYD,IAE7F,CAAE,MAAMjtD,GAEJ,MADA8Y,EAAAA,GAAW6nC,GACL3gD,CAEV,CAAE,QACE8Y,EAAAA,GAAWk0C,EACf,CAEA,OAAOnzC,CACX,kFCvFO,SAASq5C,EAAW1kD,EAAG+gB,GAWtB,IAEAoxB,EACAwS,EACAnG,GAf6B,OACjCnzC,EAAS,KAAI,aACb6Z,EAAe,KAAI,cACnBZ,EAAgB,KAAI,EACpB9mB,EAAI,GAAE,aACN2mB,EAAe,EAAC,iBAChBygC,EAAmB,EAAC,WACpBC,EAAa,IAAI,gBACjBC,EAAkB,UAAS,YAC3B//B,GAAc,EAAI,gBAClB+sB,EAAkB,MACrBj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAKGm1C,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IACI,GAAI9xC,aAAao1C,EAAAA,GACblwB,EAAellB,EAAEyhB,cACjB6C,EAAgBtkB,EAAEskB,gBAClBtkB,EAAIA,EAAE2oB,oBAAoB,CAAExP,KAAM,aAC/B,CACH,GAAqB,OAAjB+L,GAA2C,OAAlBZ,GAA0BY,EAAeZ,IAAkBtkB,EAAEnL,OACtF,MAAM,IAAIS,MAAM,oFAEpBqvD,EAASr6C,EAAAA,GAAmBtK,EAAG,oBAC/BA,EAAI2kD,CACR,CAEA,GAAc,MAAVt5C,EACA8mC,EAAe7nC,EAAAA,GAA6Bga,EAAgBY,GAC5D7Z,EAAS8mC,OACN,GAAI9mC,EAAOxW,SAAWmL,EAAEnL,OAC3B,MAAM,IAAIS,MAAM,yFAIpB,GADAkpD,EAAal0C,EAAAA,GAAmByW,EAAO,kBACnCy9B,EAAW3pD,QAAUyvB,EACrB,MAAM,IAAIhvB,MAAM,iEAGpB2kD,EAAAA,IAAU/0C,GAAUA,EAAO6/C,YACvB7/B,EACAZ,EACAtkB,EAAEm8B,OACFqiB,EAAWriB,OACX9wB,EAAO8wB,OACP3+B,EACA2mB,EACAygC,EACAC,EACAC,EACA//B,EACAitB,IAGR,CAAE,MAAOxgD,GAEL,MADA8Y,EAAAA,GAAW6nC,GACL3gD,CAEV,CAAE,QACE8Y,EAAAA,GAAWq6C,EACf,CAEA,OAAOt5C,CACX,0HCvGA/C,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAAy8C,EAAA,IAAAz8C,QAAA08C,EAAA,IAAA18C,QAAA28C,EAAA,IAAA38C,QAAA48C,EAAA,IAAA58C,QAAA68C,EAAA,IAAAt8C,QAIO,MAAMu8C,EAST/uD,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO+I,EAAAA,EAAAA,GAAA,KAAAw/C,IAAA57C,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAw7C,EAAA,CAAAv7C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAy7C,EAAA,CAAAx7C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA07C,EAAA,CAAAz7C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA27C,EAAA,CAAA17C,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAImtD,EAAgB16C,EAAAA,GAAiBzS,KAAKytD,iBAAmB,EAAGpR,KAChExqC,EAAAA,EAAAA,GAAA7R,KAAIotD,EAAoB36C,EAAAA,GAAiBzS,KAAKytD,iBAAmB,EAAGpR,KACpExqC,EAAAA,EAAAA,GAAA7R,KAAIqtD,EAAiB56C,EAAAA,GAAiBzS,KAAKytD,iBAAmB,EAAGpR,KACjExqC,EAAAA,EAAAA,GAAA7R,KAAIstD,EAAoB76C,EAAAA,GAAiBzS,KAAKytD,iBAAmB,EAAGpR,GAGxE,CAkCA9d,KAAAA,GAA4D,IAAtD,MAAErV,EAAQ,KAAI,KAAE5H,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrD,OAAA4I,EAAAA,EAAAA,GAAO5N,KAAIutD,EAAAG,GAAAvrD,KAAJnC,KAAckpB,EAAO5H,EAAMq7B,GAAQ7qC,EAAAA,EAAAA,GAAE9R,KAAImtD,GAAe,QACnE,CAiBAQ,SAAAA,GAAgE,IAAtD,MAAEzkC,EAAQ,KAAI,KAAE5H,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzD,OAAA4I,EAAAA,EAAAA,GAAO5N,KAAIutD,EAAAG,GAAAvrD,KAAJnC,KAAckpB,EAAO5H,EAAMq7B,GAAQ7qC,EAAAA,EAAAA,GAAE9R,KAAIotD,GAAmB,YACvE,CAiBAQ,MAAAA,GAA6D,IAAtD,MAAE1kC,EAAQ,KAAI,KAAE5H,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtD,OAAA4I,EAAAA,EAAAA,GAAO5N,KAAIutD,EAAAG,GAAAvrD,KAAJnC,KAAckpB,EAAO5H,EAAMq7B,GAAQ7qC,EAAAA,EAAAA,GAAE9R,KAAIqtD,GAAgB,SACpE,CAiBAv7B,SAAAA,GAAgE,IAAtD,MAAE5I,EAAQ,KAAI,KAAE5H,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzD,OAAA4I,EAAAA,EAAAA,GAAO5N,KAAIutD,EAAAG,GAAAvrD,KAAJnC,KAAckpB,EAAO5H,EAAMq7B,GAAQ7qC,EAAAA,EAAAA,GAAE9R,KAAIstD,GAAmB,YACvE,CAKAG,cAAAA,GACI,OAAO37C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUuU,YACzB,CAMArlC,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAGJ,SAAAoU,EAjHaxkC,EAAO5H,EAAMq7B,EAAUmR,EAAWx/C,GACvC,IAAIy/C,EAAY7kC,EAChB,GAAa,MAATA,EAAe,CACf,IAAI8kC,EAAUhuD,KAAKytD,iBACnBM,EAAaC,EAAU,EAAIA,EAAU,EACrC9kC,GAAS,CACb,CAEA,OAAOzW,EAAAA,GACHkqC,EACAr7B,EACAwsC,EAAUC,IACV,KAAQD,EAAUC,IAAa,CAAI,IACnCnR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUhrC,GAAQ4a,GAAQ0zB,IAEjE,CAiHG,SAASqR,EAAa9lD,GAA8D,IAA3D,MAAE+gB,EAAQ,KAAI,KAAE2I,EAAO,GAAG,gBAAEooB,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpF,IAAI2hD,EACAr3C,EACJ,IAAI6qC,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IACI,IAAI2M,EAAO,EACPC,GAAa,EAEjB,GAAc,OAAV39B,EAAgB,CAEhB,IADAy9B,EAAal0C,EAAAA,GAAmByW,EAAO,mBACxBlsB,QAAUmL,EAAEkN,kBACvB,MAAM,IAAI5X,MAAM,mEAEpBopD,GAAa,EACbD,EAAOD,EAAWriB,MACtB,CAEAh1B,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO6gD,eAAe/lD,EAAE4K,OAAQ8zC,EAAYD,EAAM/0B,EAAMsoB,IAClEqT,EAGR,CAAE,MAAO7zD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWk0C,EACf,CAEA,OAAOr3C,CACX,0HCxLAmB,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAAy9C,EAAA,IAAAz9C,QAAA09C,EAAA,IAAA19C,QAAA29C,EAAA,IAAA39C,QAIO,MAAM49C,EAQT7vD,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAw8C,EAAA,CAAAv8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAy8C,EAAA,CAAAx8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA08C,EAAA,CAAAz8C,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAImuD,EAAe9R,IACnBxqC,EAAAA,EAAAA,GAAA7R,KAAIouD,EAAmB/R,IACvBxqC,EAAAA,EAAAA,GAAA7R,KAAIquD,EAAuB57C,EAAAA,GAAiBzS,KAAKuuD,kBAAmBlS,GAGxE,CAGA,WAAI15C,GACA,OAAAmP,EAAAA,EAAAA,GAAO9R,KAAIs5C,EACf,CAYAja,IAAAA,GAA6C,IAAxC,KAAE/d,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtC,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAImuD,IACJ,MAAQt8C,EAAAA,EAAAA,GAAA7R,KAAImuD,GAAe,EAAI,IAC/BvR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUja,OAAQud,IAEzD,CAYAve,QAAAA,GAAiD,IAAxC,KAAE/c,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1C,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIouD,IACJ,MAAQv8C,EAAAA,EAAAA,GAAA7R,KAAIouD,GAAmB,EAAI,IACnCxR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUjb,WAAYue,IAE7D,CAaA4R,YAAAA,CAAap0D,GAA2C,IAAxC,KAAEknB,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GACAxP,EAAAA,EAAAA,GAAA9R,KAAIquD,GAAqBj0D,IACzB,MAAQ0X,EAAAA,EAAAA,GAAA9R,KAAIquD,GAAqBj0D,IAAK,CAAI,IAC1CwiD,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUmV,cAAcr0D,GAAIwiD,IAEnE,CAKA2R,eAAAA,GACI,OAAOz8C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUoV,aACzB,CAKAjiC,aAAAA,GACI,OAAO3a,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU/oB,WACzB,CAMA/H,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAsBG,SAASqV,EAAoBxmD,EAAG+jB,GAA0C,IAAjC,gBAAE+tB,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtEm1C,EAAW1nC,EAAAA,GAA4BwnC,GAC3C,OAAO2U,EAAAA,EACHzmD,EACA+jB,GACA,CAACnZ,EAAQq0C,EAAUyH,IAAkBrW,EAAAA,GACjCnrC,GAAUA,EAAOyhD,wBAAwB/7C,EAAQq0C,EAAUyH,EAAe1U,IAC1EmU,IAGZ,gHClJA79C,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAAy9C,EAAA,IAAAz9C,QAAA09C,EAAA,IAAA19C,QAAAq+C,EAAA,IAAAr+C,QAAAs+C,EAAA,IAAAt+C,QAIO,MAAMu+C,EASTxwD,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAw8C,EAAA,CAAAv8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAy8C,EAAA,CAAAx8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAo9C,EAAA,CAAAn9C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAq9C,EAAA,CAAAp9C,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAImuD,EAAe9R,IACnBxqC,EAAAA,EAAAA,GAAA7R,KAAIouD,EAAmB/R,IACvBxqC,EAAAA,EAAAA,GAAA7R,KAAI+uD,EAAyB1S,IAC7BxqC,EAAAA,EAAAA,GAAA7R,KAAIgvD,EAAmB3S,EAG3B,CAGA,WAAI15C,GACA,OAAAmP,EAAAA,EAAAA,GAAO9R,KAAIs5C,EACf,CAYAja,IAAAA,GAA6C,IAAxC,KAAE/d,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtC,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAImuD,IACJ,MAAQt8C,EAAAA,EAAAA,GAAA7R,KAAImuD,GAAe,EAAI,IAC/BvR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUja,OAAQud,IAEzD,CAYAve,QAAAA,GAAiD,IAAxC,KAAE/c,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1C,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIouD,IACJ,MAAQv8C,EAAAA,EAAAA,GAAA7R,KAAIouD,GAAmB,EAAI,IACnCxR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUjb,WAAYue,IACrD,WAER,CAYAsS,cAAAA,GAAuD,IAAxC,KAAE5tC,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAI+uD,IACJ,MAAQl9C,EAAAA,EAAAA,GAAA7R,KAAI+uD,GAAyB,EAAI,IACzCnS,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU6V,iBAAkBvS,IAEnE,CAYAwS,QAAAA,GAAiD,IAAxC,KAAE9tC,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1C,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIgvD,IACJ,MAAQn9C,EAAAA,EAAAA,GAAA7R,KAAIgvD,GAAmB,EAAI,IACnCpS,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUxqB,YAAa8tB,IACtD,WAER,CAKAnwB,aAAAA,GACI,OAAO3a,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU/oB,WACzB,CAMA/H,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAaG,SAAS+V,EAAuBlnD,GAAoC,IAAjC,gBAAE8xC,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChEm1C,EAAW1nC,EAAAA,GAA4BwnC,GAC3C,OAAOzB,EAAAA,GACHnrC,GAAUA,EAAOiiD,2BAA2BnnD,EAAE4K,OAAQonC,IACtD8U,EAER,0HCnJAx+C,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAAy9C,EAAA,IAAAz9C,QAAA09C,EAAA,IAAA19C,QAAA6+C,EAAA,IAAA7+C,QAIO,MAAM8+C,EAQT/wD,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAw8C,EAAA,CAAAv8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAy8C,EAAA,CAAAx8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA49C,EAAA,CAAA39C,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAImuD,EAAe9R,IACnBxqC,EAAAA,EAAAA,GAAA7R,KAAIouD,EAAmB/R,IACvBxqC,EAAAA,EAAAA,GAAA7R,KAAIuvD,EAA4B98C,EAAAA,GAAiBzS,KAAKuuD,kBAAmBlS,GAG7E,CAGA,WAAI15C,GACA,OAAAmP,EAAAA,EAAAA,GAAO9R,KAAIs5C,EACf,CAYAja,IAAAA,GAA6C,IAAxC,KAAE/d,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtC,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAImuD,IACJ,MAAQt8C,EAAAA,EAAAA,GAAA7R,KAAImuD,GAAe,EAAI,IAC/BvR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUja,OAAQud,IAEzD,CAYAve,QAAAA,GAAiD,IAAxC,KAAE/c,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1C,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIouD,IACJ,MAAQv8C,EAAAA,EAAAA,GAAA7R,KAAIouD,GAAmB,EAAI,IACnCxR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUjb,WAAYue,IAE7D,CAaA6S,iBAAAA,CAAkBr1D,GAA2C,IAAxC,KAAEknB,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GACAxP,EAAAA,EAAAA,GAAA9R,KAAIuvD,GAA0Bn1D,IAC9B,MAAQ0X,EAAAA,EAAAA,GAAA9R,KAAIuvD,GAA0Bn1D,IAAK,CAAI,IAC/CwiD,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUoW,mBAAmBt1D,GAAIwiD,IAExE,CAKA2R,eAAAA,GACI,OAAOz8C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUoV,aACzB,CAKAjiC,aAAAA,GACI,OAAO3a,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU/oB,WACzB,CAMA/H,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAsBG,SAASqW,EAAoBxnD,EAAG+jB,GAA0C,IAAjC,gBAAE+tB,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtEm1C,EAAW1nC,EAAAA,GAA4BwnC,GAC1C,OAAO2U,EAAAA,EACJzmD,EACA+jB,GACA,CAACnZ,EAAQq0C,EAAUyH,IAAkBrW,EAAAA,GACjCnrC,GAAUA,EAAOuiD,wBAAwB78C,EAAQq0C,EAAUyH,EAAe1U,IAC1EqV,IAGZ,sGCtHO,SAASK,EAAoB1nD,GAAyH,IACrJ6hB,EAAME,EAQN4lC,EAOAxV,GAhB+B,iBAAEzwB,EAAmB,GAAE,YAAED,EAAc,GAAE,OAAED,EAAS,KAAI,MAAET,EAAQ,KAAI,OAAE1V,EAAS,KAAI,gBAAEymC,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEtJ,IACIglB,GAAOsiC,EAAAA,EAAAA,GAAcnkD,EAAG,CAAEoU,YAAaoN,EAAQT,MAAOA,IACtDgB,GAAM6lC,EAAAA,EAAAA,IAAO/lC,EAAM,CAAEJ,YAAatlB,KAAKC,IAAIylB,EAAK/U,eAAiB,EAAG2U,GAAcqwB,gBAAiBA,EAAiB/wB,MAAOA,EAAOmB,YAAa,UACnJ,CAAE,QACE5X,EAAAA,GAAWuX,EACf,CAGA,IACI8lC,GAAQ3S,EAAAA,EAAAA,IAAcjzB,EAAKL,EAAkB,CAAEowB,gBAAiBA,GACpE,CAAE,QACExnC,EAAAA,GAAWyX,EACf,CAGA,IACI,GAAe,OAAX1W,EACA8mC,EAAe7nC,EAAAA,GAA6BtK,EAAEkN,mBAC9C7B,EAAS8mC,OACN,GAAI9mC,EAAOxW,SAAWmL,EAAEkN,kBAC3B,MAAM,IAAI5X,MAAM,uEAEpBukD,EAAAA,EAAAA,GAAmB75C,EAAG2nD,EAAMx9B,SAAS,CAAEhR,KAAM,SAAW,CAAE9N,OAAQA,EAAQymC,gBAAiBA,GAE/F,CAAE,MAAOtgD,GAEL,MADA8Y,EAAAA,GAAW6nC,GACL3gD,CAEV,CAAE,QACE8Y,EAAAA,GAAWq9C,EACf,CAEA,OAAOt8C,CACX,wKCzDO,MAAMw8C,EACTvxD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBjwD,KAAKjF,GAAKA,EACViF,KAAK07B,OAAStJ,EACdpyB,KAAKkwD,OAASD,CAClB,CAKAt1D,IAAAA,GACI,OAAOqF,KAAK07B,OAAO/gC,MACvB,CAKA6tB,IAAAA,GACwB,OAAhBxoB,KAAK07B,SACL8c,EAAAA,EAAWx4C,KAAKjF,IAChBiF,KAAK07B,OAAS,KAEtB,EASG,MAAMy0B,UAAkBH,EAC3BvxD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBpuB,MAAM9mC,EAAIq3B,EAAK69B,EACnB,CAKAjzD,MAAAA,GACI,OAAOgD,KAAK07B,OAAOl3B,MACvB,CAKA4rD,cAAAA,GACI,OAAOhO,EAAAA,IAAUiO,IACbrwD,KAAK07B,OAAO40B,uBACZ,IAAIC,EAAavwD,KAAK07B,OAAO80B,yBACzBC,EAAazwD,KAAK07B,OAAOg1B,yBAC7B,OAAOC,EAAAA,EAAsBJ,EAAYE,EAAW,GAE5D,CAOA9gD,aAAAA,CAAc5O,GACV,OAAOqhD,EAAAA,IAAUiO,GAAOrwD,KAAK07B,OAAOk1B,eAAe7vD,IACvD,CAMA6O,SAAAA,CAAUxV,GACN,OACWy2D,EADK,iBAALz2D,EACSi2D,GAAOrwD,KAAK07B,OAAOo1B,wBAAwB12D,GAE3Ci2D,GAAOrwD,KAAK07B,OAAOq1B,uBAAuB32D,GAFK4F,KAAKkwD,OAI5E,EASG,MAAMc,UAAyBb,EAClC1xD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBpuB,MAAM9mC,EAAIq3B,EAAK69B,EACnB,CAQApgD,MAAAA,GAA6B,IAAtB,KAAEyR,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtB,OAAOyN,EAAAA,GAAmBzS,KAAK07B,OAAOu1B,iBAAkB3vC,EAC5D,EASG,MAAM4vC,UAAyBf,EAClC1xD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBpuB,MAAM9mC,EAAIq3B,EAAK69B,EACnB,CASApgD,MAAAA,GAA6B,IAAtB,KAAEyR,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtB,OAAOyN,EAAAA,GAAmBzS,KAAK07B,OAAOu1B,iBAAkB3vC,EAC5D,EASG,MAAM6vC,UAAwBhB,EACjC1xD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBpuB,MAAM9mC,EAAIq3B,EAAK69B,EACnB,CAQApgD,MAAAA,GAA6B,IAAtB,KAAEyR,GAAO,GAAMtc,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtB,OAAOyN,EAAAA,GAAmBzS,KAAK07B,OAAOu1B,iBAAkB3vC,EAC5D,EASG,MAAM8vC,UAAwBjB,EACjC1xD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBpuB,MAAM9mC,EAAIq3B,EAAK69B,EACnB,CAKApgD,MAAAA,GACI,OAAOuyC,EAAAA,IAAUiO,IACbrwD,KAAK07B,OAAO21B,qBACZ,IAAIC,EAAMtxD,KAAK07B,OAAO61B,uBAClB/b,EAAMx1C,KAAK07B,OAAO81B,uBACtB,OAAOb,EAAAA,EAAsBW,EAAK9b,EAAI,GAE9C,EASG,MAAMic,UAAyBtB,EAClC1xD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBpuB,MAAM9mC,EAAIq3B,EAAK69B,EACnB,CAMAjgD,IAAAA,CAAKlI,GACD,OAAO+oD,GAASR,GAAOrwD,KAAK07B,OAAOg2B,kBAAkB5pD,IAAQ9H,KAAKkwD,OACtE,EASG,MAAMyB,UAAoB3B,EAC7BvxD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBpuB,MAAM9mC,EAAIq3B,EAAK69B,EACnB,CAKA/gD,SAAAA,GACI,OAAOkzC,EAAAA,IAAUiO,GAAOrwD,KAAK07B,OAAOk2B,cACxC,CAKAziD,WAAAA,GACI,OAAOizC,EAAAA,IAAUiO,GAAOrwD,KAAK07B,OAAOm2B,gBACxC,CAKAzB,cAAAA,GACI,OAAOhO,EAAAA,IAAUiO,IACbrwD,KAAK07B,OAAO40B,uBACZ,IAAIC,EAAavwD,KAAK07B,OAAO80B,yBACzBC,EAAazwD,KAAK07B,OAAOg1B,yBAC7B,OAAOC,EAAAA,EAAsBJ,EAAYE,EAAW,GAE5D,CAOA9gD,aAAAA,CAAc5O,GACV,OAAOqhD,EAAAA,IAAUiO,GAAOrwD,KAAK07B,OAAOk1B,eAAe7vD,IACvD,CAMA6O,SAAAA,CAAUxV,GACN,OACWy2D,EADK,iBAALz2D,EACSi2D,GAAOrwD,KAAK07B,OAAOo1B,wBAAwB12D,GAE3Ci2D,GAAOrwD,KAAK07B,OAAOq1B,uBAAuB32D,GAFK4F,KAAKkwD,OAI5E,EASG,MAAM4B,UAAgB3B,EACzB1xD,WAAAA,CAAY1D,EAAIq3B,EAAK69B,GACjBpuB,MAAM9mC,EAAIq3B,EAAK69B,EACnB,EAGJ,SAASY,EAASt/C,EAAK0+C,GACnB,IAWI8B,EAXA/jD,EAAMo0C,EAAAA,GAAU7wC,GAEhBygD,EAAK,KACT,IACIA,EAAKhkD,EAAIrT,MACb,CAAE,MAAOhB,GAEL,MADAqU,EAAIs0B,SACE3oC,CACV,CAsBA,OAjBIo4D,EADM,WAANC,EACOhB,EACM,UAANgB,EACAb,EACM,WAANa,EACAd,EACM,UAANc,EACAZ,EACM,UAANY,EACAP,EACM,MAANO,EACAL,EACM,QAANK,EACAF,EAEA9B,EAGJxX,EAAAA,GAAQ6X,GAAOriD,GAAK+jD,EAAM9B,EACrC,CAEA,IAAAx/C,EAAA,IAAAC,QAAAuhD,EAAA,IAAAvhD,QAIO,MAAMwhD,EAITzzD,WAAAA,CAAY1D,EAAIiT,IAAK2D,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAsgD,EAAA,CAAArgD,UAAA,EAAAxD,WAAA,KACjByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIiyD,EAAQjkD,EAChB,CAKAmkD,aAAAA,GACI,OAAOrgD,EAAAA,EAAAA,GAAA9R,KAAIiyD,GAAMG,gBACrB,CAKAC,aAAAA,GACI,IAAI96C,GAAOzF,EAAAA,EAAAA,GAAA9R,KAAIiyD,GAAMK,iBACrB,OAAOtzD,OAAOuY,EAAK,IAAM,IAAMvY,OAAOuY,EAAK,IAAM,IAAMvY,OAAOuY,EAAK,GACvE,CAKAg7C,aAAAA,GACI,IAAIh7C,GAAOzF,EAAAA,EAAAA,GAAA9R,KAAIiyD,GAAMO,iBACrB,OAAOxzD,OAAOuY,EAAK,IAAM,IAAMvY,OAAOuY,EAAK,IAAM,IAAMvY,OAAOuY,EAAK,GACvE,CAKAnJ,KAAAA,GACI,OAAOyiD,GAASR,IAAOv+C,EAAAA,EAAAA,GAAA9R,KAAIiyD,GAAMjiD,QAAQhQ,KAC7C,CAQAwoB,IAAAA,GACsB,QAAd1W,EAAAA,EAAAA,GAAA9R,KAAIiyD,KACJzZ,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIiyD,EAAQ,MAEpB,EAaG,SAASQ,EAAQtqD,GACpB,IAAIulB,EACApe,EAEJ,IACoB,iBAALnH,EACPmH,EAASkpC,EAAAA,GAAQnrC,GAAUA,EAAOqlD,oBAAoBvqD,IAAI+pD,IAE1DxkC,EAAMjb,EAAAA,GAAmBtK,EAAG,kBAC5BmH,EAASkpC,EAAAA,GAAQnrC,GAAUA,EAAOslD,sBAAsBjlC,EAAI4W,OAAQ5W,EAAI1wB,SAASk1D,GAEzF,CAAE,QACEz/C,EAAAA,GAAWib,EACf,CAEA,OAAOpe,CACX,gHC9XAmB,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAAkiD,EAAA,IAAAliD,QAAA08C,EAAA,IAAA18C,QAAAmiD,EAAA,IAAAniD,QAIO,MAAM6sC,EAQT9+C,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAihD,EAAA,CAAAhhD,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAy7C,EAAA,CAAAx7C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAkhD,EAAA,CAAAjhD,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAI4yD,EAAqBvW,IACzBxqC,EAAAA,EAAAA,GAAA7R,KAAIotD,EAAoB/Q,IACxBxqC,EAAAA,EAAAA,GAAA7R,KAAI6yD,EAAwBxW,EAGhC,CAaAvrB,mBAAAA,GAA4D,IAAxC,KAAExP,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAI4yD,IACJ,MAAQ/gD,EAAAA,EAAAA,GAAA7R,KAAI4yD,GAAqB,EAAI,IACrChW,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUpvB,MAAO0yB,IAExD,CASAkW,gBAAAA,CAAiB9lD,IACT8E,EAAAA,EAAAA,GAAC9R,KAAI6yD,KACLhhD,EAAAA,EAAAA,GAAA7R,KAAI6yD,GAAwB,IAEhC/gD,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUyZ,mBAAmB/lD,EAErC,CAYAgmD,iBAAAA,GAA0D,IAAxC,KAAE1xC,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIotD,IACJ,MAAQv7C,EAAAA,EAAAA,GAAA7R,KAAIotD,GAAoB,EAAI,IACpCxQ,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU2Z,qBAAsBrW,IAEvE,CAOAsW,aAAAA,GACI,OAAIphD,EAAAA,EAAAA,GAAC9R,KAAI6yD,IAGE/gD,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU6Z,iBAFd,IAIf,CAKAvpC,WAAAA,GACI,OAAO9X,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUhwB,SACzB,CAKAmD,aAAAA,GAEI,OAAOzsB,KAAK8wB,oBAAoB,CAAExP,MAAM,IAAStkB,OAASgD,KAAK4pB,aAEnE,CAMApB,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EA8BG,SAASyW,EAAO5nD,GAA6H,IAA1H,SAAEiL,EAAW,KAAI,YAAEwW,EAAc,GAAE,MAAEwpC,GAAQ,EAAK,MAAElqC,EAAQ,KAAI,YAAEmB,EAAc,UAAS,gBAAE4vB,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7I,IAAIquD,EACA1M,EACAr3C,EAEJmD,EAAAA,GAAmB,cAAe4X,EAAa,CAAC,OAAQ,UAAW,WACnE,IAAI8vB,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IACI,IAAIqZ,GAAW,EACXC,EAAO,EAEX,GAAiB,OAAbngD,EAAmB,CAEnB,IADAigD,EAAY5gD,EAAAA,GAAmBW,EAAU,mBAC3BpW,QAAUmL,EAAE8M,eACtB,MAAM,IAAIxX,MAAM,iEAEpB61D,GAAW,EACXC,EAAOF,EAAU/uB,MACrB,CAMA,GAFA1a,EAActlB,KAAKC,IAAIqlB,EAAazhB,EAAE8M,eAAiB,EAAG9M,EAAEkN,kBAAoB,GAElE,OAAV6T,GAAiC,QAAfmB,EAClB/a,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOmmD,QAAQrrD,EAAE4K,OAAQ6W,EAAa0pC,EAAUC,EAAMH,EAAOjZ,IACvEoD,OAGD,CAEH,IADAoJ,EAAal0C,EAAAA,GAAmByW,EAAO,mBACxBlsB,QAAUmL,EAAEkN,kBACvB,MAAM,IAAI5X,MAAM,qEAEpB,GAAmB,WAAf4sB,EACA/a,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOomD,gBAAgBtrD,EAAE4K,OAAQ6W,EAAa0pC,EAAUC,EAAMH,EAAOzM,EAAWriB,OAAQ6V,IAClGoD,OAED,IAAmB,UAAflzB,EAMP,MAAM,IAAI5sB,MAAM,kBAAoB4sB,EAAc,wBALlD/a,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAOqmD,mBAAmBvrD,EAAE4K,OAAQ6W,EAAa0pC,EAAUC,EAAMH,EAAOzM,EAAWriB,OAAQ6V,IACrGoD,EAIR,CACJ,CAEJ,CAAE,MAAO5jD,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAW4gD,GACX5gD,EAAAA,GAAWk0C,EACf,CAEA,OAAOr3C,CACX,uFC7HO,SAASqkD,EAAsBh5B,GAClC,OAAOynB,EAAAA,IAAU/0C,GAAUA,EAAOumD,gBAAgBj5B,IACtD,6IC1DO,SAASk5B,EAAiBC,EAAYrnC,GAAmI,IAExKsnC,EAAYC,EACZC,EACAC,EACA5Z,GALoD,UAAEthB,EAAY,GAAE,QAAE5R,EAAU,KAAI,OAAE5T,EAAS,KAAI,YAAE0Z,GAAc,EAAI,QAAE8C,EAAU,KAAI,gBAAEiqB,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrKmvD,EAASL,EAAW92D,OAKpBm9C,EAAW1nC,EAAAA,GAA4BwnC,GAEvCma,EAAY,GAChB,IAEIL,EAAathD,EAAAA,GAA+B0hD,GAC5C,IAAIE,EAAYN,EAAWzzC,QAC3B,IAAK,IAAIlmB,EAAI,EAAGA,EAAI+5D,EAAQ/5D,IACxBi6D,EAAUj6D,GAAK2gD,OAAO+Y,EAAW15D,GAAGkqC,QAGxC,IAAIgwB,EAAgB,EAChBC,GAAc,EAClB,GAAgB,OAAZvkC,EAAkB,CAGlB,GAFAukC,GAAc,EACdL,EAAkBzhD,EAAAA,GAAmBud,EAAS,oBAC1CkkC,EAAgBl3D,QAAUm3D,EAC1B,MAAM,IAAI12D,MAAM,mEAEpB62D,EAAgBJ,EAAgB5vB,MACpC,CAGA,IAAIkwB,EAAaC,IACb,IAAIC,EAAYD,EAAahoC,EAC7B,GAAe,OAAXjZ,EACA8mC,EAAe7nC,EAAAA,GAA6BiiD,GAC5ClhD,EAAS8mC,OACN,GAAIoa,IAAclhD,EAAOxW,OAC5B,MAAM,IAAIS,MAAM,0GACpB,EAGJ,GAAgB,OAAZ2pB,EAAkB,CAClB,GAAI+sC,IAAW/sC,EAAQpqB,OACnB,MAAM,IAAIS,MAAM,0DAGpBu2D,EAAavhD,EAAAA,GAA+B0hD,GAC5C,IAAIQ,EAAYX,EAAW1zC,QACvBm0C,EAAa,EAEjB,IAASr6D,EAAI,EAAGA,EAAI+5D,EAAQ/5D,IAAK,CAC7B,IAAI0N,EAAQsf,EAAQhtB,GACpB,GAAIqyB,GAAiB3kB,EAAM2kB,gBACvB,MAAM,IAAIhvB,MAAM,qFAEpB,GAAIq2D,EAAW15D,GAAG4C,QAAU8K,EAAM2kB,gBAAkB3kB,EAAMulB,eACtD,MAAM,IAAI5vB,MAAM,8FAGpBk3D,EAAUv6D,GAAK2gD,OAAO3zB,EAAQhtB,GAAG0N,MAAMkzC,GAAGC,KAC1CwZ,GAAcrtC,EAAQhtB,GAAGizB,cAC7B,CAEAmnC,EAAUC,GACVrS,EAAAA,IAAU/0C,GAAUA,EAAOunD,2BACvBnoC,EACA0nC,EACAJ,EAAWzvB,OACX0vB,EAAW1vB,OACX9wB,EAAO8wB,OACPtL,EACAu7B,EACAD,EACAna,IAGR,KAAO,CACH8Z,EAAgBxhD,EAAAA,GAA2B0hD,GAC3C,IAAIU,EAAYZ,EAAc3zC,QAC1Bm0C,EAAa,EAEjB,IAASr6D,EAAI,EAAGA,EAAI+5D,EAAQ/5D,IAAK,CAC7B,IAAIlB,EAAI46D,EAAW15D,GAAG4C,OAEtB,GADA63D,EAAUz6D,GAAKkK,KAAKyH,MAAM7S,EAAIuzB,GAC1BA,EAAgBooC,EAAUz6D,KAAOlB,EACjC,MAAM,IAAIuE,MAAM,4EAEpBg3D,GAAcI,EAAUz6D,EAC5B,CAEAo6D,EAAUC,GACVrS,EAAAA,IAAU/0C,GAAUA,EAAOynD,4BACvBroC,EACA0nC,EACAF,EAAc3vB,OACdyvB,EAAWzvB,OACX9wB,EAAO8wB,OACPtL,EACAu7B,EACAD,EACApnC,EACAitB,IAER,CAEJ,CAAE,MAAOxgD,GAEL,MADA8Y,EAAAA,GAAW6nC,GACL3gD,CAEV,CAAE,QACE,IAAK,MAAMwO,KAAKisD,EACZjsD,EAAEqgB,OAEN/V,EAAAA,GAAWshD,GACXthD,EAAAA,GAAWuhD,GACXvhD,EAAAA,GAAWyhD,GACXzhD,EAAAA,GAAWwhD,EACf,CAEA,OAAOzgD,CACX,wFC5HO,SAASuhD,EAAgB5sD,EAAGiL,GAAwE,IACnGmiB,EAEAy/B,EAAcrO,GAHuB,MAAEz9B,EAAQ,KAAI,MAAEkqC,GAAQ,EAAK,gBAAEnZ,EAAkB,MAAMj1C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEhGsK,EAAS,CAAC,EAEV6qC,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IAEI,GAAI7mC,EAASpW,SAAWmL,EAAE8M,eACtB,MAAM,IAAIxX,MAAM,8EAEpBu3D,EAAeviD,EAAAA,GAAmBW,EAAU,kBAG5C,IAAIwzC,EAAO,EACPC,GAAa,EACjB,GAAc,OAAV39B,EAAgB,CAEhB,GADAy9B,EAAal0C,EAAAA,GAAmByW,EAAO,kBACnCy9B,EAAW3pD,QAAUmL,EAAEkN,kBACvB,MAAM,IAAI5X,MAAM,mEAEpBopD,GAAa,EACbD,EAAOD,EAAWriB,MACtB,CAEA/O,EAAO6sB,EAAAA,IAAU/0C,GAAUA,EAAO4nD,kBAAkB9sD,EAAE4K,OAAQiiD,EAAa1wB,OAAQuiB,EAAYD,EAAMwM,EAAOjZ,KAC5G7qC,EAAO0gB,QAAUuF,EAAKvF,UAAUn0B,QAChCyT,EAAO4lD,OAAS3/B,EAAK2/B,SAASr5D,OAElC,CAAE,QACE4W,EAAAA,GAAWk0C,GACXl0C,EAAAA,GAAWuiD,GACPz/B,GACAA,EAAK+M,QAEb,CAEA,OAAOhzB,CACX,6IC3DA,SAAS6lD,EAAej8C,EAAO9G,EAASuqC,EAAUr7B,EAAMwsC,EAAWsH,GAC/D,OAAO3iD,EAAAA,GACHkqC,EACAr7B,EACAwsC,EAAUzR,QAAUyR,EAAU75C,QAAQiF,GAAO9G,KAAY,GACzD,KAAQ07C,EAAU75C,QAAQiF,GAAO9G,IAAW,CAAI,GAChDgjD,EAER,CAEA,SAASC,EAAcjjD,GACnB,GAAsB,iBAAXA,EACP,OAAOA,EAEX,IAAI9C,EACJ,OAAQ8C,GACJ,IAAK,UACD9C,EAAS,EACT,MACJ,IAAK,OACDA,EAAS,EACT,MACJ,IAAK,SACDA,EAAS,EACT,MACJ,IAAK,UACDA,EAAS,EACT,MACJ,IAAK,WACDA,EAAS,EACT,MACJ,QACI,MAAM,IAAI7R,MAAM,yBAA2B2U,EAAU,KAE7D,OAAO9C,CACX,CAEA,IAAAmB,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAAy8C,EAAA,IAAAz8C,QAAA09C,EAAA,IAAA19C,QAAA4kD,EAAA,IAAA5kD,QAAA6kD,EAAA,IAAA7kD,QAAA8kD,EAAA,IAAA9kD,QAAA+kD,EAAA,IAAA/kD,QAAAglD,EAAA,IAAAzkD,QAIO,MAAM0kD,EAWTl3D,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO+I,EAAAA,EAAAA,GAAA,KAAA2nD,IAAA/jD,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAw7C,EAAA,CAAAv7C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAy8C,EAAA,CAAAx8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2jD,EAAA,CAAA1jD,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA4jD,EAAA,CAAA3jD,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA6jD,EAAA,CAAA5jD,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA8jD,EAAA,CAAA7jD,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,GAEhB,IAAIl5B,EAAI8G,KAAK0qC,iBACTjxC,EAAIuG,KAAKytD,iBAEb,SAASmI,EAAyBvZ,GAC9B,IAAI/sC,EAAS,CAAE+sC,UACf,IAAKA,EAAQ,CACT/sC,EAAO2E,QAAU,IAAI/W,MAAMhE,GAC3B,IAAK,IAAIkD,EAAI,EAAGA,EAAIlD,EAAGkD,IACnBkT,EAAO2E,QAAQ7X,GAAKqW,EAAAA,GAAiBhZ,EAAI,EAAG4iD,EAEpD,CACA,OAAO/sC,CACX,CAKA,SAASumD,EAAoBxZ,GACzB,IAAI/sC,EAAS,CAAE+sC,UACf,IAAKA,EAAQ,CACT/sC,EAAO2E,QAAU,IAAI/W,MAAMhE,GAC3B,IAAK,IAAIkD,EAAI,EAAGA,EAAIlD,EAAGkD,IACnBkT,EAAO2E,QAAQ7X,GAAK,CAAC,CAE7B,CACA,OAAOkT,CACX,EAZAuC,EAAAA,EAAAA,GAAA7R,KAAImtD,EAAgByI,EAAyBvZ,KAC7CxqC,EAAAA,EAAAA,GAAA7R,KAAIouD,EAAmBwH,EAAyBvZ,KAahDxqC,EAAAA,EAAAA,GAAA7R,KAAIs1D,EAAgBO,EAAoBxZ,KACxCxqC,EAAAA,EAAAA,GAAA7R,KAAIu1D,EAAcM,EAAoBxZ,KACtCxqC,EAAAA,EAAAA,GAAA7R,KAAIw1D,EAAcK,EAAoBxZ,KACtCxqC,EAAAA,EAAAA,GAAA7R,KAAIy1D,EAAwBI,EAAoBxZ,GAGpD,CAsBAoR,cAAAA,GACI,OAAO37C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUuU,YACzB,CAKAnjB,cAAAA,GACI,OAAO54B,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUE,YACzB,CAkBAjb,KAAAA,CAAMrlB,GAA6D,IAAtD,MAAEgQ,EAAQ,KAAI,KAAE5H,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5D,OAAA4I,EAAAA,EAAAA,GAAO5N,KAAI01D,EAAAI,GAAA3zD,KAAJnC,KAAyBkZ,EAAOgQ,EAAO5H,EAAMq7B,GAAQ7qC,EAAAA,EAAAA,GAAE9R,KAAImtD,GAAe,QACrF,CAkBA9uB,QAAAA,CAASnlB,GAA6D,IAAtD,MAAEgQ,EAAQ,KAAI,KAAE5H,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/D,OAAA4I,EAAAA,EAAAA,GAAO5N,KAAI01D,EAAAI,GAAA3zD,KAAJnC,KAAyBkZ,EAAOgQ,EAAO5H,EAAMq7B,GAAQ7qC,EAAAA,EAAAA,GAAE9R,KAAIouD,GAAkB,WACxF,CAiBAvwB,KAAAA,CAAM3kB,GAAiE,IAA1D,QAAE9G,EAAU,OAAM,KAAEkP,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEhE,OADAoN,EAAUijD,EAAcjjD,GACjB+iD,EACHj8C,EACA9G,EACAuqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIs1D,IACJ1Y,GAAQnqC,EAAAA,GACJ2vC,EAAAA,IAAUtnD,IAAKgX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUzb,MAAM3kB,EAAO9G,KAC1CwqC,IAGZ,CAoBA9e,GAAAA,CAAI5kB,GAAiE,IAA1D,QAAE9G,EAAU,OAAM,KAAEkP,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE9D,OADAoN,EAAUijD,EAAcjjD,GACjB+iD,EACHj8C,EACA9G,EACAuqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIw1D,IACJ5Y,GAAQnqC,EAAAA,GACJ2vC,EAAAA,IAAUtnD,IAAKgX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUxb,IAAI5kB,EAAO9G,KACxCwqC,IAGZ,CAiBA7e,GAAAA,CAAI7kB,GAAiE,IAA1D,QAAE9G,EAAU,OAAM,KAAEkP,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE9D,OADAoN,EAAUijD,EAAcjjD,GACjB+iD,EACHj8C,EACA9G,EACAuqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIu1D,IACJ3Y,GAAQnqC,EAAAA,GACJ2vC,EAAAA,IAAUtnD,IAAKgX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUvb,IAAI7kB,EAAO9G,KACxCwqC,IAGZ,CAiBA5e,aAAAA,CAAc9kB,GAAiE,IAA1D,QAAE9G,EAAU,OAAM,KAAEkP,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAExE,OADAoN,EAAUijD,EAAcjjD,GACjB+iD,EACHj8C,EACA9G,EACAuqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIy1D,IACJ7Y,GAAQnqC,EAAAA,GACJ2vC,EAAAA,IAAUtnD,IAAKgX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUyc,eAAe78C,EAAO9G,KACnDwqC,IAGZ,CAMAp0B,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAGJ,SAAAwc,EA/MwB58C,EAAOgQ,EAAO5H,EAAMq7B,EAAUmR,EAAWx/C,GACzD,IAAIxG,EAAQohB,EACZ,GAAa,MAATA,EAAe,CACf,IAAI8kC,EAAUhuD,KAAKytD,iBACnB3lD,EAASkmD,EAAU,EAAIA,EAAU,EACjC9kC,GAAS,CACb,CAEA,OAAOzW,EAAAA,GACHkqC,EACAr7B,EACAwsC,EAAUzR,QAAUyR,EAAU75C,QAAQiF,GAAOpR,KAAU,GACvD,KAAQgmD,EAAU75C,QAAQiF,GAAOpR,IAAS,CAAI,IAC9C80C,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUhrC,GAAQ4K,EAAOgQ,GAAQ0zB,IAExE,CAwNG,SAASoZ,EAAa7tD,EAAG+sB,GAA2I,IAAnI,MAAEhM,EAAQ,KAAI,gBAAE+wB,EAAkB,KAAI,aAAE7lB,EAAe,EAAC,WAAEC,GAAa,EAAI,cAAE4hC,GAAgB,EAAK,eAAEC,GAAiB,GAAOlxD,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpK,IAAIsK,EACAq3C,EACAzM,EACJ,IAAIC,EAAW1nC,EAAAA,GAA4BwnC,GAE3C,IAEI,IADAC,EAAaznC,EAAAA,GAAmByiB,EAAQ,mBACzBl4B,QAAUmL,EAAEkN,kBACvB,MAAM,IAAI5X,MAAM,kEAGpB,IAAImpD,EAAO,EACPC,GAAa,EACjB,GAAc,OAAV39B,EAAgB,CAEhB,IADAy9B,EAAal0C,EAAAA,GAAmByW,EAAO,mBACxBlsB,QAAUmL,EAAEkN,kBACvB,MAAM,IAAI5X,MAAM,mEAEpBopD,GAAa,EACbD,EAAOD,EAAWriB,MACtB,CAEAh1B,EAASkpC,EAAAA,GACLnrC,GAAUA,EAAO8oD,cAAchuD,EAAE4K,OAAQmnC,EAAW5V,OAAQuiB,EAAYD,EAAMxyB,EAAcC,EAAY4hC,EAAeC,EAAgB/b,IACvIwb,EAGR,CAAE,MAAOh8D,GAEL,MADA8Y,EAAAA,GAAWnD,GACL3V,CAEV,CAAE,QACE8Y,EAAAA,GAAWk0C,GACXl0C,EAAAA,GAAWynC,EACf,CAEA,OAAO5qC,CACX,4FC3VO,SAAS8mD,EAAWjuD,EAAGif,GAAmC,IACzDivC,EACA1xD,EACA2xD,GAH+B,QAAE/0B,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAK1D,IACQu8B,EACA58B,EAASwD,GAETkuD,EAAQluD,EAAEgnB,QACVxqB,EAAS0xD,GAGbC,EAAe7jD,EAAAA,GAAmB2U,EAAS,kBAC3Cg7B,EAAAA,IAAU/0C,GAAUA,EAAOkpD,WAAW5xD,EAAOoO,OAAQujD,EAAahyB,OAAQgyB,EAAat5D,SAE3F,CAAE,MAAOrD,GAEL,MADA8Y,EAAAA,GAAW4jD,GACL18D,CAEV,CAAE,QACE8Y,EAAAA,GAAW6jD,EACf,CAEA,OAAO3xD,CACX,CAgBO,SAAS6xD,EAAcruD,EAAGif,GAAmC,IAC5DivC,EACA1xD,EACA2xD,GAHkC,QAAE/0B,GAAU,GAAOv8B,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAK7D,IACQu8B,EACA58B,EAASwD,GAETkuD,EAAQluD,EAAEgnB,QACVxqB,EAAS0xD,GAGbC,EAAe7jD,EAAAA,GAAmB2U,EAAS,kBAC3Cg7B,EAAAA,IAAU/0C,GAAUA,EAAOopD,cAAc9xD,EAAOoO,OAAQujD,EAAahyB,OAAQgyB,EAAat5D,SAE9F,CAAE,MAAOrD,GAEL,MADA8Y,EAAAA,GAAW4jD,GACL18D,CAEV,CAAE,QACE8Y,EAAAA,GAAW6jD,EACf,CAEA,OAAO3xD,CACX,CAgBO,SAAS+xD,EAAU3jD,EAAQ7M,GAA+D,IA0BzF6V,GA1BiC,WAAE46C,GAAa,EAAK,kBAAEC,GAAoB,GAAO5xD,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtFsK,EAAS,CAAC,EACVunD,EAAQv6D,OAAO0B,KAAKkI,GAExB,GAAoB,GAAhB2wD,EAAM75D,OAAa,CACnB,IAAIwmB,EAAStd,EAAM2wD,EAAM,IACrBC,EAAUtzC,EAAOxmB,QAAU+V,EAAOkC,eACtC,GAAI6hD,EACA,IAAK,IAAI18D,EAAI,EAAGA,EAAIopB,EAAOxmB,OAAQ5C,IAC/B,GAAIA,GAAKopB,EAAOppB,GAAI,CAChB08D,GAAS,EACT,KACJ,CAIR,GAAIA,EACA,OAAIH,EACO,MAEPrnD,EAAOunD,EAAM,IAAM9jD,EAAOoc,QACnB7f,EAGnB,CAGA,IACI,IAAK,MAAM3J,KAAKkxD,EACZvnD,EAAO3J,GAAKywD,EAAWrjD,EAAQ7M,EAAMP,IAKrCixD,IACA76C,EAAQ,IAAIg8B,EAAAA,EAAY,CAAE/2B,MAAO1R,IAEzC,CAAE,MAAO3V,GACL,IAAK,MAAMyE,KAAK9B,OAAOuT,OAAOP,GAC1BlR,EAAEoqB,OAEN,MAAM7uB,CACV,CAEA,OAAIi9D,EACO76C,EAEAzM,CAEf,2HChJAgqC,EAAA,IAAA5oC,QAAAD,EAAA,IAAAC,QAAA09C,EAAA,IAAA19C,QAAA29C,EAAA,IAAA39C,QAIO,MAAMqmD,EAOTt4D,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAy8C,EAAA,CAAAx8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA08C,EAAA,CAAAz8C,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAIouD,EAAmB/R,IACvBxqC,EAAAA,EAAAA,GAAA7R,KAAIquD,EAAuB57C,EAAAA,GAAiBzS,KAAKuuD,kBAAmBlS,GAGxE,CAYA2a,kBAAAA,GAA2D,IAAxC,KAAE11C,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIouD,IACJ,MAAQv8C,EAAAA,EAAAA,GAAA7R,KAAIouD,GAAmB,EAAI,IACnCxR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU2d,sBAAuBra,IAExE,CAaAsa,sBAAAA,CAAuB98D,GAA2C,IAAxC,KAAEknB,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3D,OAAOyN,EAAAA,GACHkqC,EACAr7B,GACAxP,EAAAA,EAAAA,GAAA9R,KAAIquD,GAAqBj0D,IACzB,MAAQ0X,EAAAA,EAAAA,GAAA9R,KAAIquD,GAAqBj0D,IAAK,CAAI,IAC1CwiD,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU6d,yBAAyB/8D,GAAIwiD,IAE9E,CAKA2R,eAAAA,GACI,OAAOz8C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUoV,aACzB,CAKAjB,cAAAA,GACI,OAAO37C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUuU,YACzB,CAgBA/wD,MAAAA,CAAO4tB,GAA+C,IAAtC,MAAExB,EAAQ,KAAI,OAAE1V,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/C,KAAM0lB,aAAmB4jC,EAAAA,IACrB,MAAM,IAAI7wD,MAAM,2DAEpB,OAAOmxD,EAAAA,GAAoB98C,EAAAA,EAAAA,GAAC9R,KAAIs5C,GAAW5uB,EAASxB,EAAO1V,EAC/D,CAMAgV,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAkBG,SAAS8d,EAAoB1sC,GAAyE,IAAhE,aAAE4B,EAAe,EAAC,gBAAEC,EAAkB,GAAG,MAAErD,EAAQ,MAAMlkB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtG,KAAM0lB,aAAmB4jC,EAAAA,IACrB,MAAM,IAAI7wD,MAAM,2DAEpB,OAAOmxD,EAAAA,EACHlkC,EACAxB,GACA,CAAC/gB,EAAG0+C,EAAYD,IAASpO,EAAAA,GACrBnrC,GAAUA,EAAOgqD,uBAAuBlvD,EAAExF,QAAQq4C,GAAGC,IAAK4L,EAAYD,EAAMt6B,EAAcC,IAC1FwqC,IAGZ,2HCzIAtmD,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAA4mD,EAAA,IAAA5mD,QAIO,MAAM6mD,EAMT94D,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2lD,EAAA,CAAA1lD,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAIs3D,EAAmBjb,EAE3B,CAYAmb,kBAAAA,GAA2D,IAAxC,KAAEl2C,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIs3D,IACJ,MAAQzlD,EAAAA,EAAAA,GAAA7R,KAAIs3D,GAAmB,EAAI,IACnC1a,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUme,uBAAwB7a,IAEzE,CAKA6Q,cAAAA,GACI,OAAO37C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUuU,YACzB,CAgBA/wD,MAAAA,CAAO4tB,GAA+C,IAAtC,MAAExB,EAAQ,KAAI,OAAE1V,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/C,KAAM0lB,aAAmBukC,EAAAA,IACrB,MAAM,IAAIxxD,MAAM,8DAEpB,OAAOmxD,EAAAA,GAAoB98C,EAAAA,EAAAA,GAAC9R,KAAIs5C,GAAW5uB,EAASxB,EAAO1V,EAC/D,CAMAgV,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAgBG,SAASoe,EAAuBhtC,GAAkD,IAAzC,aAAE4B,EAAe,EAAC,MAAEpD,EAAQ,MAAMlkB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClF,KAAM0lB,aAAmBukC,EAAAA,IACrB,MAAM,IAAIxxD,MAAM,8DAEpB,OAAOmxD,EAAAA,EACHlkC,EACAxB,GACA,CAAC/gB,EAAG0+C,EAAYD,IAASpO,EAAAA,GACrBnrC,GAAUA,EAAOsqD,0BAA0BxvD,EAAExF,QAAQq4C,GAAGC,IAAK4L,EAAYD,EAAMt6B,IAC/EirC,IAGZ,2HCxGA9mD,EAAA,IAAAC,QAAA4oC,EAAA,IAAA5oC,QAAAy9C,EAAA,IAAAz9C,QAAA09C,EAAA,IAAA19C,QAAA6+C,EAAA,IAAA7+C,QAIO,MAAMknD,EAQTn5D,WAAAA,CAAY1D,EAAIq3B,GAAoB,IAAfiqB,IAAMr3C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,KAAAA,UAAA,IAAO2M,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA2nC,EAAA,CAAA1nC,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAw8C,EAAA,CAAAv8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAAy8C,EAAA,CAAAx8C,UAAA,EAAAxD,WAAA,KAAAuD,EAAAA,EAAAA,GAAA,KAAA49C,EAAA,CAAA39C,UAAA,EAAAxD,WAAA,KAC9ByD,EAAAA,EAAAA,GAAA7R,KAAIyQ,EAAO1V,IACX8W,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAYlnB,IAEhBvgB,EAAAA,EAAAA,GAAA7R,KAAImuD,EAAe9R,IACnBxqC,EAAAA,EAAAA,GAAA7R,KAAIouD,EAAmB/R,IACvBxqC,EAAAA,EAAAA,GAAA7R,KAAIuvD,EAA4B98C,EAAAA,GAAiBzS,KAAKuuD,kBAAmBlS,GAG7E,CAYAwb,cAAAA,GAAuD,IAAxC,KAAEv2C,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAImuD,IACJ,MAAQt8C,EAAAA,EAAAA,GAAA7R,KAAImuD,GAAe,EAAI,IAC/BvR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUwe,kBAAmBlb,IAEpE,CAYAoa,kBAAAA,GAA2D,IAAxC,KAAE11C,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,OAAOyN,EAAAA,GACHkqC,EACAr7B,GAAIxP,EAAAA,EAAAA,GACJ9R,KAAIouD,IACJ,MAAQv8C,EAAAA,EAAAA,GAAA7R,KAAIouD,GAAmB,EAAI,IACnCxR,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU2d,sBAAuBra,IAExE,CAaAmb,2BAAAA,CAA4B39D,GAA2C,IAAxC,KAAEknB,GAAO,EAAI,SAAEq7B,GAAW,GAAO33C,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChE,OAAOyN,EAAAA,GACHkqC,EACAr7B,GACAxP,EAAAA,EAAAA,GAAA9R,KAAIuvD,GAA0Bn1D,IAC9B,MAAQ0X,EAAAA,EAAAA,GAAA9R,KAAIuvD,GAA0Bn1D,IAAK,CAAI,IAC/CwiD,GAAQnqC,EAAAA,IAAmBX,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAU0e,uBAAuB59D,GAAIwiD,IAE5E,CAKA2R,eAAAA,GACI,OAAOz8C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUoV,aACzB,CAKAjB,cAAAA,GACI,OAAO37C,EAAAA,EAAAA,GAAA9R,KAAIs5C,GAAUuU,YACzB,CAgBA/wD,MAAAA,CAAO4tB,GAA+C,IAAtC,MAAExB,EAAQ,KAAI,OAAE1V,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/C,KAAM0lB,aAAmB8kC,EAAAA,IACrB,MAAM,IAAI/xD,MAAM,2DAEpB,OAAOmxD,EAAAA,GAAoB98C,EAAAA,EAAAA,GAAC9R,KAAIs5C,GAAW5uB,EAASxB,EAAO1V,EAC/D,CAMAgV,IAAAA,GAC0B,QAAlB1W,EAAAA,EAAAA,GAAA9R,KAAIs5C,KACJd,EAAAA,GAAU1mC,EAAAA,EAAAA,GAAC9R,KAAIyQ,KACfoB,EAAAA,EAAAA,GAAA7R,KAAIs5C,EAAY,MAGxB,EAgBG,SAAS2e,EAAoBvtC,GAAkD,IAAzC,aAAE4B,EAAe,EAAC,MAAEpD,EAAQ,MAAMlkB,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/E,KAAM0lB,aAAmB8kC,EAAAA,IACrB,MAAM,IAAI/xD,MAAM,2DAEpB,OAAOmxD,EAAAA,EACHlkC,EACAxB,GACA,CAAC/gB,EAAG0+C,EAAYD,IAASpO,EAAAA,GACrBnrC,GAAUA,EAAO6qD,uBAAuB/vD,EAAExF,QAAQq4C,GAAGC,IAAK4L,EAAYD,EAAMt6B,IAC5EsrC,IAGZ,mKCxJO,SAASO,EAAqBn7D,GACjC,OAAOu7C,EAAAA,IAAwB6f,EAAAA,EAAAA,MAAkBp7D,EACrD,CASO,SAASq7D,EAAqBr7D,GACjC,OAAOu7C,EAAAA,IAAwB6f,EAAAA,EAAAA,MAAkBp7D,EACrD,CASO,SAASs7D,EAA0Bt7D,GACtC,OAAOu7C,EAAAA,IAA4B6f,EAAAA,EAAAA,MAAkBp7D,EACzD,CASO,SAASu7D,EAAuBv7D,GACnC,OAAOu7C,EAAAA,IAA0B6f,EAAAA,EAAAA,MAAkBp7D,EACvD,CAEO,SAASw7D,EAAarwD,EAAGskC,GAC5B,GAAItkC,aAAaowC,EAAAA,GAAc,CAC3B,GAAiB,OAAb9L,GAAqBA,GAAYtkC,EAAE1J,YAAYyQ,UAC/C,MAAM,IAAIzR,MAAM,aAAegvC,EAAW,WAAatkC,EAAE1J,YAAYyQ,UAAY,KAGrF,OAAI/G,EAAEswD,SAAUL,EAAAA,EAAAA,MAII,OAAZjwD,EAAEu0B,MACKv0B,EAAEmlB,OAEFnlB,EAIJA,EAAEgnB,OAAMipC,EAAAA,EAAAA,MAEvB,CAEA,IAAIz7D,EAAI,KAOR,OALIA,EADa,OAAb8vC,EACI8L,EAAAA,IAAsB6f,EAAAA,EAAAA,MAAkBjwD,EAAGowC,EAAAA,GAAiB9L,IAE5D8L,EAAAA,IAAsB6f,EAAAA,EAAAA,MAAkBjwD,GAGzCxL,CACX,CAEO,SAAS+7D,EAAsBC,GAClC,OAAe,MAAXA,GACOC,EAAAA,EAAAA,MAEAD,CAEf,CAUO,SAASnwC,EAAKrgB,GACjB,GAAgB,oBAALA,GAAyB,MAALA,EAG/B,OAAOA,EAAEqgB,MACb,CA6BO,SAASqwC,EAAa1wD,EAAGmZ,GAC5B,GAAa,SAATA,EAAiB,CACjB,GAAInZ,EAAEqL,UAAWA,EAAAA,EAAAA,MACb,MAAM,IAAI/V,MAAM,qDAGpB,IAAIq7D,EAAa3wD,EAAE1J,YAAYsC,KAAKlC,QAAQ,QAAS,aAKrD,OAAO05C,EAAAA,IAAuB6f,EAAAA,EAAAA,MAAkBjwD,EAAEnL,OAAQmL,EAAEq1C,WAAYjF,EAAAA,GAAiBugB,GAE7F,CAAO,OAAIx3C,EACAnZ,EAAEtM,QAGFsM,CAEf,CAEO,SAAS4wD,EAAah4D,EAAMqN,EAAO4qD,GACtC,IAA+B,GAA3BA,EAAQj8D,QAAQqR,GAChB,MAAM,IAAI3Q,MAAM,IAAMsD,EAAO,wBAA0Bi4D,EAAQ36D,KAAK,QAAU,IAEtF,CAEO,SAAS46D,EAAW//D,EAAGizB,GAC1B,IAAI7c,EAAS,IAAIpS,MAAMhE,GAEvB,OADAoW,EAAO6c,KAAKA,GACL7c,CACX,CAEO,SAAS4pD,EAAc/sC,EAAM7K,EAAM63C,EAAOC,EAAcC,GAC3D,IAAKF,EAAO,CACR,IAAIhtC,EAMA,OAAO,KALPitC,IACI93C,IACAA,GAAO,EAKnB,CACA,OAAO+3C,EAAO/3C,EAClB,qHCzKA,MAAMjP,EAAQ,CAAC,EAcRoD,eAAe6jD,IAA4D,IAAjD,gBAAErf,EAAkB,EAAC,UAAEsf,GAAY,GAAOv0D,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3E,GAAI,WAAYqN,EACZ,OAAO,EAGX,IAAItJ,EAAU,CACVywD,sBAAuBvf,GAU3B,OAPIsf,IACAxwD,EAAQ0wD,WAActxD,GAAMuxD,2EAAgBj3D,UAAU,GAAK,YAAc0F,GAG7EkK,EAAMhF,aAAessD,EAAAA,EAAAA,SAAU5wD,GAC/BsJ,EAAMomD,OAAQmB,EAAAA,EAAAA,IAASvnD,EAAMhF,SAEtB,CACX,CAQO,SAASurD,IACZ,OAAOvmD,EAAMhF,OAAOmsD,qBACxB,CAEO,SAASr3D,EAAK03D,GACjB,KAAO,WAAYxnD,GACf,MAAM,IAAI5U,MAAM,0DAGpB,IAAI6R,EACJ,IACIA,EAASuqD,EAAKxnD,EAAMhF,OACxB,CAAE,MAAO1T,GACL,KAAgB,iBAALA,EACD,IAAI8D,MAAM4U,EAAMhF,OAAOysD,kBAAkBngE,IAEzCA,CAEd,CACA,OAAO2V,CACX,CAEO,SAASkE,IACZ,KAAO,WAAYnB,GACf,MAAM,IAAI5U,MAAM,0DAEpB,OAAO4U,EAAMhF,OAAO0sD,WAAWvmD,MACnC,CAMO,SAAS4kD,IACZ,OAAO/lD,EAAMomD,KACjB,6GC5DO,SAASuB,EAAgBvB,EAAOz7D,EAAQi9D,GAC3C,OAAOC,EAAAA,EAAAA,IAASzB,EAAOz7D,EAAQi9D,EACnC,CAUO,SAAS9B,EAAqBM,EAAOz7D,GACxC,OAAOg9D,EAAgBvB,EAAOz7D,EAAQm9D,EAAAA,GAC1C,CA0DO,SAAS9B,EAAqBI,EAAOz7D,GACxC,OAAOg9D,EAAgBvB,EAAOz7D,EAAQo9D,EAAAA,GAC1C,CAUO,SAAS9B,EAAyBG,EAAOz7D,GAC5C,OAAOg9D,EAAgBvB,EAAOz7D,EAAQq9D,EAAAA,GAC1C,CAkCO,SAAS9B,EAAuBE,EAAOz7D,GAC1C,OAAOg9D,EAAgBvB,EAAOz7D,EAAQs9D,EAAAA,GAC1C,uHClIO,MAAMH,UAAuBI,EAAAA,EAKhCj6C,KAAAA,GACI,OAAO,IAAIxK,YAAWtC,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OAChE,GAkBJy7B,EAAAA,EAAAA,GAzBa0hC,EAAc,YAaJ,mBAKnB1hC,EAAAA,EAAAA,GAlBS0hC,EAAc,YAsBJ,GAUhB,MAAMK,UAAsBD,EAAAA,EAK/Bj6C,KAAAA,GACI,OAAO,IAAIwnB,WAAUt0B,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OAC/D,GAeJy7B,EAAAA,EAAAA,GAtBa+hC,EAAa,YAaH,kBAEnB/hC,EAAAA,EAAAA,GAfS+hC,EAAa,YAmBH,GAUhB,MAAMC,UAAwBF,EAAAA,EAKjCj6C,KAAAA,GACI,OAAO,IAAIo6C,aAAYlnD,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OACjE,GAeJy7B,EAAAA,EAAAA,GAtBagiC,EAAe,YAaL,oBAEnBhiC,EAAAA,EAAAA,GAfSgiC,EAAe,YAmBL,GAUhB,MAAME,UAAuBJ,EAAAA,EAKhCj6C,KAAAA,GACI,OAAO,IAAIs6C,YAAWpnD,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OAChE,GAeJy7B,EAAAA,EAAAA,GAtBakiC,EAAc,YAaJ,mBAEnBliC,EAAAA,EAAAA,GAfSkiC,EAAc,YAmBJ,GAUhB,MAAME,UAAwBN,EAAAA,EAKjCj6C,KAAAA,GACI,OAAO,IAAIg3B,aAAY9jC,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OACjE,GAeJy7B,EAAAA,EAAAA,GAtBaoiC,EAAe,YAaL,oBAEnBpiC,EAAAA,EAAAA,GAfSoiC,EAAe,YAmBL,GAUhB,MAAMT,UAAuBG,EAAAA,EAKhCj6C,KAAAA,GACI,OAAO,IAAIzH,YAAWrF,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OAChE,GAeJy7B,EAAAA,EAAAA,GAtBa2hC,EAAc,YAaJ,mBAEnB3hC,EAAAA,EAAAA,GAfS2hC,EAAc,YAmBJ,GAUhB,MAAMC,UAA2BE,EAAAA,EAKpCj6C,KAAAA,GACI,OAAO,IAAI4zB,gBAAe1gC,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OACpE,GAeJy7B,EAAAA,EAAAA,GAtBa4hC,EAAkB,YAaR,uBAEnB5hC,EAAAA,EAAAA,GAfS4hC,EAAkB,YAmBR,GAUhB,MAAMS,UAA0BP,EAAAA,EAKnCj6C,KAAAA,GACI,OAAO,IAAI2zB,eAAczgC,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OACnE,GAeJy7B,EAAAA,EAAAA,GAtBaqiC,EAAiB,YAaP,sBAEnBriC,EAAAA,EAAAA,GAfSqiC,EAAiB,YAmBP,GAUhB,MAAMC,UAAyBR,EAAAA,EAKlCj6C,KAAAA,GACI,OAAO,IAAIjH,cAAa7F,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OAClE,GAeJy7B,EAAAA,EAAAA,GAtBasiC,EAAgB,YAaN,qBAEnBtiC,EAAAA,EAAAA,GAfSsiC,EAAgB,YAmBN,GAUhB,MAAMT,UAAyBC,EAAAA,EAKlCj6C,KAAAA,GACI,OAAO,IAAIxH,cAAatF,EAAAA,EAAAA,IAAOxT,KAAKy4D,OAAQz4D,KAAKskC,OAAQtkC,KAAKhD,OAClE,GAaHy7B,EAAAA,EAAAA,GApBY6hC,EAAgB,YAaN,qBAEnB7hC,EAAAA,EAAAA,GAfS6hC,EAAgB,YAmBN,GAGvB,MAAMtB,EAAU,CACZ,eAAkBmB,EAClB,cAAiBK,EACjB,gBAAmBC,EACnB,eAAkBE,EAClB,gBAAmBE,EACnB,eAAkBT,EAClB,mBAAsBC,EACtB,kBAAqBS,EACrB,iBAAoBC,EACpB,iBAAoBT,GAUjB,SAASU,EAAcj6D,GAC1B,KAAMA,KAAQi4D,GACV,MAAM,IAAIv7D,MAAM,4BAA8BsD,EAAO,KAEzD,OAAOi4D,EAAQj4D,EACnB,mVC5NO,SAASk6D,EAAgB9yD,EAAGqvC,GAA+C,IAAvC,OAAE16C,EAAS,KAAI,OAAE0W,EAAS,MAAMxO,UAAAhI,OAAA,QAAAgM,IAAAhE,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvEwwC,EAxFD,SAA2BgC,EAAQ16C,EAAQo+D,EAAcC,GAC5D,GAAe,OAAXr+D,EAMA,OALA06C,EAAO5xC,SAAQxL,IACX,GAAIA,EAAI,GAAKA,GAAK8gE,EACd,MAAM,IAAIz9D,MAAM,+CAAiD09D,EAAa,IAClF,IAEG3jB,EAAOx6C,OAGlB,GAAIw6C,EAAOx6C,QAAUk+D,EACjB,MAAM,IAAIz9D,MAAM,iBAAmB09D,EAAa,iCAGpD,IAAI3mB,EAAM,EAEV,OADAgD,EAAO5xC,SAAQuC,IAAOqsC,GAAa,GAALrsC,CAAO,IACjCrL,EACO06C,EAAOx6C,OAASw3C,EAGpBA,CACX,CAmEc4mB,CAAkB5jB,EAAQ16C,EAAQqL,EAAEnL,OAAQ,KAEtD,GAAc,MAAVwW,EAEAA,GAASwmD,EAAAA,EAAAA,IAAgB7xD,EAAEswD,MAAOjjB,EAAKrtC,EAAE1J,kBACtC,GAAI+U,EAAOxW,SAAWw4C,EACzB,MAAM,IAAI/3C,MAAM,sDAGpB,IAAI88C,EAAO/mC,EAAO8M,QAIlB,OAlEG,SAAoBk3B,EAAQ16C,EAAQtB,EAAO8T,GAC9C,GAAc,MAAVxS,EACA06C,EAAO5xC,SAAQ,CAAC9M,EAAGsB,KACfkV,EAAOlV,GAAKoB,EAAM1C,EAAE,SAErB,GAAIgE,EAAQ,CACf,IAAI4J,EAAI,EACR8wC,EAAO5xC,SAAQ,CAACjJ,EAAGvC,KACN,GAALuC,IACA2S,EAAO5I,GAAKlL,EAAMpB,GAClBsM,IACJ,GAER,KAAO,CACH,IAAIA,EAAI,EACR8wC,EAAO5xC,SAAQ,CAACjJ,EAAGvC,KACL,IAANuC,IACA2S,EAAO5I,GAAKlL,EAAMpB,GAClBsM,IACJ,GAER,CACJ,CA0CI20D,CAAW7jB,EAAQ16C,EADRqL,EAAEmY,QACoBi6B,GAE1B/mC,CACX,wDC5FO,SAAS8nD,EAAoB7C,EAAOz7D,EAAQsnC,EAAQ21B,GACvD,OAAO,IAAIA,EAAWxB,GAAQ,EAAGz7D,EAAQsnC,EAAQ,CAAC,EACtD","sources":["../node_modules/papaparse/papaparse.min.js","../node_modules/randomcolor/randomColor.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticAccess.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticFieldDescriptor.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecGet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecSet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js","../node_modules/bakana-remotes/src/utils.js","../node_modules/bakana-remotes/src/ExperimentHub.js","../node_modules/artifactdb/src/HttpError.js","../node_modules/bakana-remotes/src/CollaboratorDB.js","../node_modules/bakana/browser/readers/10x.js","../node_modules/bakana/browser/readers/ArtifactDB-abstract.js","../node_modules/bakana/browser/readers/abstract/file.js","../node_modules/bakana/browser/readers/mtx.js","../node_modules/bakana/browser/readers/utils/abstract/stream.js","../node_modules/bakana/browser/readers/utils/extract.js","../node_modules/bakana/browser/readers/utils/features.js","../node_modules/bakana/browser/steps/abstract/worker_parent.js","../node_modules/bakana/browser/steps/adt_normalization.js","../node_modules/bakana/browser/steps/adt_pca.js","../node_modules/bakana/browser/steps/adt_quality_control.js","../node_modules/bakana/browser/steps/batch_correction.js","../node_modules/bakana/browser/steps/cell_filtering.js","../node_modules/bakana/browser/steps/choose_clustering.js","../node_modules/bakana/browser/steps/combine_embeddings.js","../node_modules/bakana/browser/steps/crispr_normalization.js","../node_modules/bakana/browser/steps/crispr_pca.js","../node_modules/bakana/browser/steps/crispr_quality_control.js","../node_modules/bakana/browser/steps/feature_selection.js","../node_modules/bakana/browser/steps/kmeans_cluster.js","../node_modules/bakana/browser/steps/marker_detection.js","../node_modules/bakana/browser/steps/neighbor_index.js","../node_modules/bakana/browser/steps/rna_normalization.js","../node_modules/bakana/browser/steps/rna_pca.js","../node_modules/bakana/browser/steps/rna_quality_control.js","../node_modules/bakana/browser/steps/snn_graph_cluster.js","../node_modules/bakana/browser/steps/tsne.js","../node_modules/bakana/browser/steps/umap.js","../node_modules/bakana/browser/steps/utils/abstract/workers_parent.js","../node_modules/bakana/browser/steps/utils/general.js","../node_modules/bakana/browser/steps/utils/markers.js","../node_modules/bakana/browser/steps/utils/normalization.js","../node_modules/bioconductor/src/AllGenerics.js","../node_modules/bioconductor/src/Annotated.js","../node_modules/bioconductor/src/DataFrame.js","../node_modules/bioconductor/src/DenseMatrix.js","../node_modules/bioconductor/src/GRanges.js","../node_modules/bioconductor/src/GroupedGRanges.js","../node_modules/bioconductor/src/IRanges.js","../node_modules/bioconductor/src/InternalList.js","../node_modules/bioconductor/src/RangedSummarizedExperiment.js","../node_modules/bioconductor/src/SingleCellExperiment.js","../node_modules/bioconductor/src/SummarizedExperiment.js","../node_modules/bioconductor/src/Vector.js","../node_modules/bioconductor/src/clone-utils.js","../node_modules/bioconductor/src/miscellaneous.js","../node_modules/bioconductor/src/overlap-utils.js","../node_modules/bioconductor/src/utils.js","../node_modules/gesel/src/fetchAllCollections.js","../node_modules/gesel/src/fetchAllGenes.js","../node_modules/gesel/src/fetchAllSets.js","../node_modules/gesel/src/fetchEmbeddings.js","../node_modules/gesel/src/fetchGenesForAllSets.js","../node_modules/gesel/src/fetchGenesForSet.js","../node_modules/gesel/src/fetchSetsForAllGenes.js","../node_modules/gesel/src/fetchSetsForGene.js","../node_modules/gesel/src/fetchSingleCollection.js","../node_modules/gesel/src/fetchSingleSet.js","../node_modules/gesel/src/mapGenesByIdentifier.js","../node_modules/gesel/src/reindexGenesForAllSets.js","../node_modules/gesel/src/reindexSetsForAllGenes.js","../node_modules/gesel/src/searchSetText.js","../node_modules/scran.js/browser/MultiMatrix.js","../node_modules/scran.js/browser/ScranMatrix.js","../node_modules/scran.js/browser/abstract/realize.js","../node_modules/scran.js/browser/aggregateAcrossCells.js","../node_modules/scran.js/browser/block.js","../node_modules/scran.js/browser/cbind.js","../node_modules/scran.js/browser/chooseHVGs.js","../node_modules/scran.js/browser/clusterKmeans.js","../node_modules/scran.js/browser/clusterSNNGraph.js","../node_modules/scran.js/browser/factorize.js","../node_modules/scran.js/browser/filterCells.js","../node_modules/scran.js/browser/findNearestNeighbors.js","../node_modules/scran.js/browser/groupedSizeFactors.js","../node_modules/scran.js/browser/guessFeatures.js","../node_modules/scran.js/browser/hypergeometricTest.js","../node_modules/scran.js/browser/initializeSparseMatrix.js","../node_modules/scran.js/browser/internal/computePerCellQcFilters.js","../node_modules/scran.js/browser/internal/computePerCellQcMetrics.js","../node_modules/scran.js/browser/internal/pack_strings.js","../node_modules/scran.js/browser/labelCells.js","../node_modules/scran.js/browser/logNormCounts.js","../node_modules/scran.js/browser/mnnCorrect.js","../node_modules/scran.js/browser/modelGeneVar.js","../node_modules/scran.js/browser/perCellAdtQcMetrics.js","../node_modules/scran.js/browser/perCellCrisprQcMetrics.js","../node_modules/scran.js/browser/perCellRnaQcMetrics.js","../node_modules/scran.js/browser/quickAdtSizeFactors.js","../node_modules/scran.js/browser/rds.js","../node_modules/scran.js/browser/runPCA.js","../node_modules/scran.js/browser/runTSNE.js","../node_modules/scran.js/browser/scaleByNeighbors.js","../node_modules/scran.js/browser/scoreFeatureSet.js","../node_modules/scran.js/browser/scoreMarkers.js","../node_modules/scran.js/browser/subset.js","../node_modules/scran.js/browser/suggestAdtQcFilters.js","../node_modules/scran.js/browser/suggestCrisprQcFilters.js","../node_modules/scran.js/browser/suggestRnaQcFilters.js","../node_modules/scran.js/browser/utils.js","../node_modules/scran.js/browser/wasm.js","../node_modules/wasmarrays.js/src/create.js","../node_modules/wasmarrays.js/src/derived.js","../node_modules/wasmarrays.js/src/subset.js","../node_modules/wasmarrays.js/src/view.js"],"sourcesContent":["/* @license\nPapa Parse\nv5.4.1\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=f.IS_PAPA_WORKER||!1,a={},u=0,b={parse:function(e,t){var r=(t=t||{}).dynamicTyping||!1;J(r)&&(t.dynamicTypingFunction=r,r={});if(t.dynamicTyping=r,t.transform=!!J(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var i=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(r=f.URL||f.webkitURL||null,i=s.toString(),b.BLOB_URL||(b.BLOB_URL=r.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",i,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var r,i;return t.onmessage=_,t.id=u++,a[t.id]=t}();return i.userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=J(t.step),t.chunk=J(t.chunk),t.complete=J(t.complete),t.error=J(t.error),delete t.worker,void i.postMessage({input:e,config:t,workerId:i.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?(e=function(e){if(65279===e.charCodeAt(0))return e.slice(1);return e}(e),n=t.download?new l(t):new p(t)):!0===e.readable&&J(e.read)&&J(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,r=!1,i=null,o=!1;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(r=t.skipEmptyLines);\"string\"==typeof t.newline&&(y=t.newline);\"string\"==typeof t.quoteChar&&(s=t.quoteChar);\"boolean\"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");i=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s);(\"boolean\"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(o=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\\-@\\t\\r].*$/)}();var u=new RegExp(Q(s),\"g\");\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,r);if(\"object\"==typeof e[0])return h(i||Object.keys(e[0]),e,r)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||i),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],r);throw new Error(\"Unable to serialize unrecognized input\");function h(e,t,r){var i=\"\";\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(i+=m),i+=v(e[a],a);0<t.length&&(i+=y)}for(var o=0;o<t.length;o++){var u=n?e.length:t[o].length,h=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(r&&!n&&(h=\"greedy\"===r?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===r&&n){for(var d=[],l=0;l<u;l++){var c=s?e[l]:l;d.push(t[o][c])}h=\"\"===d.join(\"\").trim()}if(!h){for(var p=0;p<u;p++){0<p&&!f&&(i+=m);var g=n&&s?e[p]:p;i+=v(t[o][g],p)}o<t.length-1&&(!r||0<u&&!f)&&(i+=y)}}return i}function v(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var r=!1;o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0);var i=e.toString().replace(u,a);return(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var r=0;r<t.length;r++)if(-1<e.indexOf(t[r]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=E,b.ParserHandle=r,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var r=o.config||{},u=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)u.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},r)})}),e(),this;function e(){if(0!==u.length){var e,t,r,i,n=u[0];if(J(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,r=n.inputElem,i=s.reason,void(J(o.error)&&o.error({name:e},t,r,i));if(\"skip\"===s.action)return void h();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void h()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){J(a)&&a(e,n.file,n.inputElem),h()},b.parse(n.file,n.instanceConfig)}else J(o.complete)&&o.complete()}function h(){u.splice(0,1),e()}}}function h(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new r(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&J(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=i.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(J(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!J(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){J(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var i;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),h.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(i=new XMLHttpRequest,this._config.withCredentials&&(i.withCredentials=this._config.withCredentials),n||(i.onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)),i.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)i.setRequestHeader(t,e[t])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;i.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+r)}try{i.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===i.status&&this._chunkError()}},this._chunkLoaded=function(){4===i.readyState&&(i.status<200||400<=i.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:i.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(i),this.parseChunk(i.responseText)))},this._chunkError=function(e){var t=i.statusText||e;this._sendError(new Error(t))}}function c(e){var i,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),h.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((i=new FileReader).onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var r=i.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:r}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function p(e){var r;h.call(this,e=e||{}),this.stream=function(e){return r=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=r.substring(0,t),r=r.substring(t)):(e=r,r=\"\"),this._finished=!r,this.parseChunk(e)}}}function g(e){h.call(this,e=e||{});var t=[],r=!0,i=!1;this.pause=function(){h.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){h.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){i&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):r=!0},this._streamData=v(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),i=!0,this._streamData(\"\")},this),this._streamCleanUp=v(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function r(m){var a,o,u,i=Math.pow(2,53),n=-i,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,h=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,t=this,r=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(J(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;r+=e.data.length,m.preview&&r>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){return c&&u&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),u=!1),m.skipEmptyLines&&(c.data=c.data.filter(function(e){return!y(e)})),_()&&function(){if(!c)return;function e(e,t){J(m.transformHeader)&&(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var r,i=m.header?{}:[];for(r=0;r<e.length;r++){var n=r,s=e[r];m.header&&(n=r>=l.length?\"__parsed_extra\":l[r]),m.transform&&(s=m.transform(s,n)),s=v(n,s),\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+r,f+t):r<l.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+r,f+t)),i}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function v(e,t){return r=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[r]&&(m.dynamicTyping[r]=m.dynamicTypingFunction(r)),!0===(m.dynamicTyping[r]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<i)return!0}return!1}(t)?parseFloat(t):h.test(t)?new Date(t):\"\"===t?null:t):t;var r}function k(e,t,r,i){var n={type:e,code:t,message:r};void 0!==i&&(n.row=i),c.errors.push(n)}this.parse=function(e,t,r){var i=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var r=new RegExp(Q(t)+\"([^]*?)\"+Q(t),\"gm\"),i=(e=e.replace(r,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1<n.length&&n[0].length<i[0].length;if(1===i.length||s)return\"\\n\";for(var a=0,o=0;o<i.length;o++)\"\\n\"===i[o][0]&&a++;return a>=i.length/2?\"\\r\\n\":\"\\r\"}(e,i)),u=!1,m.delimiter)J(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,r,i,n){var s,a,o,u;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var h=0;h<n.length;h++){var f=n[h],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:i,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(r&&y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===u||u<l)&&1.99<l&&(a=d,s=f,u=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(u=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&&m.header&&s.preview++,a=e,o=new E(s),c=o.parse(a,t,r),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=J(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,J(m.complete)&&m.complete(c),a=\"\"}}function Q(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(j){var z,M=(j=j||{}).delimiter,P=j.newline,U=j.comments,q=j.step,N=j.preview,B=j.fastMode,K=z=void 0===j.quoteChar||null===j.quoteChar?'\"':j.quoteChar;if(void 0!==j.escapeChar&&(K=j.escapeChar),(\"string\"!=typeof M||-1<b.BAD_DELIMITERS.indexOf(M))&&(M=\",\"),U===M)throw new Error(\"Comment character same as delimiter\");!0===U?U=\"#\":(\"string\"!=typeof U||-1<b.BAD_DELIMITERS.indexOf(U))&&(U=!1),\"\\n\"!==P&&\"\\r\"!==P&&\"\\r\\n\"!==P&&(P=\"\\n\");var W=0,H=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=M.length,s=P.length,a=U.length,o=J(q),u=[],h=[],f=[],d=W=0;if(!i)return L();if(j.header&&!t){var l=i.split(P)[0].split(M),c=[],p={},g=!1;for(var _ in l){var m=l[_];J(j.transformHeader)&&(m=j.transformHeader(m,_));var y=m,v=p[m]||0;for(0<v&&(g=!0,y=m+\"_\"+v),p[m]=v+1;c.includes(y);)y=y+\"_\"+v;c.push(y)}if(g){var k=i.split(P);k[0]=c.join(M),i=k.join(P)}}if(B||!1!==B&&-1===i.indexOf(z)){for(var b=i.split(P),E=0;E<b.length;E++){if(f=b[E],W+=f.length,E!==b.length-1)W+=P.length;else if(r)return L();if(!U||f.substring(0,a)!==U){if(o){if(u=[],I(f.split(M)),F(),H)return L()}else I(f.split(M));if(N&&N<=E)return u=u.slice(0,N),L(!0)}}return L()}for(var w=i.indexOf(M,W),R=i.indexOf(P,W),C=new RegExp(Q(K)+Q(z),\"g\"),S=i.indexOf(z,W);;)if(i[W]!==z)if(U&&0===f.length&&i.substring(W,W+a)===U){if(-1===R)return L();W=R+s,R=i.indexOf(P,W),w=i.indexOf(M,W)}else if(-1!==w&&(w<R||-1===R))f.push(i.substring(W,w)),W=w+e,w=i.indexOf(M,W);else{if(-1===R)break;if(f.push(i.substring(W,R)),D(R+s),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0)}else for(S=W,W++;;){if(-1===(S=i.indexOf(z,S+1)))return r||h.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:u.length,index:W}),T();if(S===n-1)return T(i.substring(W,S).replace(C,z));if(z!==K||i[S+1]!==K){if(z===K||0===S||i[S-1]!==K){-1!==w&&w<S+1&&(w=i.indexOf(M,S+1)),-1!==R&&R<S+1&&(R=i.indexOf(P,S+1));var O=A(-1===R?w:Math.min(w,R));if(i.substr(S+1+O,e)===M){f.push(i.substring(W,S).replace(C,z)),i[W=S+1+O+e]!==z&&(S=i.indexOf(z,W)),w=i.indexOf(M,W),R=i.indexOf(P,W);break}var x=A(R);if(i.substring(S+1+x,S+1+x+s)===P){if(f.push(i.substring(W,S).replace(C,z)),D(S+1+x+s),w=i.indexOf(M,W),S=i.indexOf(z,W),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0);break}h.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:u.length,index:W}),S++}}else S++}return T();function I(e){u.push(e),d=W}function A(e){var t=0;if(-1!==e){var r=i.substring(S+1,e);r&&\"\"===r.trim()&&(t=r.length)}return t}function T(e){return r||(void 0===e&&(e=i.substring(W)),f.push(e),W=n,I(f),o&&F()),L()}function D(e){W=e,I(f),f=[],R=i.indexOf(P,W)}function L(e){return{data:u,errors:h,meta:{delimiter:M,linebreak:P,aborted:H,truncated:!!e,cursor:d+(t||0)}}}function F(){q(L()),u=[],h=[]}},this.abort=function(){H=!0},this.getCharIndex=function(){return W}}function _(e){var t=e.data,r=a[t.workerId],i=!1;if(t.error)r.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){i=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(J(r.userStep)){for(var s=0;s<t.results.data.length&&(r.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!i);s++);delete t.results}else J(r.userChunk)&&(r.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!i&&m(t.workerId,t.results)}function m(e,t){var r=a[e];J(r.userComplete)&&r.userComplete(t),r.terminate(),delete a[e]}function y(){throw new Error(\"Not implemented.\")}function w(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var r in e)t[r]=w(e[r]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function J(e){return\"function\"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var r=b.parse(t.input,t.config);r&&f.postMessage({workerId:b.WORKER_ID,results:r,finished:!0})}}),(l.prototype=Object.create(h.prototype)).constructor=l,(c.prototype=Object.create(h.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(h.prototype)).constructor=g,b});","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [18,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [46,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [62,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [178, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [257, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [282, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {\n  if (receiver !== classConstructor) {\n    throw new TypeError(\"Private static access of wrong provenance\");\n  }\n}","export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {\n  if (descriptor === undefined) {\n    throw new TypeError(\"attempted to \" + action + \" private static field before its declaration\");\n  }\n}","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","import classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nexport default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  return method;\n}","import * as bioc from \"bioconductor\";\n\nexport function cloneCached(x, cached) {\n    return (cached ? bioc.CLONE(x) : x);\n}\n\n/**\n * A representation of a matrix of expression values, where the values are hosted on the Wasm heap for easier compute via [**scran.js**](https://github.com/jkanche/scran.js).\n * See [here](https://jkanche.github.io/scran.js/ScranMatrix.html) for more details.\n *\n * @external ScranMatrix\n */ \n\n/**\n * A representation of multiple {@linkplain external:ScranMatrix ScranMatrix} objects, where each object contains data for the same cells but across a different feature space, e.g., for different data modalities.\n * See [here](https://jkanche.github.io/scran.js/MultiMatrix.html) for more details.\n *\n * @external MultiMatrix\n */ \n\n\n/**\n * A DataFrame from the [**bioconductor**](https://github.com/LTLA/bioconductor.js) package, where each column is represented by some arbitrary vector-like object.\n * See [here](https://ltla.github.io/bioconductor.js/DataFrame.html) for more details.\n *\n * @external DataFrame\n */ \n\n/**\n * Representation of a file that is agnostic to the environment (Node.js or browser) or the nature of the contents (buffer or file path).\n * See [here](https://ltla.github.io/bakana/SimpleFile.html) for more details.\n *\n * @external SimpleFile\n */ \n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as bakana from \"bakana\";\nimport * as utils from \"./utils.js\";\n\nconst baseUrl = \"https://experimenthub.bioconductor.org/fetch\";\n\nconst registry = {\n    \"zeisel-brain\": { \"counts\": \"2596\", \"coldata\": \"2598\", \"rowdata\": \"2597\" }, // corresponding to EH2580, 2582 and 2581, for whatever reason.\n    \"segerstolpe-pancreas\": { \"counts\": \"2591\", \"coldata\": \"2593\", \"rowdata\": \"2592\" }, // corresponding to EH2575, 2577 and 2576.\n    \"nestorowa-hsc\": { \"counts\": \"2710\", \"ncol\": 1920 }, // corresponding to EH2694; the coldata doesn't contain much that's useful here.\n    \"aztekin-tail\": { \"counts\": \"3124\", \"coldata\": \"3125\" }, // corresponding to EH3108 and 3109.\n    \"wu-kidney\": { \"counts\": \"3594\", \"coldata\": \"3595\" }, // corresponding to EH3558 and 3559.\n    \"zilionis-mouse-lung\": { \"counts\": \"3478\", \"coldata\": \"3479\" } // corresponding to EH3462 and 3463.\n};\n\nfunction check_class(handle, accepted, base) {\n    if (!(handle instanceof scran.RdsS4Object)) {\n        throw new Error(\"expected an S4 object\");\n    }\n\n    for (const [k, v] of Object.entries(accepted)) {\n        if (handle.className() == k && handle.packageName() == v) {\n            return;\n        }\n    }\n    throw new Error(\"object is not a \" + base + \" or one of its recognized subclasses\");\n}\n\nfunction load_listData_names(lhandle) {\n    let ndx = lhandle.findAttribute(\"names\");\n    if (ndx < 0) {\n        return null;\n    }\n\n    let nhandle;\n    let names;\n    try {\n        nhandle = lhandle.attribute(ndx);\n        names = nhandle.values();\n    } catch(e) {\n        throw new Error(\"failed to load listData names; \" + e.message);\n    } finally {\n        scran.free(nhandle);\n    }\n\n    if (names.length != lhandle.length()) {\n        throw new Error(\"expected names to have same length as listData\");\n    }\n    return names;\n}\n\nfunction populate_list_columns(lhandle, output) {\n    let colnames = load_listData_names(lhandle);\n    if (colnames == null) {\n        throw new Error(\"expected the listData list to be named\");\n    }\n    let columns = {};\n\n    for (var i = 0; i < lhandle.length(); i++) {\n        let curhandle;\n        try {\n            curhandle = lhandle.load(i);\n            if (curhandle instanceof scran.RdsVector && !(curhandle instanceof scran.RdsGenericVector)) {\n                let curcol = curhandle.values();\n                columns[colnames[i]] = curcol;\n                output.nrow = curcol.length;\n            }\n        } finally {\n            scran.free(curhandle);\n        }\n    }\n\n    output.columns = columns;\n    return;\n}\n\nfunction load_data_frame(handle) {\n    let output = {};\n\n    if (handle.type() == \"S4\") {\n        check_class(handle, { \"DFrame\": \"S4Vectors\", \"DataFrame\": \"S4Vectors\" }, \"DFrame\");\n\n        // Loading the atomic columns.\n        let lhandle;\n        try {\n            lhandle = handle.attribute(\"listData\");\n            if (!(lhandle instanceof scran.RdsGenericVector)) {\n                throw new Error(\"listData slot should be a generic list\");\n            }\n            populate_list_columns(lhandle, output);\n        } catch(e) {\n            throw new Error(\"failed to retrieve data from DataFrame's listData; \" + e.message);\n        } finally {\n            scran.free(lhandle);\n        }\n    } else {\n        if (handle.type() != \"vector\") {\n            throw new Error(\"expected a data.frame or DataFrame instance\");\n        }\n        populate_list_columns(handle, output);\n    }\n\n    // Loading the row names.\n    let rnhandle;\n    try {\n        let rndx = handle.findAttribute(\"rownames\");\n        if (rndx >= 0) {\n            rnhandle = handle.attribute(rndx);\n            if (rnhandle instanceof scran.RdsStringVector) {\n                output.row_names = rnhandle.values();\n                output.nrow = output.row_names.length;\n            }\n        }\n    } catch(e) {\n        throw new Error(\"failed to retrieve row names from DataFrame; \" + e.message);\n    } finally {\n        scran.free(rnhandle);\n    }\n\n    // Loading the number of rows.\n    if (!(\"nrow\" in output)) {\n        let nrhandle;\n        try {\n            nrhandle = handle.attribute(\"nrows\");\n            if (!(nrhandle instanceof scran.RdsIntegerVector)) {\n                throw new Error(\"expected an integer vector as the 'nrows' slot\");\n            }\n            let NR = nrhandle.values();\n            if (NR.length != 1) {\n                throw new Error(\"expected an integer vector of length 1 as the 'nrows' slot\");\n            }\n            output.nrow = NR[0];\n        } catch (e) {\n            throw new Error(\"failed to retrieve nrows from DataFrame; \" + e.message);\n        } finally {\n            scran.free(nrhandle);\n        }\n    }\n\n    return output;\n}\n\nfunction extract_matrix_rownames(handle) {\n    let idx;\n\n    if (handle.type() == \"S4\") {\n        check_class(handle, { \"dgCMatrix\": \"Matrix\", \"dgTMatrix\": \"Matrix\" }, \"Matrix\");\n        idx = handle.findAttribute(\"Dimnames\");\n    } else {\n        idx = handle.findAttribute(\"dimnames\");\n    }\n\n    if (idx < 0) {\n        throw new Error(\"count matrix does not have dimnames\");\n    }\n\n    let dimhandle;\n    let firsthandle;\n    let output;\n    \n    try {\n        dimhandle = handle.attribute(idx);\n        if (dimhandle.type() != \"vector\" && dimhandle.size() != 2) {\n            throw new Error(\"dimnames of the count matrix should be a list of length 2\");\n        }\n\n        firsthandle = dimhandle.load(0);\n        if (firsthandle.type() != \"string\") {\n            throw new Error(\"expected a character vector in the first dimnames\");\n        }\n\n        output = firsthandle.values();\n    } finally {\n        scran.free(dimhandle);\n        scran.free(firsthandle);\n    }\n\n    return output;\n}\n\n/**\n * Dataset derived from a SummarizedExperiment-like representation on Bioconductor's [ExperimentHub](https://bioconductor.org/packages/ExperimentHub).\n */\nexport class ExperimentHubDataset {\n    #id;\n\n    #rowdata;\n    #coldata;\n\n    #counts_handle;\n    #counts_loaded;\n\n    // We should _know_ which experiments correspond to which modality for each\n    // dataset in our registry, so there's no need to provide options for that.\n    // However, we might not know how to choose an appropriate primary\n    // identifier for combining datasets, hence these options.\n    #options;\n\n    /****************************************\n     ****************************************/\n\n    static #downloadFun = async url => {\n        let resp = await fetch(url);\n        if (!resp.ok) {\n            throw new Error(\"failed to fetch content at \" + url + \" (\" + resp.status + \")\");\n        }\n        return new Uint8Array(await resp.arrayBuffer());\n    }\n\n    /** \n     * @param {function} fun - Function that accepts a URL string and downloads the resource,\n     * returning a Uint8Array of its contents.\n     * Alternatively, on Node.js, the funciton may return a string containing the path to the downloaded resource.\n     * @return {function} Previous setting of the download function.\n     */\n    static setDownloadFun(fun) {\n        let previous = ExperimentHubDataset.#downloadFun;\n        ExperimentHubDataset.#downloadFun = fun;\n        return previous;\n    }\n\n    /****************************************\n     ****************************************/\n\n    /**\n     * @return {Array} Array of strings containing identifiers of available datasets.\n     * @static\n     */\n    static availableDatasets() {\n        return Object.keys(registry);\n    }\n\n    /**\n     * @param {string} id - Identifier of a dataset to load.\n     * This should be a string in {@linkcode ExperimentHubDataset.availableDatasets availableDatasets}.\n     */\n    constructor(id) {\n        this.#id = id;\n        if (!(this.#id in registry)) {\n            throw new Error(\"unrecognized identifier '\" + this.#id + \"' for ExperimentHub-based datasets\");\n        }\n\n        this.#options = ExperimentHubDataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode ExperimentHubDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            primaryRnaFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode ExperimentHubDataset#load load} (but not {@linkcode ExperimentHubDataset#summary summary}).\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"ExperimentHub\";\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode ExperimentHubDataset#load load} or {@linkcodeExperimentHubDataset#annotations annotations}. \n     */\n    clear() {\n        scran.free(this.#counts_handle);\n        scran.free(this.#counts_loaded);\n        this.#counts_handle = null;\n        this.#counts_loaded = null;\n        this.#rowdata = null;\n        this.#coldata = null;\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return { \"id\": this.#id, \"options\": this.options() };\n    }\n\n    async #counts() {\n        if (this.#counts_handle !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n        let counts_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.counts);\n        try {\n            this.#counts_loaded = scran.readRds(counts_deets);\n            this.#counts_handle = this.#counts_loaded.value();\n        } catch(e) {\n            scran.free(this.#counts_handle);\n            scran.free(this.#counts_loaded);\n            throw e;\n        }\n    }\n\n    async #features() {\n        if (this.#rowdata !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n\n        if (\"rowdata\" in details) {\n            let rowdata_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.rowdata);\n\n            let rowdata_load;\n            let rowdata_handle;\n            try {\n                rowdata_load = scran.readRds(rowdata_deets);\n                rowdata_handle = rowdata_load.value();\n                let rowdata = load_data_frame(rowdata_handle);\n                let names = rowdata.row_names;\n\n                let output = {};\n                if (names) {\n                    output.id = names;\n                }\n\n                for (const [k, v] of Object.entries(rowdata.columns)) {\n                    if (k.match(/^sym/)) {\n                        output[k] = v;\n                    }\n                }\n\n                if (Object.keys(output).length == 0) {\n                    throw new Error(\"no acceptable feature identifiers found in the rowData DataFrame\");\n                }\n                this.#rowdata = new bioc.DataFrame(output);\n            } finally {\n                scran.free(rowdata_handle);\n                scran.free(rowdata_load);\n            }\n            return;\n        }\n\n        // Otherwise we pull the details from the counts.\n        await this.#counts();\n        let ids = extract_matrix_rownames(this.#counts_handle);\n        this.#rowdata = new bioc.DataFrame({ id: ids });\n    }\n\n    async #cells() {\n        if (this.#coldata !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n        if (\"coldata\" in details) {\n            let coldata_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.coldata);\n\n            let coldata_load;\n            let coldata_handle; \n            let cd_df;\n            try {\n                coldata_load = scran.readRds(coldata_deets);\n                coldata_handle = coldata_load.value();\n                cd_df = load_data_frame(coldata_handle);\n            } finally {\n                scran.free(coldata_handle);\n                scran.free(coldata_load);\n            }\n\n            this.#coldata = new bioc.DataFrame(cd_df.columns, { numberOfRows: cd_df.nrow });\n        } else {\n            this.#coldata = new bioc.DataFrame({}, { numberOfRows: details.ncol });\n        }\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode ExperimentHubDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { cells: utils.cloneCached(this.#coldata, cache) };\n        let my_rd = utils.cloneCached(this.#rowdata, cache);\n        output.modality_features = { \"RNA\": my_rd };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #fetchPrimaryId(curfeat) {\n        let id = this.#options.primaryRnaFeatureIdColumn;\n        if ((typeof id == \"string\" && curfeat.hasColumn(id)) || (typeof id == \"number\" && id < curfeat.numberOfColumns())) {\n            return { RNA: curfeat.column(id) };\n        } else {\n            return { RNA: curfeat.rowNames() };\n        }\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode ExperimentHubDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n        let preview = this.#fetchPrimaryId(this.#rowdata);\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an integer array containing the feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode ExperimentHubDataset#defaults defaults} or with {@linkcode ExperimentHubDataset#setOptions setOptions}.\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#counts();\n\n        let output = {\n            cells: utils.cloneCached(this.#coldata, cache)\n        };\n\n        // Hard-coding the fact that we're dealing with RNA here, as all\n        // registry entries are currently RNA-only anyway.\n        let details = registry[this.#id];\n        try {\n            output.matrix = new scran.MultiMatrix;\n            let counts = scran.initializeSparseMatrixFromRds(this.#counts_handle, { consume: !cache });\n\n            output.matrix.add(\"RNA\", counts.matrix);\n            output.row_ids = { \"RNA\": counts.row_ids };\n\n            let perm_features = bioc.SLICE(this.#rowdata, counts.row_ids);\n            output.features = { \"RNA\": perm_features };\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        output.primary_ids = this.#fetchPrimaryId(output.features.RNA);\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        const enc = new TextEncoder;\n        let buffer = enc.encode(this.#id);\n\n        // Storing it as a string in the buffer.\n        let output = {\n            type: \"id\",\n            file: new bakana.SimpleFile(buffer, { name: \"id\" })\n        };\n\n        return {\n            files: [ output ],\n            options: this.options()\n        }\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode ExperimentHubDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {ExperimentHubDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        let args = {};\n\n        // This should contain 'id'.\n        for (const x of files) {\n            const dec = new TextDecoder;\n            args[x.type] = dec.decode(x.file.buffer());\n        }\n\n        if (!(\"id\" in args)) {\n            throw new Error(\"expected a file of type 'id' when unserializing ExperimentHub dataset\"); \n        }\n        return new ExperimentHubDataset(args.id, options);\n    }\n}\n","/**\n * Representation of a HTTP response error.\n * The error message is captured in `message` as usual, but the HTTP status code may also be retrieved via the `statusCode` property.\n */\nexport class HttpError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.statusCode = code;\n    }\n}\n\nexport async function checkHttpResponse(res, msg) {\n    if (res.ok) {\n        return;\n    }\n\n    let info = await res.json();\n    if (info.status == \"error\") {\n        throw new HttpError(msg + \"; \" + info.reason, res.status);\n    } \n\n    throw new HttpError(msg, res.status);\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as bakana from \"bakana\";\nimport * as adb from \"artifactdb\";\nimport * as utils from \"./utils.js\";\n\nconst baseUrl = \"https://collaboratordb.aaron-lun.workers.dev\";\n\nvar getFun = null;\nvar downloadFun = null;\n\nclass CollaboratordbNavigator {\n    #project;\n    #version;\n\n    constructor(project, version) {\n        this.#project = project;\n        this.#version = version;\n    }\n\n    async file(path) {\n        let id = adb.packId(this.#project, path, this.#version);\n        return await adb.getFile(baseUrl, id, { getFun: getFun, downloadFun: downloadFun });\n    }\n\n    async metadata(path) {\n        let id = adb.packId(this.#project, path, this.#version);\n        return await adb.getFileMetadata(baseUrl, id, { getFun: getFun });\n    }\n};\n\n/**\n * Dataset derived from a SummarizedExperiment in [CollaboratorDB](https://github.com/CollaboratorDB).\n * This extends the [AbstractArtifactdbDataset](https://kanaverse.github.io/bakana/AbstractArtifactdbDataset.html) class.\n */\nexport class CollaboratordbDataset extends bakana.AbstractArtifactdbDataset {\n    /** \n     * @param {?function} fun - Function that accepts a URL string and downloads the resource,\n     * returning a Uint8Array of the file contents.\n     * Alternatively, on Node.js, the function may return a string containing a file path to the downloaded resource.\n     * \n     * Alternatively `null`, to reset the function to its default value.\n     * See [`getFile`](https://artifactdb.github.io/artifactdb.js/global.html#getFile) for details.\n     * @return {?function} Previous setting of the download function.\n     */\n    static setDownloadFun(fun) {\n        let previous = downloadFun;\n        downloadFun = fun;\n        return previous;\n    }\n\n    /** \n     * @param {?function} fun - Function that accepts a URL string and performs a GET to return a Response object,\n     * see [`getFileMetadata`](https://artifactdb.github.io/artifactdb.js/global.html#getFileMetadata) for details.\n     * \n     * Alternatively `null`, to reset the function to its default value.\n     * @return {?function} Previous setting of the GET function.\n     */\n    static setGetFun(fun) {\n        let previous = getFun;\n        getFun = fun;\n        return previous;\n    }\n\n    /****************************************\n     ****************************************/\n\n    #id;\n    #unpacked;\n\n    /**\n     * @param {string} id - Identifier of a SummarizedExperiment in CollaboratorDB.\n     */\n    constructor(id) {\n        let unpacked = adb.unpackId(id);\n        super(unpacked.path, new CollaboratordbNavigator(unpacked.project, unpacked.version));\n        this.#id = id;\n        this.#unpacked = unpacked;\n        return;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"CollaboratorDB\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return { \n            \"id\": this.#id, \n            \"options\": this.options()\n        };\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        const enc = new TextEncoder;\n        let buffer = enc.encode(this.#id);\n\n        // Storing it as a string in the buffer.\n        let output = {\n            type: \"id\",\n            file: new bakana.SimpleFile(buffer, { name: \"id\" })\n        };\n\n        return {\n            files: [ output ],\n            options: this.options()\n        }\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode CollaboratordbDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {CollaboratordbDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        let args = {};\n\n        // This should contain 'id'.\n        for (const x of files) {\n            const dec = new TextDecoder;\n            args[x.type] = dec.decode(x.file.buffer());\n        }\n\n        if (!(\"id\" in args)) {\n            throw new Error(\"expected a file of type 'id' when unserializing CollaboratorDB dataset\"); \n        }\n        return new CollaboratordbDataset(args.id, options);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X HDF5 feature-barcode matrix format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices) for details.\n */\nexport class TenxHdf5Dataset { \n    #h5_file;\n    #h5_path;\n    #h5_flush;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"h5\", file: fun(this.#h5_file) }];\n        let options = this.options();\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} h5File - Contents of a HDF5 file in the 10X feature-barcode format.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     */\n    constructor(h5File) {\n        if (h5File instanceof afile.SimpleFile) {\n            this.#h5_file = h5File;\n        } else {\n            this.#h5_file = new afile.SimpleFile(h5File);\n        }\n\n        this.#options = TenxHdf5Dataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxHdf5Dataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxHdf5Dataset#load load} (but not {@linkcode TenxHdf5Dataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * If `null` or the string is not present among the feature types, no RNA features are to be loaded.\n     *\n     * If no feature type information is available in the dataset, all features are considered to be genes by default.\n     * This behavior can also be explicitly requested by setting this argument to the only non-`null` value among all `featureType*Name` parameters.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * If `null` or the string is not present among the feature types, no ADT features are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be ADTs.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * If `null` or the string is not present among the feature types, no guides are to be loaded.\n     * \n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be guides.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #instantiate() {\n        if (this.#h5_path !== null) {\n            return;\n        }\n\n        let info = scran.realizeFile(this.#h5_file.content());\n        this.#h5_path = info.path;\n        this.#h5_flush = info.flush;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxHdf5Dataset#load load} or {@linkcodeTenxHdf5Dataset#summary summary}. \n     */\n    clear() {\n        if (typeof this.#h5_flush == \"function\") {\n            this.#h5_flush();\n        }\n        this.#h5_flush = null;\n        this.#h5_path = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"10X\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let handle = new scran.H5File(this.#h5_path);\n        if (!(\"matrix\" in handle.children) || handle.children[\"matrix\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix' group at the top level of the file\");\n        }\n        let mhandle = handle.open(\"matrix\");\n\n        if (!(\"features\" in mhandle.children) || mhandle.children[\"features\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix/features' group containing the feature annotation\");\n        }\n        let fhandle = mhandle.open(\"features\");\n\n        let ids = eutils.extractHDF5Strings(fhandle, \"id\");\n        if (ids == null) {\n            throw new Error(\"expected a 'matrix/features/id' string dataset containing the feature IDs\");\n        }\n        let feats = new bioc.DataFrame({ id: ids }); // build it piece-by-piece for a well-defined ordering.\n\n        let names = eutils.extractHDF5Strings(fhandle, \"name\");\n        if (names !== null) {\n            feats.$setColumn(\"name\", names);\n        }\n\n        let ftype = eutils.extractHDF5Strings(fhandle, \"feature_type\");\n        if (ftype !== null) {\n            feats.$setColumn(\"type\", ftype);\n        }\n\n        this.#raw_features = feats;\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let details = scran.extractHDF5MatrixDetails(this.#h5_path, \"matrix\");\n        this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: details.columns });\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    summary({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxHdf5Dataset#load load} but the order of values may be different.\n     */\n    previewPrimaryIds({ cache = false } = {}) {\n        this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxHdf5Dataset#defaults defaults} or with {@linkcode TenxHdf5Dataset#setOptions setOptions}.\n     *\n     * If the feature annotation lacks information about the feature types, it is assumed that all features are genes, i.e., only the RNA modality is present.\n     */\n    load({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let loaded = scran.initializeSparseMatrixFromHDF5(this.#h5_path, \"matrix\"); // collection gets handled inside splitScranMatrixAndFeatures.\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\");\n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxHdf5Dataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxHdf5Dataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"h5\") {\n            throw new Error(\"expected exactly one file of type 'h5' for 10X HDF5 unserialization\");\n        }\n        let output = new TenxHdf5Dataset(files[0].file);\n        output.setOptions(output);\n        return output;\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**\n * Any class that satisfies the ArtifactdbProjectNavigator contract, so called as it is intended to \"navigate\" an ArtifactDB project directory.\n * This should provide the following methods:\n * \n * - `metadata(p)`, a (possibly async) method that accepts a string `p` containing a relative path to a resource inside an ArtifactDB project directory,\n *   and returns an object containing the metadata for that object.\n *   Any redirections should be resolved by this method.\n *\n *   Note that {@linkplain AbstractArtifactdbDataset} will automatically cache the outputs of all `metadata()` calls between any invocations of {@linkcode AbstractArtifactdbDataset#clear clear},\n *   to improve efficiency when repeatedly accessing the same metadata.\n *   The same applies to {@linkplain AbstractArtifactdbResult}.\n * - `file(p)`, a (possibly async) method that accepts a string `p` containing a relative path inside a project directory and returns the contents of the file at that path.\n *   The return value should typically be a Uint8Array; on Node.js, methods may alternatively return a string containing a path to the file on the local file system.\n *   The method does not need to handle redirections from `p`.\n *\n * Optionally, the ArtifactdbProjectNavigator class may implement a `clear()` method to remove any cached content.\n * This will be called by {@linkcode AbstractArtifactdbDataset#clear AbstractArtifactdbDataset.clear} and  {@linkcode AbstractArtifactdbResult#clear AbstractArtifactdbResult.clear}.\n *\n * @typedef ArtifactdbProjectNavigator\n */\n\n/**************************\n ******* Internals ********\n **************************/\n\nasync function load_data_frame(info, navigator) {\n    if (typeof info == \"string\") {\n        info = await navigator.metadata(info);\n    }\n    let contents = await navigator.file(info.path);\n\n    let colnames;\n    let columns;\n    let rownames = null;\n\n    if (info[\"$schema\"].startsWith(\"csv_data_frame/\")) {\n        // TODO: replace with comservatory parser.\n        let parsed = await eutils.readTable2(contents, { delim: \",\" });\n        colnames = parsed.shift();\n\n        columns = new Array(colnames.length);\n        for (var i = 0; i < columns.length; i++) {\n            let current = [];\n            for (const x of parsed) {\n                current.push(x[i]);\n            }\n            columns[i] = current;\n        }\n\n        if (info.data_frame.row_names) {\n            rownames = columns.shift();\n            colnames.shift();\n        }\n\n        // Mutating the type... this doesn't quite handle NAs and NaNs properly, but whatever.\n        for (var i = 0; i < columns.length; i++) {\n            let type = info.data_frame.columns[i].type;\n            if (type == \"integer\") {\n                columns[i] = new Int32Array(columns[i]);\n            } else if (type == \"number\") {\n                columns[i] = new Float64Array(columns[i]);\n            } else if (type == \"boolean\") {\n                columns[i] = columns[i].map(x => x == \"true\");\n            }\n        }\n\n    } else if (info[\"$schema\"].startsWith(\"hdf5_data_frame/\")) {\n        let out = scran.realizeFile(contents);\n        try {\n            let handle = new scran.H5File(out.path);\n            let ghandle = handle.open(info.hdf5_data_frame.group);\n\n            colnames = ghandle.open(\"column_names\", { load: true }).values;\n            if (info.data_frame.row_names) {\n                rownames = ghandle.open(\"row_names\", { load: true }).values;\n            }\n\n            columns = [];\n            let chandle = ghandle.open(\"data\");\n            for (var i = 0; i < colnames.length; i++) {\n                if (!(String(i) in chandle.children)) {\n                    columns.push(null);\n                    continue;\n                }\n\n                let dhandle = chandle.open(String(i), { load: true });\n                let current = dhandle.values;\n\n                let type = info.data_frame.columns[i];\n                if (type == \"integer\") {\n                    if (current instanceof Float64Array || current instanceof Float32Array) {\n                        current = new Int32Array(current);\n                    }\n\n                } else if (type == \"number\") {\n                    if (!(current instanceof Float64Array) && !(current instanceof Float32Array)) {\n                        current = new Float64Array(current);\n                    }\n\n                } else if (type == \"boolean\") {\n                    let replacement = new Array(current.length);\n                    for (var i = 0; i < current.length; i++) {\n                        if (current[i] == -2147483648) {\n                            replacement[i] = null;\n                        } else {\n                            replacement[i] = current[i] != 0\n                        }\n                    }\n                    current = replacement;\n\n                } else if (type == \"string\" || type == \"date\") {\n                    if (\"missing-value-placeholder\" in dhandle.attributes) {\n                        let placeholder = dhandle.readAttribute(\"missing-value-placeholder\").values[0];\n                        for (var i = 0; i < current.length; i++) {\n                            if (current[i] == placeholder) {\n                                current[i] = null;\n                            }\n                        }\n                    }\n                }\n\n                columns.push(current);\n            }\n        } finally {\n            out.flush();\n        }\n\n    } else {\n        throw new Error(\"unknown data_frame schema type '\" + info[\"$schema\"] + \"'\");\n    }\n\n    let new_columns = {};\n    let new_colnames = [];\n    for (var i = 0; i < columns.length; i++) {\n        if (info.data_frame.columns[i].type === \"other\") {\n            let nest_meta = await navigator.metadata(info.data_frame.columns[i].resource.path);\n            try {\n                new_columns[colnames[i]] = await load_data_frame(nest_meta, navigator);\n                new_colnames.push(colnames[i]);\n            } catch (e) {\n                console.warn(e);\n            }\n        } else {\n            new_columns[colnames[i]] = columns[i];\n            new_colnames.push(colnames[i]);\n        }\n    }\n\n    return new bioc.DataFrame(new_columns, { \n        columnOrder: new_colnames, \n        rowNames: rownames, \n        numberOfRows: info.data_frame.dimensions[0] \n    });\n}\n\nconst main_experiment_name = \"\";\n\nasync function extract_all_features(path, navigator) {\n    let extract_features = async se_meta => {\n        if (\"row_data\" in se_meta.summarized_experiment) {\n            let row_path = se_meta.summarized_experiment.row_data.resource.path;\n            return await load_data_frame(row_path, navigator);\n        } else {\n            return new bioc.DataFrame({}, { numberOfRows: se_meta.summarized_experiment.dimensions[0] });\n        }\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let output = {};\n    output[main_experiment_name] = await extract_features(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                output[alt.name] = await extract_features(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return output;\n}\n\nasync function extract_all_assay_names(path, navigator) {\n    let extract_assay_names = se_meta => {\n        let output = [];\n        for (const ass of se_meta.summarized_experiment.assays) {\n            output.push(ass.name);\n        }\n        return output;\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let assays = {};\n    assays[main_experiment_name] = extract_assay_names(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                assays[alt.name] = extract_assay_names(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return assays;\n}\n\n// This specifically loads the log-counts created by the dumper.\n// TODO: replace this with chihaya.js.\nasync function extract_logcounts(handle, navigator) {\n    if (handle.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (handle.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (Math.abs(handle.open(\"value\", { load: true }).values[0] - Math.log(2)) > 0.00000001) {\n        return null;\n    }\n    if (handle.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (handle.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n\n    let ghandle2 = handle.open(\"seed\");\n    if (ghandle2.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle2.readAttribute(\"delayed_operation\").values[0] !== \"unary math\") {\n        return null;\n    }\n    if (ghandle2.open(\"method\", { load: true }).values[0] !== \"log1p\") {\n        return null;\n    }\n\n    let ghandle3 = ghandle2.open(\"seed\");\n    if (ghandle3.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle3.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (ghandle3.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (ghandle3.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n    if (ghandle3.open(\"along\", { load: true }).values[0] !== 1) {\n        return null;\n    }\n    let sf = ghandle3.open(\"value\", { load: true }).values;\n\n    let ahandle = ghandle3.open(\"seed\");\n    if (ahandle.readAttribute(\"delayed_type\").values[0] !== \"array\") {\n        return null;\n    }\n    if (ahandle.readAttribute(\"delayed_array\").values[0] !== \"custom alabaster local array\") {\n        return null;\n    }\n    let path = ahandle.open(\"path\", { load: true }).values[0];\n\n    let mat;\n    let output = {};\n    try {\n        mat = await extract_assay_raw(path, navigator, false); // don't force it to be integer, but we don't mind if it is.\n        output.matrix = scran.logNormCounts(mat.matrix, { sizeFactors: sf, center: false });\n        output.row_ids = mat.row_ids;\n    } finally {\n        scran.free(mat.matrix);\n    }\n                \n    return output;\n}\n\nasync function extract_assay(meta, assay, navigator, forceInteger) {\n    if (typeof assay == \"string\") {\n        var counter = 0;\n        for (const ass of meta.summarized_experiment.assays) {\n            if (ass.name == assay) {\n                assay = counter;\n                break;\n            }\n            counter++;\n        }\n        if (counter == meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay '\" + assay + \"' not found\");\n        }\n    } else {\n        if (assay >= meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay \" + String(assay) + \" out of range\");\n        }\n    }\n\n    let asspath = meta.summarized_experiment.assays[assay].resource.path;\n    return extract_assay_raw(asspath, navigator, forceInteger);\n}\n\nasync function extract_assay_raw(asspath, navigator, forceInteger) {\n    let assmeta = await navigator.metadata(asspath);\n    let contents = await navigator.file(assmeta.path);\n    let output;\n\n    let schema = assmeta[\"$schema\"];\n    let is_dense = schema.startsWith(\"hdf5_dense_array/\");\n    let is_sparse = schema.startsWith(\"hdf5_sparse_matrix/\");\n\n    if (is_dense || is_sparse) {\n        let name = (is_sparse ?  assmeta.hdf5_sparse_matrix.group : assmeta.hdf5_dense_array.dataset);\n        let stuff = scran.realizeFile(contents);\n        try {\n            output = scran.initializeSparseMatrixFromHDF5(stuff.path, name, { forceInteger });\n        } finally {\n            stuff.flush();\n        }\n\n    } else if (assmeta[\"$schema\"].startsWith(\"hdf5_delayed_array/\")) {\n        let stuff = scran.realizeFile(contents);\n        try {\n            let fhandle = new scran.H5File(stuff.path);\n            let ghandle = fhandle.open(assmeta.hdf5_delayed_array.group);\n\n            // TODO: replace with calls to chihaya.js.\n            output = await extract_logcounts(ghandle, navigator);\n            if (output == null) {\n                throw new Error(\"currently only supporting bakana-generated log-counts for delayed arrays\");\n            }\n        } finally {\n            stuff.flush();\n        }\n\n    } else {\n        throw new Error(\"array schema '\" + assmeta[\"$schema\"] + \"' is currently not supported\");\n    }\n\n    return output;\n}\n\nasync function extract_other_data(other_path, navigator) {\n    let othermeta = await navigator.metadata(other_path);\n    if (!othermeta[\"$schema\"].startsWith(\"json_simple_list/\")) {\n        throw new Error(\"currently only support JSON-formatted lists in the 'other_data'\");\n    }\n\n    let contents = await navigator.file(othermeta.path);\n    let ofile = new afile.SimpleFile(contents, { name: \"list.json\" });\n    let unpacked = eutils.unpackText(ofile.buffer(), { compression: (othermeta.json_simple_list.compression == \"gzip\" ? \"gz\" : \"none\") });\n    let parsed = JSON.parse(unpacked);\n    return extract_list_data_internal(parsed);\n}\n\nfunction extract_list_data_internal(obj) {\n    if (!(\"type\" in obj)) {\n        throw new Error(\"non-standard JSON object for 'json_simple_list' schema\");\n    }\n\n    if (obj.type == \"number\") {\n        if (obj.values instanceof Array) {\n            let output = new Float64Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? Number.NaN : x) \n            });\n            return output;\n        } else {\n            return (obj.values == null ? Number.NaN : obj.values);\n        }\n\n    } else if (obj.type == \"integer\") {\n        if (obj.values instanceof Array) {\n            let output = new Int32Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? -2147483648 : x) \n            });\n            return output;\n        } else {\n            return obj.values;\n        }\n\n    } else if (obj.type == \"boolean\" || obj.type == \"string\") {\n        return obj.values;\n\n    } else if (obj.type == \"list\") {\n        if (\"names\" in obj) {\n            let output = {};\n            for (var i = 0; i < obj.values.length; i++) {\n                output[obj.names[i]] = extract_list_data_internal(obj.values[i]);\n            }\n            return output;\n        } else {\n            let output = [];\n            for (var i = 0; i < obj.values.length; i++) {\n                output.push(extract_list_data_internal(obj.values[i]));\n            }\n            return output;\n        }\n\n    } else if (obj.type == \"nothing\") {\n        return null;\n\n    } else {\n        console.warn(\"JSON simple list containing type '\" + obj.type + \"' is not yet supported\");\n        return null;\n    }\n}\n\n/***********************\n ******* Cacher ********\n ***********************/\n\n// As we'll be using the metadata often, we cache it at this level. This\n// removes the burden of caching on the implementation of the navigator. \nclass MetadataCacheWrapper {\n    #navigator;\n    #metadata_cache;\n\n    constructor(nav) {\n        this.#navigator = nav;\n        this.#metadata_cache = {};\n    }\n\n    clear() {\n        this.#metadata_cache = {};\n        if (\"clear\" in this.#navigator) {\n            this.#navigator.clear();\n        }\n    }\n\n    async metadata(path) {\n        if (path in this.#metadata_cache) {\n            return this.#metadata_cache[path];\n        } else {\n            let content = await this.#navigator.metadata(path);\n            this.#metadata_cache[path] = content;\n            return content;\n        }\n    }\n\n    file(path) {\n        return this.#navigator.file(path);\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n * Subclasses should define `abbreviate()` and `serialize()` methods, as well as the static `format()` and `unserialize()` methods - \n * see the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md) for more details.\n */\nexport class AbstractArtifactdbDataset {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbDataset.defaults();\n\n        // Don't call this.clear() here. We don't want to clear the navigator's\n        // cache at this point, as the navigator might contain some cached\n        // values when passed to the constructor. We should respect any caches\n        // until we're specifically told to discard it with clear() or cache =\n        // false in load() or summary().\n        this.#reset_local_caches();\n        return;\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            rnaCountAssay: 0, \n            adtCountAssay: 0, \n            crisprCountAssay: 0,\n            rnaExperiment: \"\", \n            adtExperiment: \"Antibody Capture\", \n            crisprExperiment: \"CRISPR Guide Capture\",\n            primaryRnaFeatureIdColumn: null, \n            primaryAdtFeatureIdColumn: null,\n            primaryCrisprFeatureIdColumn: null \n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbDataset#load load} (but not {@linkcode AbstractArtifactdbDataset#summary summary}).\n     * @param {string|number} [options.rnaCountAssay] - Name or index of the assay containing the RNA count matrix.\n     * @param {string|number} [options.adtCountAssay] - Name or index of the assay containing the ADT count matrix.\n     * @param {string|number} [options.crisprCountAssay] - Name or index of the assay containing the CRISPR count matrix.\n     * @param {?(string|number)} [options.rnaExperiment] - Name or index of the alternative experiment containing gene expression data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     * @param {?(string|number)} [options.adtExperiment] - Name or index of the alternative experiment containing ADT data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     * @param {?(string|number)} [options.crisprExperiment] - Name or index of the alternative experiment containing CRISPR guide data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     * @param {?(string|number)} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbDataset#load load} or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator)\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode AbstractArtifactdbDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n\n        let fmapping = {\n            RNA: this.#options.rnaExperiment, \n            ADT: this.#options.adtExperiment, \n            CRISPR: this.#options.crisprExperiment \n        };\n\n        let preview = futils.extractRemappedPrimaryIds(this.#raw_features, fmapping, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode AbstractArtifactdbDataset#defaults defaults} or with {@linkcode AbstractArtifactdbDataset#setOptions setOptions}.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#options.rnaExperiment, assay: this.#options.rnaCountAssay },\n            ADT: { exp: this.#options.adtExperiment, assay: this.#options.adtCountAssay },\n            CRISPR: { exp: this.#options.crisprExperiment, assay: this.#options.crisprCountAssay }\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let altmap = {};\n        let alts = [];\n        if (\"single_cell_experiment\" in full_meta) {\n            alts = full_meta.single_cell_experiment.alternative_experiments;\n            for (const alt of alts) {\n                altmap[alt.name] = alt.resource.path;\n            }\n        }\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let meta = null;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        meta = full_meta;\n                    } else {\n                        if (!(v.exp in altmap)) {\n                            continue;\n                        }\n                        meta = await this.#navigator.metadata(altmap[v.exp]);\n                    }\n                } else {\n                    if (v.exp >= alts.length) {\n                        continue;\n                    }\n                    name = alts[v.exp].name;\n                    meta = await this.#navigator.metadata(alts[v.exp].resource.path);\n                }\n\n                let loaded = await extract_assay(meta, v.assay, this.#navigator, true);\n                output.matrix.add(k, loaded.matrix);\n                output.features[k] = bioc.SLICE(this.#raw_features[name], loaded.row_ids);\n            }\n\n            output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentDatasetBase = AbstractArtifactdbDataset;\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n */\nexport class AbstractArtifactdbResult {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n    #raw_other;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbResult.defaults();\n\n        // Don't call clear() here, see comments above in the Dataset constructor.\n        this.#reset_local_caches();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbResults#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return { \n            primaryAssay: 0,\n            isPrimaryNormalized: true,\n            reducedDimensionNames: null\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbResult#load load} (but not {@linkcode AbstractArtifactdbResult#summary summary}.\n     * @param {object|string|number} [options.primaryAssay] - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     * @param {object|boolean} [options.isPrimaryNormalized] - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     * @param {?Array} [options.reducedDimensionNames] - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setOptions(options) {\n        // Cloning to avoid pass-by-reference links.\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = bioc.CLONE(v);\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#raw_other = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbResult#load load} or {@linkcode AbstractArtifactdbResult#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    async #other() {\n        if (this.#raw_other !== null) {\n            return;\n        }\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"other_data\" in full_meta.summarized_experiment) {\n            let other_path = full_meta.summarized_experiment.other_data.resource.path;\n            this.#raw_other = await extract_other_data(other_path, this.#navigator);\n        } else {\n            this.#raw_other = {};\n        }\n        return;\n    }\n\n    async #get_all_reddim_names(rd_meta, store) {\n        for (const red of rd_meta) {\n            let redmeta = await this.#navigator.metadata(red.resource.path);\n            if (redmeta[\"$schema\"].startsWith(\"hdf5_dense_array/\") && redmeta.array.dimensions.length == 2) {\n                store.push(red.name);\n            }\n        }\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async \n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator),\n            reduced_dimension_names: [],\n            other_metadata: this.#raw_other\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta) {\n            let reddim_meta = full_meta.single_cell_experiment.reduced_dimensions;\n            await this.#get_all_reddim_names(reddim_meta, output.reduced_dimension_names);\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {},\n            other_metadata: this.#raw_other\n        };\n\n        // Fetch the reduced dimensions first.\n        {\n            let reddims = this.#options.reducedDimensionNames;\n            let reddim_meta = full_meta.single_cell_experiment.reduced_dimensions;\n\n            if (reddims == null) {\n                reddims = [];\n                await this.#get_all_reddim_names(reddim_meta, reddims);\n            }\n\n            if (reddims.length > 0) {\n                let redmap = {};\n                for (const red of reddim_meta) {\n                    redmap[red.name] = red.resource.path;\n                }\n\n                for (const k of reddims) {\n                    let redmeta = await this.#navigator.metadata(redmap[k]); // this should be only HDF5 dense matrices.\n                    let dims = redmeta.array.dimensions;\n                    let redcontents = await this.#navigator.file(redmeta.path); \n\n                    let realized = scran.realizeFile(redcontents);\n                    let acquired = [];\n                    try {\n                        let fhandle = new scran.H5File(realized.path);\n                        let dhandle = fhandle.open(redmeta.hdf5_dense_array.dataset, { load: true });\n                        let contents = dhandle.values;\n                        for (var d = 0; d < dims[1]; d++) {\n                            acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n                        }\n                    } finally {\n                        realized.flush();\n                    }\n\n                    output.reduced_dimensions[k] = acquired;\n                }\n            }\n        }\n\n        // Now fetching the assay matrix.\n        {\n            let altmap = {};\n            if (\"single_cell_experiment\" in full_meta) {\n                for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n                    altmap[alt.name] = alt.resource.path;\n                }\n            }\n\n            try {\n                for (const [k, v] of Object.entries(this.#raw_features)) {\n                    let curassay = this.#options.primaryAssay;\n                    if (typeof curassay == \"object\") {\n                        if (k in curassay) {\n                            curassay = curassay[k];\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    let curnormalized = this.#options.isPrimaryNormalized;\n                    if (typeof curnormalized == \"object\") {\n                        if (k in curnormalized) {\n                            curnormalized = curnormalized[k];\n                        } else {\n                            curnormalized = true;\n                        }\n                    }\n\n                    let meta;\n                    if (k === \"\") {\n                        meta = full_meta;\n                    } else {\n                        meta = await this.#navigator.metadata(altmap[k]);\n                    }\n\n                    let loaded = await extract_assay(meta, curassay, this.#navigator, !curnormalized);\n                    output.matrix.add(k, loaded.matrix);\n\n                    if (!curnormalized) {\n                        let normed = scran.logNormCounts(loaded.matrix, { allowZeros: true });\n                        output.matrix.add(k, normed);\n                    }\n\n                    if (loaded.row_ids !== null) {\n                        output.features[k] = bioc.SLICE(this.#raw_features[k], loaded.row_ids);\n                    } else {\n                        output.features[k] = this.#raw_features[k];\n                    }\n                }\n\n            } catch (e) {\n                scran.free(output.matrix);\n                throw e;\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentResultBase = AbstractArtifactdbResult;\n","export class SimpleFile {\n    #mode;\n    #buffer;\n    #file;\n    #name;\n\n    constructor(x, { name = null } = {}) {\n        if (x instanceof File) {\n            this.#mode = \"file\";\n            this.#file = x;\n            if (name === null) {\n                name = x.name;\n            }\n            this.#name = name;\n        } else if (x instanceof Uint8Array) {\n            this.#mode = \"buffer\";\n            this.#buffer = x; \n            if (name === null) {\n                throw new Error(\"'name' must be provided for Uint8Array inputs in SimpleFile constructor\");\n            }\n            this.#name = name;\n        } else {\n            throw new Error(\"unknown type '\" + typeof(x) + \"' for SimpleFile constructor\");\n        }\n    }\n\n    buffer({ copy = false } = {}) {\n        if (this.#mode == \"file\") {\n            let reader = new FileReaderSync();\n            let b = reader.readAsArrayBuffer(this.#file);\n            return new Uint8Array(b);\n        } else {\n            if (copy) {\n                return this.#buffer.slice();\n            } else {\n                return this.#buffer;\n            }\n        }\n    }\n\n    size() {\n        if (this.#mode == \"file\") {\n            return this.#file.size;\n        } else {\n            return this.#buffer.length;\n        }\n    }\n\n    name() {\n        return this.#name;\n    }\n\n    content({ copy = false } = {}) {\n        return this.buffer({ copy: copy });\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X Matrix Market format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/matrices) for details.\n */\nexport class TenxMatrixMarketDataset {\n    #matrix_file;\n    #feature_file;\n    #barcode_file;\n\n    #dimensions;\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"mtx\", file: fun(this.#matrix_file) }];\n\n        if (this.#feature_file !== null) {\n            files.push({ type: \"genes\", file: fun(this.#feature_file) });\n        }\n\n        if (this.#barcode_file !== null) {\n            files.push({ type: \"annotations\", file: fun(this.#barcode_file) });\n        }\n\n        let options = this.options(); \n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} matrixFile - A Matrix Market file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {?(SimpleFile|string|Uint8Array|File)} featureFile - Contents of a feature annotation file.\n     * If `null`, it is assumed that no file was available.\n     * @param {?(SimpleFile|string|Uint8Array|File)} barcodeFile - Contents of a barcode annotation file.\n     * If `null`, it is assumed that no file was available.\n     */\n    constructor(matrixFile, featureFile, barcodeFile, { \n        featureTypeRnaName = \"Gene Expression\", \n        featureTypeAdtName = \"Antibody Capture\", \n        featureTypeCrisprName = \"CRISPR Guide Capture\", \n        primaryRnaFeatureIdColumn = 0, \n        primaryAdtFeatureIdColumn = 0,\n        primaryCrisprFeatureIdColumn = 0\n    } = {}) {\n        if (matrixFile instanceof afile.SimpleFile) {\n            this.#matrix_file = matrixFile;\n        } else {\n            this.#matrix_file = new afile.SimpleFile(matrixFile);\n        }\n\n        if (featureFile instanceof afile.SimpleFile || featureFile == null) {\n            this.#feature_file = featureFile;\n        } else {\n            this.#feature_file = new afile.SimpleFile(featureFile);\n        }\n\n        if (barcodeFile instanceof afile.SimpleFile || barcodeFile == null) {\n            this.#barcode_file = barcodeFile;\n        } else {\n            this.#barcode_file = new afile.SimpleFile(barcodeFile);\n        }\n\n        this.#options = TenxMatrixMarketDataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxMatrixMarketDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxMatrixMarketDataset#load load} (but not {@linkcode TenxMatrixMarketDataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * If `null` or the string is not present among the feature types, no RNA features are to be loaded.\n     *\n     * If no feature type information is available in the dataset, all features are considered to be genes by default.\n     * This behavior can be explicitly requested by setting this argument to the only non-`null` value among all `featureType*Name` parameters.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * If `null` or the string is not present among the feature types, no ADT features are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be ADTs.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * If `null` or the string is not present among the feature types, no guides are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be guides.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxMatrixMarketDataset#load load} or {@linkcodeTenxMatrixMarketDataset#summary summary}. \n     */\n    clear() {\n        this.#dimensions = null;\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"MatrixMarket\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate(args) {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #fetch_dimensions() {\n        if (this.#dimensions !== null) {\n            return;\n        }\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let headers = scran.extractMatrixMarketDimensions(this.#matrix_file.content(), { \"compressed\": is_gz });\n        this.#dimensions = [headers.rows, headers.columns];\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        let NR = this.#dimensions[0];\n        if (this.#feature_file == null) {\n            this.#raw_features = new bioc.DataFrame({}, { numberOfRows: NR });\n            return;\n        }\n\n        let fname = this.#feature_file.name();\n        var is_gz = fname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#feature_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        if (parsed.length == NR + 1) {\n            // If it seems to have a header, we just use that directly.\n            let output = {};\n            let headers = parsed.shift();\n            headers.forEach((x, i) => {\n                output[x] = parsed.map(y => y[i]);\n            });\n            this.#raw_features = output;\n            return;\n        }\n\n        // Otherwise, we assume it's standard 10X CellRanger output, without a header.\n        if (parsed.length !== NR) {\n            throw new Error(\"number of matrix rows is not equal to the number of rows in '\" + fname + \"'\");\n        } \n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        let output = new bioc.DataFrame({}, { numberOfRows: NR }); // build it piece-by-piece for a well-defined order.\n        output.$setColumn(\"id\", ids);\n        output.$setColumn(\"name\", symb);\n\n        if (parsed[0].length > 2) {\n            let types = [];\n            parsed.forEach(x => { types.push(x[2]); });\n            output.$setColumn(\"type\", types);\n        }\n\n        this.#raw_features = output;\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        if (this.#barcode_file == null) {\n            this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: this.#dimensions[1] });\n            return;\n        }\n\n        let bname = this.#barcode_file.name();\n        var is_gz = bname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#barcode_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        // Check if a header is present or not. Standard 10X output doesn't have a \n        // header but we'd like to support some kind of customization.\n        let diff = this.#dimensions[1] - parsed.length;\n        let headers;\n        if (diff == 0) {\n            headers = parsed[0]; // whatever, just using the first row. Hope it's unique enough!\n        } else if (diff == -1) {\n            headers = parsed.shift();\n        } else {\n            throw new Error(\"number of matrix columns is not equal to the number of rows in '\" + bname + \"'\");\n        }\n\n        let annotations = {}\n        headers.forEach((x, i) => {\n            annotations[x] = parsed.map(y => y[i]);\n        });\n\n        for (const [k, v] of Object.entries(annotations)) {\n            let conv = eutils.promoteToNumber(v);\n            if (conv !== null) {\n                annotations[k] = conv;\n            }\n        }\n\n        this.#raw_cells = new bioc.DataFrame(annotations);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxMatrixMarketDataset#load load} but the order of values may be different.\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRIPSR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxMatrixMarketDataset#defaults defaults} or with {@linkcode TenxMatrixMarketDataset#setOptions setOptions}.\n     *\n     * If the feature annotation file is absent or if it lacks a third column for the feature types,\n     * `load()` will assume that all features are genes (i.e., only the RNA modality is present).\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let loaded = scran.initializeSparseMatrixFromMatrixMarket(this.#matrix_file.content(), { \"compressed\": is_gz });\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\"); \n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    async serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxMatrixMarketDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxMatrixMarketDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        let args = {};\n        for (const x of files) {\n            if (x.type in args) {\n                throw new Error(\"duplicate file of type '\" + x.type + \"' detected during MatrixMarket unserialization\");\n            }\n            args[x.type] = x.file;\n        }\n\n        if (!(\"mtx\" in args)) {\n            throw new Error(\"expected file of type 'mtx' for during MatrixMarket unserialization\");\n        }\n\n        let feat = null;\n        if (\"genes\" in args) {\n            feat = args.genes;\n        }\n\n        let barcode = null;\n        if (\"annotations\" in args) {\n            barcode = args.annotations;\n        }\n\n        let output = new TenxMatrixMarketDataset(args.mtx, feat, barcode);\n        output.setOptions(options);\n        return output;\n    }\n}\n","export function stream(file, chunkSize, callback, resolve, reject) {\n    reject(\"no support for file paths in the browser context\");\n}\n\nexport function peek(file, n) {\n    throw new Error(\"no support for file paths in the browser context\");\n}\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\nimport * as astream from \"./abstract/stream.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function extractHDF5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (content.type !== \"String\") {\n        return null;\n    }\n\n    return content.load();\n}\n\n/**\n * Summarize an array, typically corresponding to a single column of per-cell annotation.\n * This can be used as part of a preflight response in a Reader.\n *\n * @param {Array|TypedArray} array - Per-cell annotation array of length equal to the number of cells for a given matrix.\n * An Array is treated as categorical data and should contain strings, while TypedArrays are treated as continuous data.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.limit=50] - Maximum number of unique values to report for categorical `x`.\n *\n * @return {object} Object containing `type`, a string indicating whether `array` was categorical or continuous.\n *\n * If `\"categorical\"`, the object will contain `values`, an array of unique values up to the length specified by `limit`.\n * It will also contain `truncated`, a boolean indicating whether the actual number of unique values exceeds `limit`.\n *\n * If `\"continuous\"`, the object will contain the numbers `min` and `max` specifying the minimum and maximum value in `x`, respectively.\n * `min` or `max` may be negative or positive infinity, respectively, if there is no bound on one or both ends.\n * If `min > max`, all values in `array` are `NaN`s such that no bound can be found.\n */\nexport function summarizeArray(array, { limit = 50 } = {}) {\n    if (array instanceof Array) {\n        let chosen = Array.from(new Set(array));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        array.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\nfunction guess_compression(x, compression) {\n    if (compression !== null) {\n        return compression;\n    }\n\n    let buffer;\n    if (x instanceof Uint8Array) {\n        buffer = x;\n    } else {\n        buffer = astream.peek(x, 3);\n    }\n\n    // Compare against magic words for auto-detection.\n    if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n        return 'gz';\n    }\n\n    return 'none';\n}\n\nexport function unpackText(buffer, { compression = null } = {}) {\n    compression = guess_compression(buffer, compression);\n    let txt = (compression === \"gz\" ? pako.ungzip(buffer) : buffer);\n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\nfunction merge_bytes(leftovers, decoder) {\n    let total = 0;\n    for (const x of leftovers) {\n        total += x.length;\n    }\n\n    let combined = new Uint8Array(total);\n    total = 0;\n    for (const x of leftovers) {\n        combined.set(x, total);\n        total += x.length;\n    }\n\n    return decoder.decode(combined);\n}\n\nasync function stream_callback(x, compression, chunkSize, callback) {\n    // Force the input to be either a Uint8Array or a file path string.\n    if (typeof x == \"string\") {\n        ;\n    } else if (x instanceof Uint8Array) {\n        ;\n    } else if (x instanceof afile.SimpleFile) {\n        x = x.content();\n    } else {\n        x = (new afile.SimpleFile(x, { name: \"dummy\" })).content();\n    }\n\n    if (guess_compression(x, compression) == \"gz\") {\n        await (new Promise((resolve, reject) => {\n            let gz = new pako.Inflate({ chunkSize: chunkSize });\n            gz.onData = callback;\n            gz.onEnd = status => {\n                if (status) {\n                    reject(\"gzip decompression failed; \" + gz.msg);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            if (typeof x == \"string\") {\n                astream.stream(x, chunkSize, chunk => gz.push(chunk), null, reject);\n            } else {\n                gz.push(x);\n            }\n        }));\n        return;\n    }\n\n    // Remaining possibilities are uncompressed.\n    if (typeof x == \"string\") {\n        await (new Promise((resolve, reject) => astream.stream(x, chunkSize, callback, resolve, reject)));\n        return;\n    }\n\n    callback(x);\n    return;\n}\n\n/**\n * Read lines of text from a file, possibly with decompression.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {number} [options.chunkSize=65536] - Chunk size in bytes to use for file reading (if `x` is a file path) and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string.\n * @async \n */\nexport async function readLines2(x, { compression = null, chunkSize = 65536 } = {}) {\n    const dec = new TextDecoder;\n    let leftovers = [];\n    let lines = [];\n\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk[i] == 10) { // i.e., ASCII newline.\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    lines.push(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    lines.push(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        lines.push(merge_bytes(leftovers, dec));\n    }\n\n    return lines;    \n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readTable(buffer, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n * This assumes that newlines represent the end of each row of the table, i.e., there cannot be newlines inside quoted strings.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {string} [options.delim=\"\\t\"] - Delimiter between fields.\n * @param {number} [options.chunkSize=1048576] - Chunk size in bytes to use for file reading (if `x` is a path), parsing of rows, and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of length equal to the number of lines in `buffer`.\n * Each entry is an array of strings, containing the `delim`-separated fields for its corresponding line.\n *\n * @async\n */\nexport async function readTable2(x, { compression = null, delim = \"\\t\", chunkSize = 1048576 } = {}) {\n    const dec = new TextDecoder;\n\n    let rows = [];\n    let parse = (str) => {\n        let out = ppp.parse(str, { delimiter: delim });\n        if (out.meta.aborted) {\n            let msg = \"failed to parse delimited file\";\n            for (const e of out.errors) {\n                msg += \"; \" + e.message;\n            }\n            throw new Error(msg);\n        }\n        for (const x of out.data) {\n            rows.push(x);\n        }\n    };\n\n    let leftovers = [];\n    let size_left = 0;\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            // We assume that all newlines are end-of-rows, i.e., there are no\n            // newlines inside quoted strings. Under this assumption, we can\n            // safely chunk the input stream based on newlines, parse each\n            // chunk, and then combine the parsing results together. To avoid\n            // too many parsing calls, we accumulate buffers until we hit \n            // the chunkSize and then we decode + parse them altogether.\n            if (chunk[i] == 10 && (i - last) + size_left >= chunkSize) {\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    parse(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    parse(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n                size_left = 0;\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n            size_left += chunk.length - last;\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        let combined = merge_bytes(leftovers, dec);\n        parse(combined);\n        if (combined[combined.length - 1] == \"\\n\") { // guaranteed to have non-zero length, by virtue of how 'leftovers' is filled.\n            rows.pop();            \n        }\n    }\n\n    return rows;    \n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\n\nfunction create_solo_default_object(value, modality) {\n    let output = {};\n    output[modality] = value;\n    return output;\n}\n\nexport function reportFeatures(rawFeatures, typeField) {\n    if (rawFeatures.hasColumn(typeField)) {\n        let by_type = bioc.presplitFactor(rawFeatures.column(typeField));\n        let copy = rawFeatures.removeColumn(typeField);\n        return bioc.SPLIT(copy, by_type);\n    } else {\n        return create_solo_default_object(rawFeatures, \"\");\n    }\n}\n\nfunction is_subset_noop(indices, full_length) {\n    if (indices.length != full_length) {\n        return false;\n    }\n    for (var i = 0; i < full_length; i++) {\n        if (i !== indices[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction renameByModality(input, featureTypeMapping) {\n    let output = {};\n    for (const [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null && v in input) {\n            output[k] = input[v];\n        }\n    }\n    return output;\n}\n\nfunction splitByModality(features, typeField, featureTypeMapping) {\n    let by_type = bioc.presplitFactor(features.column(typeField));\n    if (featureTypeMapping === null) {\n        return by_type;\n    }\n    return renameByModality(by_type, featureTypeMapping);\n}\n\nfunction findUnnamedDefault(featureTypeMapping, featureTypeDefault) {\n    let found = null;\n    let multiple = false;\n    for (const [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null) {\n            if (found !== null) {\n                multiple = true;\n            }\n            found = k;\n        }\n    }\n\n    if (found === null || multiple) {\n        return featureTypeDefault;\n    } else {\n        return found;\n    }\n}\n\nexport function extractSplitPrimaryIds(features, typeField, featureTypeMapping, featureTypeDefault, primary) {\n    if (typeField !== null && features.hasColumn(typeField)) {\n        let by_type = splitByModality(features, typeField, featureTypeMapping);\n        for (const [k, v] of Object.entries(by_type)) {\n            let col = extractPrimaryIdColumn(k, features, primary);\n            by_type[k] = bioc.SLICE(col, v);\n        }\n        return by_type;\n    }\n\n    // Seeing if any featureTypeMapping is set to the unnamed string.\n    let new_default = findUnnamedDefault(featureTypeMapping, featureTypeDefault);\n    let output = {};\n    output[new_default] = extractPrimaryIdColumn(new_default, features, primary);\n    return output;\n}\n\nexport function splitScranMatrixAndFeatures(loaded, rawFeatures, typeField, featureTypeMapping, featureTypeDefault) {\n    let output = { matrix: new scran.MultiMatrix };\n\n    try {\n        let out_mat = loaded.matrix;\n        output.matrix.add(\"\", out_mat);\n\n        let current_features;\n        if (loaded.row_ids !== null) {\n            current_features = bioc.SLICE(rawFeatures, loaded.row_ids);\n        } else {\n            current_features = bioc.CLONE(rawFeatures, { deepCopy: false }); // because we're deleting a column.\n        }\n\n        if (typeField !== null && current_features.hasColumn(typeField)) {\n            let by_type = splitByModality(current_features, typeField, featureTypeMapping);\n            let type_keys = Object.keys(by_type);\n            let skip_subset = is_subset_noop(type_keys[0], out_mat.numberOfRows());\n\n            if (type_keys.length > 1 || !skip_subset) {\n                let replacement = new scran.MultiMatrix({ store: scran.splitRows(out_mat, by_type) });\n                scran.free(output.matrix);\n                output.matrix = replacement;\n            } else {\n                output.matrix.rename(\"\", type_keys[0]);\n            }\n\n            delete current_features[typeField];\n            output.features = bioc.SPLIT(current_features, by_type);\n\n        } else {\n            output.matrix.rename(\"\", featureTypeDefault);\n            output.features = create_solo_default_object(current_features, featureTypeDefault);\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction extractPrimaryIdColumn(modality, modality_features, primary) {\n    if (!(modality in primary)) {\n        throw new Error(\"modality '\" + modality + \"' has no primary key identifier\");  \n    }\n    let id = primary[modality];\n\n    if ((typeof id == \"string\" && modality_features.hasColumn(id)) || (typeof id == \"number\" && id < modality_features.numberOfColumns())) {\n        return modality_features.column(id);\n    } \n\n    return modality_features.rowNames();\n}\n\nexport function extractPrimaryIds(features, primary) {\n    let output = {};\n    for (const [k, v] of Object.entries(features)) {\n        output[k] = extractPrimaryIdColumn(k, v, primary);\n    }\n    return output;\n}\n\nexport function extractRemappedPrimaryIds(features, featureTypeMapping, primary) {\n    let renamed = renameByModality(features, featureTypeMapping);\n    return extractPrimaryIds(renamed, primary);\n}\n","/**\n * Webpack (or something in kana's build system) specifically recognizes the\n * hard-coded path in this 'new Worker(new URL(...))' pattern. This is why we\n * have hard-coded creators for the workers rather than allowing callers to\n * pass in the URL as a variable, as that doesn't pack the worker's JS.\n */\n\nexport function createTsneWorker() {\n    return new Worker(new URL(\"../tsne.worker.js\", import.meta.url), { type: \"module\" });\n}\n\nexport function createUmapWorker() {\n    return new Worker(new URL(\"../umap.worker.js\", import.meta.url), { type: \"module\" });\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`groupedSizeFactors`](https://kanaverse.github.io/scran.js/global.html#groupedSizeFactors) \n * and [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.sf_buffer);\n        utils.freeCache(this.#cache.centered_sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"ADT\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized ADT values,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the ADT-derived size factor for each cell in the (QC-filtered) dataset.\n     * This is available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sf_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sf_buffer.length, \"Float64Array\", this.#cache, \"centered_sf_buffer\");\n            scran.centerSizeFactors(this.#cache.sf_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n        var block = this.#filter.fetchFilteredBlock();\n\n        var buffer = this.#cache.sf_buffer;\n        if (buffer.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.remove_bias - Whether to remove composition bias between cell subpopulations.\n     * This is done by clustering cells and computing median-based size factors between the average pseudo-cells for each cluster.\n     * Users can set this to `false` to speed up the compute.\n     * @param {number} parameters.num_pcs - Number of PCs to use for creating a low-dimensional embedding for clustering.\n     * Only used if `remove_bias = true`.\n     * @param {number} parameters.num_clusters - Number of clusters to create with k-means clustering.\n     * Only used if `remove_bias = true`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        const { num_pcs, num_clusters } = parameters;\n        let remove_bias = true;\n        if (\"remove_bias\" in parameters) {\n            remove_bias = parameters.remove_bias;\n        }\n\n        this.changed = false;\n\n        if (this.#qc.changed || \n            this.#filter.changed || \n            remove_bias !== this.#parameters.remove_bias ||\n            (\n                remove_bias &&\n                (\n                    num_pcs !== this.#parameters.num_pcs || \n                    num_clusters != this.#parameters.num_clusters\n                ) \n            )\n        ) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n                let total_buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"total_buffer\");\n                var block = this.#filter.fetchFilteredBlock();\n                var sf_buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"sf_buffer\");\n\n                if (remove_bias) {\n                    scran.quickAdtSizeFactors(mat, { \n                        totals: total_buffer, \n                        block: block, \n                        buffer: sf_buffer, \n                        numberOfPCs: num_pcs, \n                        numberOfClusters: num_clusters \n                    });\n                } else {\n                    scran.centerSizeFactors(total_buffer, { buffer: sf_buffer, block: block });\n                }\n\n                this.changed = true;\n            }\n\n        } \n\n        this.#parameters.remove_bias = remove_bias;\n        this.#parameters.num_pcs = num_pcs;\n        this.#parameters.num_clusters = num_clusters;\n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n           remove_bias: true,\n           num_pcs: 25,\n           num_clusters: 20\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    let cache = {};\n    let parameters = AdtNormalizationState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\");\n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.num_clusters = phandle.open(\"num_clusters\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n            \n            if (\"size_factors\" in rhandle.children) {\n                let sf = rhandle.open(\"size_factors\", { load: true }).values;\n                cache.sf_buffer = scran.createFloat64WasmArray(sf.length);\n                cache.sf_buffer.set(sf);\n            }\n\n            output = new AdtNormalizationState(qc, filter, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.sf_buffer);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtNormalizationState(qc, filter, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized ADT matrix,\n     * available after running {@linkcode AdtPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = AdtPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new AdtPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new AdtPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * Results of computing per-cell ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellAdtQcMetricsResults.html) for details.\n *\n * @external PerCellAdtQcMetricsResults\n */\n\n/**\n * Suggested filters for the ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestAdtQcFiltersResults.html) for details.\n *\n * @external SuggestAdtQcFiltersResults\n */\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellAdtQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellAdtQcMetrics)\n * and [`suggestAdtQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestAdtQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"ADT\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestAdtQcFiltersResults} Result of filtering on the ADT-derived QC metrics.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellAdtQcMetricsResults} ADT-derived QC metrics,\n     * available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            automatic: true,\n            tag_id_column: null,\n            igg_prefix: \"IgG\",\n            nmads: 3,\n            min_detected_drop: 0.1\n        };\n    }\n\n    static configureFeatureParameters(lower_igg, annotations) {\n        let counter = val => {\n            let n = 0;\n            val.forEach(x => {\n                if (x.toLowerCase().startsWith(lower_igg)) {\n                    n++;\n                }\n            });\n            return n;\n        };\n\n        let best_key = null;\n        let best = 0;\n\n        let rn = annotations.rowNames();\n        if (rn !== null) {\n            best = counter(rn);\n        }\n\n        for (const key of annotations.columnNames()) {\n            let latest = counter(annotations.column(key));\n            if (latest > best) {\n                best_key = key;\n                best = latest;\n            }\n        }\n\n        return best_key;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * \n     * @param {object} parameters - Parameter object, equivalent to the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotations. \n     * Specifically, `tag_id_column` is set to the column with the most matches to `igg_prefix`.\n     * @param {?(string|number)} parameters.tag_id_column - Name or index of the column of the feature annotations that contains the tag identifiers.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.igg_prefix - Prefix of the identifiers for isotype controls.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * @param {number} parameters.min_detected_drop - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { igg_prefix, nmads, min_detected_drop } = parameters;\n        this.changed = false;\n\n        let automatic;\n        let tag_id_column; \n        if (\"automatic\" in parameters) {\n            automatic = parameters.automatic;\n            tag_id_column = parameters.tag_id_column;\n        } else {\n            automatic = true;\n            tag_id_column = null;\n        }\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            igg_prefix !== this.#parameters.igg_prefix ||\n            (!automatic && tag_id_column !== this.#parameters.tag_id_column)\n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var tag_info = this.#inputs.fetchFeatureAnnotations()[\"ADT\"];\n                var subsets = utils.allocateCachedArray(tag_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (igg_prefix !== null) {\n                    var lower_igg = igg_prefix.toLowerCase();\n                    let key = tag_id_column;\n                    if (automatic) {\n                        key = AdtQualityControlState.configureFeatureParameters(lower_igg, tag_info);\n                    }\n\n                    let val = (key == null ? tag_info.rowNames() : tag_info.column(key));\n                    if (val !== null) {\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => { \n                            if (x.toLowerCase().startsWith(lower_igg)) {\n                                sub_arr[i] = 1;                        \n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"ADT\");\n                this.#cache.metrics = scran.perCellAdtQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.tag_id_column = tag_id_column;\n        this.#parameters.igg_prefix = igg_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads || min_detected_drop !== this.#parameters.min_detected_drop) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestAdtQcFilters(this.#cache.metrics, { numberOfMADs: nmads, minDetectedDrop: min_detected_drop, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n            this.#parameters.min_detected_drop = min_detected_drop;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = AdtQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.igg_prefix = phandle.open(\"igg_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n        parameters.min_detected_drop = phandle.open(\"min_detected_drop\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellAdtQcMetricsResults(detected.length, 1);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n                let igg_total = mhandle.open(\"igg_total\", { load: true }).values;\n                cache.metrics.subsetTotals(0, { fillable: true }).set(igg_total);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n                let thresholds_igg_total = thandle.open(\"igg_total\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestAdtQcFiltersResults(1, thresholds_detected.length);\n                cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n                cache.filters.thresholdsSubsetTotals(0, { fillable: true }).set(thresholds_igg_total);\n            }\n\n            output = new AdtQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the [`mnnCorrect`](https://kanaverse.github.io/scran.js/global.html#mnnCorrect) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the batch-corrected embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode BatchCorrectionState#compute compute}.\n     */\n    fetchCorrected() {\n        return this.#cache.corrected;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfCells() {\n        return this.#combined.fetchNumberOfCells();\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#combined.fetchNumberOfDimensions();\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `batch_correction` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * If `\"mnn\"`, it is recommended that upstream PCA steps (i.e., {@linkplain RnaPcaState} and {@linkplain AdtPcaState}) use `block_method = \"weight\"`.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use during MNN correction.\n     * @param {boolean} parameters.approximate - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { method, num_neighbors, approximate} = parameters;\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (method == \"mnn\" && block !== null);\n\n        if (this.changed || method !== this.#parameters.method || num_neighbors !== this.#parameters.num_neighbors || approximate !== this.#parameters.approximate) { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchCombined();\n                let corrected = utils.allocateCachedArray(pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs, block, { \n                    k: num_neighbors, \n                    buffer: corrected, \n                    numberOfCells: this.#combined.fetchNumberOfCells(), \n                    numberOfDims: this.#combined.fetchNumberOfDimensions(), \n                    approximate: approximate \n                });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                this.#cache.corrected = this.#combined.fetchCombined().view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters.method = method;\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, combined) {\n    let cache = {};\n    let parameters = BatchCorrectionState.defaults();\n    let output;\n    \n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.method = phandle.open(\"method\", { load: true }).values[0];\n        parameters.num_neighbors = phandle.open(\"num_neighbors\", { load: true }).values[0];\n        parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"corrected\" in rhandle.children) {\n                let corrected = rhandle.open(\"corrected\", { load: true }).values;\n                cache.corrected = scran.createFloat64WasmArray(corrected.length);\n                cache.corrected.set(corrected);\n            } else {\n                // Creating a view from the upstream combined state.\n                let pcs = combined.fetchCombined();\n                cache.corrected = pcs.view();\n            }\n\n            output = new BatchCorrectionState(filter, combined, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.corrected);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        let ghandle = handle.open(\"pca\");\n\n        let rhandle = ghandle.open(\"results\");\n        if (\"corrected\" in rhandle.children) {\n            let corrected = rhandle.open(\"corrected\", { load: true }).values;\n            let corbuffer = utils.allocateCachedArray(corrected.length, \"Float64Array\", cache, \"corrected\");\n            corbuffer.set(corrected);\n        } else {\n            cache.corrected = combined.fetchCombined().view();\n        }\n\n        output = new BatchCorrectionState(filter, combined, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as rna_qc_module from \"./rna_quality_control.js\";\nimport * as adt_qc_module from \"./adt_quality_control.js\";\nimport * as crispr_qc_module from \"./crispr_quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction find_usable_upstream_states(qc_states, in_use) {\n    let tmp = utils.findValidUpstreamStates(qc_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (in_use[k]) {\n            to_use.push(qc_states[k]);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells,\n * based on metrics and thresholds computed in {@linkplain RnaQualityControlState} and friends.\n * It wraps the [`filterCells`](https://kanaverse.github.io/scran.js/global.html#filterCells) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * For multi-modal datasets, this can combine quality calls from all valid modalities; \n * a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        if (!(qc_states.RNA instanceof rna_qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc_states.RNA' should be a RnaQualityControlState object\");\n        }\n        if (!(qc_states.ADT instanceof adt_qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc_states.ADT' should be a AdtQualityControlState object\");\n        }\n        if (!(qc_states.CRISPR instanceof crispr_qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc_states.CRISPR' should be a CrisprQualityControlState object\");\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing the filtered and normalized matrices for all modalities,\n     * available after running {@linkcode CellFilteringState#compute compute}.\n     */\n    fetchFilteredMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Int32WasmArray} Array of length equal to the number of cells after filtering, \n     * containing the block assignment for each cell.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    /**\n     * @return {?Uint8WasmArray} Combined discard vector, i.e., an array of length equal to the number of cells in the dataset,\n     * indicating whether each cell should be removed.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null`, if no upstream filtering steps were performed.\n     */\n    fetchDiscards() {\n        if (\"discard_buffer\" in this.#cache) {\n            return this.#cache.discard_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n\n        let inputs = this.#inputs.fetchCountMatrix();\n        for (const a of inputs.available()) {\n            let src = inputs.get(a);\n\n            let sub;\n            if (\"discard_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.discard_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"discard_buffer\" in this.#cache) {\n                // Filtering on the block. Might as well force a load of the\n                // matrix, it'll be needed once we have the blocks anyway.\n                let filtered_ncols = this.fetchFilteredMatrix().numberOfColumns();\n                let bcache = utils.allocateCachedArray(filtered_ncols, \"Int32Array\", this.#cache, \"block_buffer\");\n                scran.filterBlock(block, this.#cache.discard_buffer, { buffer: bcache });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.use_rna - Whether to use the RNA-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_adt - Whether to use the ADT-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_crispr - Whether to use the CRISPR-derived QC metrics for filtering.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { use_rna, use_adt, use_crispr } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        if (this.#parameters.use_rna !== use_rna || this.#parameters.use_adt !== use_adt || this.#parameters.use_crispr !== use_crispr) {\n            this.#parameters.use_rna = use_rna;\n            this.#parameters.use_adt = use_adt;\n            this.#parameters.use_crispr = use_crispr;\n            this.changed = true;\n        }\n\n        let to_use = find_usable_upstream_states(this.#qc_states, { RNA: use_rna, ADT: use_adt, CRISPR: use_crispr });\n        if (!this.changed) {\n            for (const u of to_use) {\n                if (u.changed) {\n                    this.changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.changed) {\n            if (to_use.length > 0) {\n                let first = to_use[0].fetchDiscards();\n\n                if (to_use.length > 1) {\n                    // A discard signal in any modality causes the cell to be removed. \n                    let disc_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"discard_buffer\");\n                    disc_buffer.fill(0);\n\n                    let disc_arr = disc_buffer.array();\n                    for (const u of to_use) {\n                        u.fetchDiscards().forEach((y, i) => { disc_arr[i] |= y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    utils.freeCache(this.#cache.discard_buffer);\n                    this.#cache.discard_buffer = first.view();\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.discard_buffer);\n                delete this.#cache.discard_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n    }\n\n    static defaults() {\n        return {\n            use_rna: true,\n            use_adt: true,\n            use_crispr: true\n        };\n    }\n\n    /**\n     * Apply the same filter to an array of data for each cell in the unfiltered dataset.\n     * This is typically used to filter the columns of {@linkcode InputsState#fetchCellAnnotations InputsState.fetchCellAnnotations} for downstream use.\n     * (See the {@linkcode CellFilteringState#undoFilter undoFilter} method for the reverse operation.)\n     * Any calls to this method should be done after running {@linkcode CellFilteringState#compute compute}.\n     *\n     * @param {Array|TypedArray} Any array-like object of length equal to the number of cells in the unfiltered dataset.\n     * \n     * @return {Array|TypedArray} An array-like object of the same type as `x`,\n     * where all elements corresponding to low-quality cells have been discarded.\n     * This will have number of columns equal to that of {@linkcode CellFilteringState#fetchFilteredMatrix fetchFilteredMatrix}.\n     */\n    applyFilter(x) {\n        let expect_len = this.#inputs.fetchCountMatrix().numberOfColumns();\n        if (expect_len != x.length) {\n            throw new Error(\"length of 'x' should be equal to the number of cells in the unfiltered dataset\");\n        }\n\n        if (!(\"discard_buffer\" in this.#cache)) {\n            return x.slice(); // making a copy.\n        } else {\n            let discard = this.#cache.discard_buffer.array();\n            return x.filter((y, i) => !discard[i]);\n        }\n    }\n\n    /**\n     * Undo the effect of filtering on an array of column indices on the filtered matrix, so that they now refer to column indices on the unfiltered matrix.\n     * This is primarily useful for adjusting indices from downstream steps like {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices}.\n     * The output of this function can be combined with {@linkcode InputsState#undoSubset InputsState.undoSubset} to obtain column indices on the original matrix,\n     * which can be used in other contexts, e.g., like {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the unfiltered matrix.\n     */\n    undoFilter(indices) {\n        let max_index = this.fetchFilteredMatrix().numberOfColumns();\n        for (const x of indices) {\n            if (x < 0 || x >= max_index) {\n                throw new Error(\"entries of 'indices' should be less than the number of cells in the filtered dataset\");\n            }\n        }\n\n        if (!('discard_buffer' in this.#cache)) {\n            return;\n        }\n\n        let keep = [];\n        this.#cache.discard_buffer.forEach((x, i) => {\n            if (x == 0) {\n                keep.push(i);\n            }\n        });\n\n        indices.forEach((x, i) => {\n            indices[i] = keep[x];\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, qc_states) {\n    let parameters = CellFilteringState.defaults();\n    let cache = {};\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            if (\"parameters\" in ghandle.children) {\n                let phandle = ghandle.open(\"parameters\");\n                if (\"use_rna\" in phandle.children) {\n                    parameters.use_rna = phandle.open(\"use_rna\", { load: true }).values[0] > 0;\n                    parameters.use_adt = phandle.open(\"use_adt\", { load: true }).values[0] > 0;\n                    parameters.use_crispr = phandle.open(\"use_crispr\", { load: true }).values[0] > 0;\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"discards\" in rhandle.children) {\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n            }\n        } \n\n        if (!(\"discard_buffer\" in cache)) {\n            let to_use = find_usable_upstream_states(qc_states, { RNA: parameters.use_rna, ADT: parameters.use_adt, CRISPR: parameters.use_crispr });\n\n            if (to_use.length == 1) {\n                // We figure out which upstream QC state contains the discard vector\n                // and create a view on it so that our discard_buffer checks work properly.\n                // (v1 and earlier also implicitly falls in this category.)\n                cache.discard_buffer = to_use[0].fetchDiscards().view();\n            } else if (to_use.length == 0) {\n                // No-op; we don't need to define discard_buffer.\n                ;\n            } else {\n                throw new Error(\"no more than one upstream QC state should be valid if 'discards' is not available\");\n            }\n        }\n\n        output = new CellFilteringState(inputs, qc_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.discard_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings from {@linkplain KmeansClusterState} and {@linkplain SnnGraphClusterState}, respectively.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode ChooseClusteringState#compute compute}.\n     */\n    fetchClusters() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClusters();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClusters();\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - Clustering method to use, either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { method } = parameters;\n        this.changed = true;\n        \n        if (method == this.#parameters.method) {\n            if (method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters.method = method;\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, snn, kmeans) {\n    let ghandle = handle.open(\"choose_clustering\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            method: phandle.open(\"method\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    return new ChooseClusteringState(snn, kmeans, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_pca_module from \"./rna_pca.js\";\nimport * as adt_pca_module from \"./adt_pca.js\";\nimport * as crispr_pca_module from \"./crispr_pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\nfunction find_nonzero_upstream_states(pca_states, weights) {\n    let tmp = utils.findValidUpstreamStates(pca_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (weights[k] > 0) {\n            to_use.push(k);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the [`scaleByNeighbors`](https://kanaverse.github.io/scran.js/global.html#scaleByNeighbors) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        if (!(pca_states.RNA instanceof rna_pca_module.RnaPcaState)) {\n            throw new Error(\"'pca_states.RNA' should be an RnaPcaState object\");\n        }\n        if (!(pca_states.ADT instanceof adt_pca_module.AdtPcaState)) {\n            throw new Error(\"'pca_states.ADT' should be an AdtPcaState object\");\n        }\n        if (!(pca_states.CRISPR instanceof crispr_pca_module.CrisprPcaState)) {\n            throw new Error(\"'pca_states.CRISPR' should be an CrisprPcaState object\");\n        }\n        this.#pca_states = pca_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the combined embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchCombined() {\n        return this.#cache.combined_buffer;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfCells() {\n        return this.#cache.num_cells;\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#cache.total_dims;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return { \n            rna_weight: 1,\n            adt_weight: 1,\n            crispr_weight: 0,\n            approximate: true\n        };\n    }\n\n    static createPcsView(cache, upstream) {\n        utils.freeCache(cache.combined_buffer);\n        cache.combined_buffer = upstream.principalComponents({ copy: \"view\" }).view();\n        cache.num_cells = upstream.numberOfCells();\n        cache.total_dims = upstream.numberOfPCs();\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.rna_weight - Relative weight of the RNA embeddings.\n     * @param {number} parameters.adt_weight - Relative weight of the ADT embeddings.\n     * @param {number} parameters.crispr_weight - Relative weight of the CRISPR embeddings.\n     * @param {boolean} parameters.approximate - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { rna_weight, adt_weight, crispr_weight, approximate } = parameters;\n        this.changed = false;\n\n        for (const v of Object.values(this.#pca_states)) {\n            if (v.changed) {\n                this.changed = true;\n                break;\n            }\n        }\n\n        if (approximate !== this.#parameters.approximate) {\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        if (rna_weight !== this.#parameters.rna_weight || adt_weight !== this.#parameters.adt_weight || crispr_weight !== this.#parameters.crispr_weight) {\n            this.#parameters.rna_weight = rna_weight;\n            this.#parameters.adt_weight = adt_weight;\n            this.#parameters.crispr_weight = crispr_weight;\n            this.changed = true;\n        }\n\n        if (this.changed) { \n            const weights = { RNA: rna_weight, ADT: adt_weight, CRISPR: crispr_weight };\n            let to_use = find_nonzero_upstream_states(this.#pca_states, weights);\n\n            if (to_use.length > 1) {\n                let weight_arr = to_use.map(x => weights[x]);\n                let collected = [];\n                let total = 0;\n                let ncells = null;\n\n                for (const k of to_use) {\n                    let curpcs = this.#pca_states[k].fetchPCs();\n                    collected.push(curpcs.principalComponents({ copy: \"view\" }));\n                    if (ncells == null) {\n                        ncells = curpcs.numberOfCells();\n                    } else if (ncells !== curpcs.numberOfCells()) {\n                        throw new Error(\"number of cells should be consistent across all embeddings\");\n                    }\n                    total += curpcs.numberOfPCs();\n                }\n\n                let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: approximate });\n                this.#cache.num_cells = ncells;\n                this.#cache.total_dims = total;\n\n            } else {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                this.constructor.createPcsView(this.#cache, pcs);\n            }\n        }\n\n        // Updating all parameters anyway. This requires us to take ownership\n        // of 'weights' to avoid pass-by-reference shenanigans.\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca_states) {\n    let cache = {};\n    let parameters = CombineEmbeddingsState.defaults();\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            {\n                let phandle = ghandle.open(\"parameters\");\n                parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n                if ('weights' in phandle.children) { // v2.0\n                    let whandle = phandle.open(\"weights\");\n                    if (\"RNA\" in whandle.children) {\n                        parameters.rna_weight = whandle.open(\"RNA\", { load: true }).values[0];\n                    }\n                    if (\"ADT\" in whandle.children) {\n                        parameters.adt_weight = whandle.open(\"ADT\", { load: true }).values[0];\n                    }\n                    if (\"CRISPR\" in whandle.children) {\n                        parameters.crispr_weight = whandle.open(\"CRISPR\", { load: true }).values[0];\n                    }\n                } else {\n                    parameters.rna_weight = phandle.open(\"rna_weight\", { load: true }).values[0];\n                    parameters.adt_weight = phandle.open(\"adt_weight\", { load: true }).values[0];\n                    parameters.crispr_weight = phandle.open(\"crispr_weight\", { load: true }).values[0];\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"combined\" in rhandle.children) {\n                let phandle = rhandle.open(\"combined\", { load: true });\n                cache.num_cells = phandle.shape[0];\n                cache.total_dims = phandle.shape[1];\n\n                let vals = phandle.values;\n                cache.combined_buffer = scran.createFloat64WasmArray(vals.length);\n                cache.combined_buffer.set(vals);\n            }\n        }\n\n        if (!(\"combined_buffer\" in cache)) {\n            // This only happens if there was only one upstream PCA state; in which case, \n            // we figure out which upstream PCA state contains the PC vector\n            // and create a view on it so that our fetchPCs() works properly.\n            // (v1 and earlier also implicitly falls in this category.)\n            const weights = { RNA: parameters.rna_weight, ADT: parameters.adt_weight, CRISPR: parameters.crispr_weight };\n            let to_use = find_nonzero_upstream_states(pca_states, weights);\n\n            if (to_use.length != 1) {\n                throw new Error(\"only one upstream PCA state should be valid with non-zero weight if 'combined' is not available\");\n            }\n\n            let pcs = pca_states[to_use[0]].fetchPCs();\n            CombineEmbeddingsState.createPcsView(cache, pcs);\n        }\n\n        output = new CombineEmbeddingsState(pca_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.combined_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./crispr_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"crispr_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered CRISPR count matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc' should be a CrisprQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.centered_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized CRISPR abundances,\n     * available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the CRISPR-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"CRISPR\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n                this.changed = true;\n            }\n        } \n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        let rhandle = ghandle.createGroup(\"results\"); \n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new CrisprNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"crispr_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise CRISPR abundance data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm' should be a CrisprNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized CRISPR abundance matrix,\n     * available after running {@linkcode CrisprPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = CrisprPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new CrisprPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new CrisprPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"crispr_quality_control\";\n\n/**\n * Results of computing per-cell CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellCrisprQcMetricsResults.html) for details.\n *\n * @external PerCellCrisprQcMetricsResults\n */\n\n/**\n * Suggested filters for the CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestCrisprQcFiltersResults.html) for details.\n *\n * @external SuggestCrisprQcFiltersResults\n */\n\n/**\n * This step applies quality control on the CRISPR guide count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellCrisprQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellCrisprQcMetrics)\n * and [`suggestCrisprQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestCrisprQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestCrisprQcFiltersResults} Result of filtering on the CRISPR-derived QC metrics.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellCrisprQcMetricsResults} CRISPR-derived QC metrics,\n     * available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            nmads: 3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold on the maximum count. \n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { nmads } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var mat = this.#inputs.fetchCountMatrix().get(\"CRISPR\");\n                this.#cache.metrics = scran.perCellCrisprQcMetrics(mat);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestCrisprQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = CrisprQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellCrisprQcMetricsResults(detected.length);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n\n                let max_prop = mhandle.open(\"max_proportion\", { load: true }).values;\n                cache.metrics.maxProportions({ fillable: true }).set(max_prop);\n\n                let max_index = mhandle.open(\"max_index\", { load: true }).values;\n                cache.metrics.maxIndex({ fillable: true }).set(max_index);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_max_count = thandle.open(\"max_count\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestCrisprQcFiltersResults(thresholds_max_count.length);\n                cache.filters.thresholdsMaxCount({ fillable: true }).set(thresholds_max_count);\n            }\n\n            output = new CrisprQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback if the results aren't available. \n        output = new CrisprQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\n\n/**\n * Results of per-gene variance modelling,\n * see [here](https://kanaverse.github.io/scran.js/ModelGeneVarResults.html) for details.\n *\n * @external ModelGeneVarResults\n */\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the [`modelGeneVar`](https://kanaverse.github.io/scran.js/global.html#modelGeneVar) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:ModelGeneVarResults} Variance modelling results,\n     * available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.results;\n    }\n\n    /**\n     * @return {Float64Array} Array of length equal to the number of genes,\n     * containing the sorted residuals after fitting a mean-dependent trend to the variances.\n     * Available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n \n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { span } = parameters;\n        this.changed = false;\n        \n        if (this.#norm.changed || span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            if (this.valid()) {\n                let mat = this.#norm.fetchNormalizedMatrix();\n                let block = this.#filter.fetchFilteredBlock();\n                this.#cache.results = scran.modelGeneVar(mat, { span: span, block: block });\n\n                this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n                this.#cache.sorted_residuals.sort();\n\n                this.changed = true;\n            }\n\n            this.#parameters.span = span;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, permuter, filter, norm) {\n    let ghandle = handle.open(\"feature_selection\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            span: phandle.open(\"span\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"means\" in rhandle.children) {\n            // Possibly permuting it to match the new permutation order;\n            // see 'unserialize' in 'inputs.js'.\n            let reloaded = {};\n            for (const key of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n                let value = rhandle.open(key, { load: true }).values;\n                reloaded[key] = permuter(value);\n            }\n\n            cache.results = scran.emptyModelGeneVarResults(reloaded.means.length, 1);\n            cache.results.means({ fillable: true }).set(reloaded.means);\n            cache.results.variances({ fillable: true }).set(reloaded.vars);\n            cache.results.fitted({ fillable: true }).set(reloaded.fitted);\n            cache.results.residuals({ fillable: true }).set(reloaded.resids);\n\n            cache.sorted_residuals = cache.results.residuals({ copy: true });\n            cache.sorted_residuals.sort();\n        }\n    }\n\n    return new FeatureSelectionState(filter, norm, parameters, cache);\n}\n\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\n/**\n * This step performs k-means clustering on the PCs, \n * wrapping the [`clusterKmeans`](https://kanaverse.github.io/scran.js/global.html#clusterKmeans) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode KmeansClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchCorrected();\n                this.#cache.raw = scran.clusterKmeans(pcs, k, { \n                    numberOfDims: this.#correct.fetchNumberOfDimensions(),\n                    numberOfCells: this.#correct.fetchNumberOfCells(),\n                    initMethod: \"pca-part\" \n                });\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let parameters = {\n        k: 10\n    };\n    let cache = {};\n\n    // Protect against old analysis states that don't have kmeans_cluster.\n    if (\"kmeans_cluster\" in handle.children) {\n        let ghandle = handle.open(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.k = phandle.open(\"k\", { load: true }).values[0];\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            if (\"clusters\" in rhandle.children) {\n                let clusters = rhandle.open(\"clusters\", { load: true }).values;\n                cache.raw = scran.emptyClusterKmeansResults(clusters.length, parameters.k, pca.fetchNumberOfDimensions());\n                cache.raw.clusters({ fillable: true }).set(clusters);\n            }\n        }\n    }\n\n    return new KmeansClusterState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * Results of marker detection,\n * see [here](https://www.kanaverse.github.io/scran.js/ScoreMarkersResults.html) for details.\n *\n * @external ScoreMarkersResults\n */\n\n/*********************\n ***** Internals *****\n *********************/\n\nfunction _free_results(cache) {\n    for (const v of Object.values(cache.raw)) {\n        utils.freeCache(v);\n    }\n    cache.raw = {};\n    markers.freeVersusResults(cache.versus);\n    delete cache.versus;\n}\n\nfunction _computeVersus(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n    let cache_info = markers.locateVersusCache(left, right, cache);\n    let left_index = (cache_info.left_small ? 0 : 1);\n    let right_index = (cache_info.left_small ? 1 : 0);\n\n    if (cache_info.run) {\n        let new_clusters = [];\n        let keep = [];\n        let leftfound = false, rightfound = false;\n        clusters.forEach((x, i) => {\n            if (x == left) {\n                new_clusters.push(left_index);\n                keep.push(i);\n                leftfound = true;\n            } else if (x == right) {\n                new_clusters.push(right_index);\n                keep.push(i);\n                rightfound = true;\n            }\n        });\n\n        if (!leftfound || !rightfound) {\n            throw new Error(\"non-zero entries should be present for both requested clusters in versus mode\");\n        }\n\n        markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n    }\n\n    return { \n        results: cache_info.cached,\n        left: left_index,\n        right: right_index\n    };\n}\n\n/*****************\n ***** State *****\n *****************/\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * The clustering is obtained from the upstream {@linkplain ChooseClusteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        _free_results(this.#cache);\n    }\n\n    /**\n     * Obtain the marker detection results for all modalities.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object where each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all clusters.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * Parameters used to compute the results.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `marker_detection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.lfc_threshold - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} parameters.compute_auc - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated with new results.\n     */\n    compute(parameters) {\n        let { lfc_threshold, compute_auc } = parameters;\n        this.changed = false;\n        let changed_params = (lfc_threshold !== this.#parameters.lfc_threshold || compute_auc !== this.#parameters.compute_auc);\n        \n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (this.#choice.changed || v.changed || changed_params) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClusters();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters.lfc_threshold = lfc_threshold;\n        this.#parameters.compute_auc = compute_auc;\n        if (this.changed) {\n            markers.freeVersusResults(this.#cache.versus);\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode MarkerDetectionCore#compute compute}.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    // Soft-deprecated.\n    static computeVersusCustom(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n        return computeVersus(left, right, matrices, clusters, { cache, block, lfc_threshold, compute_auc });\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two clusters for more detailed examination of the differences between them.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @param {number} left - Index of one cluster in which to find upregulated markers.\n     * @param {number} right - Index of another cluster to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` cluster in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` cluster in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        var clusters = this.#choice.fetchClusters();\n        var block = this.#filter.fetchFilteredBlock();\n\n        // No need to free this afterwards; we don't own the normalized matrices anyway.\n        let matrices = new scran.MultiMatrix;\n        for (const [modality, state] of Object.entries(this.#norm_states)) {\n            if (!state.valid()) {\n                continue;\n            }\n            matrices.add(modality, state.fetchNormalizedMatrix());\n        }\n\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n\n        return _computeVersus(left, right, matrices, clusters, { \n            cache: this.#cache.versus, \n            block: block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**********************\n ***** Standalone *****\n **********************/\n\n/**\n * Standalone version of {@linkplain MarkerDetectionState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices, groups and blocking factor to compute the various marker statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed MarkerDetectionStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class MarkerDetectionStandalone {\n    #matrices;\n\n    #groups;\n    #group_levels;\n    #block;\n    #block_levels;\n\n    #cache;\n    #parameters;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {Array|TypedArray} groups - Array of length equal to the number of columns in any value of `normalized`, containing the group assignments for each column. \n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, groups, { block = null } = {}) {\n        // Checking dimensions.\n        let N = groups.length;\n\n        for (const k of normalized.available()) {\n            let v = normalized.get(k);\n            if (v.numberOfColumns() != N) {\n                throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n            }\n        }\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as 'groups' if not null\");\n            }\n        }\n\n        let arrays = [ groups ];\n        if (block !== null) {\n            arrays.push(block);\n        }\n        let dump = utils.subsetInvalidFactors(arrays);\n\n        // Maybe taking a subset to eliminate invalid entries.\n        let new_matrices;\n        if (dump.retain !== null) {\n            new_matrices = new scran.MultiMatrix;\n            let temp = scran.createInt32WasmArray(dump.retain.length);\n            try {\n                temp.set(dump.retain);\n                for (const k of normalized.available()) {\n                    new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                }\n            } catch (e) {\n                new_matrices.free();\n                throw e;\n            } finally {\n                scran.free(temp);\n            }\n        } else {\n            new_matrices = normalized.clone();\n        }\n\n        this.#matrices = new_matrices;\n        this.#groups = dump.arrays[0].ids;\n        this.#group_levels = dump.arrays[0].levels;\n\n        if (block !== null) {\n            this.#block = dump.arrays[1].ids;\n            this.#block_levels = dump.arrays[1].levels;\n        } else {\n            this.#block = null;\n            this.#block_levels = null;\n        }\n\n        this.#cache = { raw: {}, init: true };\n        this.#parameters = MarkerDetectionState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#groups);\n        scran.free(this.#block);\n        scran.free(this.#matrices);\n        _free_results(this.#cache);\n    }\n\n    /**\n     * @return {object} Marker detection results for the all modalities.\n     * Each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all groups.\n     * This is available after running {@linkcode MarkerDetectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the grouping factor.\n     * Group indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchGroupLevels({ copy = true } = {}) {\n        let ret = this.#group_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#matrices;\n    }\n\n    _peekGroups() {\n        return this.#groups;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode MarkerDetectionState#defaults MarkerDetectionState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode MarkerDetectionState#compute MarkerDetectionState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     */\n    setParameters(parameters) {\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            // Removing existing results, as they are now invalid.\n            _free_results(this.#cache);\n        }\n        this.#parameters = { ...parameters };\n        return;\n    }\n\n    /**\n     * Compute markers for all groups.\n     *\n     * @return The state is updated with new results.\n     */\n    computeAll() {\n        let { lfc_threshold, compute_auc } = this.#parameters;\n        for (const k of this.#matrices.available()) {\n            var mat = this.#matrices.get(k);\n            utils.freeCache(this.#cache.raw[k]);\n            this.#cache.raw[k] = scran.scoreMarkers(mat, this.#groups, { block: this.#block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        }\n        return;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two groups, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {number} left - Index of one group in which to find upregulated markers.\n     * @param {number} right - Index of another group to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two groups.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` group in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` group in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n        return _computeVersus(left, right, this.#matrices, this.#groups, { \n            cache: this.#cache.versus, \n            block: this.#block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction fill_results(stats, num_blocks) {\n    let keys = Object.keys(stats);\n    let first = stats[keys[0]];\n    let ngenes = first.means.length;\n    let object = scran.emptyScoreMarkersResults(ngenes, keys.length, num_blocks, { computeAuc: (\"auc\" in first) });\n\n    for (const k of keys) {\n        let i = Number(k);\n        let vals = stats[k];\n        object.means(i, { fillable: true }).set(vals.means);\n        object.detected(i, { fillable: true }).set(vals.detected);\n\n        for (const [s, v] of Object.entries(vals.cohen)) {\n            object.cohen(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.lfc)) {\n            object.lfc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.delta_detected)) {\n            object.deltaDetected(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        if (\"auc\" in vals) {\n            for (const [s, v] of Object.entries(vals.auc)) {\n                object.auc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n            }\n        }\n    }\n\n    return object;\n}\n\nexport function unserialize(handle, permuters, filter, norm_states, choice) {\n    let ghandle = handle.open(\"marker_detection\");\n\n    let parameters = MarkerDetectionState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        if (\"lfc_threshold\" in phandle.children) {\n            parameters.lfc_threshold = phandle.open(\"lfc_threshold\", { load: true }).values[0];\n        }\n        if (\"compute_auc\" in phandle.children) {\n            parameters.compute_auc = phandle.open(\"compute_auc\", { load: true }).values[0] > 0;\n        }\n    }\n\n    // Figure out the number of blocks.\n    let num_blocks = 1;\n    {\n        let filtered = filter.fetchFilteredBlock();\n        if (filtered != null) {\n            filtered.forEach(x => {\n                if (x + 1 > num_blocks) {\n                    num_blocks = x + 1;\n                }\n            });\n        }\n    }\n\n    // Set up the marker detection statistics.\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        cache.raw = {};\n\n        if (\"clusters\" in rhandle.children) { \n            // below v2.0\n            let chandle = rhandle.open(\"clusters\");\n            let clusters = {};\n            for (const cl of Object.keys(chandle.children)) {\n                clusters[Number(cl)] = markers.unserializeGroupStats(chandle.open(cl), permuters[\"RNA\"], { compute_auc: parameters.compute_auc });\n            }\n            cache.raw.RNA = fill_results(clusters, num_blocks);\n        } else {\n            // after v2.0.\n            let chandle = rhandle.open(\"per_cluster\");\n            for (const a of Object.keys(chandle.children)) {\n                let clusters = {};\n                let ahandle = chandle.open(a);\n                for (const cl of Object.keys(ahandle.children)) {\n                    clusters[Number(cl)] = markers.unserializeGroupStats(ahandle.open(cl), permuters[a], { compute_auc: parameters.compute_auc });\n                }\n                cache.raw[a] = fill_results(clusters, num_blocks);\n            }\n        }\n \n    }\n\n    return new MarkerDetectionState(filter, norm_states, choice, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the [`buildNeighborSearchIndex`](https://kanaverse.github.io/scran.js/global.html#buildNeighborSearchIndex) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {BuildNeighborSearchIndexResults} Index for a nearest-neighbor search,\n     * available after running {@linkcode NeighborIndexState#compute compute}.\n     */\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        this.#cache.raw = scran.buildNeighborSearchIndex(this.#correct.fetchCorrected(), { \n            approximate: approximate, \n            numberOfDims: this.#correct.fetchNumberOfDimensions(),\n            numberOfCells: this.#correct.fetchNumberOfCells()\n        });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.approximate - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { approximate } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(approximate);\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let ghandle = handle.open(\"neighbor_index\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            approximate: phandle.open(\"approximate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let cache = {};\n    return new NeighborIndexState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./rna_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"rna_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaNormalizationState {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc' should be a RnaQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sum_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"RNA\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing normalized expression values,\n     * available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the RNA-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"RNA\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new RnaNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"rna_pca\";\n\n/**\n * Results of running PCA on some input matrix,\n * see [here](https://kanaverse.github.io/scran.js/RunPCAResults.html) for details.\n *\n * @external RunPCAResults\n */\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaPcaState { \n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a FeatureSelectionState object\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized gene expression values.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {number} parameters.num_hvgs - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be one of:\n     *\n     * - `\"none\"`, in which case nothing is done using the sample information. \n     * - `\"regress\"`, where linear regression is applied to remove mean differences between samples.\n     * - `\"weight\"`, where samples are weighted so that they contribute equally regardless of the number of cells.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_hvgs, num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#feat.changed || num_hvgs !== this.#parameters.num_hvgs) {\n            if (this.valid()) {\n                choose_hvgs(num_hvgs, this.#feat, this.#cache);\n                this.changed = true;\n            }\n\n            this.#parameters.num_hvgs = num_hvgs;\n        }\n\n        if (this.changed || this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            utils.freeCache(this.#cache.pcs);\n\n            if (this.valid()) {\n                let sub = this.#cache.hvg_buffer;\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                this.#cache.pcs = scran.runPCA(mat, { features: sub, numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResults().residuals({ copy: false });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm, feat) {\n    let ghandle = handle.open(\"rna_pca\" in handle.children ? \"rna_pca\" : \"pca\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters = { \n            num_hvgs: phandle.open(\"num_hvgs\", { load: true }).values[0],\n            num_pcs: phandle.open(\"num_pcs\", { load: true }).values[0]\n        };\n\n        // For back-compatibility.\n        if (\"block_method\" in phandle.children) {\n            parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n            if (parameters.block_method == \"mnn\") {\n                parameters.block_method = \"weight\";\n            }\n        } else {\n            parameters.block_method = \"none\";\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        if (feat.valid()) {\n            choose_hvgs(parameters.num_hvgs, feat, cache);\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"pcs\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n        }\n\n        output = new RnaPcaState(filter, norm, feat, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.hvg_buffer);\n        utils.freeCache(cache.pcs);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as rutils from \"../readers/index.js\";\n\nconst baseUrl = \"https://github.com/kanaverse/kana-special-features/releases/download/v1.0.0\";\n\nexport const step_name = \"rna_quality_control\";\n\n/**\n * Results of computing per-cell RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellRnaQcMetricsResults.html) for details.\n *\n * @external PerCellRnaQcMetricsResults\n */\n\n/**\n * Suggested filters for the RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestRnaQcFiltersResults.html) for details.\n *\n * @external SuggestRnaQcFiltersResults\n */\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellRnaQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellRnaQcMetrics)\n * and [`suggestRnaQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestRnaQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n    #automatic;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#automatic = false;\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        output.species = bioc.CLONE(output.species);\n        return output;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:SuggestRnaQcFiltersResults} Result of filtering on the RNA-derived QC metrics.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {external:PerCellRnaQcMetricsResults} RNA-derived QC metrics.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults () {\n        return {\n            automatic: true,\n            gene_id_column: null,\n            use_reference_mito: true,\n            species: [],\n            gene_id_type: \"ENSEMBL\",\n            mito_prefix: \"mt-\",\n            nmads: 3\n        };\n    }\n\n    static configureFeatureParameters(use_reference_mito, guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Array of strings containing the taxonomy IDs for species where mitochondrial gene lists are available.\n     * @type {Array}\n     */\n    static mitochondriaSpecies = [ \n        \"9606\",  // Mouse\n        \"10090\", // Human\n        \"6239\",  // C. elegans\n        \"10116\", // Rat\n        \"9541\",  // M. fascicularis\n        \"7227\",  // Fly\n        \"7955\",  // Zebrafish\n        \"9598\"   // Chimp\n    ];\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #acquire_reference(species, feature_type) {\n        let output = new Set;\n        let mito_lists = RnaQualityControlState.#mito_lists;\n\n        for (const s of species) {\n            let target = s + \"-mito-\" + feature_type.toLowerCase() + \".txt.gz\";\n            if (!(target in mito_lists)) {\n                let contents = await RnaQualityControlState.#downloadFun(baseUrl + \"/\" + target);\n                let lines = await rutils.readLines2(contents, { compression: \"gz\" });\n                mito_lists[target] = lines;\n            }\n\n            mito_lists[target].forEach(x => { output.add(x); });\n        }\n\n        return output;\n    }\n\n    static #mito_lists = {};\n\n    /**\n     * Flush all cached lists of mitochondrial genes.\n     *\n     * By default, {@linkcode RnaQualityControlState#compute compute} will cache the mitochondrial gene lists in a static member for re-use across {@linkplain RnaQualityControlState} instances.\n     * These cached lists are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        RnaQualityControlState.#mito_lists = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download the reference mitochondrial gene lists.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = RnaQualityControlState.#downloadFun;\n        RnaQualityControlState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If set to `true`, the following logic is applied:\n     *\n     * - If `use_reference_mito = true`, the annotation column that best matches human/mouse Ensembl/symbols is set as `gene_id_column`.\n     *   Based on the identified species and feature type, `species` and `gene_id_type` are also set.\n     * - If `use_reference_mito = false`, the annotation column that best matches human/mouse symbols is set as `gene_id_column`.\n     *\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the feature annotations that contains the gene identifiers for the RNA modality.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {boolean} parameters.use_reference_mito - Whether to use the reference lists of mitochondrial genes.\n     * If `false`, mitochondrial genes are instead identified from their prefix.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species to use to obtain a reference list of mitochondrial genes.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode RnaQualityControlState#mitochondriaSpecies mitochondriaSpecies}).\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Name of the feature type in the reference list of mitochondrial genes.\n     * This can be any one of `\"ENSEMBL\"`, `\"SYMBOL\"`, or `\"ENTREZ\"`.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.mito_prefix - Case-insensitive prefix to use to identify mitochondrial genes from the dataset.\n     * Only used when `use_reference_mito = false`; in such cases, `gene_id_column` should point to symbols.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let { mito_prefix, nmads } = parameters;\n        let automatic;\n        let use_reference_mito;\n        let gene_id_column;\n        let species;\n        let gene_id_type;\n\n        // Some back-compatibility here.\n        if (\"use_reference_mito\" in parameters) {\n            automatic = parameters.automatic;\n            use_reference_mito = parameters.use_reference_mito;\n            gene_id_column = parameters.gene_id_column;\n            species = parameters.species;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            automatic = true;\n            use_reference_mito = parameters.use_mito_default;\n            let def = RnaQualityControlState.defaults();\n            gene_id_column = def.gene_id_column;\n            species = def.species;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            use_reference_mito !== this.#parameters.use_reference_mito || \n            (\n                !automatic && \n                (\n                    gene_id_column !== this.#parameters.gene_id_column || \n                    (!use_reference_mito && mito_prefix !== this.#parameters.mito_prefix) ||\n                    (\n                        use_reference_mito && \n                        (\n                            utils.changedParameters(species, this.#parameters.species) || \n                            gene_id_type !== this.#parameters.gene_id_type\n                        )\n                    )\n                )\n            ) \n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                let gene_id_column2 = gene_id_column;\n                let species2 = species;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let backcomp = RnaQualityControlState.configureFeatureParameters(use_reference_mito, guesses);\n                    gene_id_column2 = backcomp.gene_id_column;\n                    species2 = backcomp.species;\n                    gene_id_type2 = backcomp.gene_id_type;\n                }\n\n                var gene_info = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let val = (gene_id_column2 == null ? gene_info.rowNames() : gene_info.column(gene_id_column2));\n                var subsets = utils.allocateCachedArray(gene_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (val !== null) {\n                    if (use_reference_mito) {\n                        let lists = await this.#acquire_reference(species2, gene_id_type2);\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if (lists.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else if (mito_prefix !== null) {\n                        var lower_mito = mito_prefix.toLowerCase();\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"RNA\");\n                this.#cache.metrics = scran.perCellRnaQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.use_reference_mito = use_reference_mito;\n        this.#parameters.species = bioc.CLONE(species); // avoid pass-by-reference behavior.\n        this.#parameters.gene_id_type = gene_id_type;\n        this.#parameters.mito_prefix = mito_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestRnaQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let ghandle = handle.open(\"rna_quality_control\" in handle.children ? \"rna_quality_control\" : \"quality_control\");\n\n    let parameters = RnaQualityControlState.defaults(); \n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.use_mito_default = phandle.open(\"use_mito_default\", { load: true }).values[0] > 0;\n        parameters.mito_prefix = phandle.open(\"mito_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n    }\n\n    let output;\n    let cache = {};\n    try {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"metrics\" in rhandle.children) { // QC metrics may not be reported if skipped.\n            let mhandle = rhandle.open(\"metrics\");\n            let sums = mhandle.open(\"sums\", { load: true }).values;\n\n            cache.metrics = scran.emptyPerCellRnaQcMetricsResults(sums.length, 1);\n            cache.metrics.sums({ fillable: true }).set(sums);\n\n            let detected = mhandle.open(\"detected\", { load: true }).values;\n            cache.metrics.detected({ fillable: true }).set(detected);\n            let proportions = mhandle.open(\"proportion\", { load: true }).values;\n            cache.metrics.subsetProportions(0, { fillable: true }).set(proportions);\n        }\n\n        if (\"thresholds\" in rhandle.children) { // if skip=true, QC thresholds may not be reported.\n            let discards = rhandle.open(\"discards\", { load: true }).values; \n            cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n            cache.discard_buffer.set(discards);\n\n            let thandle = rhandle.open(\"thresholds\");\n            let thresholds_sums = thandle.open(\"sums\", { load: true }).values;\n            let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n            let thresholds_proportion = thandle.open(\"proportion\", { load: true }).values;\n\n            cache.filters = scran.emptySuggestRnaQcFiltersResults(1, thresholds_sums.length);\n            cache.filters.thresholdsSums({ fillable: true }).set(thresholds_sums);\n            cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n            cache.filters.thresholdsSubsetProportions(0, { fillable: true }).set(thresholds_proportion);\n        }\n\n        output = new RnaQualityControlState(inputs, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.metrics);\n        utils.freeCache(cache.filters)\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\nexport const step_name = \"snn_graph_cluster\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkplain NeighborIndexState}.\n * This wraps [`clusterSNNGraph`](https://kanaverse.github.io/scran.js/global.html#clusterSNNGraph) \n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode SnnGraphClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSNNGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterSNNGraph(this.#cache.graph, {\n            method: algorithm,\n            multiLevelResolution: multilevel_resolution,\n            leidenResolution: leiden_resolution,\n            leidenModularityObjective: true, // avoid problems with unstable interpretation of leidenResolution.\n            walktrapSteps: walktrap_steps\n        });\n        return;\n    }\n\n    static defaults() {\n        return { \n            k: 10,\n            scheme: \"rank\",\n            algorithm: \"multilevel\",\n            multilevel_resolution: 1,\n            leiden_resolution: 1,\n            walktrap_steps: 4\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of nearest neighbors used to construct the graph.\n     * @param {string} parameters.scheme - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {string} parameters.algorithm - Algorithm to use for community detection.\n     * This can be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n     * @param {number} parameters.multilevel_resolution - Resolution of the multi-level community detection.\n     * @param {number} parameters.leiden_resolution - Resolution of the Leiden community detection.\n     * @param {number} parameters.walktrap_steps - Number of merge steps for the Walktrap algorithm.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k, scheme, algorithm, multilevel_resolution, leiden_resolution, walktrap_steps } = parameters;\n        this.changed = false;\n\n        if (this.#index.changed || k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        if (this.changed || scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.#parameters.scheme = scheme;\n            this.changed = true \n        }\n\n        if (this.changed \n            || algorithm !== this.#parameters.algorithm \n            || multilevel_resolution !== this.#parameters.multilevel_resolution \n            || leiden_resolution !== this.#parameters.leiden_resolution \n            || walktrap_steps !== this.#parameters.walktrap_steps \n            || (!this.#valid() && run_me))\n        {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps);\n            } else {\n                delete this.#cache.clusters;\n            }\n\n            this.#parameters.algorithm = algorithm;\n            this.#parameters.multilevel_resolution = multilevel_resolution;\n            this.#parameters.leiden_resolution = leiden_resolution;\n            this.#parameters.walktrap_steps = walktrap_steps;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"snn_graph_cluster\");\n\n    let parameters = SnnGraphClusterState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters.k = phandle.open(\"k\", { load: true }).values[0];\n\n        parameters.scheme = phandle.open(\"scheme\", { load: true }).values[0];\n        if (typeof parameters.scheme !== \"string\") { // because I stuffed up and tried to save a string as an int in v1.0, oops.\n            parameters.scheme = \"rank\";\n        }\n\n        if (\"algorithm\" in phandle.children) {\n            // v3.0\n            parameters.algorithm = phandle.open(\"algorithm\", { load: true }).values[0];\n            parameters.multilevel_resolution = phandle.open(\"multilevel_resolution\", { load: true }).values[0];\n            parameters.leiden_resolution = phandle.open(\"leiden_resolution\", { load: true }).values[0];\n            parameters.walktrap_steps = phandle.open(\"walktrap_steps\", { load: true }).values[0];\n        } else {\n            // v2.0\n            parameters.multilevel_resolution = phandle.open(\"resolution\", { load: true }).values[0];\n        }\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        if (\"clusters\" in rhandle.children) {\n            let clusters = rhandle.open(\"clusters\", { load: true }).values;\n            cache.clusters = scran.emptyClusterSNNGraphResults(clusters.length, 1);\n            cache.clusters.setBest(0); // whatever.\n            cache.clusters.membership({ fillable: true }).set(clusters);\n        }\n    }\n\n    return new SnnGraphClusterState(index, parameters, cache);\n}\n\n\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a t-SNE embedding based on the neighbor index constructed by {@linkplain NeighborIndexState}.\n * This wraps [`runTSNE`](https://kanaverse.github.io/scran.js/global.html#runTSNE)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class TsneState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createTsneWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n        \n            output.iterations = this.#parameters.iterations;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(perplexity, iterations, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            var k = scran.perplexityToNeighbors(perplexity);\n            nn_out = vizutils.computeNeighbors(this.#index, k);\n        }\n\n        let args = {\n            \"perplexity\": perplexity,\n            \"iterations\": iterations,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the t-SNE runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `tsne` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.perplexity - Number specifying the perplexity for the probability calculations.\n     * @param {number} parameters.iterations - Number of iterations to run the algorithm.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return t-SNE coordinates are computed in parallel on a separate worker thread.\n     * A promise is returned that resolves when those calculations are complete.\n     */\n    compute(parameters) {\n        let { perplexity, iterations, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && perplexity === this.#parameters.perplexity);\n        if (same_neighbors && iterations == this.#parameters.iterations) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(perplexity, iterations, animate, !same_neighbors);\n\n        this.#parameters.perplexity = perplexity;\n        this.#parameters.iterations = iterations;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******* Animators *********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.perplexity, this.#parameters.iterations, true, true);\n\n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => {\n                    return {\n                        \"type\": \"tsne_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"tsne\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            perplexity: phandle.open(\"perplexity\", { load: true }).values[0],\n            iterations: phandle.open(\"iterations\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new TsneState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a UMAP embedding based on the neighbor index constructed at {@linkplain NeighborIndexState}.\n * This wraps [`runUMAP`](https://kanaverse.github.io/scran.js/global.html#runUMAP)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class UmapState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createUmapWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n\n            output.iterations = this.#parameters.num_epochs;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(num_neighbors, num_epochs, min_dist, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            nn_out = vizutils.computeNeighbors(this.#index, num_neighbors);\n        }\n\n        let args = {\n            \"num_neighbors\": num_neighbors,\n            \"num_epochs\": num_epochs,\n            \"min_dist\": min_dist,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the UMAP runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `umap` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use to construct the simplicial sets.\n     * @param {number} parameters.num_epochs - Number of epochs to run the algorithm.\n     * @param {number} parameters.min_dist - Number specifying the minimum distance between points.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return UMAP coordinates are computed in parallel on a separate worker thread.\n     * A promise that resolves when the calculations are complete.\n     */\n    compute(parameters) {\n        let { num_neighbors, num_epochs, min_dist, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && this.#parameters.num_neighbors === num_neighbors);\n        if (same_neighbors && num_epochs === this.#parameters.num_epochs && min_dist === this.#parameters.min_dist) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(num_neighbors, num_epochs, min_dist, animate, !same_neighbors);\n\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.num_epochs = num_epochs;\n        this.#parameters.min_dist = min_dist;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.num_neighbors, this.#parameters.num_epochs, this.#parameters.min_dist, true, true);\n      \n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => { \n                    return {\n                        \"type\": \"umap_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"umap\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            num_neighbors: phandle.open(\"num_neighbors\", { load: true }).values[0],\n            num_epochs: phandle.open(\"num_epochs\", { load: true }).values[0],\n            min_dist: phandle.open(\"min_dist\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new UmapState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","export function registerCallback(worker, callback) {\n    worker.onmessage = callback;\n    return;\n}\n\nexport function sendMessage(worker, message, transfer) {\n    worker.postMessage(message, transfer);\n    return;\n}\n\nexport function terminateWorker(worker) {\n    worker.terminate();\n    return;\n}\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    // Just an alias for back-compatibility.\n    scran.free(object);\n    return;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n\nexport async function defaultDownload(url) {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return new Uint8Array(await resp.arrayBuffer());\n}\n\nexport function guessFeatureTypes(genes) {\n    let output = { columns: {} };\n\n    let rn = genes.rowNames();\n    if (rn !== null) {\n        output.row_names = scran.guessFeatures(rn, { forceTaxonomy: true });\n    }\n\n    for (const key of genes.columnNames()) {\n        let curcol = genes.column(key);\n        if (curcol instanceof Array) {\n            output.columns[key] = scran.guessFeatures(genes.column(key), { forceTaxonomy: true });\n        }\n    }\n\n    return output;\n}\n\nexport function subsetInvalidFactors(arrays) {\n    let N = arrays[0].length;\n    let output = { arrays: [], retain: null };\n\n    let invalid = new Uint8Array(N);\n    invalid.fill(0);\n    for (const x of arrays) {\n        let transformed = scran.factorize(x, { action: \"none\", placeholder: -1 });\n        output.arrays.push(transformed);\n        transformed.ids.forEach((y, i) => {\n            if (y == -1) {\n                invalid[i] = 1;\n            }\n        });\n    }\n\n    let num_invalid = 0;\n    invalid.forEach(y => { num_invalid += y; });\n    if (num_invalid == 0) {\n        return output;\n    }\n\n    let retain = new Int32Array(N - num_invalid);\n    {\n        let counter = 0;\n        for (var i = 0; i < N; i++) {\n            if (invalid[i] == 0) {\n                retain[counter] = i;\n                counter++;\n            }\n        }\n    }\n    output.retain = retain;\n\n    for (var i = 0; i < output.arrays.length; i++) {\n        let x = output.arrays[i];\n        let new_ids = scran.subsetBlock(x.ids, retain);\n        let remapping = scran.dropUnusedBlock(new_ids);\n        let new_levels = remapping.map(i => x.levels[i]);\n\n        scran.free(x.ids);\n        x.ids = new_ids;\n        x.levels = new_levels;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\n\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false, compute_auc = true } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = permuter(handle.open(x, { load: true }).values);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (i == \"auc\" && !compute_auc) {\n            continue;\n        }\n\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(rhandle.children)) {\n                current[j] = permuter(rhandle.open(j, { load: true }).values);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\nexport function fillGroupStats(object, i, vals) {\n    object.means(i, { copy: false }).set(vals.means);\n    object.detected(i, { copy: false }).set(vals.detected);\n\n    for (const [s, v] of Object.entries(vals.cohen)) {\n        object.cohen(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.lfc)) {\n        object.lfc(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.delta_detected)) {\n        object.deltaDetected(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    if (\"auc\" in vals) {\n        for (const [s, v] of Object.entries(vals.auc)) {\n            object.auc(i, { summary: summaries2int[s], copy: false }).set(v);\n        }\n    }\n}\n\n/**\n * Report marker results for a given group or cluster, ordered so that the strongest candidate markers appear first.\n *\n * @param {ScoreMarkersResults} results - The marker results object generated by the `scoreMarkers` function in **scran.js**.\n * @param {number} group - Integer specifying the group or cluster of interest.\n * Any number can be used if it was part of the `groups` passed to `scoreMarkers`.\n * @param {string} rankEffect - Summarized effect size to use for ranking markers.\n * This should follow the format of `<effect>-<summary>` where `<effect>` may be `lfc`, `cohen`, `auc` or `delta_detected`,\n * and `<summary>` may be `min`, `mean` or `min-rank`.\n *\n * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rankEffect`.\n * This contains:\n *   - `means`: a Float64Array of length equal to the number of genes, containing the mean expression within the selection.\n *   - `detected`: a Float64Array of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n *   - `lfc`: a Float64Array of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n *   - `delta_detected`: a Float64Array of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n */\nexport function formatMarkerResults(results, group, rankEffect) {\n    if (!rankEffect || rankEffect === undefined) {\n        rankEffect = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        let index = 1;\n        if (rankEffect.match(/-min$/)) {\n            index = 0;\n        } else if (rankEffect.match(/-min-rank$/)) {\n            increasing = true;\n            index = 4;\n        }\n\n        if (rankEffect.match(/^cohen-/)) {\n            ranking = results.cohen(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^lfc-/)) {\n            ranking = results.lfc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: index, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rankEffect + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.means(group, { copy: false }));\n    var stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n\nexport function locateVersusCache(left, right, cache) {\n    let left_small = left < right;\n\n    let bigg = (left_small ? right : left);\n    if (!(bigg in cache)) {\n        cache[bigg] = {};\n    }\n    let biggversus = cache[bigg];\n\n    let smal = (left_small ? left : right); \n    let rerun = !(smal in biggversus);\n    if (rerun) {\n        biggversus[smal] = {};\n    }\n\n    return { \n        cached: biggversus[smal],\n        run: rerun,\n        left_small: left_small\n    };\n}\n\nexport function freeVersusResults(cache) {\n    if (cache) {\n        for (const v of Object.values(cache)) {\n            for (const v2 of Object.values(v)) {\n                for (const m of Object.values(v2)) {\n                    scran.free(m);\n                }\n            }\n        }\n        for (const k of Object.keys(cache)) {\n            delete cache[k];\n        }\n    }\n}\n\nexport function computeVersusResults(matrices, clusters, block, keep, cache, lfc_threshold, compute_auc) {\n    let new_block = null;\n    if (block !== null) {\n        new_block = scran.subsetBlock(block, keep);\n        scran.dropUnusedBlock(new_block);\n    }\n\n    for (const modality of matrices.available()) {\n        let modmat = matrices.get(modality);\n        let sub;\n        try {\n            sub = scran.subsetColumns(modmat, keep);\n            cache[modality] = scran.scoreMarkers(sub, clusters, { block: new_block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        } finally {\n            scran.free(sub);\n        }\n    }\n}\n","import * as utils from \"./general.js\";\n\nexport function subsetSums(qc, filter, mat, cache, name) {\n    let output = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache, name);\n    let discards = filter.fetchDiscards();\n\n    // unsafe, so no more Wasm allocations past this point. \n    let sums = qc.fetchMetrics().sums({ copy: false }); \n\n    if (discards == null) {\n        output.set(sums);\n    } else {\n        let oarr = output.array();\n        var j = 0;\n        discards.forEach((x, i) => {\n            if (!x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                oarr[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as misc from \"./miscellaneous.js\";\n\n/**\n * Compute the length of a vector-like object.\n *\n * For Array and TypedArrays, this just returns the `length` property directly.\n *\n * Custom classes should provide a `_bioconductor_LENGTH` method to describe their length.\n * This method should accept no arguments. \n *\n * @param {*} x - Some vector-like object.\n * @return {number} Length of the object.\n */\nexport function LENGTH(x) {\n    if (\"_bioconductor_LENGTH\" in x) {\n        return x._bioconductor_LENGTH();\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'LENGTH' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    return x.length;\n}\n\n/**\n * Slice a vector-like object.\n *\n * For Array and TypedArrays, this just uses `slice()` or `subarray()`.\n *\n * Custom classes should provide a `_bioconductor_SLICE` method to create a slice.\n * This method should accept the same arguments as `SLICE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object|Array|TypedArray} i - An Array or TypedArray of integer indices specifying the slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A vector-like object, typically of the same class as `x`, containing data for the specified slice.\n *\n * If `allowInPlace = true`, `x` _may_ be modified in place, and the return value _may_ be a reference to `x`. \n */\nexport function SLICE(x, i, { allowView = false } = {}) {\n    if (\"_bioconductor_SLICE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_SLICE(output, i, { allowView });\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'SLICE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    if (i.constructor == Object) {\n        if (allowView && ArrayBuffer.isView(x)) {\n            return x.subarray(i.start, i.end);\n        } else {\n            return x.slice(i.start, i.end);\n        }\n    } else {\n        let output = new x.constructor(i.length);\n        i.forEach((y, j) => {\n            output[j] = x[y];\n        });\n        return output;\n    }\n}\n\n/**\n * Combine multiple vector-like objects.\n *\n * For Array and TypedArrays, the combined array is of a class that avoids information loss.\n *\n * Custom classes should provide a `_bioconductor_COMBINE` method to define the combining operation.\n * This method should accept the same arguments as `COMBINE`.\n *\n * @param {Array} objects - Array of vector-like objects to be combined.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE` method of the first element of `objects`.\n *\n * @return {*} A vector-like object containing the concatenated data from the input objects.\n * - If the first entry of `objects` is an instance of a custom class, the return value should be of the same class.\n * - If all `objects` are TypedArrays of the same class, the return value will be a TypedArray of that class.\n * - If any of the `objects` are Arrays, the return value will be an Array.\n * - If any of the `objects` are 64-bit TypedArrays of different classes, the return value will be an Array.\n * - Otherwise, for any other classes of TypedArrays in `objects`, the return value will be a Float64Array.\n */\nexport function COMBINE(objects) {\n    let x = objects[0];\n    if (\"_bioconductor_COMBINE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_COMBINE(output, objects);\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'COMBINE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    // It is assumed that every 'y' is of some compatible Array-like type as well.\n    let total_LENGTH = 0;\n    let constructor = x.constructor;\n\n    for (const obj of objects) {\n        total_LENGTH += obj.length;\n        constructor = utils.chooseArrayConstructors(constructor, obj.constructor);\n    }\n\n    let output = new constructor(total_LENGTH);\n    let position = 0;\n    for (const obj of objects) {\n        if (\"set\" in output) {\n            output.set(obj, position);\n            position += obj.length;\n        } else {\n            obj.forEach(x => {\n                output[position] = x;\n                position++;\n            });\n        }\n    }\n\n    return output;\n}\n\n/**\n * Clone a vector-like object.\n * \n * For TypedArrays, this just uses `slice()`.\n * For Arrays, this creates a copy and runs `CLONE` on each element in the copy.\n *\n * Custom classes should provide a `_bioconductor_CLONE` method to define the cloning operation.\n * This method should accept the same arguments as `COMBINE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.deepCopy=true] - Whether to create a deep copy.\n * The exact interpretation of `deepCopy=false` is left to each method, but generally speaking, \n * any setter (`$`-marked) functions operating on the copy should not alter `x`.\n *\n * @return {*} A clone of `x`, i.e., the return value and `x` should not compare equal.\n * If `deepCopy=true`, all internal components are also cloned.\n */\nexport function CLONE(x, { deepCopy = true } = {}) {\n    if (x instanceof Object) {\n        let options = { deepCopy };\n        if (\"_bioconductor_CLONE\" in x) {\n            let output = new x.constructor;\n            x._bioconductor_CLONE(output, options);\n            return output;\n        }\n\n        if (utils.isArrayLike(x)) {\n            if (x.constructor == Array) {\n                return x.map(y => CLONE(y, options));\n            } else if (deepCopy) {\n                return x.slice();\n            } else {\n                return x.subarray();\n            }\n        }\n\n        if (x.constructor == Object) {\n            if (deepCopy) {\n                let output = {};\n                for (const [k, v] of Object.entries(x)) {\n                    output[k] = CLONE(v);\n                }\n                return output;\n            } else {\n                return { ...x };\n            }\n        }\n\n        if (x.constructor == Map) {\n            let output = new Map;\n            for (const [k, v] of x) {\n                output.set(k, deepCopy ? CLONE(v) : v);\n            }\n            return output;\n        }\n\n        if (x.constructor == Set) {\n            let output = new Set;\n            for (const k of x) {\n                output.add(deepCopy ? CLONE(k) : k);\n            }\n            return output;\n        }\n\n\n        throw new Error(\"unknown CLONE operation for instance of class '\" + x.constructor.name + \"'\");\n    }\n\n    // Immutable atomics should be all that's left.\n    return x;\n}\n\n/**\n * Split a vector-like object along its length according to the levels of a factor of the same length.\n * This works automatically for all classes for which there is a {@linkcode SLICE} method,\n * but custom classes may also choose to define their own `_bioconductor_SPLIT` method. \n *\n * @param {*} x - Some vector-like object.\n * @param {Array|TypedArray} factor - Array containing the factor to use for splitting.\n * This should have the same length as `x`.\n *\n * Alternatively, the output of {@linkcode presplitFactor} can be supplied.\n *\n * @return {Object} An object containing one key per level of `factor`,\n * where the value is the slice of `x` corresponding to the indices of that level in `factor`.\n */\nexport function SPLIT(x, factor) {\n    if (factor.constructor != Object) {\n        factor = misc.presplitFactor(factor);\n    }\n\n    if (\"_bioconductor_SPLIT\" in x) {\n        return x._bioconductor_SPLIT(factor);\n    }\n\n    let output = {};\n    for (const [k, v] of Object.entries(factor)) {\n        output[k] = SLICE(x, v);\n    }\n\n    return output;\n}\n\n/**\n * Return the number of rows for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_ROWS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of rows.\n */\nexport function NUMBER_OF_ROWS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_ROWS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_ROWS();\n}\n\n/**\n * Return the number of columns for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_COLUMNS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of columns.\n */\nexport function NUMBER_OF_COLUMNS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_COLUMNS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_COLUMNS();\n}\n\n/**\n * Slice a two-dimensional object by its rows and/or columns.\n *\n * Custom classes should provide a `_bioconductor_SLICE_2D` method, accepting the same arguments as this generic but with `x` replaced by an \"empty\" instance of the same class.\n * Each method should then fill the empty instance with the sliced contents of `x`.\n *\n * @param {*} x - Some two-dimensional object.\n * @param {?(Object|Array|TypedArray)} rows - An Array or TypedArray of integer indices specifying the row-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * \n * Alternatively `null`, to indicate that no slicing is to be performed on the rows.\n * @param {?(Object|Array|TypedArray)} columns - An Array or TypedArray of integer indices specifying the column-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n *\n * Alternatively `null`, to indicate that no slicing is to be performed on the columns.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A two-dimensional object, typically of the same class as `x`, containing data for the specified slice.\n */\nexport function SLICE_2D(x, rows, columns, { allowView = false } = {}) {\n    if (!(\"_bioconductor_SLICE_2D\" in x)) {\n        throw new Error(\"no 'SLICE_2D' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by row.\n * Custom classes should provide a `_bioconductor_COMBINE_ROWS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by row.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_ROWS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the row-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_ROWS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_ROWS\" in x)) {\n        throw new Error(\"no 'COMBINE_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_ROWS(output, objects);\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by column.\n * Custom classes should provide a `_bioconductor_COMBINE_COLUMNS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by column.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_COLUMNS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the column-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_COLUMNS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_COLUMNS\" in x)) {\n        throw new Error(\"no 'COMBINE_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_COLUMNS(output, objects);\n    return output;\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * The Annotated class provides a store for arbitrary object-wide metadata.\n * It is intended as a base class for other structures and should not be constructed directly.\n */\nexport class Annotated {\n    /**\n     * @param {Object|Map} metadata - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(metadata) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._metadata = utils.object2map(metadata);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Map} Map containing arbitrary metadata.\n     */\n    metadata() {\n        return this._metadata;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object|Map} value - Object containing the metadata.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Annotated} The Annotated object after replacing the metadata.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setMetadata(value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._metadata = utils.object2map(value);\n        return target;\n    }\n\n    /**\n     * @param {Object} value - Object containing the metadata.\n     * @return {Annotated} A reference to this Annotated object.\n     */\n    $setMetadata(value) {\n        return this.setMetadata(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        output._metadata = cutils.cloneField(this._metadata, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A DataFrame is a collection of equilength vector-like objects as \"columns\".\n * The number of rows in the DataFrame is equal to the length of the columns, where the i-th row consists of the i-th element from each column.\n *\n * This class supports optional row names, which are either `null` or an array of strings of length equal to the number of rows.\n *\n * This class supports empty instances with a non-zero number of rows, which may be useful for piece-wise construction.\n *\n * The vector-like object for each column is expected to have methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * The DataFrame itself defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @augments Annotated\n */\nexport class DataFrame extends ann.Annotated {\n    /**\n     * @param {Object|Map} columns - Object or Map where keys are the column names and the values are equilength vector-like objects.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?number} [options.numberOfRows=null] - Non-negative value specifying the number of rows in the DataFrame.\n     * If `null`, this is automatically determined from the length of the vectors in `columns`, or from the length of `rowNames`.\n     * If non-`null`, this should not conflict with the inferred lengths from `columns` or `rowNames`.\n     * @param {?Array} [options.rowNames=null] - Array of strings containing the names for each row.\n     * If non-`null`, this should have the same length as the vectors inside `columns`, if any exist.\n     * If `null`, no row names are used.\n     * @param {?Array} [options.columnOrder=null] - Array of strings specifying the ordering of the columns.\n     * If non-`null`, this should have the same values as the keys of `columns`.\n     * If `null`, an arbitrary ordering is obtained from `columns`.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(columns, { numberOfRows = null, rowNames = null, columnOrder = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n        this._numberOfRows = numberOfRows;\n        this._rowNames = rowNames;\n        \n        try {\n            this._columns = new il.InternalList(columns, columnOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize columns for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n\n        for (const k of this._columns.names()) {\n            let n = generics.LENGTH(this._columns.entry(k));\n            if (this._numberOfRows == null) {\n                this._numberOfRows = n;\n            } else if (n != this._numberOfRows) {\n                throw new Error(\"expected all arrays in 'columns' to have equal length\");\n            }\n        }\n\n        if (rowNames != null) {\n            if (this._numberOfRows == null) {\n                this._numberOfRows = rowNames.length;\n            }\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._numberOfRows, \"'numberOfRows' or the length of arrays in 'columns'\");\n        }\n\n        if (this._numberOfRows == null) {\n            this._numberOfRows = 0;\n        }\n    }\n\n    static className = \"DataFrame\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the column names in the specified order.\n     */\n    columnNames() {\n        return this._columns.names();\n    }\n\n    /**\n     * @param {string} name - Name of a column.\n     * @return {boolean} Whether the column exists in this DataFrame.\n     */\n    hasColumn(name) {\n        return this._columns.has(name);\n    }\n\n    /**\n     * @return {number} Number of rows in this DataFrame.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns in this DataFrame.\n     */\n    numberOfColumns() {\n        return this._columns.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Column to retrieve, either by name or index.\n     * @return {*} The contents of column `i` as a vector-like object.\n     */\n    column(i) {\n        return this._columns.entry(i);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     * \n     * @return {DataFrame} The DataFrame after removing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeColumn(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.delete(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @return {DataFrame} A reference to this DataFrame after removing the specified column.\n     */\n    $removeColumn(i) {\n        return this.removeColumn(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame after adding/replacing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, value, { inPlace = false } = {}) {\n        if (generics.LENGTH(value) != this._numberOfRows) {\n            throw new Error(\"expected 'value' to have the same length as the number of rows in 'x'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     *\n     * @return {DataFrame} A reference to this DataFrame after adding/replacing the specified column.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = target._columns.setNames(names, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @return {DataFrame} A reference to this DataFrame with modified column names.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names != null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this._numberOfRows, \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @return {DataFrame} A reference to this DataFrame with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceColumns(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.slice(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $sliceColumns(i) {\n        return this.sliceColumns(i, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        let options = { allowView };\n\n        let new_columns = this._columns.apply(v => generics.SLICE(v, i, options));\n        let new_rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, i, options));\n\n        let new_numberOfRows;\n        if (i.constructor == Object) {\n            new_numberOfRows = i.end - i.start;\n        } else {\n            new_numberOfRows = i.length;\n        }\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return; \n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let new_columns = il.InternalList.parallelCombine(objects.map(x => x._columns), generics.COMBINE);\n\n        let all_n = [];\n        let all_l = [];\n        for (const yi of objects) {\n            all_n.push(yi.rowNames());\n            all_l.push(yi.numberOfRows());\n        }\n\n        let new_numberOfRows = utils.sum(all_l);\n        let new_rowNames = utils.combineNames(all_n, all_l, new_numberOfRows);\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._columns = cutils.cloneField(this._columns, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n        output._numberOfRows = this._numberOfRows;\n        return;\n    }\n};\n\n/**\n * Flexibly combine multiple DataFrames by row by filling in missing columns with an array of `null`s.\n * This is equivalent to calling {@linkcode COMBINE} on an array of DataFrames that may have mismatching columns.\n *\n * @param {Array} objects - Array of {@linkplain DataFrame}s to be combined.\n *\n * @return {DataFrame} The combined DataFrame, where the number of rows is equal to sum of rows across `objects`,\n * and the columns is equal to the union of columns across `objects`.\n */\nexport function flexibleCombineRows(objects) {\n    let ckeys = new Set();\n    let corder = [];\n    for (const current of objects) {\n        let cnames = current.columnNames();\n        for (const a of cnames) {\n            if (!ckeys.has(a)) {\n                ckeys.add(a);\n                corder.push(a);\n            }\n        }\n    }\n\n    let copies = [];\n    for (const current of objects) {\n        let dummy = new Array(current.numberOfRows());\n        dummy.fill(null);\n        let copy = generics.CLONE(current, { deepCopy: false });\n\n        for (const a of corder) {\n            if (!current.hasColumn(a)) {\n                copy.$setColumn(a, dummy);\n            }\n        }\n\n        copy._columns = copy._columns.reorder(corder);\n        copies.push(copy);\n    }\n\n    return generics.COMBINE(copies);\n}\n","import * as cutils from \"./clone-utils.js\";\n\n/**\n * Dense matrix of numbers.\n * Not really a Bioconductor-exclusive data structure, but we need this at a minimum for the {@linkplain SummarizedExperiment} to be useful.\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n */\nexport class DenseMatrix {\n    /**\n     * @param {number} numberOfRows - Number of rows, duh.\n     * @param {number} numberOfColumns - Number of columns.\n     * @param {TypedArray} values - 1-dimensional array of the matrix contents.\n     * This should have length equal to the product of `numberOfRows` and `numberOfColumns`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.columnMajor=true] - Whether `values` represents a column-major layout.\n     */\n    constructor(numberOfRows, numberOfColumns, values, { columnMajor = true } = {}) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._numberOfRows = numberOfRows;\n        this._numberOfColumns = numberOfColumns;\n        this._values = values;\n        this._columnMajor = columnMajor;\n        if (numberOfRows * numberOfColumns != values.length) {\n            throw new Error(\"length of 'values' should be equal to the product of 'dimensions'\");\n        }\n    }\n\n    static name = \"DenseMatrix\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {number} Number of rows.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns.\n     */\n    numberOfColumns() {\n        return this._numberOfColumns;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is column-major.\n     */\n    isColumnMajor() {\n        return this._columnMajor;\n    }\n\n    /**\n     * @return {TypedArray} Matrix contents as a 1-dimensional array.\n     */\n    values() {\n        return this._values;\n    }\n\n    #extractor(i, nprimary, nsecondary, allowView, primaryMajor) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                output[s] = this._values[offset];\n                offset += nprimary;\n            }\n            return output;\n\n        } else {\n            let start = i * nsecondary;\n            let end = start + nsecondary;\n            if (allowView) {\n                return this._values.subarray(start, end);\n            } else {\n                return this._values.slice(start, end);\n            }\n        }\n    }\n\n    /**\n     * Retrieve the contents of a particular row.\n     *\n     * @param {number} i - Index of the row of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the row `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    row(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfRows, this._numberOfColumns, allowView, !this._columnMajor);\n    }\n\n    /**\n     * Retrieve the contents of a particular column.\n     *\n     * @param {number} i - Index of the column of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the column `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    column(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfColumns, this._numberOfRows, allowView, this._columnMajor);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setValues(values, { inPlace = false } = {}) {\n        if (values.length !== this._values.length) {\n            throw new Error(\"replacement 'values' should have length equal to 'values()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._values = values;\n        return target;\n    }\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setValues(values) {\n        return this.setValues(values, { inPlace: true });\n    }\n\n    #inserter(i, nprimary, nsecondary, primaryMajor, replacement) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                this._values[offset] = replacement[s];\n                offset += nprimary;\n            }\n        } else {\n            let start = i * nsecondary;\n            this._values.set(replacement, start);\n        }\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRow(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfColumns) {\n            throw new Error(\"replacement row should have length equal to 'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfRows, target._numberOfColumns, !target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setRow(i, value) {\n        return this.setRow(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of rows in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfRows) {\n            throw new Error(\"replacement column should have length equal to 'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfColumns, target._numberOfRows, target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, {}) {\n        let full_rows = (rows === null);\n        let is_row_range = (!full_rows && rows.constructor == Object);\n        let new_rows = full_rows ? this._numberOfRows : (is_row_range ? rows.end - rows.start : rows.length);\n        output._numberOfRows = new_rows;\n\n        let full_columns = (columns === null);\n        let is_column_range = (!full_columns && columns.constructor == Object);\n        let new_columns = full_columns ? this._numberOfColumns : (is_column_range ? columns.end - columns.start : columns.length);\n        output._numberOfColumns = new_columns;\n\n        let new_values = new this._values.constructor(new_rows * new_columns);\n        output._values = new_values;\n\n        if (this._columnMajor) {\n            this.#primarySlicer(columns, full_columns, is_column_range, this._numberOfColumns, rows, full_rows, is_row_range, this._numberOfRows, new_rows, new_values);\n        } else {\n            this.#primarySlicer(rows, full_rows, is_row_range, this._numberOfRows, columns, full_columns, is_column_range, this._numberOfColumns, new_columns, new_values);\n        }\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n\n    #primarySlicer(primarySlice, fullPrimary, isPrimaryRange, primaryDim, secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues) {\n        if (fullPrimary) {\n            for (var p = 0; p < primaryDim; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p);\n            }\n        } else if (isPrimaryRange) {\n            for (var p = primarySlice.start; p < primarySlice.end; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p - primarySlice.start);\n            }\n        } else {\n            for (var pi = 0; pi < primarySlice.length; pi++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, primarySlice[pi], pi);\n            }\n        }\n    }\n\n    #secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, inPrimary, outPrimary) {\n        let in_offset = inPrimary * inSecondaryDim;\n        let out_offset = outPrimary * outSecondaryDim;\n\n        if (fullSecondary) {\n            let view = this._values.subarray(in_offset, in_offset + inSecondaryDim);\n            outputValues.set(view, out_offset);\n        } else if (isSecondaryRange) {\n            for (var s = secondarySlice.start; s < secondarySlice.end; s++) {\n                outputValues[out_offset + s - secondarySlice.start] = this._values[in_offset + s];\n            }\n        } else {\n            for (var si = 0; si < secondarySlice.length; si++) {\n                outputValues[out_offset + si] = this._values[in_offset + secondarySlice[si]];\n            }\n        }\n    }\n\n    _combiner(objects, primaryFun, secondaryFun, isPrimaryMajor, secondaryName) {\n        let num_primary = primaryFun(objects[0]);\n        let num_secondary = secondaryFun(objects[0]);\n        for (var i = 1; i < objects.length; i++) {\n            if (secondaryFun(objects[i]) !== num_secondary) {\n                throw new Error(\"all objects must have the same number of \" + secondaryName);\n            }\n            num_primary += primaryFun(objects[i]);\n        }\n\n        let primary_major = isPrimaryMajor(objects[0]);\n        let values = new objects[0]._values.constructor(num_primary * num_secondary);\n\n        if (primary_major) {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n                let out_offset = used_primary * num_secondary;\n\n                if (isPrimaryMajor(current)) {\n                    values.set(current._values, out_offset);\n                } else {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let in_offset = s * cur_primary;\n                        let out_offset2 = out_offset + s;\n                        for (var p = 0; p < cur_primary; p++) {\n                            values[out_offset2 + p * num_secondary] = current._values[in_offset + p];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        } else {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n\n                if (!isPrimaryMajor(current)) {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let view_offset = s * cur_primary;\n                        let view = current._values.subarray(view_offset, view_offset + cur_primary);\n                        values.set(view, used_primary + s * num_primary);\n                    }\n                } else {\n                    for (var p = 0; p < cur_primary; p++) {\n                        let in_offset = p * num_secondary;\n                        let out_offset = used_primary + p;\n                        for (var s = 0; s < num_secondary; s++) {\n                            values[out_offset + s * num_primary] = current._values[in_offset + s];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        }\n\n        return { num_primary, num_secondary, values, primary_major };\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfRows,\n            x => x._numberOfColumns,\n            x => !(x._columnMajor),\n            \"columns\"\n        );\n\n        output._numberOfRows = combined.num_primary;\n        output._numberOfColumns = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = !(combined.primary_major);\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfColumns,\n            x => x._numberOfRows,\n            x => x._columnMajor,\n            \"rows\"\n        );\n\n        output._numberOfColumns = combined.num_primary;\n        output._numberOfRows = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = combined.primary_major;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._values = (deepCopy ? this._values.slice() : this._values);\n        output._numberOfRows = this._numberOfRows;\n        output._numberOfColumns = this._numberOfColumns;\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ir from \"./IRanges.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * A GRanges object is a collection of genomic ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a sequence name, a start position on that sequence, and a width.\n * Each range may also be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The GRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class GRanges extends vec.Vector {\n    static #convertToInt8Array(x) {\n        if (x instanceof Int8Array) {\n            return x;\n        } else {\n            return new Int8Array(x);\n        }\n    }\n\n    static #checkStrandedness(strand) {\n        for (const y of strand) {\n            if (y < -1 || y > 1) {\n                throw new Error(\"'strand' must be -1, 0 or 1\");\n            }\n        }\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {IRanges} ranges - Position and width of the range on its specified sequence.\n     * This should have the same length as `seqnames`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.strand=null] - Array containing the strandedness of each genomic range.\n     * This should be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * If `null`, this is assumed to be 0 for all genomic ranges.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(seqnames, ranges, { strand = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(seqnames.length, { names, elementMetadata, metadata });\n\n        utils.checkStringArray(seqnames, \"seqnames\");\n        this._seqnames = seqnames;\n\n        let n = seqnames.length;\n        if (n !== generics.LENGTH(ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"'seqnames'\");\n        }\n        this._ranges = ranges;\n\n        if (strand !== null) {\n            if (n !== strand.length) {\n                throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n            }\n            strand = GRanges.#convertToInt8Array(strand);\n            GRanges.#checkStrandedness(strand);\n        } else {\n            strand = new Int8Array(n);\n            strand.fill(0);\n        }\n        this._strand = strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each genomic range.\n     */\n    start() {\n        return this._ranges.start();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each genomic range.\n     */\n    end() {\n        return this._ranges.end();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each genomic range.\n     */\n    width() {\n        return this._ranges.width();\n    }\n\n    /**\n     * @return {Array} Array of strings containing the sequence name for each genomic range.\n     */\n    seqnames() {\n        return this._seqnames;\n    }\n\n    /**\n     * @return {IRanges} Start positions and widths for all ranges on their specified sequence names.\n     */\n    ranges() {\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int8Array} Array containing the strandedness for each genomic range - 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     */\n    strand() {\n        return this._strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the sequence names to `seqnames`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setSeqnames(seqnames, { inPlace = false } = {}) {\n        utils.checkNamesArray(seqnames, \"replacement 'seqnames'\", generics.LENGTH(this), \"'LENGTH(<GRanges>)'\");\n        let target = cutils.setterTarget(this, inPlace); \n        target._seqnames = seqnames;\n        return target;\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @return {GRanges} A reference to this GRanges object after setting the sequence names to `seqnames`.\n     */\n    $setSeqnames(seqnames) {\n        return this.setSeqnames(seqnames, { inPlace: true });\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the ranges to `ranges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof ir.IRanges)) {\n            throw new Error(\"'ranges' should be an IRanges object\");\n        }\n\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"replacement 'ranges'\", \"'LENGTH(<GRanges>)'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @return {GRanges} A reference to this GRanges object after setting the ranges to `ranges`.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the strands to `strand`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStrand(strand, { inPlace = false } = {}) {\n        if (this._strand.length !== strand.length) {\n            throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n        }\n        strand = GRanges.#convertToInt8Array(strand);\n        GRanges.#checkStrandedness(strand);\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._strand = strand;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     *\n     * @return {GRanges} A reference to this GRanges object after setting the strands to `strand`.\n     */\n    $setStrand(strand) {\n        return this.setStrand(strand, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        let indices = utils.createSequence(generics.LENGTH(this));\n        let by_seqname = generics.SPLIT(indices, this._seqnames);\n        let starts = this.start();\n        let ends = this.end();\n\n        if (restrictToSeqnames !== null && restrictToSeqnames instanceof Array) {\n            restrictToSeqnames = new Set(restrictToSeqnames);\n        }\n        if (restrictToStrand !== null && restrictToStrand instanceof Array) {\n            restrictToStrand = new Set(restrictToStrand);\n        }\n\n        for (const name of Object.keys(by_seqname)) {\n            if (restrictToSeqnames !== null && !restrictToSeqnames.has(name)) {\n                delete by_seqname[name];\n                continue;\n            }\n            let seqname_indices = by_seqname[name];\n            let seqname_strand = generics.SLICE(this._strand, seqname_indices);\n            let by_strand = generics.SPLIT(seqname_indices, seqname_strand);\n\n            for (const str of Object.keys(by_strand)) {\n                if (restrictToStrand !== null && !restrictToStrand.has(Number(str))) {\n                    delete by_strand[str];\n                    continue;\n                }\n                let str_indices = by_strand[str];\n                by_strand[str] = olap.buildIntervalTree(starts, ends, { slice: str_indices });\n            }\n            by_seqname[name] = by_strand;\n        }\n\n        return new GRangesOverlapIndex(by_seqname);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._seqnames.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._seqnames = generics.SLICE(this._seqnames, i, { allowView });\n        output._ranges = generics.SLICE(this._ranges, i, { allowView });\n        output._strand = generics.SLICE(this._strand, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_sn = [];\n        let all_rr = [];\n        let all_st = [];\n        for (const x of objects) {\n            all_sn.push(x._seqnames);\n            all_rr.push(x._ranges);\n            all_st.push(x._strand);\n        }\n\n        output._seqnames = generics.COMBINE(all_sn);\n        output._ranges = generics.COMBINE(all_rr);\n        output._strand = generics.COMBINE(all_st);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._seqnames = cutils.cloneField(this._seqnames, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n        output._strand = cutils.cloneField(this._strand, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} A zero-length GRanges object.\n     */\n    static empty() {\n        return new GRanges([], ir.IRanges.empty());\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GRanges} objects.\n * This is typically constructed using the {@linkcode GRanges#buildOverlapIndex GRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GRangesOverlapIndex {\n    constructor(index) {\n        this._index = index;\n    }\n\n    /**\n     * @param {GRanges} query - The query object, containing ranges to be overlapped with those in the reference GRanges (that was used to construct this GRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let n = generics.LENGTH(query);\n        let results = new Array(n);\n        let starts = query.start();\n        let ends = query.end();\n\n        for (var i = 0; i < n; i++) {\n            results[i] = [];\n            let my_results = results[i];\n\n            let name = query._seqnames[i];\n            if (!(name in this._index)) {\n                continue;\n            }\n            let seq_index = this._index[name];\n\n            let strand = query._strand[i];\n            let allowed_strands;\n            if (ignoreStrand || strand == 0) {\n                allowed_strands = Object.keys(seq_index);\n            } else {\n                let sstr = String(strand);\n                if (!(sstr in seq_index)) {\n                    continue;\n                }\n                allowed_strands = [ sstr ];\n            }\n\n            let start = starts[i];\n            let end = ends[i];\n            for (const str of allowed_strands) {\n                let str_results = olap.queryIntervalTree(start, end, seq_index[str]);\n                str_results.forEach(x => my_results.push(x));\n            }\n        }\n\n        return results;\n    }\n}\n","import * as vec from \"./Vector.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\n/**\n * A GroupedGRanges object is a collection of groups of genomic ranges, inspired by the `GRangesList` class from the Bioconductor ecosystem.\n * Each group consists of a {@linkplain GRanges} object of arbitrary length, which is most often used to represent a multi-exon gene.\n * The GroupedGRanges can be considered a vector of groups, and defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Our implementation re-uses Bioconductor's strategy of storing the groups in a single concatenated GRanges.\n * This improves efficiency for large numbers of small GRanges, especially in placeholder objects where all the GRanges are zero-length.\n * \n * @extends Vector\n */\nexport class GroupedGRanges extends vec.Vector {\n    static #computeStarts(lengths) {\n        let starts = new Int32Array(lengths.length);\n        let last = 0;\n        for (var i = 0; i < lengths.length; i++) {\n            starts[i] = last;\n            last += lengths[i];\n        }\n        return { starts: starts, total: last };\n    }\n\n    #staged_setGroup = null;\n\n    /**\n     * @param {Array|GRanges} ranges - An array of {@linkplain GRanges} objects, where each element represents a group of genomic ranges.\n     * All objects should have compatible columns in their {@linkplain Vector#elementMetadata elementMetadata}.\n     * \n     * Alternatively, a single GRanges containing a concatenation of ranges from all groups.\n     * In this case, `rangeLengths` must be supplied.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(TypedArray|Array)} [options.rangeLengths=null] - Length of the ranges within each group.\n     * This should be coercible to an Int32Array, contain non-negative values, and have a sum equal to the length of `ranges`.\n     * Only used if `ranges` is a single {@linkplain GRanges} object, where each group's ranges are assumed to form contiguous intervals along `ranges`.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(ranges, { rangeLengths = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        if (ranges.constructor == Array) {\n            super(ranges.length, { names, elementMetadata, metadata });\n            rangeLengths = new Int32Array(ranges.length);\n            for (var i = 0; i < rangeLengths.length; i++) {\n                if (!(ranges[i] instanceof gr.GRanges)) {\n                    throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n                }\n                rangeLengths[i] = generics.LENGTH(ranges[i]);\n            }\n            ranges = generics.COMBINE(ranges);\n\n        } else {\n            if (!(ranges instanceof gr.GRanges)) {\n                throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n            }\n            if (rangeLengths == null) {\n                throw new Error(\"'rangeLengths' must be specified when 'ranges' is a 'GRanges'\");\n            }\n            super(rangeLengths.length, { names, elementMetadata, metadata });\n            rangeLengths = utils.convertToInt32Array(rangeLengths);\n            utils.checkNonNegative(rangeLengths);\n        }\n\n        this._ranges = ranges;\n        this._rangeLengths = rangeLengths;\n\n        let accumulated = GroupedGRanges.#computeStarts(rangeLengths);\n        this._rangeStarts = accumulated.starts;\n\n        if (accumulated.total !== generics.LENGTH(ranges)) {\n            throw new Error(\"sum of 'rangeLengths' must be equal to the length of 'ranges'\");\n        }\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} The concatenated set of ranges across all groups. \n     */\n    ranges() {\n        this.#flush_staged_setGroup();\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int32Array} The start indices for each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeStarts() {\n        this.#flush_staged_setGroup();\n        return this._rangeStarts;\n    }\n\n    /**\n     * @return {Int32Array} The length of each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeLengths() {\n        this.#flush_staged_setGroup();\n        return this._rangeLengths;\n    }\n\n    /**\n     * @param {number} i - Index of the group of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether a view can be created in any internal slicing operations.\n     *\n     * @return {GRanges} The genomic ranges for group `i`.\n     */\n    group(i, { allowView = false } = {}) {\n        this.#flush_staged_setGroup();\n        let s = this._rangeStarts[i];\n        return generics.SLICE(this._ranges, { start: s, end: s + this._rangeLengths[i] }, { allowView });\n    }\n\n    /**\n     * @return {number} Number of groups in this object.\n     */\n    numberOfGroups() {\n        return this._rangeStarts.length;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after modifying the internal ranges.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof gr.GRanges)) {\n            throw new Error(\"'ranges' must be a 'GRanges'\");\n        }\n\n        this.#flush_staged_setGroup();\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"number of ranges\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after modifying the internal ranges.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    #flush_staged_setGroup() {\n        let staged = this.#staged_setGroup;\n        if (staged === null) {\n            return;\n        }\n\n        staged.sort((a, b) => {\n            let diff = a[0] - b[0];\n            return (diff === 0 ? a[1] - b[1] : diff);\n        });\n\n        let counter = 0;\n        let accumulated = 0;\n        let last_start = 0;\n        let more_ranges = [];\n\n        let ngroups = this.numberOfGroups();\n        for (var g = 0; g < ngroups; g++) {\n            if (counter < staged.length && g == staged[counter][0]) { \n                let current_start = this._rangeStarts[g];\n                if (last_start < current_start) {\n                    more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: current_start }));\n                }\n                last_start = current_start + this._rangeLengths[g];\n\n                let replacement;\n                do {\n                    replacement = staged[counter][2];\n                    counter++;\n                } while (counter < staged.length && g == staged[counter][0]);\n\n                more_ranges.push(replacement);\n                this._rangeLengths[g] = generics.LENGTH(replacement);\n            }\n\n            this._rangeStarts[g] = accumulated;\n            accumulated += this._rangeLengths[g];\n        }\n\n        let nranges = generics.LENGTH(this._ranges);\n        if (last_start < nranges) {\n            more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: nranges }));\n        }\n\n        try {\n            this._ranges = generics.COMBINE(more_ranges);\n        } catch (e) {\n            throw new Error(\"failed to combine staged '$setGroup' operations; \" + e.message);\n        }\n\n        this.#staged_setGroup = null;\n        return;\n    }\n\n    /**\n     * Multiple consecutive calls to `$setGroup` are not executed immediately.\n     * Rather, the operations are staged and executed in batch once the modified GroupedGRanges is used in other methods.\n     * This enables efficient setting of individual groups inside a single concatenated {@linkplain GRanges}. \n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after setting group `i`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setGroup(i, ranges, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (target.#staged_setGroup === null) {\n            target.#staged_setGroup = [];\n        } else if (!inPlace) {\n            target.#staged_setGroup = target.#staged_setGroup.slice();\n        }\n\n        if (!inPlace) {\n            target._rangeStarts = target._rangeStarts.slice();\n            target._rangeLengths = target._rangeLengths.slice();\n        }\n\n        let nops = target.#staged_setGroup.length;\n        target.#staged_setGroup.push([i, nops, ranges]);\n        return target;\n    }\n\n    /**\n     * See comments for {@linkcode GroupedGRanges#$setGroup $setGroup}.\n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     *\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after setting group `i`.\n     */\n    $setGroup(i, ranges) {\n        return this.setGroup(i, ranges, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GroupedGRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        this.#flush_staged_setGroup();\n        return new GroupedGRangesOverlapIndex(\n            this._ranges.buildOverlapIndex({ restrictToSeqnames, restrictToStrand }),\n            generics.LENGTH(this._ranges),\n            this._rangeStarts,\n            this._rangeLengths\n        );\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._rangeStarts.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false } = {}) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        this.#flush_staged_setGroup();\n\n        output._rangeLengths = generics.SLICE(this._rangeLengths, i, { allowView });\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n\n        if (i.constructor == Object) {\n            // Handle this specially for optimizing allowView = true.\n            let s = this._rangeStarts[i.start];\n            output._ranges = generics.SLICE(this._ranges, { start: s, end: s + accumulated.total }, { allowView });\n        } else {\n            let keep = new Int32Array(accumulated.total);\n\n            let counter = 0;\n            for (const j of i) {\n                let start = this._rangeStarts[j];\n                let end = start + this._rangeLengths[j];\n                for (var k = start; k < end; k++) {\n                    keep[counter] = k;\n                    counter++;\n                }\n            }\n\n            output._ranges = generics.SLICE(this._ranges, keep, { allowView });\n        }\n\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        // We need to flush the staged operations in each object.\n        for (const o of objects) {\n            o.#flush_staged_setGroup();\n        }\n\n        output._rangeLengths = generics.COMBINE(objects.map(x => x.rangeLengths()));\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n        output._ranges = generics.COMBINE(objects.map(x => x._ranges));\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output.#staged_setGroup = cutils.cloneField(this.#staged_setGroup, deepCopy);\n        output._rangeLengths = cutils.cloneField(this._rangeLengths, deepCopy);\n        output._rangeStarts = cutils.cloneField(this._rangeStarts, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {number} [numberOfGroups=0] - Numbe of empty groups to create.\n     * @return {GroupedGRanges} A GroupedGRanges object of length equal to `numberOfGroups`,\n     * where each group is of zero length.\n     */\n    static empty(numberOfGroups) {\n        let runs = new Int32Array(numberOfGroups);\n        runs.fill(0);\n        return new GroupedGRanges(gr.GRanges.empty(), { rangeLengths: runs });\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GroupedGRanges} objects.\n * This is typically constructed using the {@linkcode GroupedGRanges#buildOverlapIndex GroupedGRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GroupedGRanges or {@linkplain GRanges} to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GroupedGRangesOverlapIndex {\n    constructor(index, fullLength, rangeStarts, rangeLengths) {\n        this._index = index;\n        this._rangeStarts = rangeStarts;\n        this._rangeLengths = rangeLengths;\n\n        let rev_map = new Int32Array(fullLength);\n        for (var i = 0; i < rangeStarts.length; i++) {\n            let start = rangeStarts[i];\n            let end = start + rangeLengths[i];\n            for (var s = start; s < end; s++) {\n                rev_map[s] = i;\n            }\n        }\n        this._reverseMapping = rev_map;\n    }\n\n    /**\n     * @param {GroupedGRanges|GRanges} query - The query object, containing ranges to be overlapped with those in the reference GroupedGRanges (that was used to construct this GroupedGRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges or groups in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let output = new Array(this._rangeStarts.length);\n        let rev_map = this._reverseMapping;\n\n        if (query instanceof GroupedGRanges) {\n            let overlaps = this._index.overlap(query._ranges);\n            for (var i = 0; i < query._rangeStarts.length; i++) {\n                let start = query._rangeStarts[i];\n                let end = start + query._rangeLengths[i];\n\n                let results = new Set;\n                for (var s = start; s < end; s++) {\n                    overlaps[s].forEach(x => results.add(rev_map[x]));\n                }\n                output[i] = Array.from(results);\n            }\n\n        } else {\n            let overlaps = this._index.overlap(query);\n            for (var i = 0; i < overlaps.length; i++) {\n                let results = new Set;\n                overlaps[i].forEach(x => results.add(rev_map[x]));\n                output[i] = Array.from(results);\n            }\n        }\n\n        return output;\n    }\n\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * An IRanges object is a collection of integer ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a start position and a width, and may be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The IRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class IRanges extends vec.Vector {\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} start - Array of start positions for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Array|TypedArray} width - Array of widths for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(start, width, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(start.length, { names, elementMetadata, metadata });\n\n        this._start = utils.convertToInt32Array(start);\n        utils.checkNonNegative(this._start, \"start\");\n\n        this._width = utils.convertToInt32Array(width);\n        utils.checkNonNegative(this._width, \"width\");\n\n        let n = this._start.length;\n        if (n !== this._width.length) {\n            throw new Error(\"'start' and 'width' should have the same length\");\n        }\n    }\n\n    static className = \"IRanges\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each range.\n     */\n    start() {\n        return this._start;\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each range.\n     */\n    end() {\n        return this._start.map((x, i) => x + this._width[i]);\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each range.\n     */\n    width() {\n        return this._width;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the start positions to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStart(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'start' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"start\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._start = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the start positions to `value`.\n     */\n    $setStart(value) {\n        return this.setStart(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the widths to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setWidth(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'width' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"width\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._width = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the widths to `value`.\n     */\n    $setWidth(value) {\n        return this.setWidth(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain IRanges} instances.\n     */\n    buildOverlapIndex() {\n        let tree = olap.buildIntervalTree(this._start, this.end());\n        return new IRangesOverlapIndex(tree);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._start.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._start = generics.SLICE(this._start, i, { allowView });\n        output._width = generics.SLICE(this._width, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_s = [];\n        let all_w = [];\n        for (const x of objects) {\n            all_s.push(x._start);\n            all_w.push(x._width);\n        }\n\n        output._start = generics.COMBINE(all_s);\n        output._width = generics.COMBINE(all_w);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._start = cutils.cloneField(this._start, deepCopy);\n        output._width = cutils.cloneField(this._width, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRanges} A zero-length IRanges object.\n     */\n    static empty() {\n        return new IRanges(new Int32Array, new Int32Array);\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain IRanges} objects.\n * This is typically constructed using the {@linkcode IRanges#buildOverlapIndex IRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query IRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class IRangesOverlapIndex {\n    constructor(tree) {\n        this._tree = tree;\n    }\n\n    /**\n     * @param {IRanges} query - The query object, containing ranges to be overlapped with those in the reference IRanges (that was used to construct this IRangesOverlapIndex object).\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain IRanges} object.\n     */\n    overlap(query) {\n        let n = generics.LENGTH(query);\n        let output = new Array(n);\n        for (var i = 0; i < n; i++) {\n            output[i] = olap.queryIntervalTree(query._start[i], query._start[i] + query._width[i], this._tree);\n        }\n        return output;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\nexport class InternalList {\n    constructor(entries, order) {\n        if (arguments.length == 0){\n            return;\n        }\n\n        entries = utils.object2map(entries);\n\n        let expected = Array.from(entries.keys());\n        if (order !== null) {\n            utils.checkNamesArray(order, \"'order'\", expected.length, \"the length of 'entries'\");\n            let observed = order.slice().sort();\n            expected.sort();\n\n            if (!utils.areArraysEqual(observed, expected)) {\n                throw new Error(\"values of 'order' should be the same as the keys of 'entries'\");\n            }\n        } else {\n            order = expected;\n        }\n\n        this._entries = entries;\n        this._order = order;\n    }\n\n    static className = \"InternalList\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    names() {\n        return this._order;\n    }\n\n    numberOfEntries() {\n        return this._order.length;\n    }\n\n    #check_entry_index(i) {\n        if (i < 0 || i >= this._order.length) {\n            throw new Error(\" index '\" + String(i) + \"' out of range for this \" + this.constructor.className);\n        }\n    }\n\n    entry(i) {\n        if (typeof i == \"string\") {\n            if (!this._entries.has(i)) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            return this._entries.get(i);\n        } else {\n            this.#check_entry_index(i);\n            return this._entries.get(this._order[i]);\n        }\n    }\n\n    has(name) {\n        return this._entries.has(name);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n    \n    delete(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copies so that we can do our setting.\n            target._order = target._order.slice();\n            target._entries = new Map(target._entries); \n        }\n\n        if (typeof i == \"string\") {\n            let ii = target._order.indexOf(i);\n            if (ii < 0) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            target._order.splice(ii, 1); \n            target._entries.delete(i);\n        } else {\n            this.#check_entry_index(i);\n            let n = target._order[i];\n            target._order.splice(i, 1);\n            target._entries.delete(n);\n        }\n\n        return target;\n    }\n\n    set(i, value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copy so that we can do our setting.\n            target._entries = new Map(target._entries);\n        }\n\n        if (typeof i == \"string\") {\n            if (!target._entries.has(i)) {\n                if (!inPlace) {\n                    target._order = target._order.slice();\n                }\n                target._order.push(i);\n            }\n            target._entries.set(i, value);\n        } else {\n            this.#check_entry_index(i);\n            target._entries.set(target._order[i], value);\n        }\n\n        return target;\n    }\n\n    setNames(names, { inPlace = false } = {}) {\n        utils.checkNamesArray(names, \"replacement 'names'\", this._order.length, \"length of 'names()'\");\n\n        let new_entries = new Map;\n        for (var i = 0; i < names.length; i++) {\n            if (new_entries.has(names[i])) {\n                throw new Error(\"detected duplicate value '\" + names[i] + \"' in replacement 'names'\");\n            }\n            new_entries.set(names[i], this._entries.get(this._order[i]));\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = names;\n        return target;\n    }\n\n    slice(indices, { inPlace = false } = {}) {\n        let new_entries = new Map;\n        let new_order = [];\n\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (new_entries.has(ii)) {\n                throw new Error(\"duplicate entries detected in slice request\");\n            } else if (!this._entries.has(ii)) {\n                throw new Error(\"slice contains missing entry '\" + ii + \"' \");\n            }\n\n            new_entries.set(ii, this._entries.get(ii));\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = new_order;\n        return target;\n    }\n\n    reorder(indices, { inPlace = false } = {}) {\n        // Reorder can be slightly more efficient than slice because we just\n        // need to change the ordering vector rather than creating a new Map.\n        if (indices.length !== this._order.length) {\n            throw utils.formatLengthError(\"reordered indices\", \"the number of existing entries\");\n        }\n\n        let new_order = [];\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (!this._entries.has(ii)) {\n                throw new Error(\"missing entry '\" + ii + \"' among the reordered indices\");\n            }\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._order = new_order;\n        return target;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._entries = (deepCopy ? generics.CLONE(this._entries) : this._entries);\n        output._order = (deepCopy ? generics.CLONE(this._order) : this._order);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    apply(FUN, { inPlace = false } = {}) {\n        let new_entries = (inPlace ? this._entries : new Map);\n        for (const [k, v] of this._entries) {\n            new_entries.set(k, FUN(v));\n        }\n        return (inPlace ? this : new InternalList(new_entries, this._order));\n    }\n\n    static parallelCombine(objects, combiner) {\n        let first_order = objects[0]._order;\n        for (var i = 1; i < objects.length; i++) {\n            if (!utils.areArraysEqual(first_order, objects[i]._order)) {\n                throw new Error(\"detected differences in names between first object and object \" + String(i) + \" to be combined\");\n            }\n        }\n\n        let new_entries = new Map;\n        for (const k of first_order) {\n            let found = objects.map(x => x._entries.get(k));\n            new_entries.set(k, combiner(found));\n        }\n\n        return new InternalList(new_entries, first_order);\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as ggr from \"./GroupedGRanges.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\n\n/**\n * A RangedSummarizedExperiment is a {@linkplain SummarizedExperiment} subclass where each row represents a genomic interval.\n * As such, it stores an additional {@linkplain GRanges} or {@linkplain GroupedGRanges} of length equal to the number of rows,\n * where each element represents the genomic range(s) for the corresponding row of the SummarizedExperiment.\n *\n * The RangedSummarizedExperiment supports the same set of generics as the {@linkplain SummarizedExperiment}.\n * Each method will call the base method, with the following extensions:\n *\n * - {@linkcode SLICE_2D} will additionally slice the supplied genomic ranges by the desired `rows`.\n * - {@linkcode COMBINE_ROWS} will combine genomic ranges across objects.\n *   If some objects contain a GroupedGRanges and other objects contain GRanges, the latter will be coerced to a GroupedGRanges (where each group contains one range) before combining.\n *   If any object is a base SummarizedExperiment, a GroupedGRanges containing zero-length groups will be automatically constructed to attempt combining.\n * - {@linkcode COMBINE_COLUMNS} will use the genomic ranges from the first object.\n *\n * @extends SummarizedExperiment\n */\nexport class RangedSummarizedExperiment extends se.SummarizedExperiment {\n    #check_rowRanges(x) {\n        if (!(x instanceof gr.GRanges) && !(x instanceof ggr.GroupedGRanges)) {\n            throw new Error(\"'rowRanges' should be a 'GRanges' or 'GroupedGRanges' instance\");\n        }\n        if (generics.LENGTH(x) !== this._rowData.numberOfRows()) {\n            throw utils.formatLengthError(\"'rowRanges'\", \"the number of rows\");\n        }\n    }\n\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {?(GRanges|GroupedGRanges)} rowRanges - Genomic ranges corresponding to each row.\n     *\n     * Alternatively, each row may correspond to a group of genomic ranges.\n     *\n     * If `null`, a {@linkplain GroupedGRanges} is constructed where each row corresponds to one group of ranges of zero length.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain SummarizedExperiment} constructor.\n     */\n    constructor(assays, rowRanges, options = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(assays, options);\n\n        if (rowRanges === null) {\n            rowRanges = ggr.GroupedGRanges.empty(this.numberOfRows());\n        } else {\n            this.#check_rowRanges(rowRanges);\n        }\n        this._rowRanges = rowRanges;\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} Genomic ranges corresponding to each row.\n     */\n    rowRanges() {\n        return this._rowRanges;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {RangedSummarizedExperiment} The RangedSummarizedExperiment after modifying its `rowRanges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowRanges(value, { inPlace = false } = {}) {\n        this.#check_rowRanges(value);\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowRanges = value;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @return {RangedSummarizedExperiment} A reference to this RangedSummarizedExperiment after modifying its `rowRanges`.\n     */\n    $setRowRanges(value) {\n        return this.setRowRanges(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n        if (rows !== null) {\n            output._rowRanges = generics.SLICE(this._rowRanges, rows);\n        } else {\n            output._rowRanges = this._rowRanges;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        let collected = [];\n        let has_empty = false;\n        let has_ggr = false;\n\n        for (var i = 0; i < objects.length; i++) {\n            let x = objects[i];\n            if (x instanceof RangedSummarizedExperiment) {\n                let y = x._rowRanges;\n                if (y instanceof ggr.GroupedGRanges) {\n                    has_ggr = true;\n                }\n                collected.push(y);\n            } else if (x instanceof se.SummarizedExperiment) {\n                has_empty = true;\n                collected.push(null);\n            } else {\n                throw new Error(\"objects to be combined must be SummarizedExperiments (failing for object \" + String(i) + \")\");\n            }\n        }\n\n        // Promoting nulls and GRanges to GroupedGRanges, if necessary.\n        if (has_empty || has_ggr) {\n            for (var i = 0; i < collected.length; i++) {\n                let current = collected[i];\n\n                if (current instanceof gr.GRanges) {\n                    let widths = new Int32Array(generics.LENGTH(current));\n                    widths.fill(1);\n\n                    let options = { \n                        rangeLengths: widths,\n                        names: current.names(),\n                        elementMetadata: current.elementMetadata(),\n                        metadata: current.metadata()\n                    };\n\n                    if (options.names !== null) {\n                        current = current.setNames(null);\n                    } \n\n                    if (options.elementMetadata.metadata().size > 0 || options.elementMetadata.numberOfColumns() > 0) {\n                        current = current.setElementMetadata(null);\n                    }\n\n                    if (options.metadata.size > 0) {\n                        current = current.setMetadata(new Map);\n                    }\n\n                    collected[i] = new ggr.GroupedGRanges(current, options);\n\n                } else if (current === null){\n                    collected[i] = ggr.GroupedGRanges.empty(objects[i].numberOfRows());\n                }\n            }\n        }\n\n        output._rowRanges = generics.COMBINE(collected);\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        output._rowRanges = objects[0]._rowRanges;\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._rowRanges = cutils.cloneField(this._rowRanges, deepCopy);\n\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as rse from \"./RangedSummarizedExperiment.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SingleCellExperiment is a {@linkplain RangedSummarizedExperiment} subclass that contains additional fields for storing reduced dimensions and alternative experiments.\n * It supports the same set of generics as the {@linkplain SummarizedExperiment}.\n *\n * Each reduced dimension instance should have number of rows equal to the number of columns of the SingleCellExperiment.\n * Each instance is expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode CLONE}\n *\n * Each alternative experiment should be a {@linkplain SummarizedExperiment} with number of columns equal to that of the SingleCellExperiment.\n *\n * @extends RangedSummarizedExperiment\n */\nexport class SingleCellExperiment extends rse.RangedSummarizedExperiment {\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {?(GRanges|GroupedGRanges)} [options.rowRanges=null] - Genomic ranges corresponding to each row, see the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {Object|Map} [options.reducedDimensions={}] - Object containing named reduced dimensions.\n     * Each value should be a 2-dimensional object with number of rows equal to the number of columns of the assays.\n     * @param {?Array} [options.reducedDimensionOrder=null] - Array containing the order of the reduced dimensions.\n     * This should have the same values as the keys of `reducedDimensions`, and defaults to those keys if `null`.\n     * @param {Object|Map} [options.alternativeExperiments={}] - Object containing named alternative experiments.\n     * Each value should be a 2-dimensional object with number of columns equal to that of the assays.\n     * @param {?Array} [options.alternativeExperimentOrder=null] - Array containing the order of the alternative experiments.\n     * This should have the same values as the keys of `alternativeExperiments`, and defaults to those keys if `null`.\n     */\n    constructor(assays, options={}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        let { reducedDimensions = {}, reducedDimensionOrder = null, alternativeExperiments = {}, alternativeExperimentOrder = null, rowRanges = null } = options;\n        super(assays, rowRanges, options);\n        let ncols = this.numberOfColumns();\n\n        try {\n            this._reducedDimensions = new il.InternalList(reducedDimensions, reducedDimensionOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize reduced dimension list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._reducedDimensions.names()) {\n            let v = this._reducedDimensions.entry(k);\n            if (generics.NUMBER_OF_ROWS(v) !== ncols) {\n                throw new Error(\"number of rows for reduced dimension '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        try {\n            this._alternativeExperiments = new il.InternalList(alternativeExperiments, alternativeExperimentOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize alternative experiment list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._alternativeExperiments.names()) {\n            let v = this._alternativeExperiments.entry(k);\n            if (!(v instanceof se.SummarizedExperiment)) {\n                throw new Error(\"alternative experiment '\" + k + \"' is not a SummarizedExperiment\");\n            }\n            if (v.numberOfColumns(v) !== ncols) {\n                throw new Error(\"number of columns for alternative experiment '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        return;\n    }\n\n    static className = \"SingleCellExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the reduced dimensions.\n     */\n    reducedDimensionNames() {\n        return this._reducedDimensions.names();\n    }\n\n    /**\n     * @param {string|number} i - Reduced dimension to retrieve, either by name or index.\n     * @return {*} The contents of reduced dimension `i` as an multi-dimensional array-like object.\n     */\n    reducedDimension(i) {\n        let output;\n        try {\n            output = this._reducedDimensions.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the alternative experiments.\n     */\n    alternativeExperimentNames() {\n        return this._alternativeExperiments.names();\n    }\n\n    /**\n     * @param {string|number} i - Alternative experiment to retrieve, either by name or index.\n     * @return {SummarizedExperiment} The specified alternative experiment `i`. \n     */\n    alternativeExperiment(i) {\n        let output;\n        try {\n            output = this._alternativeExperiments.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeReducedDimension(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeReducedDimension(i) {\n        return this.removeReducedDimension(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimension(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) != this.numberOfColumns()) {\n            throw new Error(\"number of rows of 'value' should be the same as the number of columns of this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._reducedDimensions = target._reducedDimensions.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified reduced dimensions.\n     */\n    $setReducedDimension(i, value) {\n        return this.setReducedDimension(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified reduced dimension names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimensionNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the reduced dimension names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified reduced dimension names.\n     */\n    $setReducedDimensionNames(names) {\n        return this.setReducedDimensionNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceReducedDimensions(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = this._reducedDimensions.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the reduced dimensions for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced reduced dimensions.\n     */\n    $sliceReducedDimensions(i) {\n        return this.sliceReducedDimensions(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAlternativeExperiment(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeAlternativeExperiment(i) {\n        return this.removeAlternativeExperiment(i, { inPlace: true });;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperiment(i, value, { inPlace = false } = {}) {\n        if (!(value instanceof se.SummarizedExperiment) || generics.NUMBER_OF_COLUMNS(value) != this.numberOfColumns()) {\n            throw new Error(\"'value' should be a SummarizedExperiment with the same number of columns as this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._alternativeExperiments = target._alternativeExperiments.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified alternative experiments.\n     */\n    $setAlternativeExperiment(i, value) {\n        return this.setAlternativeExperiment(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified alternative experiment names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperimentNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the alternative experiment names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified alternative experiment names.\n     */\n    $setAlternativeExperimentNames(names) {\n        return this.setAlternativeExperimentNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAlternativeExperiments(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = this._alternativeExperiments.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the alternative experiments for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced alternative experiments.\n     */\n    $sliceAlternativeExperiments(i) {\n        return this.sliceAlternativeExperiments(i, { inPlace: true });\n    }\n\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n\n        if (columns !== null) {\n            output._reducedDimensions = this._reducedDimensions.apply(v => generics.SLICE_2D(v, columns, null, { allowView }));\n            output._alternativeExperiments = this._alternativeExperiments.apply(v => generics.SLICE_2D(v, null, columns, { allowView }));\n        } else {\n            output._reducedDimensions = this._reducedDimensions;\n            output._alternativeExperiments = this._alternativeExperiments;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        output._reducedDimensions = this._reducedDimensions;\n        output._alternativeExperiments = this._alternativeExperiments;\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        try {\n            output._reducedDimensions = il.InternalList.parallelCombine(objects.map(x => x._reducedDimensions), generics.COMBINE_ROWS);\n        } catch (e) {\n            throw new Error(\"failed to combine reduced dimensions for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        try {\n            output._alternativeExperiments = il.InternalList.parallelCombine(objects.map(x => x._alternativeExperiments), generics.COMBINE_COLUMNS);\n        } catch (e) {\n            throw new Error(\"failed to combine alternative experiments for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._reducedDimensions = cutils.cloneField(this._reducedDimensions, deepCopy);\n        output._alternativeExperiments = cutils.cloneField(this._alternativeExperiments, deepCopy);\n\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SummarizedExperiment contains zero or more assays, consisting of multi-dimensional arrays (usually matrices) of experimental data,\n * as well as {@linkplain DataFrame}s containing further annotations on the rows or columns of those arrays.\n * The SummarizedExperiment class defines methods for the following generics:\n * \n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * Assays are expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * @extends Annotated\n */\nexport class SummarizedExperiment extends ann.Annotated {\n    /**\n     * @param {Object|Map} assays - Object or Map where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.assayOrder=null] - Array of strings specifying the ordering of the assays.\n     * If non-`null`, this should have the same values as the keys of `assays`.\n     * If `null`, an arbitrary ordering is obtained from `assays`.\n     * @param {?DataFrame} [options.rowData=null] - Data frame of row annotations.\n     * If non-`null`, this should have a number of rows equal to the number of rows in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?DataFrame} [options.columnData=null] - Data frame of column annotations.\n     * If non-`null`, this should have a number of columns equal to the number of columns in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?Array} [options.rowNames=null] - Array of strings of length equal to the number of rows in the `assays`, containing row names.\n     * Alternatively `null`, if no row names are present.\n     * @param {?Array} [options.columnNames=null] - Array of strings of length equal to the number of columns in the `assays`, containing column names.\n     * Alternatively `null`, if no column names are present.\n     * @param {Object|Map} [options.metadata={}] - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(assays, { assayOrder = null, rowData = null, columnData = null, rowNames = null, columnNames = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        // Check the assays.\n        try {\n            this._assays = new il.InternalList(assays, assayOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize assay list for this SummarizedExperiment; \" + e.message, { cause: e });\n        }\n\n        let nrows = null;\n        let ncols = null;\n        for (const k of this._assays.names()) {\n            let current = this._assays.entry(k);\n            let nr = generics.NUMBER_OF_ROWS(current);\n            let nc = generics.NUMBER_OF_COLUMNS(current);\n            if (nrows == null) {\n                nrows = nr;\n                ncols = nc;\n            } else if (nrows !== nr || ncols !== nc) {\n                throw new Error(\"expected all assays in 'assays' to have the same number of rows and columns\");\n            }\n        }\n\n        // Check the rowData.\n        if (rowData === null) {\n            if (nrows == null){\n                throw new Error(\"'rowData' must be specified if 'assays' is empty\");\n            }\n            rowData = new df.DataFrame({}, { numberOfRows: nrows });\n        } else {\n            if (nrows !== null && nrows !== generics.LENGTH(rowData)) {\n                throw new Error(\"'rowData' should be equal to the number of rows in each 'assays'\");\n            }\n        }\n        this._rowData = rowData;\n\n        // Check the columnData.\n        if (columnData === null) {\n            if (ncols == null){\n                throw new Error(\"'columnData' must be specified if 'assays' is empty\");\n            }\n            columnData = new df.DataFrame({}, { numberOfRows: ncols });\n        } else {\n            if (ncols !== null && ncols !== generics.LENGTH(columnData)) {\n                throw new Error(\"'columnData' should be equal to the number of columns in each 'assays'\");\n            }\n        }\n        this._columnData = columnData;\n\n        // Checking the names.\n        if (rowNames != null) {\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._rowData.numberOfRows(), \"the number of rows in each 'assays'\");\n        }\n        this._rowNames = rowNames;\n\n        if (columnNames != null) {\n            utils.checkNamesArray(columnNames, \"'columnNames'\", this._columnData.numberOfRows(), \"the number of columns in each 'assays'\");\n        }\n        this._columnNames = columnNames;\n    }\n\n    static className = \"SummarizedExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of assay names.\n     */\n    assayNames() {\n        return this._assays.names();\n    }\n\n    /**\n     * @return {number} Number of assays.\n     */\n    numberOfAssays() {\n        return this._assays.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Assay to retrieve, either by name or index.\n     * @return {*} The contents of assay `i` as an multi-dimensional array-like object.\n     */\n    assay(i) {\n        let output;\n        try {\n            output = this._assays.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified assay from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of row data, with one row per row in this SummarizedExperiment.\n     */\n    rowData() {\n        return this._rowData;\n    }\n\n    /**\n     * @return {number} Number of rows in this SummarizedExperiment.\n     */\n    numberOfRows() {\n        return this._rowData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of column data, with one row per column in this SummarizedExperiment.\n     */\n    columnData() {\n        return this._columnData;\n    }\n\n    /**\n     * @return {number} Number of columns in this SummarizedExperiment.\n     */\n    numberOfColumns() {\n        return this._columnData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing column names, or `null` if no column names are available.\n     */\n    columnNames() {\n        return this._columnNames;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAssay(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove assay \" + (typeof i == \"string\" ? \"'\" + i + \"'\" : String(i)) + \" from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment after removing the specified assay.\n     */\n    $removeAssay(i) {\n        return this.removeAssay(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} A SummarizedExperiment with modified assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssay(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) !== this.numberOfRows() || generics.NUMBER_OF_COLUMNS(value) !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same dimensions as this 'SummarizedExperiment'\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._assays = target._assays.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assays.\n     */\n    $setAssay(i, value) {\n        return this.setAssay(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified assay names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssayNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the assay names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assay names.\n     */\n    $setAssayNames(names) {\n        return this.setAssayNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAssays(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = this._assays.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the assays for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced assays.\n     */\n    $sliceAssays(i) {\n        return this.sliceAssays(i, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfRows()) {\n            throw new Error(\"expected 'value' to have the same number of rows as this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row data.\n     */\n    $setRowData(value) {\n        return this.setRowData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same number of rows as the number of columns of this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified column data.\n     */\n    $setColumnData(value) {\n        return this.setColumnData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfRows(), \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfColumns(), \"'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        output._assays = this._assays.apply(v => generics.SLICE_2D(v, rows, columns, { allowView }));\n\n        if (rows !== null) {\n            output._rowData = generics.SLICE(this._rowData, rows, { allowView });\n            output._rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, rows, { allowView }));\n        } else {\n            output._rowData = this._rowData;\n            output._rowNames = this._rowNames;\n        }\n\n        if (columns !== null) {\n            output._columnData = generics.SLICE(this._columnData, columns, { allowView });\n            output._columnNames = (this._columnNames == null ? null : generics.SLICE(this._columnNames, columns, { allowView }));\n        } else {\n            output._columnData = this._columnData;\n            output._columnNames = this._columnNames;\n        }\n\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_ROWS);\n\n        let all_dfs = objects.map(x => x._rowData);\n        output._rowData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._rowNames);\n        let all_l = objects.map(x => x.numberOfRows());\n        output._rowNames = utils.combineNames(all_n, all_l);\n\n        output._columnData = this._columnData;\n        output._columnNames = this._columnNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_COLUMNS);\n\n        let all_dfs = objects.map(x => x._columnData);\n        output._columnData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._columnNames);\n        let all_l = objects.map(x => x.numberOfColumns());\n        output._columnNames = utils.combineNames(all_n, all_l);\n\n        output._rowData = this._rowData;\n        output._rowNames = this._rowNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._assays = cutils.cloneField(this._assays, deepCopy);\n        output._rowData = cutils.cloneField(this._rowData, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n\n        output._columnData = cutils.cloneField(this._columnData, deepCopy);\n        output._columnNames = cutils.cloneField(this._columnNames, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as ann from \"./Annotated.js\";\n\nfunction verifyElementMetadata(elementMetadata, numExpected, className) {\n    if (elementMetadata !== null) {\n        if (!(elementMetadata instanceof df.DataFrame)) {\n            throw new Error(\"'elementMetadata' should be a DataFrame\");\n        }\n        if (generics.LENGTH(elementMetadata) !== numExpected) {\n            throw new Error(\"'elementMetadata' should have the same number of rows as 'LENGTH(<\" + className + \">)'\");\n        }\n    } else {\n        elementMetadata = new df.DataFrame({}, { numberOfRows: numExpected });\n    }\n    return elementMetadata;\n}\n\n/**\n * The Vector class implements a store for arbitrary per-element metadata and per-element names.\n * It is intended as a base class for other structures that have a concept of \"vector-ness\".\n * It should not be constructed directly.\n *\n * @augments Annotated\n */\nexport class Vector extends ann.Annotated {\n    /**\n     * @param {number} length - Number of elements in this vector-like object.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-element annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(length, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        this._elementMetadata = verifyElementMetadata(elementMetadata, length, this.constructor.className);\n\n        if (names !== null) {\n            utils.checkNamesArray(names, \"'names'\", length, \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        }\n        this._names = names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {DataFrame} A {@linkplain DataFrame} with one row corresponding to each vector element, containing arbitrary per-element metadata.\n     */\n    elementMetadata() {\n        return this._elementMetadata;\n    }\n\n    /**\n     * @return {?Array} Array of strings containing the name of each range, or `null` if no names are available.\n     */\n    names() {\n        return this._names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the element metadata to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setElementMetadata(elementMetadata, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._elementMetadata = verifyElementMetadata(elementMetadata, generics.LENGTH(target), target.constructor.className);\n        return target;\n    }\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setElementMetadata(elementMetadata) {\n        return this.setElementMetadata(elementMetadata, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the names to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", generics.LENGTH(this), \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        } \n        let target = cutils.setterTarget(this, inPlace);\n        target._names = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setNames(names) {\n        return this.setNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        output._elementMetadata = generics.SLICE(this._elementMetadata, i, { allowView });\n        output._names = (this._names === null ? null : generics.SLICE(this._names, i, { allowView }));\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let all_em = [];\n        let all_n = [];\n        let all_l = [];\n\n        for (const x of objects) {\n            all_em.push(x._elementMetadata);\n            all_n.push(x._names);\n            all_l.push(generics.LENGTH(x));\n        }\n\n        output._elementMetadata = generics.COMBINE(all_em);\n        output._names = utils.combineNames(all_n, all_l);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._elementMetadata = cutils.cloneField(this._elementMetadata, deepCopy);\n        output._names = cutils.cloneField(this._names, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\n\nexport function setterTarget(object, inPlace) {\n    return (inPlace ? object : generics.CLONE(object, { deepCopy: false }));\n}\n\nexport function cloneField(value, deepCopy) {\n    return (deepCopy ? generics.CLONE(value) : value);\n}\n","/**\n * @param {Array|TypedArray} x - Array of values to be interpreted as truthy or falsey.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.not=false] - Whether to select the entries of `x` that are falsey.\n *\n * @return {Array} Array of indices of the entries of `x` that are truthy (if `not=false`) or falsey (if `not=true`).\n * This array is guaranteed to be sorted in ascending order.\n */\nexport function which(x, { not = false } = {}) {\n    let output = [];\n    x.forEach((y, i) => {\n        if ((!y) == not) {\n            output.push(i);\n        }\n    });\n    return output;\n}\n\n/**\n * Given a factor, return the indices corresponding to each level.\n * This can be used in subsequent {@linkcode splitRows} calls.\n *\n * @param {Array|TypedArray} factor - Array containing the factor of interest.\n *\n * @return {Object} Object where each key is a factor level and each value is an array containing the indices corresponding to that level in `factor`.\n */\nexport function presplitFactor(factor) {\n    let by = {};\n    factor.forEach((x, i) => {\n        if (!(x in by)) {\n            by[x] = [];\n        }\n        by[x].push(i);\n    });\n    return by;\n}\n","import * as utils from \"./utils.js\";\n\nexport function convertPositionToRank(start, end, { slice = null } = {}) {\n    let n = (slice == null ? start.length : slice.length);\n\n    let positions = new Int32Array(n * 2);\n    let add = new Uint8Array(n * 2);\n    let index = new Int32Array(n * 2);\n\n    {\n        let counter = 0;\n        let fillIndex = i => {\n            let at = counter * 2;\n            let next = at + 1;\n            positions[at] = start[i];\n            positions[next] = end[i];\n            add[at] = 1;\n            add[next] = 0;\n            index[at] = counter;\n            index[next] = counter;\n            counter++;\n        };\n\n        if (slice === null) {\n            for (var i = 0; i < n; i++) {\n                fillIndex(i);                                \n            }\n        } else {\n            for (const i of slice) {\n                fillIndex(i);\n            }\n        }\n    }\n\n    let order = utils.createSequence(positions.length);\n    order.sort((i, j) => positions[i] - positions[j]);\n\n    let rank2position = [];\n    let new_starts = new Int32Array(n);\n    let new_ends = new Int32Array(n);\n\n    let last = null;\n    for (const i of order) {\n        let pos = positions[i];\n        let idx = index[i];\n\n        if (pos !== last) {\n            rank2position.push(pos);\n            last = pos;\n        }\n\n        if (add[i]) {\n            new_starts[idx] = rank2position.length - 1;\n        } else {\n            new_ends[idx] = rank2position.length - 1;\n        }\n    }\n\n    return { rank2position, startRanks: new_starts, endRanks: new_ends };\n}\n\nexport function buildIntervalTree(start, end, { slice = null } = {}) {\n    let { rank2position, startRanks, endRanks } = convertPositionToRank(start, end, { slice });\n\n    // Now, building an nicely balanced interval tree based on the ranks.\n    let tree = [ create_node(0, rank2position.length) ];\n    if (slice === null) {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], i, tree, 0);\n        }\n    } else {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], slice[i], tree, 0);\n        }\n    }\n\n    // Running a clean-up operation to convert ranks back to positions.\n    let one_past_the_end = (rank2position.length > 0 ? rank2position[rank2position.length - 1] + 1 : 1);\n    rank2position.push(one_past_the_end);\n\n    for (const x of tree) {\n        x.left_bound = rank2position[x.left_bound];\n        x.right_bound = rank2position[x.right_bound];\n        x.center = rank2position[x.center];\n\n        // Also sorting ranges by increasing start and DECREASING end positions.\n        let start_overlaps_sorted = x.overlaps.slice().sort((a, b) => start[a] - start[b]);\n        let end_overlaps_sorted = x.overlaps.sort((a, b) => end[b] - end[a]) // reversed order - deliberate!\n        x.overlaps = {\n            start: start_overlaps_sorted.map(i => [start[i], i]),\n            end: end_overlaps_sorted.map(i => [end[i], i])\n        };\n    }\n\n    return tree;\n}\n\nfunction create_node(left_bound, right_bound) {\n    return { \n        left_bound: left_bound,\n        right_bound: right_bound,\n        center: left_bound + Math.floor((right_bound - left_bound) / 2),\n        left_node: null,\n        right_node: null,\n        overlaps: []\n    };\n}\n\nfunction recursive_build_tree(start, end, index, tree, node) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        if (current.right_node === null) {\n            current.right_node = tree.length;\n            tree.push(create_node(current.center, current.right_bound));\n        }\n        recursive_build_tree(start, end, index, tree, current.right_node);\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Let 0-length ranges fall through to the next clause if they lie exactly on the center.\n        if (current.left_node === null) {\n            current.left_node = tree.length;\n            tree.push(create_node(current.left_bound, current.center));\n        }\n        recursive_build_tree(start, end, index, tree, current.left_node);\n\n    } else {\n        // At some point, every range ends up here. This is because left_bound\n        // == center upon successive halving to create new nodes, so every\n        // range will eventually overlap a center at its own start position.\n        current.overlaps.push(index);\n    }\n}\n\nexport function queryIntervalTree(start, end, tree) {\n    let results = [];\n    if (start > tree.right_bound) {\n        return results;\n    }\n\n    if (end < tree.left_bound || (end == tree.left_bound && end > start)) { // Still allow 0-length ranges to fall through for search.\n        return results;\n    }\n\n    recursive_query_tree(start, end, tree, 0, results); \n    return results;\n}\n\nfunction recursive_query_tree(start, end, tree, node, results) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        for (const overlap of current.overlaps.end) {\n            if (overlap[0] > start) {\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.right_node !== null) {\n            recursive_query_tree(start, end, tree, current.right_node, results);\n        }\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Again, let zero-length ranges fall through if they lie directly on the center.\n        for (const overlap of current.overlaps.start) {\n            if (overlap[0] < end || (overlap[0] == end && start == end)) { // handle zero-length ranges directly on the start position of the center-overlapping range.\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.left_node !== null) {\n            recursive_query_tree(start, end, tree, current.left_node, results);\n        }\n\n    } else {\n        for (const overlap of current.overlaps.start) {\n            results.push(overlap[1]);\n        }\n\n        if (end > current.center) {\n            if (current.right_node !== null) {\n                recursive_query_tree(start, end, tree, current.right_node, results);\n            }\n        }\n        if (start < current.center) {\n            if (current.left_node !== null) {\n                recursive_query_tree(start, end, tree, current.left_node, results);\n            }\n        }\n    }\n}\n","export function areArraysEqual(x, y) {\n    if (x.length !== y.length) {\n        return false;\n    }\n\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] != y[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isArrayLike(x) {\n    return x.constructor == Array || ArrayBuffer.isView(x);\n}\n\nexport function chooseArrayConstructors(con1, con2) {\n    if (con1 == con2) {\n        return con1;\n    }\n\n    if (con1 == Array || con2 == Array) {\n        return Array;\n    }\n\n    if (con1 == BigInt64Array || con2 == BigInt64Array || con1 == BigUint64Array || con2 == BigUint64Array) {\n        return Array;\n    }\n\n    return Float64Array;\n}\n\nexport function formatLengthError(left, right) {\n    return new Error(left + \" should have length equal to \" + right);\n}\n\nexport function checkStringArray(names, typeMessage) {\n    for (const x of names) {\n        if (typeof x !== \"string\") {\n            throw new Error(typeMessage + \" array should only contain strings\");\n        }\n    }\n}\n\nexport function checkNamesArray(names, typeMessage, numExpected, lengthMessage) {\n    checkStringArray(names, typeMessage);\n    if (names.length != numExpected) {\n        throw formatLengthError(typeMessage + \" array\", lengthMessage);\n    }\n}\n\nexport function sum(y) {\n    let total = 0;\n    y.forEach(x => { total += x; });\n    return total;\n}\n\nexport function combineNames(all_names, all_lengths, total_n = null) {\n    let all_null = true;\n    for (var i = 0; i < all_names.length; i++) {\n        if (all_names[i] !== null) {\n            all_null = false;\n        }\n    }\n\n    if (all_null) {\n        return null;\n    }\n\n    if (total_n === null) {\n        total_n = sum(all_lengths);\n    }\n\n    let output = new Array(total_n);\n    let counter = 0;\n    for (var i = 0; i < all_names.length; i++) {\n        let n = all_names[i];\n        if (n === null) {\n            output.fill(\"\", counter, counter + all_lengths[i]);\n            counter += all_lengths[i];\n        } else {\n            n.forEach(x => {\n                output[counter] = x;\n                counter++;\n            });\n        }\n    }\n\n    return output;\n}\n\nexport function createSequence(n) {\n    let output = new Int32Array(n);\n    for (var i = 0; i < n; i++) {\n        output[i] = i;\n    }\n    return output;\n}\n\nexport function isSorted(n, cmp) {\n    for (var i = 1; i < n; ++i) {\n        if (cmp(i-1, i) > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function convertToInt32Array(x) {\n    if (x instanceof Int32Array) {\n        return x;\n    } else {\n        return new Int32Array(x);\n    }\n}\n\nexport function checkNonNegative(x, msg) {\n    for (const y of x) {\n        if (y < 0) {\n            throw new Error(\"detected a negative entry in '\" + msg + \"'\");\n        }\n    }\n}\n\nexport function object2map(x) {\n    if (x.constructor == Object) {\n        let replacement = new Map;\n        for (const [k, v] of Object.entries(x)) {\n            replacement.set(k, v);\n        }\n        return replacement;\n    } \n\n    if (!(x instanceof Map)) {\n        throw new Error(\"'x' should be either an object or Map\");\n    }\n    return x;\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\n\nvar _collections = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the collection details if they are not already available.\n * If `false`, `null` is returned if the collection details have not already been loaded into memory.\n *\n * @return {?Array} Array of objects where each entry corresponds to a set collection and contains details about that collection.\n * Each object can be expected to contain:\n * \n * - `title`, the title for the collection.\n * - `description`, the description for the collection.\n * - `species`, the species for all gene identifiers in the collection.\n *   This should contain the full scientific name, e.g., `\"Homo sapiens\"`, `\"Mus musculus\"`.\n * - `maintainer`, the maintainer of this collection.\n * - `source`, the source of this set, usually a link to some external resource.\n * - `start`, the index for the first set in the collection in the output of {@linkcode sets}.\n *   All sets from the same collection are stored contiguously.\n * - `size`, the number of sets in the collection.\n *\n * In a **gesel** context, the identifier for a collection (i.e., the \"collection ID\") is defined as the index of the collection in this array.\n *\n * If the collection details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllCollections(species, { download = true } = {}) {\n    let target = _collections.get(species);\n    if (typeof target !== \"undefined\") {\n        return target;\n    } else if (!download) {\n        return null;\n    }\n\n    target = [];\n    _collections.set(species, target);\n\n    var cres = await reference_download(species + \"_collections.tsv.gz\");\n    if (!cres.ok) {\n        throw new Error(\"failed to fetch collection information for species '\" + species + \"'\");\n    }\n    var coll_data = decompressLines(await cres.arrayBuffer());\n\n    var start = 0;\n    for (var i = 0; i < coll_data.length; i++) {\n        let x = coll_data[i];\n        var details = x.split(\"\\t\");\n        var len = Number(details[5]);\n        target.push({\n            \"title\": details[0],\n            \"description\": details[1],\n            \"species\": details[2],\n            \"maintainer\": details[3],\n            \"source\": details[4],\n            \"start\": start,\n            \"size\": len\n        });\n        start += len;\n    }\n\n    return target;\n}\n","import { gene_download, decompressLines } from \"./utils.js\";\n\nvar _genes = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Array} [options.types=null] - Array of strings specifying the identifier types to be retrieved.\n * The exact choice of strings depends on how the references were constructed.\n * If `null`, it defaults to an array containing `\"symbol\"`, `\"entrez\"` and `\"ensembl\"`.\n *\n * @return {Map} Object where each key is named after an identifier type in `types`.\n * Each value is an array where each element corresponds to a gene and is itself an array of strings containing all identifiers of the current type for that gene.\n *\n * The arrays for different identifier types are all of the same length, and corresponding elements across these arrays describe the same gene.\n * **gesel**'s identifier for each gene (i.e., the \"gene ID\") is defined as the index of that gene in any of these arrays.\n *\n * @async\n */\nexport async function fetchAllGenes(species, { types = null } = {}) {\n    if (types == null) {\n        types = [ \"symbol\", \"entrez\", \"ensembl\" ];\n    }\n\n    let target = _genes.get(species);\n    if (typeof target == \"undefined\") {\n        target = new Map;\n        _genes.set(species, target);\n    }\n\n    let output = new Map;\n    let promises = [];\n    let processing = [];\n\n    for (const t of types) {\n        let found = target.get(t);\n        if (typeof found == \"undefined\") {\n            promises.push(gene_download(species + \"_\" + t + \".tsv.gz\"));\n            processing.push(t);\n        } else {\n            output.set(t, found);\n        }\n    }\n\n    if (promises.length > 0) {\n        let resolved = await Promise.all(promises);\n        for (var i = 0; i < resolved.length; i++) {\n            let res = resolved[i];\n            if (!res.ok) {\n                throw \"failed to fetch symbol information for genes\";\n            }\n            var buffer = await res.arrayBuffer();\n\n            let gene_data = decompressLines(buffer);\n            let processed = [];\n            for (const x of gene_data) {\n                if (x == \"\") {\n                    processed.push([]);\n                } else {\n                    processed.push(x.split(\"\\t\"));\n                }\n            }\n\n            let t = processing[i];\n            target.set(t, processed);\n            output.set(t, processed);\n        }\n    }\n\n    return output;\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\nimport { fetchAllCollections } from \"./fetchAllCollections.js\";\n\nvar _sets = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set details if they are not already available.\n * If `false`, `null` is returned if the set details have not already been loaded into memory.\n *\n * @return {Array} Array of objects where each entry corresponds to a set and contains the details about that set.\n * Each object can be expected to contain:\n * \n * - `name`, the name of the set.\n * - `description`, the description of the set.\n * - `size`, the number of genes in the set.\n * - `collection`, the index of the collection containing the set.\n * - `number`, the number of the set within the collection.\n *\n * In a **gesel** context, the identifier for a set (i.e., the \"set ID\") is defined as the index of the set in this array.\n *\n * If the set details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllSets(species, { download = true } = {}) {\n    let found = _sets.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    found = [];\n    _sets.set(species, found);\n\n    var [ sres, _collections ] = await Promise.all([reference_download(species + \"_sets.tsv.gz\"), fetchAllCollections(species)]);\n    if (!sres.ok) {\n        throw new Error(\"failed to fetch set information for species '\" + species + \"'\");\n    }\n    var set_data = decompressLines(await sres.arrayBuffer());\n\n    for (var i = 0; i < set_data.length; i++) {\n        let x = set_data[i];\n        var details = x.split(\"\\t\");\n        found.push({\n            \"name\": details[0],\n            \"description\": details[1],\n            \"size\": Number(details[2])\n        });\n    }\n\n    let start = 0;\n    for (var i = 0; i < _collections.length; i++) {\n        let len = _collections[i].size;\n\n        // For easier access going the other way.\n        for (var j = 0; j < len; j++) {\n            found[j + start].collection = i;\n            found[j + start].number = j;\n        }\n\n        start += len;\n    }\n\n    return found;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the embeddings if they are not already available.\n * If `false`, `null` is returned if the embeddings have not already been loaded into memory.\n *\n * @return {?Object} Object with the `x` and `y`-coordinates for the t-SNE embedding.\n * \n * Each value is a Float64Array of length equal to the total number of sets for this `species`.\n * Each entry of the Float64Array corresponds to a gene set in {@linkcode fetchAllSets} and that set's x/y-coordinates on the embedding.\n * \n * If the embedding mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchEmbeddings(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_tsne.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch embeddings for species '\" + species + \"'\");\n    }\n\n    let embed_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = convertToCoordinates(embed_data);\n\n    _cache.set(species, loaded);\n    return loaded;\n}\n\n// Provided for back-compatibility.\nexport function fetchEmbeddingsForSpecies(species, { download = true } = {}) {\n    return fetchEmbeddings(species, { download });\n}\n\nfunction convertToCoordinates(lines) {\n    var x = [], y = [];\n\n    for (let i = 0; i < lines.length; i++) {\n        let split = lines[i].split(\"\\t\");\n        x.push(Number(split[0]));\n        y.push(Number(split[1]));\n    }\n\n    return {\n        \"x\": new Float64Array(x), \n        \"y\": new Float64Array(y)\n    }\n};\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set-to-gene mappings if they are not already available.\n * If `false`, `null` is returned if the set-to-gene mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of sets for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllSets} and is an array of integers containing the IDs for all genes belonging to that set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If the set-to-gene mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchGenesForAllSets(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_set2gene.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full set-to-gene information for species '\" + species + \"'\");\n    }\n\n    var set_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = set_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchGenesForAllSets.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full set-to-gene mappings if {@linkcode fetchGenesForAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set-to-gene information up-front to avoid range requests.\n * This is done by calling {@linkcode fetchGenesForAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs for all genes belonging to the set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchGenesForSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchGenesForAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound == \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_set2gene.tsv\"));\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sefound = spfound.get(set);\n    if (typeof sefound !== \"undefined\") {\n        return sefound;\n    }\n\n    let ranges = _ranges.get(species);\n    let text = await utils.retrieveBytesByIndex(species + \"_set2gene.tsv\", ranges, set);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(set, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the gene-to-set mappings if they are not already available.\n * If `false`, `null` is returned if the gene-to-set mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of genes for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllGenes} and is an array of integers containing the IDs for all sets containing that gene.\n * Set IDs refer to indices in {@linkcode fetchAllSets}.\n *\n * If the gene-to-set mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchSetsForAllGenes(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_gene2set.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full gene-to-set information for species '\" + species + \"'\");\n    }\n\n    var gene_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = gene_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchSetsForAllGenes.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return {number} Number of genes that belong to at least one set for `species`.\n * This can be used as a more appropriate universe size in {@linkcode testEnrichment}.\n */\nexport async function effectiveNumberOfGenes(species) {\n    let ffound = await full.fetchSetsForAllGenes(species, { download: false });\n    if (ffound !== null) {\n        let okay = 0;\n        for (const x of ffound) {\n            okay += x.length > 0;\n        }\n        return okay;\n    }\n\n    let ranged = _ranges.get(species);\n    if (typeof ranged === \"undefined\") {\n        _cache.set(species, new Map);\n        ranged = await utils.retrieveRanges(species + \"_gene2set.tsv\")\n        _ranges.set(species, ranged);\n    }\n\n    let okay = 0;\n    for (var i = 1; i < ranged.length; i++) {\n        if (ranged[i] > ranged[i-1] + 1) {\n            okay++;\n        }\n    }\n\n    return okay;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} gene - Gene ID, see {@linkcode fetchAllGenes} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full gene-to-set mappings if {@linkcode fetchSetsForAllGenes} was called before this function. \n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all gene-to-set mappings up-front to avoid range requests.\n * This is done by calling {@linkcode fetchSetsForAllGenes}\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs of all sets containing the gene.\n * IDs are treated as indices into the return value of {@linkcode fetchAllSets} or as input to {@linkcode fetchSingleSet}.\n *\n * If `gene = null`, no return value is provided.\n * \n * @async\n */\nexport async function fetchSetsForGene(species, gene, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchSetsForAllGenes(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (gene !== null) {\n                return ffound[gene];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound === \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_gene2set.tsv\"));\n    }\n    if (gene == null) {\n        return;\n    }\n\n    let gfound = spfound.get(gene);\n    if (typeof gfound !== \"undefined\") {\n        return gfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_gene2set.tsv\", _ranges.get(species), gene);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(gene, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllCollections.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\n\nasync function initialize(species) {\n    let res = await utils.retrieveRangesWithExtras(species + \"_collections.tsv\");\n    _ranges.set(species, res.ranges);\n    _sizes.set(species, res.extra);\n\n    let first = 0;\n    let starts = [];\n    for (const s of res.extra) {\n        starts.push(first);\n        first += s;\n    }\n    _starts.set(species, starts);\n\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of sets in each collection.\n * Each value corresponds to a collection in {@linkcode fetchAllCollections}.\n * @async\n */\nexport async function fetchCollectionSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of collections for this species.\n * @async\n */\nexport async function numberOfCollections(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} collection - Collection ID, see {@linkcode fetchAllCollections} for details.\n * \n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full collection details if {@linkcode fetchAllCollections} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all collection details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllCollections}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the collection.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllCollections}.\n *\n * If `collection = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleCollection(species, collection, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllCollections(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (collection !== null) {\n                return ffound[collection];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (collection == null) {\n        return;\n    }\n\n    let cfound = cached.get(collection);\n    if (typeof cfound !== \"undefined\") {\n        return cfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_collections.tsv\", _ranges.get(species), collection);\n    let split = text.split(\"\\t\");\n    let output = {\n        title: split[0],\n        description: split[1],\n        species: split[2],\n        maintainer: split[3],\n        source: split[4],\n        start: _starts.get(species)[collection],\n        size: _sizes.get(species)[collection]\n    };\n\n    cached.set(collection, output);\n    return output;\n}\n\n\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllSets.js\";\nimport { fetchCollectionSizes } from \"./fetchSingleCollection.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\nconst _parents = new Map;\nconst _internal_number = new Map;\n\nasync function initialize(species) {\n    const [ sres, csizes ] = await Promise.all([ \n        utils.retrieveRangesWithExtras(species + \"_sets.tsv\"), \n        fetchCollectionSizes(species) \n    ]);\n    _ranges.set(species, sres.ranges);\n    _sizes.set(species, sres.extra);\n\n    let parents = [];\n    let internal_number = [];\n    var totals = 0;\n    for (var i = 0; i < csizes.length; i++) {\n        let colsize = csizes[i];\n        for (var j = 0; j < colsize; j++) {\n            parents.push(i);\n            internal_number.push(j);\n        }\n        totals += colsize;\n    }\n\n    if (totals != sres.extra.length) {\n        throw new Error(\"discrepancy between number of sets and sum of collection sizes\");\n    }\n\n    _parents.set(species, parents);\n    _internal_number.set(species, internal_number);\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of genes in each set.\n * Each value corresponds to a set in {@linkcode fetchAllSets}.\n * @async\n */\nexport async function fetchSetSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of sets for this species.\n * @async\n */\nexport async function numberOfSets(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full set details if {@linkcode fetchAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the set.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllSets}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                console.log(set);\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sfound = cached.get(set);\n    if (typeof sfound !== \"undefined\") {\n        return sfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_sets.tsv\", _ranges.get(species), set);\n    let split = text.split(\"\\t\");\n    let output = {\n        name: split[0],\n        description: split[1],\n        size: _sizes.get(species)[set],\n        collection: _parents.get(species)[set],\n        number: _internal_number.get(species)[set]\n    };\n\n    cached.set(set, output);\n    return output;\n}\n\n\n","import { fetchAllGenes } from \"./fetchAllGenes.js\";\n\nvar by_symbol = new Map;\nvar by_symbol_lower = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} type - Type of the identifier to use as the key of the map, e.g., `\"ensembl\"`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.lowerCase=false] - Whether to use lower-case keys in the map.\n *\n * @return {Map} Map where each key is a string containing a (possibly lower-cased) identifier of the specified `type` and each value is an array.\n * Each array contains the **gesel** gene IDs associated with the `type` identifier, see {@linkcode fetchAllGenes} for ore details.\n *\n * @async\n */\nexport async function mapGenesByIdentifier(species, type, { lowerCase = false } = {}) {\n    let host = (lowerCase ? by_symbol_lower : by_symbol);\n\n    let sfound = host.get(species);\n    if (typeof sfound === \"undefined\") {\n        sfound = new Map;\n        host.set(species, sfound);\n    }\n\n    let tfound = sfound.get(type);\n    if (typeof tfound === \"undefined\") {\n        tfound = new Map;\n        sfound.set(type, tfound);\n\n        let _genes = (await fetchAllGenes(species, { types: [ type ] })).get(type);\n        for (var i = 0; i < _genes.length; i++) {\n            for (let y of _genes[i]) {\n                if (lowerCase) {\n                    y = y.toLowerCase();\n                }\n\n                let current = tfound.get(y);\n                if (typeof current !== \"undefined\") {\n                    current.add(i);\n                } else {\n                    tfound.set(y, new Set([i]));\n                }\n            }\n        }\n\n        for (const [key, val] of tfound) {\n            tfound.set(key, Array.from(val));\n        }\n    }\n\n    return tfound;\n}\n","/**\n * Reindex the gene sets for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to convert the **gesel** gene IDs to indices within that universe.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and should be an array containing the corresponding **gesel** gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * @param {Array} genesForSets - Array of length equal to the number of reference gene sets.\n * Each entry corresponds to a set and is an array containing **gesel** gene IDs for all genes in that set.\n * This is typically obtained from {@linkcode fetchGenesForAllSets}.\n *\n * @return {Array} Array of length equal to `genesForSets`. \n * Each entry corresponds to a reference gene set and is a Uint32Array where the elements are indices into `geneMapping`, specifying the genes in the user's universe that belong to that set.\n * If a gene in `geneMapping` maps to multiple **gesel** IDs, it is considered to belong to all sets containing any of its mapped **gesel** gene IDs.\n */\nexport function reindexGenesForAllSets(geneMapping, genesForSets) {\n    let reverse_mapping = new Map;\n    for (var i = 0; i < geneMapping.length; i++) {\n        for (const gesel_gene of geneMapping[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found == \"undefined\") {\n                found = new Set;\n                reverse_mapping.set(gesel_gene, found);\n            }\n            found.add(i);\n        }\n    }\n\n    // Converting everything to an array for easier iteration. \n    for (const [k, v] of reverse_mapping) {\n        reverse_mapping[k] = new Uint32Array(v);\n    }\n\n    let new_sets = new Array(genesForSets.length);\n    for (var i = 0; i < genesForSets.length; i++) {\n        let subset = new Set;\n        for (const gesel_gene of genesForSets[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found !== \"undefined\") {\n                for (const gene of found) {\n                    subset.add(gene);\n                }\n            }\n        }\n        new_sets[i] = (new Uint32Array(subset)).sort();\n    }\n\n    return new_sets;\n}\n\n","/**\n * Reindex the gene-to-set mappings for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to create a mapping of all sets containing each of their own genes.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and should be an array containing the corresponding **gesel** gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * @param {Array} setsForGenes - Array of length equal to the number of **gesel** gene IDs.\n * Each entry corresponds to a **gesel** gene ID and is an array containing the set IDs for all sets containing that gene.\n * This is typically obtained from {@linkcode fetchSetsForAllGenes}.\n *\n * @return {Array} Array of length equal to `geneMapping`.\n * Each entry corresponds to a gene in the user-supplied universe and is a Uint32Array where the elements are the **gesel** set IDs containing that gene.\n * If a gene in `geneMapping` maps to multiple **gesel** IDs, we report all sets containing any of its mapped **gesel** gene IDs.\n */\nexport function reindexSetsForAllGenes(geneMapping, setsForGenes) {\n    let remapped = new Array(geneMapping.length);\n    for (var i = 0; i < geneMapping.length; i++) {\n        let collected = new Set;\n        for (const gesel_gene of geneMapping[i]) {\n            for (const set of setsForGenes[gesel_gene]) {\n                collected.add(set);\n            }\n        }\n        remapped[i] = (new Uint32Array(collected)).sort();\n    }\n    return remapped;\n}\n","import * as utils from \"./utils.js\";\n\nexport function binarySearch(query, vector) {\n    let left = 0;\n    let right = vector.length;\n\n    while (left < right) {\n        let mid = Math.trunc((left + right) / 2);\n        if (vector[mid] < query) {\n            left = mid + 1;\n        } else if (vector[mid] > query) {\n            right = mid;\n        } else {\n            return mid;\n        }\n    }\n\n    return left;\n}\n\nasync function fetchSetsByToken(species, token, file, all_ranges, all_ordered, all_cache) {\n    let actual_file = species + \"_\" + file;\n\n    let cached = all_cache.get(species);\n    if (typeof cached === \"undefined\") {\n        const { ranges, order } = await utils.retrieveNamedRanges(actual_file);\n        all_ranges.set(species, ranges);\n        all_ordered.set(species, order);\n        cached = new Map;\n        all_cache.set(species, cached);\n    }\n\n    if (token == null) {\n        return;\n    }\n\n    let tfound = cached.get(token);\n    if (typeof tfound !== \"undefined\") {\n        return tfound;\n    }\n\n    let ranges = all_ranges.get(species);\n    let output;\n    if (token.includes(\"*\") || token.includes(\"?\")) {\n        let ordered = all_ordered.get(species);\n\n        // Wildcard handling.\n        let initstub = token.replace(/[*?].*/, \"\")\n        let pos = (initstub == \"\" ? 0 : binarySearch(initstub, ordered));\n        let regex = new RegExp(token.replace(/[*]/g, \".*\").replace(/[?]/g, \".\"));\n\n        let collected = [];\n        let to_cache = [];\n        let union = new Set;\n\n        while (pos < ordered.length) {\n            let candidate = ordered[pos];\n            if (initstub != \"\" && !candidate.startsWith(initstub)) {\n                break;\n            }\n\n            let cfound = cached.get(candidate);\n            if (typeof cfound === \"undefined\") {\n                let rr = ranges.get(candidate);\n                collected.push(utils.retrieveBytes(actual_file, rr[0], rr[1]).then(utils.convertToUint32Array));\n                to_cache.push(candidate);\n            } else {\n                for (const y of cfound) {\n                    union.add(y);\n                }\n            }\n\n            pos++;\n        }\n\n        let resolved = await Promise.all(collected);\n        for (var i = 0; i < resolved.length; i++) {\n            let x = resolved[i];\n            cached.set(to_cache[i], x);\n            for (const y of x) {\n                union.add(y);\n            }\n        }\n\n        output = new Uint32Array(union);\n\n    } else {\n        // Direct handling.\n        let rr = ranges.get(token);\n        if (typeof rr === \"undefined\") {\n            return new Uint32Array;\n        }\n        let text = await utils.retrieveBytes(actual_file, rr[0], rr[1]);\n        output = utils.convertToUint32Array(text);\n    }\n\n    cached.set(token, output);\n    return output;\n}\n\nconst n_cache = new Map;\nconst n_ranges = new Map;\nconst n_ordered = new Map;\n\nasync function fetchSetsByNameToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-names.tsv\", n_ranges, n_ordered, n_cache);\n}\n\nconst d_cache = new Map;\nconst d_ranges = new Map;\nconst d_ordered = new Map;\n\nasync function fetchSetsByDescriptionToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-descriptions.tsv\", d_ranges, d_ordered, d_cache);\n}\n\nexport async function preloadTokens(species, resp, ordered, cache, msg) {\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch full set of \" + msg + \" tokens for species '\" + species + \"'\");\n    }\n\n    let lines = utils.decompressLines(await resp.arrayBuffer());\n    if (lines.length !== ordered.length) {\n        throw new Error(\"mismatch in lengths between token names and set indices for species '\" + species + \"'\");\n    }\n\n    for (var i = 0; i < lines.length; i++) {\n        cache.set(ordered[i], utils.convertToUint32Array(lines[i]));\n    }\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return Preloads the search indices for use in {@linkcode searchSetText}.\n * This performs a one-off download of the indices such that further calls to {@linkcode searchSetText} do not need to perform HTTP range requests.\n */\nexport async function preloadSearchSetText(species) {\n    let full = await Promise.all([ \n        utils.reference_download(species + \"_tokens-names.tsv.gz\"),\n        utils.reference_download(species + \"_tokens-descriptions.tsv.gz\"),\n        fetchSetsByNameToken(species, null),\n        fetchSetsByDescriptionToken(species, null)\n    ]);\n    await preloadTokens(species, full[0], n_ordered.get(species), n_cache.get(species), \"name\");\n    await preloadTokens(species, full[1], d_ordered.get(species), d_cache.get(species), \"description\");\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} query - Query string containing multiple words to search in the names and/or descriptions of each set.\n *\n * Each stretch of alphanumeric characters and dashes is treated as a single word.\n * All other characters are treated as punctuation between words, except for the following wildcards:\n *\n * - `*`: match zero or more alphanumeric or dash characters.\n * - `?`: match exactly one alphanumeric or dash character.\n *\n * A set's name and/or description must contain all words in `query` to be considered a match.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inName=true] - Whether to search the name of the set for matching words.\n * @param {boolean} [options.inDescription=true] - Whether to search the description of the set for matching words.\n *\n * @return {Array} Array of indices of the sets with names and/or descriptions that match `query`.\n * @async\n */\nexport async function searchSetText(species, query, { inName = true, inDescription = true } = {}) {\n    // Tokenizing the query using the same logic as in the feedstock repository,\n    // but preserving our wildcards for special handling later.\n    let processed = query.toLowerCase().replace(/[^a-zA-Z0-9-?*]/g, \" \");\n    let tokens = processed.split(/\\s+/);\n    tokens = tokens.filter(x => x !== \"\" || x !== \"-\");\n\n    let init = [];\n    if (inName) {\n        init.push(fetchSetsByNameToken(species, null));\n    }\n    if (inDescription) {\n        init.push(fetchSetsByDescriptionToken(species, null));\n    }\n    await Promise.all(init); // force initialization of all caches.\n\n    let gathered_names = [];\n    if (inName) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_names.push(fetchSetsByNameToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let gathered_descriptions = [];\n    if (inDescription) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_descriptions.push(fetchSetsByDescriptionToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let resolved_names = await Promise.all(gathered_names);\n    let resolved_descriptions = await Promise.all(gathered_descriptions);\n\n    let gathered = [];\n    for (var i = 0; i < tokens.length; i++) {\n        let n = (inName ? resolved_names[i] : []);\n        let d = (inDescription ? resolved_descriptions[i] : []);\n\n        let combined = new Uint32Array(n.length + d.length);\n        combined.set(n);\n        combined.set(d, n.length);\n        gathered.push(combined);\n    }\n\n    return utils.intersect(gathered);\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Helper class for handling matrix data from multiple modalities.\n * In particular, it simplifies memory management of the assorted {@linkplain ScranMatrix} instances containing data for different features in the same set of cells.\n */\nexport class MultiMatrix {\n    #store;\n    #ncols;\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object} [options.store={}] - Existing store of {@linkplain ScranMatrix} objects.\n     * Each matrix should correspond to a different modality, named according to its key.\n     * All matrices should have data for the same set of cells, i.e., same number of columns.\n     */\n    constructor({ store = {} } = {}) {\n        this.#store = store;\n        this.#ncols = null;\n\n        let keys = Object.keys(store);\n        if (keys.length) {\n            // We ignore numberOfColumns here, as everyone should have the same number of cells.\n            for (var k = 0; k < keys.length; k++) {\n                let current = store[keys[k]];\n                if (k == 0) {\n                    this.#ncols = current.numberOfColumns();\n                } else if (current.numberOfColumns() != this.#ncols) {\n                    throw new Error(\"all matrices should have the same number of columns\");\n                }\n            }\n        }\n    }\n\n    /**\n     * @return {?number} Number of columns in the matrices.\n     * If no matrices are available, `null` is returned.\n     */\n    numberOfColumns() {\n        return this.#ncols;\n    }\n\n    /**\n     * @return {Array} Names of the available modalities.\n     */\n    available() {\n        return Object.keys(this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {boolean} Whether modality `i` is available.\n     */\n    has(i) {\n        return (i in this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {ScranMatrix} The matrix data for modality `i`.\n     */\n    get(i) {\n        return this.#store[i];\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @param {ScranMatrix} matrix - The matrix data for modality `i`.\n     *\n     * @return `matrix` is added to the MultiMatrix with name `i`.\n     */\n    add(i, matrix) {\n        if (this.#ncols === null) {\n            this.#ncols = matrix.numberOfColumns();\n        } else if (matrix.numberOfColumns() != this.#ncols) {\n            throw new Error(\"all matrices should have the same number of columns\");\n        }\n\n        if (i in this.#store) {\n            let old = this.#store[i];\n            utils.free(old);\n        }\n\n        this.#store[i] = matrix;\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return Modality `i` is removed from the MultiMatrix.\n     */\n    remove(i) {\n        utils.free(this.#store[i]);\n        delete this.#store[i];\n        if (Object.keys(this.#store).length == 0) {\n            this.#ncols = null;\n        }\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {MultiMatrix} A deep copy of the current object. \n     */\n    clone() {\n        let new_matrix = new MultiMatrix;\n        try {\n            for (const [k, v] of Object.entries(this.#store)) {\n                new_matrix.add(k, v.clone());\n            }\n        } catch (e) {\n            new_matrix.free();\n            throw e;\n        }\n        return new_matrix;\n    }\n\n    /**\n     * @param {string} from - Old name of the modality.\n     * @param {string} to - New name for the modality.\n     *\n     * @return The modality `from` is renamed to `to`, possibly replacing any existing modality at `to`.\n     */\n    rename(from, to) {\n        if (from !== to) {\n            if (to in this.#store) {\n                utils.free(this.#store[to]);\n            }\n            this.#store[to] = this.#store[from];\n            delete this.#store[from];\n        }\n    }\n\n    /**\n     * @return Frees memory for all modalities in this MultiMatrix.\n     */\n    free() {\n        for (const [x, v] of Object.entries(this.#store)) {\n            utils.free(v);\n        }\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Wrapper around a matrix allocated on the Wasm heap.\n * @hideconstructor\n */\nexport class ScranMatrix {\n    #id;\n    #matrix;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#matrix = raw;\n        return;\n    }\n\n    /**\n     * Create a dense matrix from an existing Wasm-allocated buffer.\n     *\n     * @param {number} rows - Number of rows.\n     * @param {number} columns - Number of columns.\n     * @param {Float64WasmArray} contents - Array of matrix contents.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.columnMajor=true] - Whether the array in `contents` is column-major.\n     * @param {boolean} [options.copy=true] - Whether to copy `contents` when constructing the {@linkplain ScranMatrix}.\n     * If `false`, the returned {@linkplain ScranMatrix} will refer to the same allocation as `contents`,\n     * so callers should make sure that it does not outlive `contents`.\n     *\n     * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrix contents.\n     */\n    static createDenseMatrix(rows, columns, contents, { columnMajor = true , copy = true } = {}) {\n        if (!(contents instanceof wa.Float64WasmArray)) {\n            throw new Error(\"'contents' should be a Float64WasmArray\");\n        }\n        if (contents.length != rows * columns) {\n            throw new Error(\"length of 'contents' should equal the product of 'rows' and 'columns'\");\n        }\n        return gc.call(module => new module.NumericMatrix(rows, columns, contents.offset, columnMajor, copy), ScranMatrix);\n    }\n\n    /**\n     * @return {ScranMatrix} A clone of the current ScranMatrix instance.\n     * This can be freed independently of the current instance.\n     */\n    clone() {\n        return gc.call(\n            module => this.#matrix.clone(),\n            ScranMatrix\n        );\n    }\n\n    // Internal use only, not documented.\n    get matrix() {\n        return this.#matrix;\n    }\n\n    /**\n     * @return {number} Number of rows in the matrix.\n     */\n    numberOfRows() {\n        return this.#matrix.nrow();\n    }\n\n    /**\n     * @return {number} Number of columns in the matrix.\n     */\n    numberOfColumns() {\n        return this.#matrix.ncol();\n    }\n\n    /**\n     * @param {number} i - Index of the row to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     *\n     * @return {Float64Array} An array containing the contents of row `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    row(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.row(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.ncol());\n            try {\n                this.#matrix.row(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /**\n     * @param {number} i - Index of the column to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     *\n     * @return {Float64Array} An array containing the contents of column `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    column(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.column(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.column(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /** \n     * Free the memory on the Wasm heap for this.#matrix.\n     * This invalidates this object and all of its references.\n     */\n    free() {\n        if (this.#matrix !== null) {\n            gc.release(this.#id);\n            this.#matrix = null;\n        }\n        return;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is sparse.\n     */\n    isSparse() {\n        return this.#matrix.sparse();\n    }\n\n    // Internal use only, by initialize* functions.\n    isReorganized() {\n        return this.#matrix.reorganized();\n    }\n\n    // Internal use only, by initialize* functions.\n    identities({ buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.identities(buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createInt32WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.identities(buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    // Internal use only, by initialize* functions.\n    wipeIdentities() {\n        this.#matrix.wipe_identities();\n        return;\n    }\n}\n","import * as methods from \"../file.js\";\n\nexport function temp(prefix, extension) {\n    let tmppath;\n    do {\n        tmppath = prefix + String(Number(new Date())) + \"_\" + String(Math.round(Math.random() * 10000)) + extension;\n    } while (methods.existsFile(tmppath));\n    return tmppath;\n}\n\nexport function handleString(file) {\n    throw new Error(\"cannot access the file system in a browser context\");\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Wrapper for the cell aggregation results, produced by {@linkcode aggregateAcrossCells}.\n * @hideconstructor\n */\nexport class AggregateAcrossCellsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of groups.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @return {number} Number of genes.\n     */\n    numberOfGenes() {\n        return this.#results.num_genes();\n    }\n\n    /**\n     * @param {?number} group - Index of the group.\n     * If a number, it should be non-negative and less than {@linkcode AggregateAcrossCellsResults#numberOfGroups numberOfGroups}.\n     * This may also be `null` to obtain values for all groups.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {(string|boolean)} [options.copy=true] - Copying mode to use when `asMatrix = false`, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray}\n     * If `group` is a number, an array is returned where each entry corresponds to a gene and contains the summed value across all cells in the specified `group`.\n     * If {@linkcode aggregateAcrossCells} was run with `average = true`, the array contains the mean value instead of the sum.\n     *\n     * If `group = null`, an array is returned containing the concatenation of the arrays for all groups.\n     * If `copy = \"view\"`, the output can be used in {@linkcode ScranMatrix#createDenseMatrix ScranMatrix.createDenseMatrix} to create a {@linkcode ScranMatrix} for input into other functions.\n     */\n    sums(group, { copy = true } = {}) {\n        let vec = (group !== null ? this.#results.group_sums(group) : this.#results.all_sums());\n        return utils.possibleCopy(vec, copy);\n    }\n\n    /**\n     * @param {number} group - Index of the group.\n     * This should be non-negative and less than {@linkcode AggregateAcrossCellsResults#numberOfGroups numberOfGroups}.\n     * This may also be `null` to obtain values for all groups.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {(string|boolean)} [options.copy=true] - Copying mode to use when `asMatrix = false`, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray}\n     * If `group` is a number, an array is returned where each entry corresponds to a gene and contains the number of detected cells in the specified `group`.\n     * If {@linkcode aggregateAcrossCells} was run with `average = true`, each value is the proportion of cells with detected expression.\n     * \n     * If `group = null`, an array is returned containing the concatenation of the arrays for all groups.\n     * If `copy = \"view\"`, the output can be used in {@linkcode ScranMatrix#createDenseMatrix ScranMatrix.createDenseMatrix} to create a {@linkcode ScranMatrix} for input into other functions.\n     */\n    detected(group, { copy = true } = {}) {\n        let vec = (group !== null ? this.#results.group_detected(group) : this.#results.all_detected());\n        return utils.possibleCopy(vec, copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Aggregate per-cell expression profiles for each group of cells.\n * This is typically used to summarize data into per-cluster expression profiles for easier inspection.\n *\n * @param {ScranMatrix} x - Some expression matrix, typically containing normalized log-expression values.\n * @param {Int32Array|Int32WasmArray} groups - Array containing group IDs for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.average=false] - Whether to compute the average expression instead of the sum for each group.\n * Similarly, the proportion of detected expression is reported, rather than the number of detected cells in each group.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {AggregateAcrossCellsResults} Object containing the aggregation results.\n */\nexport function aggregateAcrossCells(x, groups, { average = false, numberOfThreads = null } = {}) {\n    var group_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        output = gc.call(\n            module => module.aggregate_across_cells(x.matrix, group_data.offset, average, nthreads),\n            AggregateAcrossCellsResults \n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(group_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as fac from \"./factorize.js\";\n\n/**\n * Create a blocking factor for a set of contiguous blocks, usually to accompany the output of {@linkcode cbind} on matrices representing different batches.\n * This can be used as the blocking factor in functions such as {@linkcode modelGeneVar} or {@linkcode scoreMarkers}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n *\n * @param {(Array|TypedArray)} ncells - Array of integers specifying the number of cells in each block.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the sum of `ncells`.\n *\n * @return {Int32WasmArray} Array containing the blocking factor.\n * Each value specifies the block of origin for each cell.\n *\n * If `buffer` was supplied, it is used as the return value. \n */\nexport function createBlock(ncells, { buffer = null } = {}) {\n    let total = 0;\n    ncells.forEach(x => { total += x; });\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(total);\n            buffer = local_buffer;\n        } else if (buffer.length !== total) {\n            throw new Error(\"'buffer' should have length equal to sum of 'ncells'\");\n        }\n\n        let barr = buffer.array();\n        let sofar = 0;\n        for (var i = 0; i < ncells.length; i++) {\n            let old = sofar;\n            sofar += ncells[i];\n            barr.fill(i, old, sofar);\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n// Soft-deprecated in favor of the more general convertToFactor().\nexport function convertBlock(x, { buffer = null } = {}) {\n    let output = fac.convertToFactor(x, { buffer, action: \"warn\", placeholder: 0 });\n    output.levels = output.levels.map(String);\n    return output;\n}\n\n// Soft-deprecated in favor of the more general subsetFactor(), or wasmarrays.js's subsetWasmArray, take your choice.\nexport function subsetBlock(x, subset, { filter = null, buffer = null } = {}) {\n    return wa.subsetWasmArray(x, subset, { filter, buffer });\n}\n\n// Soft-deprecated, just use subsetFactor().\nexport function filterBlock(x, filter, { buffer = null } = {}) {\n    return subsetBlock(x, filter, { buffer: buffer, filter: true });\n}\n\n// Soft-deprecated in favor of dropUnusedLevels().\nexport function dropUnusedBlock(x) {\n    return fac.dropUnusedLevels(x);\n}\n","import * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as gc from \"./gc.js\";\n\nfunction harvest_matrices(x) {\n    let output = utils.createBigUint64WasmArray(x.length);\n    let arr = output.array();\n    for (var i = 0; i < x.length; i++) {\n        arr[i] = BigInt(x[i].matrix.$$.ptr);\n    }\n    return output;\n}\n\n/**\n * Combine matrices by column, where all matrices contain data for the same features, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of features.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by column.\n */\nexport function cbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.cbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by row, where all matrices contain data for the same cells, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of cells.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by row.\n */\nexport function rbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.rbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by column, after subsetting each matrix to the intersection of common features.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * @param {Array} names - Array of length equal to `inputs`.\n * Each entry should be an Array containing the row names of the corresponding entry of `inputs`.\n * Names should correspond to the rows of that entry of `inputs`.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the combined matrices.\n * - `indices`, an Int32WasmArray of length equal to the number of rows in `matrix`.\n *    This contains the index of the row in the first entry of `inputs` corresponding to each row of `matrix`,\n *    i.e., the gene at the `i`-th row of `matrix` is the same as the gene at the `indices[i]`-th row of `inputs[0]`.\n * - `names`, an array of names identifying the rows of `matrix`.\n *    This is constructed by indexing the first entry of `names` with `indices`.\n */\nexport function cbindWithNames(x, names) {\n    let mat_ptrs;\n    let renamed = [];\n    let name_ptrs;\n    let indices;\n    let output = {};\n\n    try {\n        // Building a common set of rownames.\n        if (names.length !== x.length) {\n            throw new Error(\"length of 'names' should be equal to length of 'x'\");\n        }\n\n        let common = {};\n        let universe = [];\n        for (var i = 0; i < names.length; i++) {\n            if (x[i].numberOfRows() !== names[i].length) {\n                throw new Error(\"length of each 'names' must equal number of rows of its corresponding 'x'\");\n            }\n            names[i].forEach(x => {\n                if (!(x in common)) {\n                    common[x] = universe.length;\n                    universe.push(x);\n                }\n            });\n        }\n\n        name_ptrs = utils.createBigUint64WasmArray(x.length);\n        {\n            let names_arr = name_ptrs.array();\n            for (var i = 0; i < names.length; i++) {\n                let current = names[i];\n                let replacement = utils.createInt32WasmArray(current.length);\n                let replacement_arr = replacement.array();\n                current.forEach((x, i) => {\n                    replacement_arr[i] = common[x];\n                });\n                renamed.push(replacement);\n                names_arr[i] = BigInt(replacement.offset);\n            }\n        }\n\n        mat_ptrs = harvest_matrices(x);\n        indices = utils.createInt32WasmArray(x[0].numberOfRows());\n        output.matrix = gc.call(\n            module => module.cbind_with_rownames(x.length, mat_ptrs.offset, name_ptrs.offset, indices.offset),\n            ScranMatrix\n        );\n\n        output.indices = indices.slice(0, output.matrix.numberOfRows());\n        let internames = [];\n        for (const i of output.indices) {\n            internames.push(names[0][i]);\n        }\n        output.names = internames;\n\n    } catch (e) {\n        utils.free(output.matrix);\n        throw e;\n\n    } finally {\n        utils.free(mat_ptrs);\n        utils.free(name_ptrs);\n        utils.free(indices);\n        for (const x of renamed) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport { ModelGeneVarResults } from \"./modelGeneVar.js\";\n\n/**\n * Compute the filter threshold required to retain the top `number` values.\n *\n * @param {Array|TypedArray} x - Array of numeric values, typically per-gene statistics.\n * @param {number} number - Number of top values to retain after filtering on the returned threshold.\n * This may be approximate in the presence of ties.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.largest=true] - Whether the top values in `x` are defined as the largest numeric values.\n * If `false`, the top values are considered to be the smallest.\n * @param {boolean} [options.copy=true] - Whether to copy `x` before sorting.\n * If `false`, `x` may be modified in-place.\n *\n * @return {number} Threshold to be applied to `x` to obtain the top (approximately) `number` values.\n * If `largest = true`, filtering is performed by taking all values in `x` that are greater than or equal to the returned threshold;\n * if `false`, filtering is performed by taking all values in `x` that are less than or equal to the returned threshold.\n * If `x` is zero-length, NaN is returned.\n */\nexport function computeTopThreshold(x, number, { copy = true, largest = true } = {}) {\n    if (copy) {\n        x = x.slice();\n    }\n\n    if (x instanceof Array) {\n        x.sort((a, b) => a - b); // just in case...\n    } else {\n        x.sort();\n    }\n\n    if (x.length == 0) {\n        return Number.NaN;\n    }\n\n    if (largest) {\n        return x[Math.max(0, x.length - number)]; \n    } else {\n        return x[Math.min(number, x.length) - 1]; \n    }\n}\n\n/**\n * Choose the highly variable genes from variance modelling statistics.\n *\n * @param {(TypedArray|ModelGeneVarResults)} x -\n * A TypedArray of statistics, where larger values correspond to higher variability;\n * or a {@linkplain ModelGeneVarResults} object, in which case the residuals are used as the statistics.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.number=4000] - Number of highly variable genes to select.\n * @param {number} [options.minimum=0] - Minimum value of the residual to consider for a highly variable gene.\n * By default, a highly variable gene must have a non-negative residual.\n *\n * @return {Uint8WasmArray} Array of length equal to the total number of genes,\n * where the chosen highly variable genes are marked with a value of 1 and all other genes have values of zero.\n */\nexport function chooseHVGs(x, { number = 4000, minimum = 0 } = {}) {\n    let stat; \n    if (x instanceof ModelGeneVarResults) {\n        stat = x.residuals();\n    } else {\n        stat = x.slice();\n    }\n\n    let threshold = computeTopThreshold(stat, number, { largest: true, copy: false });\n    if (threshold < minimum) {\n        threshold = minimum;\n    }\n\n    let features = utils.createUint8WasmArray(stat.length);\n    try {\n        // Do this AFTER the features allocation, so that\n        // we can set copy = false for the input array.\n        if (x instanceof ModelGeneVarResults) {\n            stat = x.residuals({ copy: false });\n        } else {\n            stat = x;\n        }\n\n        let farr = features.array();\n        stat.forEach((x, i) => {\n            farr[i] = x >= threshold;\n        });\n\n    } catch (e) {\n        features.free();\n        throw e;\n    }\n\n    return features;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/**\n * Wrapper around the k-means clustering results on the Wasm heap, produced by {@linkcode clusterKmeans}.\n * @hideconstructor\n */\nexport class ClusterKmeansResults {\n    #id;\n    #results;\n\n    #filledClusters;\n    #filledSizes;\n    #filledCenters;\n    #filledWcss;\n    #filledIterations;\n    #filledStatus;\n\n    constructor(id, raw, filled = true) {\n        this.#results = raw;\n        this.#id = id;\n\n        this.#filledClusters = filled;\n        this.#filledSizes = filled;\n        this.#filledCenters = filled;\n        this.#filledWcss = filled;\n        this.#filledIterations = filled;\n        this.#filledStatus = filled;\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the results.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    /**\n     * @return {number} Number of clusters in the results.\n     */\n    numberOfClusters() {\n        return this.#results.num_clusters();\n    }\n\n    /**\n     * @param {number} iterations - Number of iterations.\n     * @return The specified number of iterations is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setIterations(iterations) {\n        if (!this.#filledIterations) {\n            this.#filledIterations = true;\n        }\n        this.#results.set_iterations(iterations);\n        return;\n    }\n\n    /**\n     * @param {number} status - Status of the k-means clustering.\n     * @return The status is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setStatus(status) {\n        if (!this.#filledStatus) {\n            this.#filledStatus = true;\n        }\n        this.#results.set_status(status);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster assignment for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledClusters, \n            () => { this.#filledClusters = true }, \n            COPY => utils.possibleCopy(this.#results.clusters(), COPY),\n            \"clusters\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the number of cells in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterSizes({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSizes, \n            () => { this.#filledSizes = true }, \n            COPY => utils.possibleCopy(this.#results.cluster_sizes(), COPY),\n            \"clusterSizes\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the within-cluster sum of squares in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    withinClusterSumSquares({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledWcss, \n            () => { this.#filledWcss = true }, \n            COPY => utils.possibleCopy(this.#results.wcss(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the cluster centers in column-major format,\n     * where rows are dimensions and columns are the clusters.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterCenters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledCenters, \n            () => { this.#filledCenters = true }, \n            COPY => utils.possibleCopy(this.#results.centers(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} Number of refinement iterations performed by the algorithm.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setIterations setIterations}.\n     */\n    iterations() {\n        if (!this.#filledIterations) {\n            return null;\n        } else {\n            return this.#results.iterations();\n        }\n    }\n\n    /**\n     * @return {?number} Status of the algorithm - anything other than zero usually indicates a problem with convergence.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setStatus setStatus}.\n     */\n    status() {\n        if (!this.#filledStatus) {\n            return null;\n        } else {\n            return this.#results.status();\n        }\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using k-means.\n *\n* @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {number} clusters Number of clusters to create.\n * This should not be greater than the number of cells.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {string} [options.initMethod=\"pca-part\"] - Initialization method.\n * Setting `\"random\"` will randomly select `clusters` cells as centers.\n * Setting `\"kmeans++\"` will use the weighted sampling approach of Arthur and Vassilvitskii (2007).\n * Setting `\"pca-part\"` will use PCA partitioning.\n * @param {number} [options.initSeed=5768] - Seed to use for random number generation during initialization.\n * @param {number} [options.initPCASizeAdjust=1] - Adjustment factor for the cluster sizes, used when `initMethod = \"pca-part\"`.\n * Larger values (up to 1) will prioritize partitioning of clusters with more cells.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ClusterKmeansResults} Object containing the clustering results.\n */\nexport function clusterKmeans(x, clusters, { numberOfDims = null, numberOfCells = null, initMethod = \"pca-part\", initSeed = 5768, initPCASizeAdjust = 1, numberOfThreads = null } = {}) {\n    var buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.cluster_kmeans(pptr, numberOfDims, numberOfCells, clusters, initMethod, initSeed, initPCASizeAdjust, nthreads),\n            ClusterKmeansResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterKmeansResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfClusters - Number of clusters in the dataset.\n * @param {number} numberOfDimensions - Number of dimensions of the embedding used for clustering.\n *\n * @return {ClusterKmeansResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyClusterKmeansResults(numberOfCells, numberOfClusters, numberOfDimensions) {\n    return gc.call(\n        module => new module.ClusterKmeans_Result(numberOfCells, numberOfClusters, numberOfDimensions),\n        ClusterKmeansResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { FindNearestNeighborsResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the SNN graph object on the Wasm heap, produced by {@linkcode buildSNNGraph}.\n * @hideconstructor\n */\nexport class BuildSNNGraphResults {\n    #id;\n    #graph;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#graph = raw;\n        return;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#graph !== null) {\n            gc.release(this.#id);\n            this.#graph = null;\n        }\n        return;\n    }\n\n    // Not documented, internal use only.\n    get graph() {\n        return this.#graph;\n    }\n}\n\n/**\n * Build a shared nearest graph.\n *\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.scheme=\"rank\"] - Weighting scheme for the edges between cells.\n * This can be based on the top ranks of the shared neighbors (`\"rank\"`),\n * the number of shared neighbors (`\"number\"`) \n * or the Jaccard index of the neighbor sets between cells (`\"jaccard\"`).\n * @param {number} [options.neighbors=10] - Number of nearest neighbors to use to construct the graph.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildSNNGraphResults} Object containing the graph.\n */\nexport function buildSNNGraph(x, { scheme = \"rank\", neighbors = 10, numberOfThreads = null } = {}) {\n    var output;\n    var my_neighbors;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    utils.matchOptions(\"scheme\", scheme, [ \"rank\", \"number\", \"jaccard\" ]);\n\n    try {\n        let ref;\n        if (x instanceof FindNearestNeighborsResults) {\n            ref = x;\n        } else {\n            my_neighbors = findNearestNeighbors(x, neighbors, { numberOfThreads: nthreads }); \n            ref = my_neighbors ; // separate assignment is necessary for only 'my_neighbors' but not 'x' to be freed.\n        }\n\n        output = gc.call(\n            module => module.build_snn_graph(ref.results, scheme, nthreads),\n            BuildSNNGraphResults\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around the SNN multi-level clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphMultiLevelResults {\n    #id;\n    #results;\n\n    #filledBest;\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledBest = filled;\n        this.#filledModularity = utils.spawnArray(this.numberOfLevels(), filled);\n        this.#filledMembership = utils.spawnArray(this.numberOfLevels(), filled);\n\n        return;\n    }\n\n    /**\n     * @return {?number} The clustering level with the highest modularity.\n     * Alternatively `null`, if this has not been previously set via {@linkcode ClusterSNNGraphMultiLevelResults#setBest setBest}.\n     */\n    best() {\n        if (!this.#filledBest) {\n            return null;\n        } else {\n            return this.#results.best();\n        }\n    }\n\n    #chooseLevel(level) {\n        if (level === null) {\n            level = this.best();\n            if (level == null) {\n                throw new Error(\"'best' has not yet been set via 'setBest'\");\n            }\n        }\n        return level;\n    }\n\n    /**\n     * @param {number} best - Clustering level with the highest modularity.\n     * @return `best` is set as the best clustering level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setBest(best) {\n        if (!this.#filledBest) {\n            this.#filledBest = true;\n        }\n        this.#results.set_best(best);\n        return;\n    }\n\n    /**\n     * @return {number} Number of levels in the results.\n     */\n    numberOfLevels() {\n        return this.#results.number();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the modularity.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     *\n     * @return {?number} The modularity at the specified level.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphMultiLevelResults#setModularity setModularity}.\n     */\n    modularity({ level = null } = {}) {\n        level = this.#chooseLevel(level);\n        if (!this.#filledModularity[level]) {\n            return null;\n        } else {\n            return this.#results.modularity(level);\n        }\n    }\n\n    /**\n     * @param {number} level - The clustering level at which to set the modularity.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return `modularity` is set as the modularity at the specified level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(level, modularity) {\n        if (!this.#filledModularity[level]) {\n            this.#filledModularity[level] = true;\n        }\n        this.#results.set_modularity(level, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the cluster membership.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ level = null, copy = true, fillable = false } = {}) {\n        level = this.#chooseLevel(level);\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership[level], \n            () => { this.#filledMembership[level] = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(level), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN walktrap clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphWalktrapResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledModularityDetails;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        if (!filled) {\n            let n = this.numberOfMergeSteps() + 1;\n            this.#filledModularityDetails = { which: utils.spawnArray(n, false), remaining: n };\n        }\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of merge steps used by the Walktrap algorithm.\n     */\n    numberOfMergeSteps() {\n        return this.#results.num_merge_steps();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.at=null] - Index at which to extract the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * Set to `null` to obtain the largest modularity across all merge steps.\n     *\n     * @return {?number} The modularity at the specified merge step, or the maximum modularity across all merge steps.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphWalktrapResults#setModularity setModularity}.\n     */\n    modularity({ at = null } = {}) {\n        let fail = false;\n        if (at === null) {\n            if (!this.#filledModularity) {\n                return null;\n            }\n            at = -1;\n        } else if (!this.#filledModularity && !this.#filledModularityDetails[at]) {\n            return null;\n        }\n\n        return this.#results.modularity(at);\n    }\n\n    /**\n     * @param {number} at - Index at which to set the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(at, modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularityDetails.which[at] = true;\n            this.#filledModularityDetails.remaining--;\n            if (this.#filledModularityDetails.remaining == 0) {\n                this.#filledModularity = true;\n            }\n        }\n        this.#results.set_modularity(at, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN Leiden clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphLeidenResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        return;\n    }\n\n    /**\n     * @return {?number} The quality of the Leiden clustering.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphLeidenResults#setModularity setModularity}.\n     *\n     * Note that Leiden's quality score is technically a different measure from modularity.\n     * Nonetheless, we use `modularity` for consistency with the other SNN clustering result classes.\n     */\n    modularity() {\n        if (!this.#filledModularity) {\n            return null;\n        } else {\n            return this.#results.modularity();\n        }\n    }\n\n    /**\n     * @param {number} modularity - Modularity value.\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularity = true;\n        }\n        this.#results.set_modularity(modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using community detection on the SNN graph.\n *\n * @param {BuildSNNGraphResults} x - The shared nearest neighbor graph constructed by {@linkcode buildSNNGraph}.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.multiLevelResolution=1] - The resolution of the multi-level clustering, when `method = \"multilevel\"`.\n * Larger values result in more fine-grained clusters.\n * @param {number} [options.leidenResolution=1] - The resolution of the Leiden clustering, when `method = \"leiden\"`.\n * Larger values result in more fine-grained clusters.\n * @param {boolean} [options.leidenModularityObjective=false] - Whether to use the modularity as the objective function when `method = \"leiden\"`.\n * By default, the Constant-Potts Model is used instead.\n * Set to `true` to get an interpretation of the resolution on par with that of `method = \"multilevel\"`.\n * @param {number} [options.walktrapSteps=4] - Number of steps for the Walktrap algorithm, when `method = \"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} Object containing the clustering results.\n * The class of this object depends on the choice of `method`.\n */\nexport function clusterSNNGraph(x, { \n    method = \"multilevel\", \n    multiLevelResolution = 1, \n    leidenResolution = 1, \n    leidenModularityObjective = false,\n    walktrapSteps = 4\n} = {}) {\n    var output;\n\n    try {\n        if (method == \"multilevel\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_multilevel(x.graph, multiLevelResolution),\n                ClusterSNNGraphMultiLevelResults\n            );\n        } else if (method == \"walktrap\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_walktrap(x.graph, walktrapSteps),\n                ClusterSNNGraphWalktrapResults\n            );\n        } else if (method == \"leiden\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_leiden(x.graph, leidenResolution, leidenModularityObjective),\n                ClusterSNNGraphLeidenResults\n            );\n        } else {\n            throw new Error(\"unknown method '\" + method + \"'\")\n        }\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterSNNGraphMultiLevelResults} object (or one of its counterparts), to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.numberOfLevels=1] - Number of levels for which to allocate space when `method=\"multilevel\"`.\n * @param {number} [options.numberOfMergeSteps=1] - Number of merge steps for which to allocate space when `method=\"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} \n * Object with space allocated to store the clustering results.\n */\nexport function emptyClusterSNNGraphResults(numberOfCells, { method = \"multilevel\", numberOfLevels = 1, numberOfMergeSteps = 1 } = {}) {\n    if (method == \"multilevel\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphMultiLevel_Result(numberOfCells, numberOfLevels),\n            ClusterSNNGraphMultiLevelResults,\n            /* filled = */ false\n        );\n    } else if (method == \"walktrap\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphWalktrap_Result(numberOfCells, numberOfMergeSteps),\n            ClusterSNNGraphWalktrapResults,\n            /* filled = */ false\n        );\n    } else if (method == \"leiden\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphLeiden_Result(numberOfCells),\n            ClusterSNNGraphLeidenResults,\n            /* filled = */ false\n        );\n    } else {\n        throw new Error(\"unknown method '\" + method + \"'\")\n    }\n}\n","import * as wa from \"wasmarrays.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Convert an arbitrary array into a R-style factor, with integer indices into an array of levels.\n * This is useful for formatting grouping or blocking vectors for {@linkcode scoreMarkers}, {@linkcode modelGeneVar}, etc.\n *\n * @param {Array|TypedArray} x - Array of values to be converted into a factor.\n * \n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asWasmArray=true] - Whether to return an Int32WasmArray instance for the indices.\n * If `false`, an Int32Array is returned instead.\n * Only used if `buffer` is not supplied.\n * @param {?(Int32WasmArray|Int32Array)} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to that of `x`.\n * @param {?Array} [options.levels=null] - An existing array of known levels to be matched against `x`.\n * Values in `x` that are not in `levels` are considered to be invalid.\n * If `null`, the levels are automatically inferred from `x`; these will be sorted if all-numeric or all-string.\n * @param {string} [options.action=\"error\"] - Action to take when invalid values (i.e., null, NaNs) are detected in `x`.\n *\n * - `\"none\"`: the index is silently set to `placeholder`.\n * - `\"warn\"`: a warning is raised on the first occurrence of an invalid value, and the index is set to `placeholder`.\n * - `\"error\"`: an error is raised.\n * \n * @param {number} [options.placeholder=-1] - Placeholder index to use upon detecting invalid values in `x`.\n *\n * @return {object} Object containing:\n *\n * - `ids`: an Int32WasmArray or Int32Array of length equal to `x`, containing the index into `levels` for each cell.\n * - `levels`: an array of unique levels, such that `Array.from(ids).map(i => levels[i])` returns the same contents as `x` (aside from invalid values).\n *   If an input `levels` is supplied, this is returned directly.\n *\n * If `buffer` was supplied, it is used as the value of the `ids` property.\n */\nexport function convertToFactor(x, { asWasmArray = true, buffer = null, levels = null, action = \"error\", placeholder = -1 } = {}) {\n    let local_buffer;\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (!warned) {\n                console.warn (\"replacing invalid values with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected invalid value (e.g., null, NaN) in 'x'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling invalid entries\");\n    }\n\n    try {\n        if (buffer == null) {\n            local_buffer = (asWasmArray ? utils.createInt32WasmArray(x.length) : new Int32Array(x.length));\n            buffer = local_buffer;\n        } else {\n            if (buffer.length !== x.length) {\n                throw new Error(\"'buffer' should have length equal to that of 'x'\");\n            }\n            asWasmArray = buffer instanceof wa.Int32WasmArray;\n        }\n\n        let barr = (asWasmArray ? buffer.array() : buffer); // no allocations from this point onwards!\n        let mapping = new Map;\n\n        if (levels == null) {\n            levels = [];\n            for (var i = 0; i < x.length; i++) {\n                let y = x[i];\n                if (y == null || (typeof y == \"number\" && !Number.isFinite(y))) {\n                    failure();\n                    barr[i] = placeholder;\n                    continue;\n                }\n\n                let existing = mapping.get(y);\n                if (typeof existing == \"undefined\") {\n                    let n = levels.length;\n                    mapping.set(y, n);\n                    levels.push(y);\n                    barr[i] = n;\n                } else {\n                    barr[i] = existing;\n                }\n            }\n\n            // Sorting them by default, to make life nicer.\n            if (levels.every(x => typeof x == \"string\")) {\n                let oldlevels = levels.slice();\n                levels.sort();\n                resetLevels({ ids: buffer, levels: oldlevels }, levels);\n            } else if (levels.every(x => typeof x == \"number\")) {\n                let oldlevels = levels.slice();\n                levels.sort((a, b) => a - b);\n                resetLevels({ ids: buffer, levels: oldlevels }, levels);\n            }\n\n        } else {\n            for (var l = 0; l < levels.length; l++) {\n                mapping.set(levels[l], l);\n            }\n\n            for (var i = 0; i < x.length; i++) {\n                let y = x[i];\n                let existing = mapping.get(y);\n                if (typeof existing == \"undefined\") {\n                    failure();\n                    barr[i] = placeholder;\n                } else {\n                    barr[i] = existing;\n                }\n            }\n        }\n\n    } catch (e) {\n        if (local_buffer instanceof wa.WasmArray) {\n            utils.free(local_buffer);\n        }\n        throw e;\n    }\n\n    return {\n        ids: buffer,\n        levels: levels\n    };\n}\n\n// Back-compatible renaming.\nexport function factorize(x, options = {}) {\n    return convertToFactor(x, options);\n}\n\n/**\n * Reindex the factor indices to remove unused levels.\n * This is done by adjusting the indices such that every index from `[0, N)` is represented at least once, where `N` is the number of (used) levels.\n *\n * @param {Int32WasmArray|TypedArray|Array} x - Array of factor indices such as that produced by {@linkcode convertToFactor}. \n *\n * @return {Array} `x` is modified in place to remove unused levels.\n *\n * An array (denoted here as `y`) is returned that represents the mapping between the original and modified IDs,\n * i.e., running `x.map(i => y[i])` will recover the input `x`.\n * This is most commonly used to create a new array of levels, i.e., `y.map(i => old_levels[i])` will drop the unused levels. \n */\nexport function dropUnusedLevels(x) {\n    if (x instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        x = x.array();\n    }\n\n    let uniq = new Set(x);\n    let uniq_arr = Array.from(uniq).sort();\n    let mapping = {};\n    uniq_arr.forEach((y, i) => { mapping[y] = i; });\n\n    x.forEach((y, i) => {\n        x[i] = mapping[y];\n    });\n\n    return uniq_arr;\n}\n\n/**\n * Change the levels of a factor, updating the indices appropriately.\n *\n * @param {object} x - Factor object produced by {@linkcode convertToFactor}.\n * @param {Array} newLevels - Array of new levels.\n * This should be a superset of `x.levels`.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.action=\"error\"] - Action to take when `newLevels` is not a superset of `x.levels`.\n * This can be `\"error\"`, `\"warn\"` or `\"none\"`.\n * @param {number} [options.placeholder=-1] - Placeholder index corresponding to invalid values of `x.ids`.\n * Any placeholders in `x.ids` will be preserved on function return.\n * Additionally, if entries of `x.ids` refer to entries of `x.levels` that are missing in `newLevels`, they will be set to the placeholder value on function return;\n * this is only relevant if `action = \"warn\"` or `\"none\"`.\n *\n * @return `x` is modified by reference such that `x.levels` is set to `newLevels`.\n * `x.ids` is updated so that the indices now refer to the appropriate value in `newLevels`.\n */\nexport function resetLevels(x, newLevels, { action = \"error\", placeholder = -1 } = {}) {\n    let mapping = new Map;\n    for (var i = 0; i < newLevels.length; i++) {\n        mapping.set(newLevels[i], i);\n    }\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (!warned) {\n                console.warn (\"replacing missing levels with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected level in 'x.levels' that is missing from 'newLevels'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling missing levels\");\n    }\n\n    let oldLevels = x.levels;\n    let conversion = new Array(oldLevels.length);\n    let warned = false;\n    for (var i = 0; i < oldLevels.length; i++) {\n        let found = mapping.get(oldLevels[i]);\n        if (typeof found == \"undefined\") {\n            failure();\n            conversion[i] = placeholder;\n        } else {\n            conversion[i] = found;\n        }\n    }\n    x.levels = newLevels;\n\n    let target = x.ids;\n    if (target instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        target = target.array();\n    }\n    target.forEach((y, i) => {\n        if (y !== placeholder) {\n            target[i] = conversion[y];\n        }\n    });\n}\n\n/**\n * Subset a factor, possibly also dropping its unused levels.\n * This is typically based on the same filtering vector as {@linkcode filterCells}.\n *\n * @param {object} x - An object representing a factor, containing the following properties:\n *\n * - `ids`: An Int32Array or Int32WasmArray of integer indices.\n * - `levels`: An array of levels that can be indexed by entries of `ids`.\n *\n * This is typically produced by {@linkcode convertToFactor}. \n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n *\n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.drop=true] - Whether to drop unused levels in the output, see {@linkcode dropUnusedLevels}.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?(Int32Array|Int32WasmArray)} [options.buffer=null] - Array in which the output is to be stored, of the same type as `x.ids`.\n * If provided, this should be of length equal to `subset`, if `filter = null`;\n * the number of truthy elements in `subset`, if `filter = false`;\n * or the number of falsey elements in `subset`, if `filter = true`.\n *\n * @return {object} An object like `x`, containing:\n *\n * - `ids`: An Int32Array or Int32WasmArray of integer indices, subsetted from those in `x.ids`.\n * - `levels`: Array of levels that can be indexed by entries of the output `ids`.\n *   If `drop = true`, this may be a subset of `x.levels` where every entry is represented at least once in the output `ids`.\n *\n * If `buffer` is supplied, the returned `ids` will be set to `buffer`.\n */\nexport function subsetFactor(x, subset, { drop = true, filter = null, buffer = null } = {}) {\n    let output = { ids: null, levels: x.levels };\n\n    if (x.ids instanceof wa.WasmArray) {\n        output.ids = wa.subsetWasmArray(x.ids, subset, { filter, buffer });\n    } else {\n        let n = wa.checkSubsetLength(subset, filter, x.length, \"x\");\n        if (buffer == null) {\n            buffer = new x.ids.constructor(n);\n        }\n        wa.fillSubset(subset, filter, x.ids, buffer);\n        output.ids = buffer;\n    }\n\n    if (drop) {\n        let remapping = dropUnusedLevels(output.ids);\n        output.levels = remapping.map(i => x.levels[i]);\n    }\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Filter out low-quality cells.\n *\n * @param {ScranMatrix} x The count matrix.\n * @param {(Uint8WasmArray|Array|TypedArray)} filters \n * An array of length equal to the number of columns in `x`, where truthy elements specify the cells to be discarded.\n *\n * @return {ScranMatrix} A matrix of the same type as `x`, filtered by column to remove all cells specified in `filters`. \n */\nexport function filterCells(x, filters) {\n    var filter_data;\n    var output;\n\n    try {\n        filter_data = utils.wasmifyArray(filters, \"Uint8WasmArray\");\n        if (filter_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'filters' must be equal to number of columns in 'x'\");\n        }\n        var ptr = filter_data.offset;\n\n        output = gc.call(\n            module => module.filter_cells(x.matrix, ptr, false),\n            x.constructor\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(filter_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/** \n * Wrapper for the neighbor search index on the Wasm heap, typically produced by {@linkcode buildNeighborSearchIndex}.\n * @hideconstructor\n */\nexport class BuildNeighborSearchIndexResults {\n    #id;\n    #index; \n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#index = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the index.\n     */\n    numberOfCells() {\n        return this.#index.num_obs();\n    }\n\n    /**\n     * @return {number} Number of dimensions in the index.\n     */\n    numberOfDims() {\n        return this.#index.num_dim();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#index !== null) {\n            gc.release(this.#id);\n            this.#index = null;\n        }\n        return;\n    }\n\n    // Internal only, not documented.\n    get index() {\n        return this.#index;\n    }\n}\n\n/**\n * Build the nearest neighbor search index.\n *\n * @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {boolean} [options.approximate=true] - Whether to build an index for an approximate neighbor search.\n *\n * @return {BuildNeighborSearchIndexResults} Index object to use for neighbor searches.\n */\nexport function buildNeighborSearchIndex(x, { numberOfDims = null, numberOfCells = null, approximate = true } = {}) {\n    var buffer;\n    var output;\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.build_neighbor_index(pptr, numberOfDims, numberOfCells, approximate),\n            BuildNeighborSearchIndexResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/** \n * Wrapper for the neighbor search results on the Wasm heap, typically produced by {@linkcode findNearestNeighbors}.\n * @hideconstructor\n */\nexport class FindNearestNeighborsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The total number of neighbors across all cells.\n     * This is usually the product of the number of neighbors and the number of cells.\n     */\n    size() {\n        return this.#results.size();\n    }\n\n    /**\n     * @return {number} The number of cells used in the search.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Int32WasmArray} [options.runs=null] - A Wasm-allocated array of length equal to `numberOfCells()`,\n     * to be used to store the number of neighbors per cell.\n     * @param {?Int32WasmArray} [options.indices=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the indices of the neighbors of each cell.\n     * @param {?Float64WasmArray} [options.distances=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the distances to the neighbors of each cell.\n     *\n     * @return {object} \n     * An object is returned with the `runs`, `indices` and `distances` keys, each with an appropriate TypedArray as the value.\n     *\n     * If all of the arguments are non-`null`, the TypedArrays in the returned object are views on the corresponding input WasmArrays.\n     * Note that these views may be invalidated on the next allocation on the Wasm heap.\n     *\n     * If only some of the arguments are non-`null`, an error is raised.\n     */\n    serialize({ runs = null, indices = null, distances = null } = {}) {\n        var copy = (runs === null) + (indices === null) + (distances === null);\n        if (copy != 3 && copy != 0) {\n            throw new Error(\"either all or none of 'runs', 'indices' and 'distances' can be 'null'\");\n        }\n\n        var output;\n\n        if (copy === 3) {\n            var run_data;\n            var ind_data;\n            var dist_data;\n            \n            try {\n                run_data = utils.createInt32WasmArray(this.numberOfCells());\n                let s = this.size();\n                ind_data = utils.createInt32WasmArray(s);\n                dist_data = utils.createFloat64WasmArray(s);\n                this.#results.serialize(run_data.offset, ind_data.offset, dist_data.offset);\n\n                output = { \n                    \"runs\": run_data.slice(), \n                    \"indices\": ind_data.slice(), \n                    \"distances\": dist_data.slice() \n                };\n            } finally {\n                utils.free(run_data);\n                utils.free(ind_data);\n                utils.free(dist_data);\n            }\n\n        } else {\n            this.#results.serialize(runs.offset, indices.offset, distances.offset);\n            output = {\n                \"runs\": runs.array(),\n                \"indices\": indices.array(),\n                \"distances\": distances.array()\n            };\n        }\n\n        return output;\n    }\n\n    /**\n     * @param {Int32WasmArray|Array|TypedArray} runs An array of length equal to `numberOfCells()`,\n     * containing the number of neighbors per cell.\n     * @param {Int32WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the indices of the neighbors of each cell.\n     * @param {Float64WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the distances to the neighbors of each cell.\n     *\n     * @return {FindNearestNeighborsResults} Object containing the unserialized search results.\n     */\n    static unserialize(runs, indices, distances) {\n        var output;\n        var run_data;\n        var ind_data;\n        var dist_data;\n\n        try {\n            run_data = utils.wasmifyArray(runs, \"Int32WasmArray\");\n            ind_data = utils.wasmifyArray(indices, \"Int32WasmArray\");\n            dist_data = utils.wasmifyArray(distances, \"Float64WasmArray\");\n            output = gc.call(\n                module => new module.NeighborResults(runs.length, run_data.offset, ind_data.offset, dist_data.offset),\n                FindNearestNeighborsResults\n            );\n\n        } catch (e) {\n            utils.free(output);\n            throw e;\n\n        } finally { \n            utils.free(run_data);\n            utils.free(ind_data);\n            utils.free(dist_data);\n        }\n\n        return output;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Find the nearest neighbors for each cell.\n *\n * @param {NeighborSearchIndex} x The neighbor search index built by {@linkcode buildNeighborSearchIndex}.\n * @param {number} k Number of neighbors to find.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {FindNearestNeighborsResults} Object containing the search results.\n */\nexport function findNearestNeighbors(x, k, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.find_nearest_neighbors(x.index, k, nthreads),\n        FindNearestNeighborsResults\n    );\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute group-based size factors, where composition biases are removed between groups and library size normalization is performed within groups.\n * This allows us to generate per-cell size factors in spite of the sparsity.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.center=true] - Whether to return centered size factors.\n * If `false`, the size factors can be interpreted as the scaling to match `reference`.\n * @param {?Float64WasmArray} [options.buffer=null] - Output buffer for the size factors.\n * This should have length equal to the number of columns in `x`.\n * @param {number} [options.priorCount=10] - Prior count to use for shrinking size factors towards the relative library size.\n * Larger values result in stronger shrinkage when the coverage is low.\n * @param {?number} [options.reference=null] - Group to use as a reference.\n * This should be an entry in `groups`. \n * If `null`, it is automatically determined.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to the number of columns in `x`, containing the size factors for all cells.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function groupedSizeFactors(x, groups, { center = true, buffer = null, priorCount = 10, reference = null, numberOfThreads = null } = {}) {\n    var local_buffer;\n    var group_arr;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (!(buffer instanceof wa.Float64WasmArray)) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' must be equal to the number of columns in 'x'\");\n        }\n\n        group_arr = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (reference == null) {\n            reference = -1;\n        }\n\n        wasm.call(module => module.grouped_size_factors(x.matrix, group_arr.offset, center, priorCount, reference, buffer.offset, nthreads));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(group_arr);\n    }\n    \n    return buffer;\n}\n","/**\n * Guess the identity of the features from their names.\n *\n * @param {Array} features - Array of strings containing feature identifiers, typically Ensembl IDs or gene symbols.\n * Elements may also be `null` or undefined if an identifier is missing.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceTaxonomy=false] - Whether to force the use of taxonomy IDs for human and mouse.\n * This is `false` for back compatibility.\n *\n * @return {object} An object containing:\n *\n * - `species`, the inferred species as a string.\n *   This can be either `\"human\"` or `\"mouse\"`, or an NCBI taxonomy ID (one of 6239, 10116, 9541, 7227, 7955, 9598).\n *   If `forceTaxonomy = true`, human and mouse are replaced with 9606 and 10090, respectively.\n * - `type`: the feature identifier type.\n *   This can either be `\"ensembl\"` or `\"symbol\"`.\n * - `confidence`: the percentage of entries in `x` that are consistent with the inferred identity.\n */\nexport function guessFeatures(features, { forceTaxonomy = false } = {}) {\n    let ntotal = features.length;\n    let early_threshold = Math.ceil(ntotal / 2);\n    let format = payload => {\n        payload.confidence /= ntotal;\n        return payload;\n    };\n\n    // Duplicated entries only count as one match, so as to avoid problems with\n    // chromosome positions, feature type specifications, etc. Note that we\n    // still need to use the full length to compute 'ntotal', otherwise we\n    // wouldn't be penalizing the duplicates properly.\n    let unique_features = new Set;\n    for (const f of features) {\n        if (typeof f == \"string\") {\n            unique_features.add(f);\n        }\n    }\n\n    let ensembl_human = 0;\n    let ensembl_mouse = 0;\n    let ensembl_6239 = 0;\n    let ensembl_10116 = 0; // Ensembl only, Rat symbols are indistiguishable from mice.\n    let ensembl_9541 = 0; // Ensembl only, Mfac symbols are indistiguishable from human.\n    let ensembl_7227 = 0; // Ensembl only, fly symbols are crazy.\n    let ensembl_7955 = 0;\n    let ensembl_9598 = 0; // Ensembl only, Chimp symbols are indistinguishable from human.\n\n    let symbol_human = 0;\n    let symbol_mouse = 0;\n    let symbol_6239 = 0;\n    let symbol_7955 = 0;\n\n    let hsid = (forceTaxonomy ? \"9606\" : \"human\");\n    let mmid = (forceTaxonomy ? \"10090\" : \"mouse\");\n    let collected = [];\n\n    // Checking if it's any type of Ensembl.\n    let any_ens = 0;\n    for (const x of unique_features) {\n        if (x && x.match(/^ENS[A-Z]*G[0-9]{11}$/)) {\n            any_ens++;\n        }\n    }\n\n    if (any_ens) {\n        for (const x of unique_features) {\n            if (x) {\n                if (x.startsWith(\"ENSG\")) {\n                    ensembl_human++;\n                } else if (x.startsWith(\"ENSMUSG\")) {\n                    ensembl_mouse++;\n                } else if (x.startsWith(\"ENSRNOG\")) {\n                    ensembl_10116++;\n                } else if (x.startsWith(\"ENSMFAG\")) {\n                    ensembl_9541++;\n                } else if (x.startsWith(\"ENSDARG\")) {\n                    ensembl_7955++;\n                } else if (x.startsWith(\"ENSPTRG\")) {\n                    ensembl_9598++;\n                }\n            }\n        }\n\n        collected.push({ species: hsid, type: \"ensembl\", confidence: ensembl_human });\n        collected.push({ species: mmid, type: \"ensembl\", confidence: ensembl_mouse });\n        collected.push({ species: \"10116\", type: \"ensembl\", confidence: ensembl_10116 });\n        collected.push({ species: \"9541\", type: \"ensembl\", confidence: ensembl_9541 });\n        collected.push({ species: \"7955\", type: \"ensembl\", confidence: ensembl_7955 });\n        collected.push({ species: \"9598\", type: \"ensembl\", confidence: ensembl_9598 });\n\n        // See if we can quit early and avoid the other checks.\n        for (const x of collected) {\n            if (x.confidence >= early_threshold) {\n                return format(x);\n            }\n        }\n    }\n\n    // Human symbol; starts with upper case, no lower case, and not an Ensembl of any kind.\n    // We also ignore VEGA gene identifiers, as these are antiquated; and MGI identifiers,\n    // which are all-caps and thus confusing.\n    for (const x of unique_features) {\n        if (x && x.match(/^[A-Z][^a-z]+$/) && !x.match(/^ENS[A-Z]+[0-9]{11}/) && !x.match(/^OTT.{4}[0-9]{11}/) && !x.match(/^MGI:[0-9]+/)) {\n            symbol_human++;\n        }\n    }\n    {\n        let payload = { species: hsid, type: \"symbol\", confidence: symbol_human };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Mouse symbol; starts with upper case, but no upper case after that.\n    for (const x of unique_features) {\n        if (x && x.match(/^[A-Z][^A-Z]+$/)) {\n            symbol_mouse++;\n        }\n    }\n    {\n        let payload = { species: mmid, type: \"symbol\", confidence: symbol_mouse };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm Ensembl (WormBase).\n    for (const x of unique_features) {\n        if (x && x.match(/^WBGene[0-9]+$/)) {\n            ensembl_6239++;\n        }\n    }\n    {\n        let payload = { species: \"6239\", type: \"ensembl\", confidence: ensembl_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Fly Ensembl (FlyBase).\n    for (const x of unique_features) {\n        if (x && x.match(/^FBgn[0-9]+$/)) {\n            ensembl_7227++;\n        }\n    }\n    {\n        let payload = { species: \"7227\", type: \"ensembl\", confidence: ensembl_7227 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm symbols; at least three lower case with a dash and numbers.\n    for (const x of unique_features) {\n        if (x && x.match(/^[a-z]{3,}-[0-9]+$/)) {\n            symbol_6239++;\n        }\n    }\n    {\n        let payload = { species: \"6239\", type: \"symbol\", confidence: symbol_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Zebrafish symbols; at least three lower case letters, no dash, followed by numbers and/or more lower case.\n    for (const x of unique_features) {\n        if (x && x.match(/^[a-z]{3,}[0-9a-z]+$/)) {\n            symbol_7955++;\n        }\n    }\n    {\n        let payload = { species: \"7955\", type: \"symbol\", confidence: symbol_7955 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Picking the best.\n    let highest = collected[0];\n    for (var i = 1; i < collected.length; i++) {\n        if (collected[i].confidence > highest.confidence) {\n            highest = collected[i];\n        }\n    }\n\n    return format(highest);\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\n/** \n * Perform a hypergeometric test, typically for over-enrichment of markers across feature sets.\n * This can be computed for multiple feature sets by providing arrays as some or all of the arguments.\n * If multiple arrays are supplied, they must be of the same length.\n *\n * @param {number|Array|TypedArray|WasmArray} markersInSet - Number of detected markers that are also in the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfMarkers - Total number of detected markers.\n * @param {number|Array|TypedArray|WasmArray} featureSetSize - Size of the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfFeatures - Total number of features.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {boolean} [options.assumeSorted=false] - Whether the input arrays are already sorted such that `markersInSet` is the slowest-changing value.\n * Setting this to `true` can avoid an extra sorting step for greater efficiency.\n *\n * @return {Float64Array} An array of length equal to that of the supplied arrays (or 1, if no arrays are supplied).\n * The i-th entry contains the p-value for enrichment computed using the i-th entry of each supplied array. \n */\nexport function hypergeometricTest(markersInSet, numberOfMarkers, featureSetSize, numberOfFeatures, { numberOfThreads = null, assumeSorted = false } = {}) {\n    let markersInSet_data;\n    let numberOfMarkers_data;\n    let featureSetSize_data;\n    let numberOfFeatures_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let ntests = null;\n    let check_length = (candidate, name, sofar) => {\n        if (sofar !== null && candidate.length !== sofar) {\n            throw new Error(\"array inputs must have the same length (failing for '\" + name + \"')\");\n        }\n        return candidate.length;\n    }\n\n    if (typeof markersInSet == \"number\") {\n        markersInSet = [markersInSet];\n    } else { \n        ntests = check_length(markersInSet, \"markersInSet\", ntests);\n    }\n\n    if (typeof numberOfMarkers == \"number\") {\n        numberOfMarkers = [numberOfMarkers];\n    } else {\n        ntests = check_length(numberOfMarkers, \"numberOfMarkers\", ntests);\n    }\n\n    if (typeof featureSetSize == \"number\") {\n        featureSetSize = [featureSetSize];\n    } else {\n        ntests = check_length(featureSetSize, \"featureSetSize\", ntests);\n    }\n\n    if (typeof numberOfFeatures == \"number\") {\n        numberOfFeatures = [numberOfFeatures];\n    } else {\n        ntests = check_length(numberOfFeatures, \"numberOfFeatures\", ntests);\n    }\n\n    if (ntests == null) {\n        ntests = 1;\n    }\n\n    let output;\n    let output_data;\n\n    try {\n        markersInSet_data = utils.wasmifyArray(markersInSet, \"Int32WasmArray\");\n        numberOfMarkers_data = utils.wasmifyArray(numberOfMarkers, \"Int32WasmArray\");\n        featureSetSize_data = utils.wasmifyArray(featureSetSize, \"Int32WasmArray\");\n        numberOfFeatures_data = utils.wasmifyArray(numberOfFeatures, \"Int32WasmArray\");\n        output_data = utils.createFloat64WasmArray(ntests);\n\n        wasm.call(module => module.hypergeometric_test(\n            ntests, \n            markersInSet_data.length != 1,\n            markersInSet_data.offset,\n            featureSetSize_data.length != 1,\n            featureSetSize_data.offset,\n            numberOfMarkers_data.length != 1,\n            numberOfMarkers_data.offset,\n            numberOfFeatures_data.length != 1,\n            numberOfFeatures_data.offset,\n            assumeSorted,\n            output_data.offset,\n            nthreads\n        ));\n\n        output = output_data.slice();\n\n    } finally {\n        utils.free(markersInSet_data);\n        utils.free(numberOfMarkers_data);\n        utils.free(featureSetSize_data);\n        utils.free(numberOfFeatures_data);\n        utils.free(output_data);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Initialize a sparse matrix from a dense array.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray|Array|TypedArray} values Values of all elements in the matrix, stored in column-major order.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`.\n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = true, layered = true } = {}) {\n    var val_data; \n    var output;\n    var ids = null; \n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        if (val_data.length !== numberOfRows * numberOfColumns) {\n            throw new Error(\"length of 'values' is not consistent with supplied dimensions\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_dense_vector(\n                numberOfRows, \n                numberOfColumns, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Initialize a sparse matrix from its compressed components.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray} values Values of the non-zero elements.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {WasmArray} indices Row indices of the non-zero elements.\n * This should be of the same length as `values`.\n * @param {WasmArray} pointers Pointers specifying the start of each column in `indices`.\n * This should have length equal to `numberOfColumns + 1`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.byColumn=true] - Whether the input arrays are supplied in the compressed sparse column format.\n * If `true`, `indices` should contain column indices and `pointers` should specify the start of each row in `indices`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n * \n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */ \nexport function initializeSparseMatrixFromCompressedVectors(numberOfRows, numberOfColumns, values, indices, pointers, { byColumn = true, forceInteger = true, layered = true } = {}) {\n    var val_data;\n    var ind_data;\n    var indp_data;\n    var output;\n    var ids = null;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        ind_data = utils.wasmifyArray(indices, null);\n        indp_data = utils.wasmifyArray(pointers, null);\n        if (val_data.length != ind_data.length) {\n            throw new Error(\"'values' and 'indices' should have the same length\");\n        }\n        if (indp_data.length != (byColumn ? numberOfColumns : numberOfRows) + 1) {\n            throw new Error(\"'pointers' does not have an appropriate length\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix(\n                numberOfRows, \n                numberOfColumns, \n                val_data.length, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"), \n                ind_data.offset, \n                ind_data.constructor.className.replace(\"Wasm\", \"\"), \n                indp_data.offset, \n                indp_data.constructor.className.replace(\"Wasm\", \"\"), \n                byColumn,\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n        utils.free(ind_data);\n        utils.free(indp_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/** \n * Initialize a sparse matrix from a buffer containing a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If `layered = true`, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If `layered = false`, this is `null`.\n */\nexport function initializeSparseMatrixFromMatrixMarket(x, { compressed = null, layered = true } = {}) {\n    var buf_data;\n    var output;\n    var ids = null;\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(\n                module => module.read_matrix_market_from_buffer(buf_data.offset, buf_data.length, compressed, layered),\n                ScranMatrix\n            );\n        } else {\n            output = gc.call(\n                module => module.read_matrix_market_from_file(x, compressed, layered),\n                ScranMatrix\n            );\n        }\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buf_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\nfunction convert_compressed(compressed) {\n    if (compressed === null) {\n        return -1;\n    } else if (compressed) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n/** \n * Extract dimensions and other details from a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n *\n * @return {object} An object containing the number of `rows`, `columns` and `lines` in the matrix.\n */\nexport function extractMatrixMarketDimensions(x, { compressed = null } = {}) {\n    var buf_data;\n    var stats = utils.createFloat64WasmArray(3);\n    let output = {};\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            wasm.call(module => module.read_matrix_market_header_from_buffer(buf_data.offset, buf_data.length, compressed, stats.offset));\n        } else {\n            wasm.call(module => module.read_matrix_market_header_from_file(x, compressed, stats.offset));\n        }\n\n        let sarr = stats.array();\n        output.rows = sarr[0];\n        output.columns = sarr[1];\n        output.lines = sarr[2];\n\n    } finally {\n        utils.free(buf_data);\n        utils.free(stats);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from a HDF5 file.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the relevant HDF5 dataset contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n * @param {?(Array|TypedArray|Int32WasmArray)} [options.subsetRow=null] - Row indices to extract.\n * All indices must be non-negative integers less than the number of rows in the sparse matrix.\n * @param {?(Array|TypedArray|Int32WasmArray)} [options.subsetColumn=null] - Column indices to extract.\n * All indices must be non-negative integers less than the number of columns in the sparse matrix.\n * @param {number} [options.cacheSize=100000000] - Size of the cache for loading chunks from HDF5 files. \n * Only really relevant when reading dense matrices, where a larger cache size may be necessary for handling large chunk dimensions efficiently.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *   If `subsetRow` was provided, `row_ids` contains indices into `subsetRow`, i.e., the i-th row in `matrix` is the `subsetRow[row_ids[i]]` row in the original matrix.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromHDF5(file, name, { forceInteger = true, layered = true, subsetRow = null, subsetColumn = null, cacheSize = 100000000 } = {}) {\n    var ids = null;\n    var output;\n    let wasm_row, wasm_col;\n\n    try {\n        let use_row_subset = (subsetRow !== null);\n        let row_offset = 0, row_length = 0;\n        if (use_row_subset) {\n            wasm_row = utils.wasmifyArray(subsetRow, \"Int32WasmArray\");\n            row_offset = wasm_row.offset;\n            row_length = wasm_row.length;\n        }\n\n        let use_col_subset = (subsetColumn !== null);\n        let col_offset = 0, col_length = 0;\n        if (use_col_subset) {\n            wasm_col = utils.wasmifyArray(subsetColumn, \"Int32WasmArray\");\n            col_offset = wasm_col.offset;\n            col_length = wasm_col.length;\n        }\n\n        output = gc.call(\n            module => module.read_hdf5_matrix(file, name, forceInteger, layered, use_row_subset, row_offset, row_length, use_col_subset, col_offset, col_length, cacheSize),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(wasm_row);\n        utils.free(wasm_col);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Extract the format and dimensions of a HDF5 matrix.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n *\n * @return {object} An object containing:\n * - `rows`, the number of rows in the matrix.\n * - `columns`, the number of columns.\n * - `format`, whether the matrix is dense, CSR or CSC.\n * - `integer`, whether the matrix data is stored as integers or doubles.\n */\nexport function extractHDF5MatrixDetails(file, name) { \n    let output = {};\n    let arr = utils.createInt32WasmArray(5);\n    try {\n        wasm.call(module => module.extract_hdf5_matrix_details(file, name, arr.offset));\n\n        let vals = arr.array();\n        if (vals[0] > 0) {\n            output.format = \"dense\";\n        } else if (vals[1] > 0) {\n            output.format = \"csc\";\n        } else {\n            output.format = \"csr\";\n        }\n\n        output.rows = vals[2];\n        output.columns = vals[3];\n        output.integer = vals[4] > 0;\n    } finally {\n        arr.free();\n    }\n    return output;\n}\n\n/**\n * Initialize a dense matrix from a column-major array.\n *\n * @param {number} numberOfRows - Number of rows.\n * @param {number} numberOfColumns - Number of columns.\n * @param {(WasmArray|TypedArray|Array)} values - Array of length equal to the product of `numberOfRows` and `numberOfColumns`,\n * containing the values to store in the array.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n *\n * @return {ScranMatrix} A dense matrix, filled by column with the contents of `values`.\n */\nexport function initializeDenseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = false } = {}) {\n    var tmp;\n    var output;\n\n    try {\n        tmp = utils.wasmifyArray(values, null);\n        output = gc.call(\n            module => module.initialize_dense_matrix(\n                numberOfRows, \n                numberOfColumns, \n                tmp.offset, \n                tmp.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger\n            ),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from an RDS file.\n *\n * @param {RdsObject} x - Handle to an object inside an RDS file.\n * This should be an integer/numeric matrix, `dgCMatrix` or `dgTMatrix` object.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.consume=false] - Whether to consume the values in `x` when creating the output sparse matrix.\n * Setting this to `true` improves memory efficiency at the cost of preventing any further use of `x`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the R matrix is of an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromRds(x, { consume = false, forceInteger = true, layered = true } = {}) {\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_rds(x.object.$$.ptr, forceInteger, layered, consume),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n","import * as utils from \"./../utils.js\";\nimport * as wasm from \"../wasm.js\";\n\nexport function computePerCellQcFilters(metrics, block, run) {\n    var block_data;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = run(metrics, use_blocks, bptr);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\nexport function applyFilter(thresholds, metrics, block, buffer) {\n    var block_data;\n    var rebuffer;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        let optr;\n        if (buffer == null) {\n            rebuffer = utils.createUint8WasmArray(metrics.numberOfCells());\n            optr = rebuffer.offset;\n        } else {\n            if (buffer.length != metrics.numberOfCells()) {\n                throw new Error(\"'buffer' must be of length equal to the number of cells in 'metrics'\");\n            }\n            optr = buffer.offset;\n        }\n\n        wasm.call(module => thresholds.filter(metrics.results.$$.ptr, use_blocks, bptr, optr));\n        if (buffer == null) {\n            output = rebuffer.slice();\n        } else {\n            output = buffer.array();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(rebuffer);\n    }\n\n    return output;\n}\n\n","import * as wasm from \"../wasm.js\";\nimport * as utils from \"../utils.js\"; \nimport * as wa from \"wasmarrays.js\";\n\nexport function computePerCellQcMetrics(x, subsets, run) {\n    var output;\n    var tmp_subsets = [];\n    var subset_offsets;\n\n    try {\n        let nsubsets = 0;\n        let offset_offset = 0;\n\n        if (subsets != null) {\n            nsubsets = subsets.length;\n            subset_offsets = utils.createBigUint64WasmArray(nsubsets);\n            offset_offset = subset_offsets.offset;\n            let offset_arr = subset_offsets.array();\n\n            for (var i = 0; i < nsubsets; i++) {\n                // This will either create a cheap view, or it'll clone\n                // 'subsets' into the appropriate memory space.\n                let current = utils.wasmifyArray(subsets[i], \"Uint8WasmArray\");\n                if (current.length != x.numberOfRows()) {\n                    throw new Error(\"length of each array in 'subsets' should be equal to the matrix rows\");\n                }\n                tmp_subsets.push(current);\n                offset_arr[i] = BigInt(current.offset);\n            }\n        }\n\n        output = run(x.matrix, nsubsets, offset_offset);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(subset_offsets);\n        for (const y of tmp_subsets) {\n            utils.free(y);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"../utils.js\";\n\nexport function unpack_strings(buffer, lengths) {\n    let dec = new TextDecoder();\n    let names = [];\n    let sofar = 0;\n    for (const l of lengths) {\n        let view = buffer.slice(sofar, sofar + l);\n        names.push(dec.decode(view));\n        sofar += l;\n    }\n    return names;\n}\n\nexport function repack_strings(x) {\n    let buffer;\n    let lengths;\n\n    for (const y of x) {\n        if (!(typeof y == \"string\")) {\n            throw new Error(\"all entries of 'x' should be strings for a string HDF5 dataset\");\n        }\n    }\n\n    try {\n        lengths = utils.createInt32WasmArray(x.length);\n        let lengths_arr = lengths.array();\n\n        let total = 0;\n        const enc = new TextEncoder;\n        let contents = new Array(x.length);\n\n        x.forEach((y, i) => {\n            let e = enc.encode(y);\n            lengths_arr[i] = e.length;\n            contents[i] = e;\n            total += e.length;\n        });\n\n        buffer = utils.createUint8WasmArray(total);\n        let buffer_arr = buffer.array();\n        total = 0;\n\n        contents.forEach(y => {\n            buffer_arr.set(y, total);\n            total += y.length;\n        });\n    } catch (e) {\n        utils.free(buffer);\n        utils.free(lengths);\n        throw e;\n    }\n\n    return [lengths, buffer];\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as init from \"./initializeSparseMatrix.js\";\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around a labelled reference dataset on the Wasm heap, typically produced by {@linkcode loadLabelledReferenceFromBuffers}.\n * @hideconstructor\n */\nclass LoadLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of samples in this dataset.\n     */\n    numberOfSamples() {\n        return this.#reference.num_samples();\n    }\n\n    /**\n     * @return {number} Number of features in this dataset.\n     */\n    numberOfFeatures() {\n        return this.#reference.num_features();\n    }\n\n    /**\n     * @return {number} Number of labels in this dataset.\n     */\n    numberOfLabels() {\n        return this.#reference.num_labels();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\n/**\n * Load a reference dataset for annotation.\n * \n * @param {Uint8Array} ranks - Buffer containing the Gzipped CSV file containing a matrix of ranks.\n * Each line corresponds to a sample and contains a comma-separated vector of ranks across all features.\n * All lines should contain the same number of entries.\n * This is effectively a row-major matrix where rows are samples and columns are features.\n * (Advanced users may note that this is transposed in C++.) \n * @param {Uint8Array} markers - Buffer containing the Gzipped GMT file containing the markers for each pairwise comparison between labels.\n * For `markers`, the GMT format is a tab-separated file with possibly variable numbers of fields for each line.\n * Each line corresponds to a pairwise comparison between labels, defined by the first two fields.\n * The remaining fields should contain indices of marker features (referring to columns of `matrix`) that are upregulated in the first label when compared to the second.\n * Markers should be sorted in order of decreasing strength.\n * @param {Uint8Array} labels - Buffer containing the Gzipped text file containing the label for each sample.\n * Each line should contain an integer representing a particular label, from `[0, N)` where `N` is the number of unique labels.\n * The number of lines should be equal to the number of rows in `matrix`.\n * The actual names of the labels are usually held elsewhere.\n * \n * @return {LoadLabelledReferenceResults} Object containing the reference dataset.\n */\nexport function loadLabelledReferenceFromBuffers(ranks, markers, labels) {\n    var output;\n    var matbuf;\n    var markbuf;\n    var labbuf;\n\n    try {\n        matbuf = utils.wasmifyArray(ranks, \"Uint8WasmArray\");\n        markbuf = utils.wasmifyArray(markers, \"Uint8WasmArray\");\n        labbuf = utils.wasmifyArray(labels, \"Uint8WasmArray\");\n        output = gc.call(\n            module => module.load_singlepp_reference(labbuf.offset, labbuf.length, markbuf.offset, markbuf.length, matbuf.offset, matbuf.length),\n            LoadLabelledReferenceResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(markbuf);\n        utils.free(labbuf);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around a built labelled reference dataset on the Wasm heap, typically produced by {@linkcode buildLabelledReference}.\n * @hideconstructor\n */\nclass BuildLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // internal use only.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of shared features between the test and reference datasets.\n     */\n    sharedFeatures() {\n        return this.#reference.shared_features();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\nfunction register_features(features, id_array) {\n    let registry_contents = new Map;\n\n    // All features in the data are guaranteed to get the a unique ID,\n    // but only non-null and non-duplicated (or the first of a duplicate set)\n    // are actually registered.\n    for (var i = 0; i < features.length; i++) {\n        let id = features[i];\n        if (id !== null) {\n            if (!registry_contents.has(id)) {\n                registry_contents.set(id, i);\n            }\n        }\n        id_array[i] = i;\n    }\n\n    return { contents: registry_contents, counter: features.length };\n}\n\nfunction convert_features(features, registry, id_array) {  \n    let used = new Set;\n    let set = (id, index) => {\n        let found = registry.contents.get(id);\n        if (typeof found !== \"undefined\") {\n            if (!used.has(found)) { // if entries of 'features' match to the same ID, only the first entry gets to match to the ID.\n                id_array[index] = found;\n                used.add(found);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    let counter = registry.counter;\n    for (var i = 0; i < features.length; i++) {\n        let y = features[i];\n        let found = false;\n\n        if (y !== null) {\n            if (y instanceof Array) {\n                for (const z of y) {\n                    if (set(z, i)) { // if an entry of 'features' has multiple names, the first matching name wins.\n                        found = true;\n                        break;\n                    }\n                }\n            } else {\n                found = set(y, i);\n            }\n        }\n\n        // If something isn't found, they get a unique ID.\n        if (!found) {\n            id_array[i] = counter;\n            ++counter;\n        }\n    }\n\n    return;\n}\n\n/**\n * Build the reference dataset for annotation.\n * The build process involves harmonizing the identities of the features available in the test dataset compared to the reference.\n * Specifically, a feature must be present in both datasets in order to be retained. \n * Of those features in the intersection, only the `top` markers from each pairwise comparison are ultimately used for classification.\n *\n * Needless to say, `features` should match up to the rows of the {@linkplain ScranMatrix} that is actually used for annotation in {@linkcode labelCells}.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * If any identifiers are duplicated, only the first occurrence is used and the rest are ignored.\n * @param {LoadLabelledReferenceResults} loaded - A reference dataset, typically loaded with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - An array of feature identifiers (usually strings) of length equal to the number of features in `reference`.\n * Each entry may also be an array of synonymous identifiers, in which case the first identifier that matches to an entry of `features` is used.\n * Contents of `referenceFeatures` are expected to exhibit some overlap with identifiers in `features`.\n * Any `null` entries are considered to be incomparable.\n * If multiple entries of `referenceFeatures` match to the same feature in `features`, only the first matching entry is used and the rest are ignored.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.top=20] - Number of top marker features to use.\n * These features are taken from each pairwise comparison between labels.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildLabelledReferenceResults} Object containing the built reference dataset.\n */\nexport function buildLabelledReference(features, loaded, referenceFeatures, { top = 20, numberOfThreads = null } = {}) {\n    var mat_id_buffer;\n    var ref_id_buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var nfeat = features.length;\n        mat_id_buffer = utils.createInt32WasmArray(nfeat);\n        ref_id_buffer = utils.createInt32WasmArray(loaded.numberOfFeatures());\n        if (referenceFeatures.length != ref_id_buffer.length) {\n            throw new Error(\"length of 'referenceFeatures' should be equal to the number of features in 'reference'\");\n        }\n\n        let registry = register_features(features, mat_id_buffer.array());\n        convert_features(referenceFeatures, registry, ref_id_buffer.array());\n\n        output = gc.call(\n            module => module.build_singlepp_reference(nfeat, mat_id_buffer.offset, loaded.reference, ref_id_buffer.offset, top, nthreads),\n            BuildLabelledReferenceResults\n        );\n\n        output.expectedNumberOfFeatures = nfeat;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(mat_id_buffer);\n        utils.free(ref_id_buffer);\n    }\n\n    return output;\n}\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around the cell labelling results on the Wasm heap, typically produced by {@linkcode labelCells}.\n * @hideconstructor\n */\nclass LabelCellsResults {\n    #id;\n    #results;\n    #cell_buffer;\n    #label_buffer;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of labels used in {@linkcode labelCells}.\n     */\n    numberOfLabels() {\n        return this.#results.num_labels();\n    }\n\n    /**\n     * @return {number} Number of cells that were labelled.\n     */\n    numberOfCells() {\n        return this.#results.num_samples();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Int32Array|Int32WasmArray} Array of length equal to the number of cells,\n     * containing the index of the best label for each cell.\n     */\n    predictedLabels({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.get_best(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the cell of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfLabels numberOfLabels}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores for this cell across all labels.\n     * If `buffer` is supplied, it is used as the return value.\n     */\n    scoresForCell(i, { copy = true, buffer = null } = {}) {\n        if (buffer == null) {\n            if (typeof this.#cell_buffer == \"undefined\") {\n                this.#cell_buffer = utils.createFloat64WasmArray(this.#results.num_labels());\n            }\n            this.#results.get_scores_for_sample(i, this.#cell_buffer.offset);\n            return utils.possibleCopy(this.#cell_buffer.array(), copy);\n        } else {\n            if (buffer.length !== this.#results.num_labels()) {\n                throw new Error(\"length of 'buffer' should equal the number of labels\");\n            }\n            this.#results.get_scores_for_sample(i, buffer.offset);\n            return buffer;\n        }\n    }\n\n    /**\n     * @param {number} i - Index of the label of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfCells numberOfCells}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores across all cells for this label.\n     * If `buffer` is supplied, it is used as the return value.\n     */\n    scoresForLabel(i, { copy = true, buffer = null } = {}) {\n        if (buffer == null) {\n            if (typeof this.#label_buffer == \"undefined\") {\n                this.#label_buffer = utils.createFloat64WasmArray(this.#results.num_samples());\n            }\n            this.#results.get_scores_for_label(i, this.#label_buffer.offset);\n            return utils.possibleCopy(this.#label_buffer.array(), copy);\n        } else {\n            if (buffer.length !== this.#results.num_samples()) {\n                throw new Error(\"length of 'buffer' should equal the number of cells\");\n            }\n            this.#results.get_scores_for_label(i, buffer.offset);\n            return utils.possibleCopy(this.#label_buffer.array(), copy);\n        }\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of cells,\n     * containing the difference in scores between the best and second-best label during fine-tuning.\n     */\n    fineTuningDelta({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.get_delta(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n\n            utils.free(this.#label_buffer);\n            utils.free(this.#cell_buffer);\n        }\n    }\n}\n\nfunction label_cells(x, expectedNumberOfFeatures, numberOfFeatures, numberOfCells, FUN, msg) {\n    var output = null;\n    var matbuf;\n    var tempmat;\n\n    try {\n        let target;\n        if (x instanceof ScranMatrix) {\n            target = x.matrix;\n        } else if (x instanceof wa.Float64WasmArray) {\n            tempmat = init.initializeDenseMatrixFromDenseArray(numberOfFeatures, numberOfCells, x, { forceInteger: false });\n            target = tempmat.matrix;\n        } else {\n            throw new Error(\"unknown type for 'x'\");\n        }\n\n        if (target.nrow() != expectedNumberOfFeatures) {\n            throw new Error(\"number of rows in 'x' should be equal to length of 'features' used to build '\" + msg + \"'\");\n        }\n\n        output = FUN(target);\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(tempmat);\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {BuildLabelledReferenceResults} reference - A built reference dataset, typically generated by {@linkcode buildLabelledReference}.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {LabelCellsResults} Labelling results for each cell in `x`.\n */\nexport function labelCells(x, reference, { numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    let FUN = (target, ptr) => {\n        return gc.call(module => module.run_singlepp(target, reference.reference, quantile, nthreads), LabelCellsResults);\n    };\n    return label_cells(x, reference.expectedNumberOfFeatures, numberOfFeatures, numberOfCells, FUN, \"reference\");\n}\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around integrated reference datasets on the Wasm heap, typically produced by {@linkcode integrateLabelledReferences}.\n * @hideconstructor\n */\nclass IntegrateLabelledReferencesResults {\n    #id;\n    #integrated;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#integrated = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get integrated() {\n        return this.#integrated;\n    }\n\n    /**\n     * @return {number} Number of reference datasets.\n     */\n    numberOfReferences() {\n        return this.#integrated.num_references();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#integrated !== null) {\n            gc.release(this.#id);\n            this.#integrated = null;\n        }\n    }\n}\n\n/**\n * Integrate multiple reference datasets.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain a single identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * If any entries are duplicated, only the first occurrence is used and the rest are ignored.\n * @param {Array} loaded - Array of {@linkplain LabelledReference} objects, typically created with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - Array of length equal to `loaded`, \n * containing arrays of feature identifiers (usually strings) of length equal to the number of features the corresponding entry of `loaded`.\n * Each entry may also be an array of synonymous identifiers, in which case the first identifier that matches to an entry of `features` is used.\n * Contents of `referenceFeatures` are expected to exhibit some overlap with identifiers in `features`.\n * Any `null` entries are considered to be incomparable.\n * If multiple entries of `referenceFeatures` match to the same feature in `features`, only the first matching entry is used and the rest are ignored.\n * @param {Array} reference - Array of {@linkplain BuildLabelledReferenceResults} objects, typically generated by calling {@linkcode buildLabelledReference} \n * on the same `features` and the corresponding entries of `loaded` and `referenceFeatures`.\n * This should have length equal to that of `loaded`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {IntegrateLabelledReferencesResults} Object containing the integrated references.\n */\nexport function integrateLabelledReferences(features, loaded, referenceFeatures, built, { numberOfThreads = null } = {}) {\n    let id_arr;\n    let loaded_arr2;\n    let ref_arr2;\n    let built_arr2;\n    let output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    // Checking the inputs.\n    let nrefs = loaded.length;\n    if (referenceFeatures.length != nrefs) {\n        throw new Error(\"'loaded' and 'referenceFeatures' should be of the same length\");\n    }\n    if (built.length != nrefs) {\n        throw new Error(\"'loaded' and 'built' should be of the same length\");\n    }\n    for (var i = 0; i < nrefs; i++) {\n        if (loaded[i].numberOfFeatures() != referenceFeatures[i].length) {\n            throw new Error(\"length of each 'referenceFeatures' should be equal to the number of features in the corresponding 'loaded'\");\n        }\n    }\n\n    let ref_arr = new Array(nrefs);\n    try {\n        id_arr = utils.createInt32WasmArray(features.length);\n        let registry = register_features(features, id_arr.array());\n\n        loaded_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let la2 = loaded_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            la2[i] = BigInt(loaded[i].reference.$$.ptr);\n        }\n\n        ref_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ra2 = ref_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            let current = referenceFeatures[i];\n            ref_arr[i] = utils.createInt32WasmArray(current.length);\n            convert_features(current, registry, ref_arr[i].array());\n            ra2[i] = BigInt(ref_arr[i].offset);\n        }\n\n        built_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ba2 = built_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            ba2[i] = BigInt(built[i].reference.$$.ptr);\n        }\n        \n        output = gc.call(\n            module => module.integrate_singlepp_references(\n                features.length,\n                id_arr.offset,\n                nrefs,\n                loaded_arr2.offset,\n                ref_arr2.offset,\n                built_arr2.offset,\n                nthreads\n            ),\n            IntegrateLabelledReferencesResults\n        );\n\n        output.expectedNumberOfFeatures = features.length;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(id_arr);\n        utils.free(loaded_arr2);\n        utils.free(built_arr2);\n        utils.free(ref_arr2);\n        for (const x of ref_arr) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around the integrated cell labelling results on the Wasm heap, typically produced by {@linkcode labelCells}.\n * @hideconstructor\n */\nclass IntegrateCellLabelsResults {\n    #results;\n\n    constructor(raw) {\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of labels used in {@linkcode integrateCellLabels}.\n     */\n    numberOfReferences() {\n        return this.#results.numberOfLabels();\n    }\n\n    /**\n     * @return {number} Number of cells that were labelled.\n     */\n    numberOfCells() {\n        return this.#results.numberOfCells();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Int32Array|Int32WasmArray} Array of length equal to the number of cells,\n     * containing the index of the best reference for each cell.\n     */\n    predictedReferences({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.predictedLabels(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the cell of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfLabels numberOfLabels}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores for this cell across all references.\n     * If `buffer` is supplied, it is used as the return value.\n     */\n    scoresForCell(i, { copy = true, buffer = null } = {}) {\n        return this.#results.scoresForCell(i, { copy, buffer });\n    }\n\n    /**\n     * @param {number} i - Index of the reference of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfCells numberOfCells}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores across all cells for this label.\n     * If `buffer` is supplied, it is used as the return value.\n     */\n    scoresForReference(i, { copy = true, buffer = null } = {}) {\n        return this.#results.scoresForLabel(i, { copy, buffer });\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of cells,\n     * containing the difference in scores between the best and second-best reference during fine-tuning.\n     */\n    fineTuningDelta({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.fineTuningDelta(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            this.#results.free();\n            this.#results = null;\n        }\n    }\n}\n\n/**\n * Integrate cell labels across multiple reference datasets.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {IntegratedLabelledReferences} integrated - An integrated set of reference datasets, typically generated by {@linkcode integrateLabelledReferences}.\n * @param {Array} assigned - An array of length equal to the number of references in `integrated`.\n * This should contain the result of classification of `x` with each individual reference via {@linkcode labelCells}.\n * Each element should be a {@linkplain LabelCells} object; or an Array, TypedArray or Int32WasmArray of length equal to the number of cells in `x`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {LabelCellsResults} Integrated labelling results for each cell in `x`.\n */\nexport function integrateCellLabels(x, assigned, integrated, { numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) { \n    let nrefs = integrated.numberOfReferences();\n    if (assigned.length != nrefs) {\n        throw new Error(\"length of 'assigned' should be equal to the number of references in 'integrated'\");\n    }\n\n    let output;\n    let aptrs;\n    let assigned_arrs = new Array(nrefs);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        aptrs = utils.createBigUint64WasmArray(nrefs);\n        let aptrs_arr = aptrs.array();\n        for (var i = 0; i < assigned.length; i++) {\n            let current = assigned[i];\n\n            if (current instanceof LabelCellsResults) {\n                current = current.predictedLabels({ copy: \"view\" });\n            }\n\n            let fail = false;\n            if (x instanceof ScranMatrix) {\n                if (current.length != x.numberOfColumns()) {\n                    fail = true;\n                }\n            } else if (current.length != numberOfCells) {\n                fail = true;\n            }\n            if (fail) {\n                throw new Error(\"length of each element in 'assigned' should be equal to number of columns in 'x'\");\n            }\n\n            assigned_arrs[i] = utils.wasmifyArray(current, \"Int32WasmArray\");\n            aptrs_arr[i] = BigInt(assigned_arrs[i].offset);\n        }\n    \n        let FUN = (target, ptr) => {\n            return gc.call(module => module.integrate_singlepp(target, aptrs_arr.offset, integrated.integrated, quantile, nthreads), LabelCellsResults);\n        };\n        output = label_cells(x, integrated.expectedNumberOfFeatures, numberOfFeatures, numberOfCells, FUN, \"integrated\");\n\n    } finally{\n        utils.free(aptrs);\n        for (const x of assigned_arrs) {\n            utils.free(x);\n        }\n    }\n\n    return new IntegrateCellLabelsResults(output);\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Compute log-transformed normalized expression values.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.sizeFactors=null] - Array of positive numbers containing the size factor for each cell in `x`.\n * This should have length equal to the number of columns in `x`.\n * If `null`, size factors are computed from the column sums of `x`.\n * @param {boolean} [options.center=true] - Whether to center the size factors so that the normalized expression values are comparable in magnitude to the input counts.\n * Set this to `false` if `sizeFactors` are provided and already centered, e.g., with {@linkcode centerSizeFactors}.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to adjust the scaling of cells in different blocks, to avoid excessive up-scaling of low-coverage blocks.\n *\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * This option is ignored if `center = false`, in which case it is assumed that scaling has already been provided in the input `sizeFactors`.\n * @param {boolean} [options.allowZeros=false] - Whether size factors of zero should be allowed.\n * If `true`, no scaling normalization is performed for the corresponding cells, under the assumption they are all-zero libraries.\n * If `false`, an error is raised instead.\n *\n * @return {ScranMatrix} A matrix of the same type as `x` containing log-transformed normalized expression values.\n */\nexport function logNormCounts(x, { sizeFactors = null, center = true, block = null, allowZeros = false } = {}) {\n    var sf_data;\n    var block_data;\n    var output;\n\n    try {\n        var sfptr = 0;\n        var use_sf = false;\n\n        if (sizeFactors !== null) {\n            sf_data = utils.wasmifyArray(sizeFactors, \"Float64WasmArray\");\n            if (sf_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'sizeFactors' must be equal to number of columns in 'x'\");\n            }\n            sfptr = sf_data.offset;\n            use_sf = true;\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.log_norm_counts(x.matrix, use_sf, sfptr, use_blocks, bptr, center, allowZeros),\n            x.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(sf_data);\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Center size factors in preparation for log-transformation.\n * This is usually called by {@linkcode logNormCounts} internally, but can also be directly called by users to reconstitute the size factors used in the log-normalized matrix.\n *\n * @param {TypedArray|WasmArray} sizeFactors - Array of non-negative size factors, one per cell.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell, see {@linkcode logNormCounts}.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to that of `sizeFactors`.\n * If `null`, an array is allocated by the function.\n *\n * @return {Float64WasmArray} Array containing the centered size factors.\n * If `buffer` is provided, it is returned directly.\n */\nexport function centerSizeFactors(sizeFactors, { block = null, buffer = null } = {}) {\n    let local_buffer;\n    let block_data;\n\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(sizeFactors.length);\n            buffer = local_buffer;\n        }\n\n        if (buffer !== sizeFactors) {\n            buffer.set(sizeFactors instanceof wa.WasmArray ? sizeFactors.array() : sizeFactors);\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != buffer.length) {\n                throw new Error(\"'block' must be of length equal to that of 'sizeFactors'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        wasm.call(module => module.center_size_factors(buffer.length, buffer.offset, use_blocks, bptr));\n\n    } catch(e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Perform mutual nearest neighbor (MNN) correction on a low-dimensional representation.\n * This is primarily used to remove batch effects.\n *\n * @param {(RunPCAResults|TypedArray|Array|Float64WasmArray)} x - A matrix of low-dimensional results where rows are dimensions and columns are cells.\n * If this is a {@linkplain RunPCAResults} object, the PCs are automatically extracted.\n * Otherwise, the matrix should be provided as an array in column-major form, with specification of `numberOfDims` and `numberOfCells`.\n * @param {(Int32WasmArray|Array|TypedArray)} block - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform normalization within each block.\n * @param {object} [options={}] - Further optional parameters.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer of length equal to the product of the number of cells and dimensions,\n * to be used to store the corrected coordinates for each cell.\n * If `null`, this is allocated and returned by the function.\n * @param {?number} [options.numberOfDims=null] - Number of dimensions in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {?number} [options.numberOfCells=null] - Number of cells in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {number} [options.k=15] - Number of neighbors to use in the MNN search. \n * @param {number} [options.numberOfMADs=3] - Number of MADs to use to define the threshold on the distances to the neighbors,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustIterations=2] - Number of robustness iterations to use for computing the center of mass,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustTrim=0.25] - Proportion of furthest observations to remove during robustness iterations, \n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {string} [options.referencePolicy=\"max-rss\"] - What policy to use to choose the first reference batch.\n * This can be the largest batch (`\"max-size\"`), the most variable batch (`\"max-variance\"`), the batch with the highest RSS (`\"max-rss\"`) or batch 0 in `block` (`\"input\"`).\n * @param {boolean} [options.approximate=true] - Whether to perform an approximate nearest neighbor search.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to `x`, containing the batch-corrected low-dimensional coordinates for all cells.\n * Values are organized using the column-major layout.\n * This is equal to `buffer` if provided.\n */\nexport function mnnCorrect(x, block, { \n    buffer = null, \n    numberOfDims = null,\n    numberOfCells = null,\n    k = 15,\n    numberOfMADs = 3, \n    robustIterations = 2, \n    robustTrim = 0.25,\n    referencePolicy = \"max-rss\",\n    approximate = true,\n    numberOfThreads = null\n} = {}) {\n\n    let local_buffer;\n    let x_data;\n    let block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            x = x.principalComponents({ copy: \"view\" });\n        } else {\n            if (numberOfDims === null || numberOfCells === null || numberOfDims * numberOfCells !== x.length) {\n                throw new Error(\"length of 'x' must be equal to the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n            x_data = utils.wasmifyArray(x, \"Float64WasmArray\");\n            x = x_data;\n        }\n\n        if (buffer == null) {\n            local_buffer = utils.createFloat64WasmArray(numberOfCells * numberOfDims);\n            buffer = local_buffer;\n        } else if (buffer.length !== x.length) {\n            throw new Error(\"length of 'buffer' must be equal to the product of the number of dimensions and cells\");\n        }\n\n        block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n        if (block_data.length != numberOfCells) {\n            throw new Error(\"'block' must be of length equal to the number of cells in 'x'\");\n        }\n\n        wasm.call(module => module.mnn_correct(\n            numberOfDims, \n            numberOfCells,\n            x.offset,\n            block_data.offset,\n            buffer.offset,\n            k,\n            numberOfMADs,\n            robustIterations,\n            robustTrim,\n            referencePolicy,\n            approximate,\n            nthreads\n        ));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n        \n    } finally {\n        utils.free(x_data);\n    }\n\n    return buffer; \n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper for the variance modelling results, produced by {@linkcode modelGeneVar}.\n * @hideconstructor\n */\nexport class ModelGeneVarResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledVariances;\n    #filledFitted;\n    #filledResiduals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMeans = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledVariances = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledFitted = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledResiduals = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n\n        return;\n    }\n\n    #extract(block, copy, fillable, fillcheck, method) {\n        let fillindex = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            fillindex = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck[fillindex], \n            () => { fillcheck[fillindex] = true }, \n            COPY => utils.possibleCopy(this.#results[method](block), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the variance of log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    variances({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledVariances, \"variances\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the fitted value of the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    fitted({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledFitted, \"fitted\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the residuals from the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    residuals({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledResiduals, \"residuals\");\n    }\n\n    /**\n     * @return {number} Number of blocks used.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Model the mean-variance trend across genes.\n *\n * @param {ScranMatrix} x - The normalized log-expression matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to fit the mean-variance trend within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {number} [options.span=0.3] - Span to use for the LOWESS trend fitting.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ModelGeneVarResults} Object containing the variance modelling results.\n */\nexport function modelGeneVar(x, { block = null, span = 0.3, numberOfThreads = null } = {}) {\n    var block_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.model_gene_var(x.matrix, use_blocks, bptr, span, nthreads),\n            ModelGeneVarResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Create an empty {@linkplain ModelGeneVarResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode chooseHVGs} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n *\n * @return {ModelGeneVarResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyModelGeneVarResults(numberOfGenes, numberOfBlocks) {\n    return gc.call(\n        module => new module.ModelGeneVar_Results(numberOfGenes, numberOfBlocks),\n        ModelGeneVarResults,\n        /* filled = */ false\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the ADT-based metrics allocated on the Wasm heap, typically produced by {@linkcode computePerCellAdtQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellAdtQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total ADT count for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected ADT features for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {?boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count in the ADT subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute the per-cell QC metrics from an ADT count matrix.\n *\n * @param {ScranMatrix} x - The ADT count matrix.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellAdtQcMetricsResults} Object containing the ADT-based QC metrics.\n */\nexport function perCellAdtQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_adt_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellAdtQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellAdtQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode computePerCellAdtQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellAdtQcMetricsResults} Object with allocated memory but no actual values.\n */\nexport function emptyPerCellAdtQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellAdtQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellAdtQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \n\n/**\n * Wrapper for the CRISPR-based metrics allocated on the Wasm heap, produced by {@linkcode perCellCrisprQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellCrisprQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledMaxProportions;\n    #filledMaxIndex;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledMaxProportions = filled;\n        this.#filledMaxIndex = filled;\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY),\n            \"detected\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxProportions({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxProportions, \n            () => { this.#filledMaxProportions = true }, \n            COPY => utils.possibleCopy(this.#results.max_proportion(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the index of the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxIndex({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxIndex, \n            () => { this.#filledMaxIndex = true }, \n            COPY => utils.possibleCopy(this.#results.max_index(), COPY),\n            \"maxIndex\"\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the CRISPR guide count matrix.\n *\n * @param {ScranMatrix} x - The count matrix for CRISPR guides.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellCrisprQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellCrisprQcMetrics(x, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.per_cell_crispr_qc_metrics(x.matrix, nthreads),\n        PerCellCrisprQcMetricsResults\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellCrisprQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestCrisprQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n *\n * @return {PerCellCrisprQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellCrisprQcMetricsResults(numberOfCells) {\n    return gc.call(\n        module => new module.PerCellCrisprQcMetrics_Results(numberOfCells),\n        PerCellCrisprQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the RNA-based metrics allocated on the Wasm heap, produced by {@linkcode perCellRnaQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellRnaQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the RNA count matrix.\n *\n * @param {ScranMatrix} x - The RNA count matrix for genes.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellRnaQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellRnaQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n     return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_rna_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellRnaQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellRnaQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestRnaQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellRnaQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellRnaQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellRnaQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellRnaQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import { clusterKmeans } from \"./clusterKmeans.js\";\nimport { logNormCounts } from \"./logNormCounts.js\";\nimport { groupedSizeFactors } from \"./groupedSizeFactors.js\";\nimport { runPCA } from \"./runPCA.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Quickly compute size factors for an ADT count matrix.\n * This generates k-means clusters from a matrix of PCs before calling {@linkcode groupedSizeFactors}.\n * The aim is to account for composition biases that are common in ADT-based data, while avoiding problems with per-cell sparsity.\n *\n * @param {ScranMatrix} x - An ADT count matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfClusters=20] - Number of clusters to create.\n * More clusters improves the accuracy of the size factors at the cost of precision.\n * @param {number} [options.numberOfPCs=25] - Number of PCs to use.\n * More PCs captures more biological signal at the cost of increasing noise.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.totals=null] - Array containing the total count for each column in `x`, to speed up the initial normalization.\n * If `null`, this is computed from `x`.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Blocking level for each column in `x`, see {@linkcode logNormCounts} and {@linkcode runPCA}.\n * For PCA, this is used to equalize the contribution of blocks of differing size.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to the number of columns in `x`.\n * If `null`, an array is allocated by the function.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * \n * @return {Float64WasmArray} Per-cell size factors for each column of `x`.\n *\n * If `buffer` is supplied, it is directly used as the return value.\n */\nexport function quickAdtSizeFactors(x, { numberOfClusters = 20, numberOfPCs = 25, totals = null, block = null, buffer = null, numberOfThreads = null } = {}) {\n    let norm, pcs;\n    try {\n        norm = logNormCounts(x, { sizeFactors: totals, block: block });\n        pcs = runPCA(norm, { numberOfPCs: Math.min(norm.numberOfRows() - 1, numberOfPCs), numberOfThreads: numberOfThreads, block: block, blockMethod: \"weight\" });\n    } finally {\n        utils.free(norm);\n    }\n\n    let clust;\n    try {\n        clust = clusterKmeans(pcs, numberOfClusters, { numberOfThreads: numberOfThreads });\n    } finally {\n        utils.free(pcs);\n    }\n\n    let local_buffer;\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' should be equal to the number of columns in 'x'\");\n        }\n        groupedSizeFactors(x, clust.clusters({ copy: \"view\" }), { buffer: buffer, numberOfThreads: numberOfThreads });\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(clust);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport * as packer from \"./internal/pack_strings.js\";\n\n/**\n * Base class for RDS objects.\n * @hideconstructor\n */\nexport class RdsObject {\n    constructor(id, raw, par) {\n        this.id = id;\n        this.object = raw;\n        this.parent = par;\n    }\n\n    /**\n     * @return {string} Type of the object.\n     */\n    type() {\n        return this.object.type();\n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     */\n    free() {\n        if (this.object !== null) {\n            gc.release(this.id);\n            this.object = null;\n        }\n    }\n}\n\n/**\n * Vector-like R object.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsVector extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return{number} Length of the vector.\n     */\n    length() {\n        return this.object.size();\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * Integer vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsIntegerVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the integer vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Boolean (i.e., boolean) vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsBooleanVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the logical vector.\n     * Zero values are falsey and values of 1 are truthy.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Double-precision vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsDoubleVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Values of the double vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * String vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsStringVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return {Array} Values of the string vector.\n     */\n    values() {\n        return wasm.call(mod => {\n            this.object.fill_string_vector();\n            let buf = this.object.string_vector_buffer();\n            let len = this.object.string_vector_length();\n            return packer.unpack_strings(buf, len);\n        });\n    }\n}\n\n/**\n * Generic vector from R, typically known as a \"list\".\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsGenericVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {number} index - Index of the list element of interest.\n     * @return {RdsObject} Value of the list element.\n     */\n    load(index) {\n        return dispatch(mod => this.object.load_list_element(index), this.parent);\n    }\n}\n\n/**\n * S4 object from R, containing slot data in its attributes.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsS4Object extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * Name of the R class.\n     */\n    className() {\n        return wasm.call(mod => this.object.class_name());\n    }\n\n    /**\n     * Name of the package that defines the class.\n     */\n    packageName() {\n        return wasm.call(mod => this.object.package_name());\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * NULL type in R.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsNull extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n};\n\nfunction dispatch(fun, par) {\n    let obj = wasm.call(fun);\n\n    let tt = null;\n    try {\n        tt = obj.type();\n    } catch (e) {\n        obj.delete();\n        throw e;\n    }\n\n    // Remaining steps until gc.call() should be no-throw!\n    let cons;\n    if (tt == \"integer\") {\n        cons = RdsIntegerVector;\n    } else if (tt == \"double\") {\n        cons = RdsDoubleVector;\n    } else if (tt == \"boolean\") {\n        cons = RdsBooleanVector;\n    } else if (tt == \"string\") {\n        cons = RdsStringVector;\n    } else if (tt == \"vector\") {\n        cons = RdsGenericVector;\n    } else if (tt == \"S4\") {\n        cons = RdsS4Object;\n    } else if (tt == \"null\") {\n        cons = RdsNull;\n    } else {\n        cons = RdsObject;\n    }\n\n    return gc.call(mod => obj, cons, par);\n}\n\n/**\n * Details of the RDS file.\n * @hideconstructor\n */\nexport class RdsDetails {\n    #id;\n    #obj;\n\n    constructor(id, obj) {\n        this.#id = id;\n        this.#obj = obj;\n    }\n\n    /**\n     * @return {number} Version of the RDS format. This should be 3.\n     */\n    formatVersion() {\n        return this.#obj.format_version();\n    }\n\n    /**\n     * @return {string} The R version used to create the file.\n     */\n    writerVersion() {\n        let info = this.#obj.writer_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {string} The minimum R version that can read the file.\n     */\n    readerVersion() {\n        let info = this.#obj.reader_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {RdsObject} Interface into the underlying R object.\n     */\n    value() {\n        return dispatch(mod => this.#obj.load(), this); \n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     * Doing so will invalidate all {@linkplain RdsObject} instances derived from this object, \n     * directly via {@linkcode RdsDetails#load} or indirectly \n     * (e.g., from further {@linkcode RdsVector#attribute RdsVector.attribute} or {@linkcode RdsGenericVector#load RdsGenericVector.load} calls).\n     */\n    free() {\n        if (this.#obj !== null) {\n            gc.release(this.#id);\n            this.#obj = null;\n        }\n    }\n}\n\n/**\n * Read the contents of an RDS file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of an RDS file.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n *\n * @return {RdsDetails} Details of the file.\n */\nexport function readRds(x) {\n    let tmp;\n    let output;\n\n    try {\n        if (typeof x == \"string\") {\n            output = gc.call(module => module.parse_rds_from_file(x), RdsDetails)\n        } else {\n            tmp = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(module => module.parse_rds_from_buffer(tmp.offset, tmp.length), RdsDetails);\n        }\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/** \n * Wrapper for the PCA results on the Wasm heap, typically created by {@linkcode runPCA}.\n * @hideconstructor\n */\nexport class RunPCAResults {\n    #id;\n    #results;\n\n    #filledComponents;\n    #filledVariances;\n    #filledTotalVariance;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledComponents = filled;\n        this.#filledVariances = filled;\n        this.#filledTotalVariance = filled;\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64Wasmarray)} Array containing the principal components for all cells.\n     * This should be treated as a column-major array where the rows are the PCs and columns are the cells.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    principalComponents({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledComponents, \n            () => { this.#filledComponents = true }, \n            COPY => utils.possibleCopy(this.#results.pcs(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} total - Total variance in the dataset,\n     * equal to the sum of the variances across all PCs (including those that were not explicitly computed).\n     *\n     * @return Total varaiance in this object is set to `total`.\n     * This is primarily intended for use with {@linkcode emptyRunPCAResults}.\n     */\n    setTotalVariance(total) {\n        if (!this.#filledTotalVariance) {\n            this.#filledTotalVariance = true;\n        }\n        this.#results.set_total_variance(total);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64WasmArray)} Array containing the variance explained for each requested PC.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    varianceExplained({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledVariances, \n            () => { this.#filledVariances = true }, \n            COPY => utils.possibleCopy(this.#results.variance_explained(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} The total variance in the dataset,\n     * typically used with {@linkcode PCAResults#varianceExplained varianceExplained} to compute the proportion of variance explained.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setTotalVariance setTotalVariance}.\n     */\n    totalVariance() {\n        if (!this.#filledTotalVariance) {\n            return null;\n        } else {\n            return this.#results.total_variance();\n        }\n    }\n\n    /**\n     * @return {number} Number of PCs available in these results.\n     */\n    numberOfPCs() {\n        return this.#results.num_pcs();\n    }\n\n    /**\n     * @return {number} Number of cells used to compute these results.\n     */\n    numberOfCells() {\n        // TODO: switch to this.#results.num_cells();\n        return this.principalComponents({ copy: false }).length / this.numberOfPCs();\n\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Run a principal components analysis on the log-expression matrix.\n * This is usually done on a subset of features, and possibly with some kind of blocking on a per-cell batch factor.\n *\n * @param {ScranMatrix} x - The log-normalized expression matrix.\n * @param {object} [options={}] - Optional parameters. \n * @param {?(Uint8WasmArray|Array|TypedArray)} [options.features=null] - Array specifying which features should be retained (e.g., HVGs).\n * This should be of length equal to the number of rows in `x`; elements should be `true` to retain each row.\n * If `null`, all features are retained.\n * @param {number} [options.numberOfPCs=25] - Number of top principal components to compute.\n * @param {boolean} [options.scale=false] - Whether to scale each feature to unit variance.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {string} [options.blockMethod=\"regress\"] - How to modify the PCA for the blocking factor.\n *\n * - `\"regress\"` will regress out the factor, effectively performing a PCA on the residuals.\n * - `\"weight\"` will weight the contribution of each blocking level equally so that larger blocks do not dominate the PCA.\n * - `\"none\"` will ignore any blocking factor, i.e., as if `block = null`.\n *\n * This option is only used if `block` is not `null`.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {RunPCAResults} Object containing the computed PCs.\n */\nexport function runPCA(x, { features = null, numberOfPCs = 25, scale = false, block = null, blockMethod = \"regress\", numberOfThreads = null } = {}) {\n    var feat_data;\n    var block_data;\n    var output;\n\n    utils.matchOptions(\"blockMethod\", blockMethod, [\"none\", \"regress\", \"weight\" ]);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var use_feat = false;\n        var fptr = 0;\n\n        if (features !== null) {\n            feat_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n            if (feat_data.length != x.numberOfRows()) {\n                throw new Error(\"length of 'features' should be equal to number of rows in 'x'\");\n            }\n            use_feat = true;\n            fptr = feat_data.offset;\n        }\n\n        // Avoid asking for more PCs than is possible.\n        // Remember that centering removes one df, so we subtract 1 from the dimensions.\n        numberOfPCs = Math.min(numberOfPCs, x.numberOfRows() - 1, x.numberOfColumns() - 1);\n\n        if (block === null || blockMethod == 'none') {\n            output = gc.call(\n                module => module.run_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, nthreads),\n                RunPCAResults\n            );\n\n        } else {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'block' should be equal to the number of columns in 'x'\");\n            }\n            if (blockMethod == \"regress\") {\n                output = gc.call(\n                    module => module.run_blocked_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else if (blockMethod == \"weight\") {\n                output = gc.call(\n                    module => module.run_multibatch_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else {\n                throw new Error(\"unknown value '\" + blockMethod + \"' for 'blockMethod='\");\n            }\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(feat_data);\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain RunPCAResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode clusterKmeans} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset, usually after QC filtering.\n * @param {number} numberOfPCs - Number of PCs to be computed.\n *\n * @return {RunPCAResults} Object with allocated memory to store the PCs, but no actual values.\n */\nexport function emptyRunPCAResults(numberOfCells, numberOfPCs) {\n    return gc.call(\n        module => new module.RunPCA_Results(numberOfCells, numberOfPCs),\n        RunPCAResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildNeighborSearchIndexResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the t-SNE status object on the Wasm heap, typically created by {@linkcode initializeTSNE}.\n * @hideconstructor\n */\nexport class InitializeTSNEResults {\n    #id;\n    #status;\n    #coordinates;\n\n    constructor(id, raw_status, raw_coordinates) {\n        this.#id = id;\n        this.#status = raw_status;\n        this.#coordinates = raw_coordinates;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get status() {\n        return this.#status;\n    }\n\n    // Internal use only, not documented.\n    get coordinates() {\n        return this.#coordinates;\n    }\n\n    /**\n     * @return {InitializeTSNEResults} A deep copy of this object.\n     */\n    clone() {\n        return gc.call(\n            module => this.#status.deepcopy(), \n            InitializeTSNEResults, \n            this.#coordinates.clone()\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.#status.num_obs();\n    }\n\n    /**\n     * @return {number} Number of iterations processed so far.\n     * This will change with repeated invocations of {@linkcode runTSNE} on this object.\n     */\n    iterations () {\n        return this.#status.iterations();\n    }\n\n    /**\n     * @return {object} Object with `x` and `y` keys.\n     * The corresponding values are Float64Array objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.#coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free() {\n        if (this.#status !== null) {\n            gc.release(this.#id);\n            this.#status = null;\n        }\n        if (this.#coordinates !== null) {\n            this.#coordinates.free();\n            this.#coordinates = null;\n        }\n        return;\n    }\n}\n\n/**\n * @param {number} perplexity - Perplexity to use in the t-SNE algorithm.\n * @return {number} Appropriate number of neighbors to use in the nearest neighbor search.\n */\nexport function perplexityToNeighbors(perplexity) {\n    return wasm.call(module => module.perplexity_to_k(perplexity));\n}\n\n/**\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.perplexity=30] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {boolean} [options.checkMismatch=true] - Whether to check for a mismatch between the perplexity and the number of searched neighbors.\n * Only relevant if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {InitializeTSNEResults} Object containing the initial status of the t-SNE algorithm.\n */\nexport function initializeTSNE(x, { perplexity = 30, checkMismatch = true, numberOfThreads = null } = {}) {\n    var my_neighbors;\n    var raw_coords;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let neighbors;\n\n        if (x instanceof BuildNeighborSearchIndexResults) {\n            let k = perplexityToNeighbors(perplexity);\n            my_neighbors = findNearestNeighbors(x, k, { numberOfThreads: nthreads });\n            neighbors = my_neighbors;\n\n        } else {\n            if (checkMismatch) {\n                let k = perplexityToNeighbors(perplexity);\n                if (k * x.numberOfCells() != x.size()) {\n                    throw new Error(\"number of neighbors in 'x' does not match '3 * perplexity'\");\n                }\n            }\n            neighbors = x;\n        }\n\n        raw_coords = utils.createFloat64WasmArray(2 * neighbors.numberOfCells());\n        wasm.call(module => module.randomize_tsne_start(neighbors.numberOfCells(), raw_coords.offset, 42));\n        output = gc.call(\n            module => module.initialize_tsne(neighbors.results, perplexity, nthreads),\n            InitializeTSNEResults,\n            raw_coords\n        );\n\n    } catch(e) {\n        utils.free(output);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Run the t-SNE algorithm on an initialized {@linkplain InitializeTSNEResults}.\n *\n * @param {InitializeTSNEResults} x A previously initialized status object from {@linkcode initializeTSNE}.\n * This may be passed through {@linkcode runTSNE} any number of times.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.maxIterations=1000] - Maximum number of iterations to perform.\n * This number includes all existing iterations that were already performed in `x` from previous calls to {@linkcode runTSNE}.\n * @param {?number} [options.runTime=null] - Number of milliseconds for which the algorithm is allowed to run before returning.\n * If `null`, no limit is imposed on the runtime.\n *\n * @return The algorithm status in `x` is advanced up to the requested number of iterations,\n * or until the requested run time is exceeded, whichever comes first.\n */\nexport function runTSNE(x, { maxIterations = 1000, runTime = null } = {}) {\n    if (runTime === null) {\n        runTime = -1;\n    }\n    wasm.call(module => module.run_tsne(x.status, runTime, maxIterations, x.coordinates.offset));\n    return;\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { buildNeighborSearchIndex, BuildNeighborSearchIndexResults } from \"./findNearestNeighbors.js\"; \n\n/**\n * Scale embeddings based on the variation between neighboring cells.\n * This aims to equalize the noise across embeddings for the same population of cells across different data modalities,\n * allowing them to be combined into a single embedding for coordinated downstream analyses.\n *\n * @param {Array} embeddings - Array of Float64WasmArrays containing column-major matrices where rows are dimensions and columns are cells.\n * All entries of this array should contain data for the same number and ordering of cells.\n * @param {number} numberOfCells - Number of cells in all embeddings.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.neighbors=20] - Number of neighbors to use for quantifying variation.\n * Larger values provide a more stable calculation but assume larger subpopulations.\n * @param {?Array} [options.indices=null] - Array of {@linkplain BuildNeighborSearchIndexResults} objects, \n * where each entry is constructed from the corresponding entry of `embeddings` (see {@linkcode buildNeighborSearchIndex}).\n * This can be used to avoid redundant calculation of indices if they are already available.\n * @param {?Float64WasmArray} [options.buffer=null] - Array in which to store the combined embedding.\n * This should have length equal to the product of `numberOfCells` and the sum of dimensions of all embeddings.\n * @param {boolean} [options.approximate=true] - Should we construct an approximate search index if `indices` is not supplied?\n * @param {?(Array|TypedArray|Float64WasmArray)} [options.weights=null] - Array of length equal to the number of embeddings, containing a non-enegative relative weight for each embedding.\n * This is used to scale each embedding if non-equal noise is desired in the combined embedding.\n * If `null`, all embeddings receive the same weight.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array containing the combined embeddings in column-major format, i.e., dimensions in rows and cells in columns.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function scaleByNeighbors(embeddings, numberOfCells, { neighbors = 20, indices = null, buffer = null, approximate = true, weights = null, numberOfThreads = null } = {}) {\n    let nembed = embeddings.length;\n    let embed_ptrs, index_ptrs;\n    let holding_ndims;\n    let holding_weights;\n    let local_buffer;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let deletable = [];\n    try {\n        // Fetching the pointers.\n        embed_ptrs = utils.createBigUint64WasmArray(nembed);\n        let embed_arr = embed_ptrs.array();\n        for (var i = 0; i < nembed; i++) {\n            embed_arr[i] = BigInt(embeddings[i].offset);\n        }\n\n        let weight_offset = 0;\n        let use_weights = false;\n        if (weights !== null) {\n            use_weights = true;\n            holding_weights = utils.wasmifyArray(weights, \"Float64WasmArray\");\n            if (holding_weights.length != nembed) {\n                throw new Error(\"length of 'weights' should be equal to the number of embeddings\");\n            }\n            weight_offset = holding_weights.offset;\n        }\n\n        // Allocating output space, if necessary; and then scaling.\n        let allocator = (total_ndim) => {\n            let total_len = total_ndim * numberOfCells;\n            if (buffer === null) {\n                local_buffer = utils.createFloat64WasmArray(total_len);\n                buffer = local_buffer;\n            } else if (total_len !== buffer.length) {\n                throw new Error(\"length of 'buffer' should be equal to the product of 'numberOfCells' and the total number of dimensions\");\n            }\n        }\n\n        if (indices !== null) {\n            if (nembed !== indices.length) {\n                throw new Error(\"'indices' and 'embeddings' should have the same length\");\n            }\n\n            index_ptrs = utils.createBigUint64WasmArray(nembed);\n            let index_arr = index_ptrs.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let index = indices[i];\n                if (numberOfCells != index.numberOfCells()) {\n                    throw new Error(\"each element of 'indices' should have the same number of cells as 'numberOfCells'\");\n                }\n                if (embeddings[i].length != index.numberOfCells() * index.numberOfDims()) {\n                    throw new Error(\"length of arrays in 'embeddings' should equal the length of arrays used to build 'indices'\");\n                }\n\n                index_arr[i] = BigInt(indices[i].index.$$.ptr);\n                total_ndim += indices[i].numberOfDims();\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_indices(\n                numberOfCells, \n                nembed, \n                embed_ptrs.offset, \n                index_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                nthreads\n            ));\n\n        } else {\n            holding_ndims = utils.createInt32WasmArray(nembed);\n            let ndims_arr = holding_ndims.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let n = embeddings[i].length;\n                ndims_arr[i] = Math.floor(n / numberOfCells);\n                if (numberOfCells * ndims_arr[i] !== n) {\n                    throw new Error(\"length of arrays in 'embeddings' should be a multiple of 'numberOfCells'\");\n                }\n                total_ndim += ndims_arr[i];\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_matrices(\n                numberOfCells, \n                nembed, \n                holding_ndims.offset, \n                embed_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                approximate,\n                nthreads\n            ));\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        for (const x of deletable) {\n            x.free();\n        }\n        utils.free(embed_ptrs);\n        utils.free(index_ptrs);\n        utils.free(holding_weights);\n        utils.free(holding_ndims);\n    }\n\n    return buffer;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute per-cell scores for the activity of a feature set.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {Uint8Array|Uint8WasmArray|TypedArray|Array} features - An array of length equal to the number of rows in `x`, indicating which features belong to the set.\n * A non-zero value for any entry indicates that the corresponding row of `x` is part of the feature set.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {boolean} [options.scale=false] - Whether to scale the expression matrix to unit variance for each feature before computing the per-feature weights.\n * Setting to `true` improves robustness (or reduces sensitivity) to the behavior of highly variable features in the set.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {object} Object containing:\n *\n * - `weights`, a Float64Array containing per-gene weights for each feature in the set.\n * - `scores`, a Float64Array containing the per-cell scores for each column of `x`.\n */\nexport function scoreFeatureSet(x, features, { block = null, scale = false, numberOfThreads = null } = {}) {\n    let temp;\n    let output = {};\n    let feature_data, block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        // Setting up the features.\n        if (features.length !== x.numberOfRows()) {\n            throw new Error(\"Uint8Array 'features' must be of length equal to the number of rows in 'x'\");\n        }\n        feature_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n\n        // Setting up the blocks.\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        temp = wasm.call(module => module.score_feature_set(x.matrix, feature_data.offset, use_blocks, bptr, scale, nthreads));\n        output.weights = temp.weights().slice();\n        output.scores = temp.scores().slice();\n\n    } finally {\n        utils.free(block_data);\n        utils.free(feature_data);\n        if (temp) {\n            temp.delete();\n        }\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\n\nfunction checkFillness2(group, summary, fillable, copy, fillcheck, getfun) {\n    return utils.checkFillness(\n        fillable, \n        copy, \n        fillcheck.filled || fillcheck.details[group][summary] || false, \n        () => { fillcheck.details[group][summary] = true }, \n        getfun  \n    );\n}\n\nfunction intifySummary(summary) {\n    if (typeof summary == \"number\") {\n        return summary; // for back-compatibility with numeric summaries.\n    }\n    let output;\n    switch (summary) {\n        case \"minimum\": \n            output = 0;\n            break;\n        case \"mean\": \n            output = 1;\n            break;\n        case \"median\":\n            output = 2;\n            break;\n        case \"maximum\": \n            output = 3;\n            break;\n        case \"min-rank\":\n            output = 4;\n            break;\n        default:\n            throw new Error(\"unknown summary type '\" + summary + \"'\");\n    }\n    return output;\n}\n\n/**\n * Wrapper around the marker scoring results on the Wasm heap, typically produced by {@linkcode scoreMarkers}.\n * @hideconstructor\n */\nexport class ScoreMarkersResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledDetected;\n    #filledCohen;\n    #filledLfc;\n    #filledAuc;\n    #filledDeltaDetected;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        let n = this.numberOfGroups();\n        let b = this.numberOfBlocks();\n\n        function createBlockedStatsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = utils.spawnArray(b + 1, filled);\n                }\n            }\n            return output;\n        }\n\n        this.#filledMeans = createBlockedStatsFilled(filled);\n        this.#filledDetected = createBlockedStatsFilled(filled);\n\n        function createEffectsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = {};\n                }\n            }\n            return output;\n        }\n\n        this.#filledCohen = createEffectsFilled(filled); \n        this.#filledLfc = createEffectsFilled(filled); \n        this.#filledAuc = createEffectsFilled(filled); \n        this.#filledDeltaDetected = createEffectsFilled(filled); \n\n        return;\n    }\n\n    #extractBlockedStat(group, block, copy, fillable, fillcheck, method) {\n        let index = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            index = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck.filled || fillcheck.details[group][index] || false, \n            () => { fillcheck.details[group][index] = true }, \n            COPY => utils.possibleCopy(this.#results[method](group, block), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks used to compute the results.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {number} Number of groups in the results.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the proportion of cells with detectable expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledDetected, \"detected\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the Cohen's d values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized Cohen's d for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    cohen(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledCohen,\n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.cohen(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * AUCs are only computed if `computeAuc = true` in {@linkcode scoreMarkers}.\n     * If `false`, this method will throw an error.\n     *\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the AUCs of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized AUC for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    auc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledAuc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.auc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the log-fold changes of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized log-fold change for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    lfc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledLfc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.lfc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the delta-detected values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized delta-detected for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    deltaDetected(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledDeltaDetected, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.delta_detected(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Score genes as potential markers for each group of cells.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform comparisons within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {number} [options.lfcThreshold=0] - Log-fold change threshold to use for computing Cohen's d and AUC.\n * Large positive values favor markers with large log-fold changes over those with low variance.\n * @param {boolean} [options.computeAuc=true] - Whether to compute the AUCs as an effect size.\n * This can be set to `false` for greater speed and memory efficiency.\n * @param {boolean} [options.computeMedian=false] - Whether to compute the median effect sizes across all pairwise comparisons for each group.\n * This can be used as a more robust/less sensitive alternative to the mean.\n * @param {boolean} [options.computeMaximum=false] - Whether to compute the maximum effect size across all pairwise comparisons for each group.\n * This could be used to find uniquely downregulated genes.\n *\n * @return {ScoreMarkersResults} Object containing the marker scoring results.\n */\nexport function scoreMarkers(x, groups, { block = null, numberOfThreads = null, lfcThreshold = 0, computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    var output;\n    var block_data;\n    var group_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.score_markers(x.matrix, group_data.offset, use_blocks, bptr, lfcThreshold, computeAuc, computeMedian, computeMaximum, nthreads),\n            ScoreMarkersResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(group_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ScoreMarkersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfGroups - Number of groups for which to store marker detection statistics.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.computeAuc=true] - Whether to allocate memory for storing AUCs.\n * @param {boolean} [options.computeMedian=false] - Whether to allocate memory for storing median effect sizes.\n * @param {boolean} [options.computeMaximum=false] - Whether to allocate memory for storing maximum effect sizes.\n *\n * @return {ScoreMarkersResults} Object with memory allocated to store marker statistics, but not containing any actual values.\n */\nexport function emptyScoreMarkersResults(numberOfGenes, numberOfGroups, numberOfBlocks, { computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    return gc.call(\n        module => new module.ScoreMarkers_Results(numberOfGenes, numberOfGroups, numberOfBlocks, computeAuc, computeMedian, computeMaximum),\n        ScoreMarkersResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport { MultiMatrix } from \"./MultiMatrix.js\";\n\n/**\n * Slice a {@linkplain ScranMatrix} by its rows.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Row indices to extract.\n * All indices must be non-negative integers less than `mat.numberOfRows()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A ScranMatrix containing the subset of rows from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetRows(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.row_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Slice a ScranMatrix by its columns.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Column indices to extract.\n * Al indices must be a non-negative integer less than `mat.numberOfColumns()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A new ScranMatrix containing the subset of columns from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetColumns(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.column_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Split a {@linkplain ScranMatrix} by row.\n *\n * @param {ScranMatrix} matrix - A ScranMatrix object.\n * @param {object} split - Object specifying how rows should be split.\n * Each value should be an Array/TypedArray of 0-based row indices.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.singleNull=false] - Whether `null` should be returned if `split` only contains one level and all rows are represented exactly once.\n * This can be used to avoid the creation of a redundant {@linkplain ScranMatrix} object.\n * @param {boolean} [options.createMultiMatrix=false] - Whether the output should be returned as a {@linkplain MultiMatrix}.\n *\n * @return {object|MultiMatrix} Object with the same keys as `split` where each value is a ScranMatrix for the corresponding subset of rows.\n * Alternatively, this is wrapped in a MultiMatrix if `createMultiMatrix = true`.\n */\nexport function splitRows(matrix, split, { singleNull = false, createMultiMatrix = false } = {}) { \n    let output = {};\n    let tkeys = Object.keys(split);\n\n    if (tkeys.length == 1) {\n        let chosen = split[tkeys[0]];\n        let consec = (chosen.length == matrix.numberOfRows());\n        if (consec) {\n            for (var i = 0; i < chosen.length; i++) {\n                if (i != chosen[i]) {\n                    consec = false;\n                    break;\n                }\n            }\n        }\n\n        if (consec) {\n            if (singleNull) {\n                return null;\n            } else {\n                output[tkeys[0]] = matrix.clone();\n                return output;\n            }\n        }\n    }\n\n    let stuff;\n    try {\n        for (const k of tkeys) {\n            output[k] = subsetRows(matrix, split[k]);\n        }\n\n        // Sticking this inside the trycatch, so that\n        // memory is released if the constructor fails. \n        if (createMultiMatrix) {\n            stuff = new MultiMatrix({ store: output });\n        }\n    } catch (e) {\n        for (const v of Object.values(output)) {\n            v.free();\n        }\n        throw e;\n    }\n\n    if (createMultiMatrix) {\n        return stuff;\n    } else {\n        return output;\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellAdtQcMetricsResults } from \"./perCellAdtQcMetrics.js\";\n\n/**\n * Wrapper class for the ADT-based QC filtering results, produced by {@linkcode suggestAdtQcFilters}.\n * @hideconstructor\n */\nexport class SuggestAdtQcFiltersResults {\n    #results;\n    #id;\n\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected ADTs for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the total counts for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestAdtQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics from the ADT count matrix.\n *\n * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {number} [options.minDetectedDrop=0.1] - Minimum relative drop in the number of detected ADTs before a cell is to be considered a low-quality cell.\n * By default, cells must exhibit at least a 10% decrease from the median before filtering is applied.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestAdtQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestAdtQcFilters(metrics, { numberOfMADs = 3, minDetectedDrop = 0.1, block = null } = {}) {\n    if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics, \n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_adt_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs, minDetectedDrop),\n            SuggestAdtQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestAdtQcFiltersResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode filterCells} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestAdtQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestAdtQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestAdtQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestAdtQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellCrisprQcMetricsResults } from \"./perCellCrisprQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestCrisprQcFilters}.\n * @hideconstructor\n */\nexport class SuggestCrisprQcFiltersResults {\n    #id;\n    #results;\n\n    #filledMaxCount;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMaxCount = filled;\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the maximum count in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsMaxCount({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxCount, \n            () => { this.#filledMaxCount = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_max_count(), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestCrisprQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics for CRISPR guide counts.\n *\n * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestCrisprQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestCrisprQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_crispr_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestCrisprQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestCrisprQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestCrisprQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestCrisprQcFiltersResults(numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestCrisprQcFilters_Results(numberOfBlocks),\n        SuggestCrisprQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellRnaQcMetricsResults } from \"./perCellRnaQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestRnaQcFilters}.\n * @hideconstructor\n */\nexport class SuggestRnaQcFiltersResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the sums for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected genes for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the proportions for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestRnaQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics computed from an RNA count matrix.\n *\n * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestRnaQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestRnaQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_rna_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestRnaQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestRnaQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestRnaQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestRnaQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestRnaQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestRnaQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import { buffer, wasmArraySpace, maximumThreads } from \"./wasm.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Helper function to create a Uint8WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Uint8WasmArray} Uint8WasmArray on the **scran.js** Wasm heap.\n */\nexport function createUint8WasmArray(length) {\n    return wa.createUint8WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Int32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Int32WasmArray} Int32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createInt32WasmArray(length) {\n    return wa.createInt32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a BigUint64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {BigUint64WasmArray} BigUint64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createBigUint64WasmArray (length) {\n    return wa.createBigUint64WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float64WasmArray} Float64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat64WasmArray(length) {\n    return wa.createFloat64WasmArray(wasmArraySpace(), length);\n}\n\nexport function wasmifyArray(x, expected) {\n    if (x instanceof wa.WasmArray) {\n        if (expected !== null && expected != x.constructor.className) {\n            throw new Error(\"expected '\" + expected + \"', got '\" + x.constructor.className + \"'\");\n        }\n\n        if (x.space === wasmArraySpace()) {\n            // Creating a view. This ensures that callers can always call\n            // free() on the output of this function without worrying about\n            // whether they are breaking something else that was using 'x'.\n            if (x.owner === null) {\n                return x.view();\n            } else {\n                return x; // it's already a view, so we just pass it along.\n            }\n        } else {\n            // If it's a different space, then we have to make a copy.\n            return x.clone(wasmArraySpace());\n        }\n    }\n\n    let y = null;\n    if (expected !== null) {\n        y = wa.convertToWasmArray(wasmArraySpace(), x, wa.stringToClass(expected));\n    } else {\n        y = wa.convertToWasmArray(wasmArraySpace(), x);\n    }\n\n    return y;\n}\n\nexport function chooseNumberOfThreads(threads) {\n    if (threads == null) {\n        return maximumThreads();\n    } else {\n        return threads;\n    }\n}\n\n/**\n * Try to free a **scran.js** object's memory (typically involving some memory allocated on the Wasm heap) by calling its `free` method.\n *\n * @param {?object} x - Instance of a **scran.js** or **wasmarrays.js** class to be freed.\n * May also be `null` or undefined.\n * \n * @return The output of `x.free()` - unless `x` is undefined or `null`, in which case nothing is performed.\n */\nexport function free(x) {\n    if (typeof x == \"undefined\" || x == null) {\n        return;\n    }\n    return x.free();\n}\n\nexport function extractXY(ncells, coordinates) {\n    let x = new Float64Array(ncells);\n    let y = new Float64Array(ncells);\n\n    for (var i = 0; i < ncells; i++) {\n        x[i] = coordinates[2 * i];\n        y[i] = coordinates[2 * i + 1];\n    }\n\n    return { \"x\": x, \"y\": y };\n}\n\n/**\n * Possibly copy an array out of the Wasm heap, avoiding potential invalidation at the cost of some efficiency.\n *\n * @param {TypedArray} x - Array of data, possibly on the **scran.js** Wasm heap.\n * @param {(string|boolean)} copy - Copying mode to use.\n *\n * @return {TypedArray|WasmArray} The return value depends on the value of `copy`:\n * - If `copy = true`, a TypedArray copy of `x` is created with `x.slice()` and returned.\n *   This is a good default to avoid invalidation of TypedArray views on the heap upon reallocation, by creating a Javascript-owned copy for downstream use.\n * - If `copy = false`, `x` is returned directly.\n *   This avoids making any copy but runs the risk of invalidation when the Wasm heap is resized;\n *   it should only be used when no further Wasm allocations are performed within the lifetime of `x`.\n * - If `copy = \"view\"`, a WasmArray view is created from `x` and returned.\n *   This avoids any copy and is robust to invalidation but requires an extra `WasmArray.array()` call to create a TypedArray.\n */\nexport function possibleCopy(x, copy) {\n    if (copy === \"view\") {\n        if (x.buffer !== buffer()) {\n            throw new Error(\"cannot use copy = \\\"view\\\" for non-Wasm TypedArrays\");\n        }\n\n        let view_class = x.constructor.name.replace(\"Array\", \"WasmArray\");\n\n        // This function should only be used for objects generated in the\n        // buffer owned by scran.js, so we can assume that x's space is the\n        // same as that of the wasmArraySpace().\n        return wa.createWasmArrayView(wasmArraySpace(), x.length, x.byteOffset, wa.stringToClass(view_class));\n\n    } else if (copy) {\n        return x.slice();\n\n    } else {\n        return x;\n    }\n}\n\nexport function matchOptions(name, value, choices) {\n    if (choices.indexOf(value) == -1) {\n        throw new Error(\"'\" + name + \"=' should be one of '\" + choices.join(\"', '\") + \"'\");\n    }\n}\n\nexport function spawnArray(n, fill) {\n    let output = new Array(n);\n    output.fill(fill);\n    return output;\n}\n\nexport function checkFillness(fill, copy, check, setFilledFun, getFun) {\n    if (!check) {\n        if (fill) {\n            setFilledFun();\n            if (copy) {\n                copy = false;\n            }\n        } else {\n            return null;\n        }\n    }\n    return getFun(copy);\n}\n","import loadScran from \"./wasm/scran.js\";\nimport { register } from \"wasmarrays.js\";\nimport * as afile from \"./abstract/file.js\";\n\nconst cache = {};\n\n/**\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfThreads=4] - Number of threads to use for calculations.\n * This will spin up the requested number of Web Workers during module initialization.\n * @param {boolean} [options.localFile=false] - Whether or not to look for the Wasm and worker scripts locally.\n * This should only be `true` when using old versions of Node.js where file URLs are not supported, \n * and is ignored completely outside of Node.js contexts.\n *\n * @return {boolean}\n * The Wasm bindings are initialized and `true` is returned.\n * If the bindings were already initialized (e.g., by a previous call), nothing is done and `false` is returned.\n */\nexport async function initialize({ numberOfThreads = 4, localFile = false } = {}) {\n    if (\"module\" in cache) {\n        return false;\n    }\n\n    let options = {\n        scran_custom_nthreads: numberOfThreads\n    };\n\n    if (localFile) {                                                                /** NODE ONLY **/  \n        options.locateFile = (x) => import.meta.url.substring(7) + \"/../wasm/\" + x; /** NODE ONLY **/\n    }                                                                               /** NODE ONLY **/\n\n    cache.module = await loadScran(options);\n    cache.space = register(cache.module);\n\n    return true;\n}\n\n/**\n * Maximum number of threads available for computation.\n * This depends on the value specified during module initialization in {@linkcode initialize}. \n *\n * @return {number} Maximum number of available threads.\n */\nexport function maximumThreads() {\n    return cache.module.scran_custom_nthreads;\n}\n\nexport function call(func) {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n\n    var output;\n    try {\n        output = func(cache.module);    \n    } catch (e) {\n        if (typeof e == \"number\") {\n            throw new Error(cache.module.get_error_message(e));\n        } else {\n            throw e;\n        }\n    }\n    return output;\n}\n\nexport function buffer() {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n    return cache.module.wasmMemory.buffer;\n}\n\n/**\n * @return {number} Integer containing the **wasmarrays.js** identifier for **scran.js**'s memory space.\n * This can be used with `createWasmArray()` and related functions from **wasmarrays.js**.\n */\nexport function wasmArraySpace() {\n    return cache.space;\n}\n\n/**\n * @return All worker threads are terminated and the module is deleted from the cache.\n * This is useful for cleaning up at the end of the analysis,\n * otherwise the workers will be shut done ungracefully on program exit.\n */\nexport function terminate() {\n    cache.module.PThread.terminateAllThreads();\n    delete cache.module;\n    return;\n}\n\n/**\n * @return {number} The current size of the Wasm heap, typically used for diagnostic reporting.\n */\nexport function heapSize() {\n    return buffer().byteLength;\n}\n","import { allocate } from \"./globals.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return {WasmArray} Instance of a {@linkplain WasmArray} subclass.\n */\nexport function createWasmArray(space, length, arrayClass) {\n    return allocate(space, length, arrayClass);\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint8WasmArray} Instance of a {@linkplain Uint8WasmArray}.\n */\nexport function createUint8WasmArray(space, length) { \n    return createWasmArray(space, length, Uint8WasmArray); \n}\n\n/**\n * Create a {@linkplain Int8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int8WasmArray} Instance of a {@linkplain Int8WasmArray}.\n */\nexport function createInt8WasmArray(space, length) { \n    return createWasmArray(space, length, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint16WasmArray} Instance of a {@linkplain Uint16WasmArray}.\n */\nexport function createUint16WasmArray(space, length) { \n    return createWasmArray(space, length, Uint16WasmArray); \n}\n\n/**\n * Create a {@linkplain Int16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int16WasmArray} Instance of a {@linkplain Int16WasmArray}.\n */\nexport function createInt16WasmArray(space, length) { \n    return createWasmArray(space, length, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint32WasmArray} Instance of a {@linkplain Uint32WasmArray}.\n */\nexport function createUint32WasmArray(space, length) { \n    return createWasmArray(space, length, Uint32WasmArray); \n}\n\n/**\n * Create a {@linkplain Int32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int32WasmArray} Instance of a {@linkplain Int32WasmArray}.\n */\nexport function createInt32WasmArray(space, length) { \n    return createWasmArray(space, length, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {BigUint64WasmArray} Instance of a {@linkplain BigUint64WasmArray}.\n */\nexport function createBigUint64WasmArray(space, length) { \n    return createWasmArray(space, length, BigUint64WasmArray); \n}\n\n/**\n * Create a {@linkplain BigInt64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {BigInt64WasmArray} Instance of a {@linkplain BigInt64WasmArray}.\n */\nexport function createBigInt64WasmArray(space, length) { \n    return createWasmArray(space, length, BigInt64WasmArray); \n}\n\n/**\n * Create a {@linkplain Float32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Float32WasmArray} Instance of a {@linkplain Float32WasmArray}.\n */\nexport function createFloat32WasmArray(space, length) { \n    return createWasmArray(space, length, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Float64WasmArray} Instance of a {@linkplain Float64WasmArray}.\n */\nexport function createFloat64WasmArray(space, length) { \n    return createWasmArray(space, length, Float64WasmArray); \n}\n","import { buffer } from \"./globals.js\";\nimport { WasmArray } from \"./base.js\";\n\n/** \n * Wrapper around an unsigned 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint8WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint8WasmArray extends WasmArray {\n    /**\n     * @return {Uint8Array} A Uint8Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string}\n     */\n    static className = \"Uint8WasmArray\";\n    // We're returning the name explicitly here instead of relying\n    // on the constructor.name trick, as the name of the class can\n    // change during minification.\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around a signed 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt8WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int8WasmArray extends WasmArray {\n    /**\n     * @return {Int8Array} An Int8Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Int8WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number}\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around an unsigned 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint16WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint16WasmArray extends WasmArray {\n    /**\n     * @return {Uint16Array} A Uint16Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Uint16WasmArray\";\n\n    /**\n     * Size of the each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage a signed 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt16WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int16WasmArray extends WasmArray {\n    /**\n     * @return {Int16Array} An Int16Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Int16WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage an unsigned 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint32WasmArray extends WasmArray {\n    /**\n     * @return {Uint32Array} A Uint32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Uint32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a signed 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int32WasmArray extends WasmArray {\n    /**\n     * @return {Int32Array} An Int32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Int32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage an unsigned 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigUint64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class BigUint64WasmArray extends WasmArray {\n    /**\n     * @return {BigUint64Array} A BigUint64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new BigUint64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"BigUint64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a signed 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigInt64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class BigInt64WasmArray extends WasmArray {\n    /**\n     * @return {BigInt64Array} An BigInt64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new BigInt64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"BigInt64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a 32-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Float32WasmArray extends WasmArray {\n    /**\n     * @return {Float32Array} A Float32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Float32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Float32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a 64-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Float64WasmArray extends WasmArray {\n    /**\n     * @return {Float64Array} A Float64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Float64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Float64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\nconst choices = {\n    \"Uint8WasmArray\": Uint8WasmArray,\n    \"Int8WasmArray\": Int8WasmArray,\n    \"Uint16WasmArray\": Uint16WasmArray,\n    \"Int16WasmArray\": Int16WasmArray,\n    \"Uint32WasmArray\": Uint32WasmArray,\n    \"Int32WasmArray\": Int32WasmArray,\n    \"BigUint64WasmArray\": BigUint64WasmArray,\n    \"BigInt64WasmArray\": BigInt64WasmArray,\n    \"Float32WasmArray\": Float32WasmArray,\n    \"Float64WasmArray\": Float64WasmArray\n};\n\n/**\n * Retrieve class from its name.\n *\n * @param {string} name - Name of the {@linkplain WasmArray} class.\n *\n * @return {class} Class object corresponding to `name`.\n */\nexport function stringToClass(name) {\n    if (!(name in choices)){ \n        throw new Error(\"unknown WasmArray class '\" + name + \"'\");\n    }\n    return choices[name];\n}\n","import { createWasmArray } from \"./create.js\";\n\n/**\n * Helper utility to determine the length of a subset, for use in allocations.\n *\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {?boolean} filter - How to interpret `subset`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {number} targetLength - Length of the target vector to be subsetted by `subset`.\n * @param {string} targetName - Name of the target vector, for use in error messages.\n *\n * @return {number} Length of the subsetted vector.\n */\nexport function checkSubsetLength(subset, filter, targetLength, targetName) {\n    if (filter === null) {\n        subset.forEach(i => {\n            if (i < 0 || i >= targetLength) {\n                throw new Error(\"'subset' contains out-of-range indices for '\" + targetName + \"'\");\n            }\n        });\n        return subset.length;\n    } \n\n    if (subset.length != targetLength) {\n        throw new Error(\"'subset' and '\" + targetName + \"' should have the same length\");\n    }\n\n    let sum = 0;\n    subset.forEach(x => { sum += (x != 0); });\n    if (filter) {\n        return subset.length - sum;\n    } \n\n    return sum;\n}\n\n/**\n * Helper utility to fill a subset from one TypedArray to another.\n *\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {?boolean} filter - How to interpret `subset`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {TypedArray} input - Input array to subset.\n * @param {TypedArray} output - Output array to store the subset, of length defined by {@linkcode checkSubsetLength}.\n *\n * @return `output` is filled with the specified subset of values from `input`.\n */\nexport function fillSubset(subset, filter, input, output) {\n    if (filter == null) {\n        subset.forEach((s, i) => {\n            output[i] = input[s];\n        });\n    } else if (filter) {\n        let j = 0;\n        subset.forEach((y, i) => {\n            if (y == 0) {\n                output[j] = input[i];\n                j++;\n            }\n        });\n    } else {\n        let j = 0;\n        subset.forEach((y, i) => {\n            if (y !== 0) {\n                output[j] = input[i];\n                j++;\n            }\n        });\n    }\n}\n\n/**\n * Create a new WasmArray from a subset of an existing WasmArray.\n * \n * @param {WasmArray} x - The input WasmArray.\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * \n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to `subset`, if `filter = null`; \n * the number of truthy elements in `subset`, if `filter = false`;\n * or the number of falsey elements in `subset`, if `filter = true`.\n *\n * @return {WasmArray} Array of the same type of `x` and in the same space, containing the desired subset `subset`.\n * If `buffer` is supplied, it is directly returned.\n */\nexport function subsetWasmArray(x, subset, { filter = null, buffer = null } = {}) {\n    let len = checkSubsetLength(subset, filter, x.length, \"x\"); \n\n    if (buffer == null) {\n        // Function better be a no-throw from now on.\n        buffer = createWasmArray(x.space, len, x.constructor);\n    } else if (buffer.length !== len) {\n        throw new Error(\"length of 'buffer' is not consistent with 'subset'\");\n    }\n\n    let barr = buffer.array();\n    let xarr = x.array();\n    fillSubset(subset, filter, xarr, barr);\n\n    return buffer;\n}\n","import { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} view of the specified subclass.\n * It is assumed that some unknown entity owns the Wasm heap allocation;\n * for example, Emscripten-defined bindings on C++ classes that own array data,\n * where it may be of interest to wrap these arrays in WasmArray instances for downstream processing.\n * The caller is responsible for ensuring that the lifetime of the returned WasmArray view does not exceed that of the owner.\n * Note that this function differs from {@linkcode WasmArray#view WasmArray.view}, which creates a WasmArray view from an exising WasmArray.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * This may need to be a certain multiple of 2, 4 or 8, depending on `arrayClass`.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return {WasmArray} Instance of a {@linkplain WasmArray} subclass containing a view on the heap.\n */\nexport function createWasmArrayView(space, length, offset, arrayClass) {\n    return new arrayClass(space, -1, length, offset, {});\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint8WasmArray} Instance of a {@linkplain Uint8WasmArray} view.\n */\nexport function createUint8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint8WasmArray); \n}\n\n/**\n * Create an {@linkplain Int8WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int8WasmArray} Instance of an {@linkplain Int8WasmArray} view.\n */\nexport function createInt8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint16WasmArray} Instance of a {@linkplain Uint16WasmArray} view.\n */\nexport function createUint16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint16WasmArray); \n}\n\n/**\n * Create an {@linkplain Int16WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int16WasmArray} Instance of an {@linkplain Int16WasmArray} view.\n */\nexport function createInt16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint32WasmArray} Instance of a {@linkplain Uint32WasmArray} view.\n */\nexport function createUint32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint32WasmArray); \n}\n\n/**\n * Create an {@linkplain Int32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int32WasmArray} Instance of an {@linkplain Int32WasmArray} view.\n */\nexport function createInt32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {BigUint64WasmArray} Instance of a {@linkplain BigUint64WasmArray} view.\n */\nexport function createBigUint64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigUint64WasmArray); \n}\n\n/**\n * Create an {@linkplain BigInt64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {BigInt64WasmArray} Instance of an {@linkplain BigInt64WasmArray} view.\n */\nexport function createBigInt64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigInt64WasmArray); \n}\n\n\n/**\n * Create a {@linkplain Float32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Float32WasmArray} Instance of a {@linkplain Float32WasmArray} view.\n */\nexport function createFloat32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Float64WasmArray} Instance of a {@linkplain Float64WasmArray} view.\n */\nexport function createFloat64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float64WasmArray); \n}\n"],"names":["define","s","f","self","window","n","document","postMessage","o","IS_PAPA_WORKER","a","u","b","parse","e","t","r","dynamicTyping","J","dynamicTypingFunction","transform","worker","WORKERS_SUPPORTED","i","URL","webkitURL","toString","BLOB_URL","createObjectURL","Blob","type","Worker","onmessage","_","id","userStep","step","userChunk","chunk","userComplete","complete","userError","error","input","config","workerId","NODE_STREAM_INPUT","charCodeAt","slice","download","l","p","readable","read","on","g","File","Object","c","stream","unparse","m","y","delimiter","BAD_DELIMITERS","filter","indexOf","length","quotes","Array","isArray","skipEmptyLines","newline","quoteChar","header","columns","Error","escapeChar","escapeFormulae","RegExp","Q","JSON","h","keys","data","fields","meta","v","join","trim","d","push","constructor","Date","stringify","test","replace","charAt","RECORD_SEP","String","fromCharCode","UNIT_SEP","BYTE_ORDER_MARK","LocalChunkSize","RemoteChunkSize","DefaultDelimiter","Parser","E","ParserHandle","NetworkStreamer","FileStreamer","StringStreamer","ReadableStreamStreamer","jQuery","fn","this","each","prop","toUpperCase","attr","toLowerCase","FileReader","files","file","inputElem","instanceConfig","extend","before","action","reason","name","splice","_handle","_finished","_completed","_halted","_input","_baseIndex","_partialLine","_rowCount","_start","_nextChunk","isFirstChunk","_completeResults","errors","w","chunkSize","parseInt","streamer","_config","call","parseChunk","beforeFirstChunk","paused","aborted","cursor","substring","preview","results","WORKER_ID","finished","concat","_sendError","_readChunk","_chunkLoaded","XMLHttpRequest","withCredentials","onload","onerror","_chunkError","open","downloadRequestBody","downloadRequestHeaders","setRequestHeader","send","message","status","readyState","responseText","getResponseHeader","lastIndexOf","statusText","webkitSlice","mozSlice","FileReaderSync","Math","min","size","readAsText","encoding","target","result","pause","prototype","apply","arguments","resume","_streamData","_streamEnd","_streamError","_checkIsFinished","shift","_streamCleanUp","removeListener","pow","abort","k","forEach","transformHeader","map","parseFloat","code","row","split","comments","abs","successful","bestDelimiter","delimitersToGuess","getCharIndex","setTimeout","j","z","M","P","U","q","N","B","fastMode","K","W","H","L","includes","I","F","R","C","S","D","index","T","O","A","substr","x","linebreak","truncated","terminate","create","root","factory","randomColor","seed","colorDictionary","loadColorBounds","colorRanges","options","undefined","stringToInteger","TypeError","count","totalColors","colors","color","setFormat","pickHue","pickSaturation","pickBrightness","hue","randomWithin","hueRange","getRealHueRange","getHueRange","luminosity","saturationRange","getSaturationRange","sMin","sMax","bMin","getMinimumBrightness","bMax","hsv","format","HSVtoHSL","hsl","hslColor","alpha","random","HSVtoRGB","rgbColor","HSVtoHex","lowerBounds","getColorInfo","s1","v1","s2","v2","colorInput","number","match","HexToHSB","colorName","range","golden_ratio","floor","max","rnd","rgb","componentToHex","hex","defineColor","brightnessRange","h_i","red","green","blue","cMax","delta","saturation","round","string","total","Number","MAX_SAFE_INTEGER","colorHue","isNaN","module","exports","_classCheckPrivateStaticAccess","receiver","classConstructor","_classCheckPrivateStaticFieldDescriptor","descriptor","_classPrivateMethodGet","privateSet","has","_classPrivateMethodInitSpec","obj","add","_classStaticPrivateFieldSpecGet","_classStaticPrivateFieldSpecSet","value","_classStaticPrivateMethodGet","method","cloneCached","cached","bioc","baseUrl","registry","check_class","handle","accepted","base","scran","entries","className","packageName","populate_list_columns","lhandle","output","colnames","nhandle","names","ndx","findAttribute","attribute","values","load_listData_names","curhandle","load","curcol","nrow","load_data_frame","rnhandle","rndx","row_names","nrhandle","NR","_id","WeakMap","_rowdata","_coldata","_counts_handle","_counts_loaded","_options","_counts","WeakSet","_features","_cells","_fetchPrimaryId","ExperimentHubDataset","setDownloadFun","fun","previous","_downloadFun","availableDatasets","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","_classPrivateFieldGet","defaults","clear","primaryRnaFeatureIdColumn","setOptions","abbreviate","summary","cache","_features2","_cells2","cells","utils","my_rd","modality_features","previewPrimaryIds","_fetchPrimaryId2","_counts2","matrix","counts","consume","row_ids","perm_features","features","primary_ids","RNA","serialize","buffer","TextEncoder","encode","bakana","unserialize","args","dec","TextDecoder","decode","details","counts_deets","rowdata_load","rowdata_handle","rowdata_deets","rowdata","ids","idx","dimhandle","firsthandle","extract_matrix_rownames","coldata_load","coldata_handle","cd_df","coldata_deets","coldata","numberOfRows","ncol","curfeat","hasColumn","numberOfColumns","column","rowNames","_class","async","resp","fetch","url","ok","Uint8Array","arrayBuffer","_h5_file","_h5_path","_h5_flush","_raw_features","_raw_cells","_dump_summary","_instantiate","_feature_type_mapping","_primary_mapping","TenxHdf5Dataset","h5File","afile","featureTypeRnaName","featureTypeAdtName","featureTypeCrisprName","primaryAdtFeatureIdColumn","primaryCrisprFeatureIdColumn","_dump_summary2","futils","_feature_type_mapping2","_primary_mapping2","loaded","_instantiate2","info","content","path","flush","children","mhandle","fhandle","eutils","feats","$setColumn","ftype","ADT","CRISPR","navigator","metadata","contents","rownames","startsWith","parsed","delim","current","data_frame","Int32Array","Float64Array","out","ghandle","hdf5_data_frame","group","chandle","dhandle","Float32Array","replacement","attributes","placeholder","readAttribute","new_columns","new_colnames","nest_meta","resource","console","warn","columnOrder","dimensions","main_experiment_name","extract_all_features","extract_features","se_meta","summarized_experiment","row_path","row_data","full_meta","alt","single_cell_experiment","alternative_experiments","alt_meta","extract_all_assay_names","extract_assay_names","ass","assays","extract_assay","assay","forceInteger","counter","extract_assay_raw","asspath","assmeta","schema","is_dense","is_sparse","hdf5_sparse_matrix","hdf5_dense_array","dataset","stuff","hdf5_delayed_array","log","ghandle2","ghandle3","sf","ahandle","mat","sizeFactors","center","extract_logcounts","extract_other_data","other_path","othermeta","ofile","unpacked","compression","json_simple_list","extract_list_data_internal","NaN","_navigator","_metadata_cache","MetadataCacheWrapper","nav","_path","_navigator2","_reset_local_caches","AbstractArtifactdbDataset","_reset_local_caches2","rnaCountAssay","adtCountAssay","crisprCountAssay","rnaExperiment","adtExperiment","crisprExperiment","modality_assay_names","fmapping","mapping","exp","altmap","alts","col_path","column_data","_path2","_navigator3","_raw_features2","_raw_cells2","_raw_other","_options2","_reset_local_caches3","_features3","_cells3","_other","_get_all_reddim_names","AbstractArtifactdbResult","_reset_local_caches4","primaryAssay","isPrimaryNormalized","reducedDimensionNames","_features4","_cells4","_other2","reduced_dimension_names","other_metadata","reddim_meta","reduced_dimensions","_get_all_reddim_names2","reddims","redmap","redmeta","dims","array","redcontents","realized","acquired","curassay","curnormalized","normed","allowZeros","other_data","rd_meta","store","SimpleFile","_mode","_buffer","_file","_name","copy","readAsArrayBuffer","_matrix_file","_feature_file","_barcode_file","_dimensions","_fetch_dimensions","TenxMatrixMarketDataset","matrixFile","featureFile","barcodeFile","is_gz","endsWith","feat","genes","barcode","annotations","mtx","_fetch_dimensions2","headers","rows","fname","symb","types","bname","diff","conv","callback","resolve","reject","peek","extractHDF5Strings","summarizeArray","limit","chosen","from","Set","sort","POSITIVE_INFINITY","NEGATIVE_INFINITY","guess_compression","astream","unpackText","txt","pako","merge_bytes","leftovers","decoder","combined","set","stream_callback","Promise","gz","onData","onEnd","msg","readLines2","lines","last","subarray","readTable2","str","ppp","size_left","pop","promoteToNumber","as_num","opt1","opt2","create_solo_default_object","modality","reportFeatures","rawFeatures","typeField","by_type","removeColumn","renameByModality","featureTypeMapping","splitByModality","extractSplitPrimaryIds","featureTypeDefault","primary","col","extractPrimaryIdColumn","new_default","found","multiple","findUnnamedDefault","splitScranMatrixAndFeatures","current_features","out_mat","deepCopy","type_keys","skip_subset","indices","full_length","is_subset_noop","rename","extractPrimaryIds","extractRemappedPrimaryIds","createTsneWorker","createUmapWorker","step_name","_qc","_filter","_parameters","_cache","_raw_compute","AdtNormalizationState","qc","parameters","qc_module","filter_module","changed","free","total_buffer","sf_buffer","centered_sf_buffer","valid","fetchFilteredMatrix","fetchNormalizedMatrix","_raw_compute2","fetchSizeFactors","buff","block","fetchFilteredBlock","fetchParameters","compute","num_pcs","num_clusters","remove_bias","get","nutils","totals","numberOfPCs","numberOfClusters","_norm","AdtPcaState","norm","norm_module","pcs","fetchPCs","block_method","blockMethod","_inputs","AdtQualityControlState","inputs","inputs_module","metrics","filters","metrics_buffer","discard_buffer","fetchCountMatrix","fetchFilters","fetchDiscards","fetchMetrics","automatic","tag_id_column","igg_prefix","nmads","min_detected_drop","configureFeatureParameters","lower_igg","val","best_key","best","rn","key","columnNames","latest","tag_info","fetchFeatureAnnotations","subsets","fill","sub_arr","fetchBlock","numberOfMADs","minDetectedDrop","discard","numberOfCells","_combined","BatchCorrectionState","combine_module","corrected","fetchCorrected","fetchNumberOfCells","fetchNumberOfDimensions","num_neighbors","approximate","needs_correction","fetchCombined","numberOfDims","view","find_usable_upstream_states","qc_states","in_use","tmp","to_use","_qc_states","_raw_compute_matrix","_raw_compute_block","CellFilteringState","rna_qc_module","adt_qc_module","crispr_qc_module","block_buffer","_raw_compute_matrix2","_raw_compute_block2","use_rna","use_adt","use_crispr","first","disc_buffer","disc_arr","applyFilter","undoFilter","max_index","keep","available","sub","src","clone","filtered_ncols","bcache","_snn_cluster","_kmeans_cluster","ChooseClusteringState","snn","kmeans","snn_module","kmeans_module","fetchClusters","find_nonzero_upstream_states","pca_states","weights","_pca_states","CombineEmbeddingsState","rna_pca_module","adt_pca_module","crispr_pca_module","combined_buffer","num_cells","total_dims","rna_weight","adt_weight","crispr_weight","createPcsView","upstream","principalComponents","weight_arr","collected","ncells","curpcs","CrisprNormalizationState","centered_buffer","sum_buffer","createGroup","CrisprPcaState","CrisprQualityControlState","FeatureSelectionState","fetchResults","fetchSortedResiduals","sorted_residuals","span","residuals","_correct","_valid","KmeansClusterState","correct","correct_module","raw","_valid2","clusters","run_me","initMethod","_free_results","markers","versus","_computeVersus","left","right","matrices","lfc_threshold","compute_auc","cache_info","left_index","left_small","right_index","run","new_clusters","leftfound","rightfound","_norm_states","_choice","MarkerDetectionState","norm_states","choice","rna_norm_module","adt_norm_module","crispr_norm_module","choice_module","changed_params","lfcThreshold","computeAuc","computeVersusCustom","computeVersus","state","_matrices","_groups","_group_levels","_block","_block_levels","_cache2","_parameters2","MarkerDetectionStandalone","normalized","groups","arrays","new_matrices","dump","retain","temp","levels","init","fetchGroupLevels","ret","fetchBlockLevels","_peekMatrices","_peekGroups","_peekBlock","setParameters","computeAll","NeighborIndexState","fetchIndex","RnaNormalizationState","_feat","RnaPcaState","feat_module","hvg_buffer","num_hvgs","choose_hvgs","sorted_resids","threshold_at","unsorted_resids","element","_automatic","_acquire_reference","RnaQualityControlState","species","gene_id_column","use_reference_mito","gene_id_type","mito_prefix","guesses","confidence","_mito_lists","setDownload","use_mito_default","def","gene_id_column2","species2","gene_id_type2","guessRnaFeatureTypes","backcomp","gene_info","lists","_acquire_reference2","lower_mito","feature_type","mito_lists","rutils","_defineProperty","_index","_compute_neighbors","_compute_graph","_compute_clusters","SnnGraphClusterState","neighbor_module","neighbors","graph","membership","scheme","algorithm","multilevel_resolution","leiden_resolution","walktrap_steps","_compute_neighbors2","_compute_graph2","_compute_clusters2","multiLevelResolution","leidenResolution","leidenModularityObjective","walktrapSteps","_reloaded","_worker_id","_ready","_run","_core","TsneState","reloaded","aworkers","worker_id","ready","vizutils","iterations","perplexity","animate","same_neighbors","_core2","then","reneighbor","nn_out","UmapState","num_epochs","min_dist","registerCallback","sendMessage","transfer","terminateWorker","freeCache","object","changedParametersIllegal","xskip","yskip","ArrayBuffer","isView","changedParameters","xnull","ynull","xarr","yarr","xkeys","ykeys","allocateCachedArray","reallocate","candidate","owner","findValidUpstreamStates","states","checkIndices","defaultDownload","guessFeatureTypes","forceTaxonomy","subsetInvalidFactors","invalid","transformed","num_invalid","new_ids","new_levels","summaries2int","formatMarkerResults","rankEffect","ordering","ranking","increasing","cohen","auc","lfc","deltaDetected","reorder","stats","thing","stat_detected","detected","stat_mean","means","stat_lfc","stat_delta_d","locateVersusCache","bigg","biggversus","smal","rerun","freeVersusResults","computeVersusResults","new_block","modmat","subsetSums","discards","sums","oarr","LENGTH","_bioconductor_LENGTH","SLICE","allowView","_bioconductor_SLICE","start","end","COMBINE","objects","_bioconductor_COMBINE","total_LENGTH","position","CLONE","_bioconductor_CLONE","Map","SPLIT","factor","misc","_bioconductor_SPLIT","NUMBER_OF_ROWS","_bioconductor_NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","_bioconductor_NUMBER_OF_COLUMNS","SLICE_2D","_bioconductor_SLICE_2D","COMBINE_ROWS","_bioconductor_COMBINE_ROWS","COMBINE_COLUMNS","_bioconductor_COMBINE_COLUMNS","Annotated","_metadata","setMetadata","inPlace","cutils","$setMetadata","_ref","DataFrame","ann","super","_numberOfRows","_rowNames","_columns","il","cause","generics","entry","numberOfEntries","delete","$removeColumn","setColumn","setColumnNames","setNames","$setColumnNames","setRowNames","$setRowNames","sliceColumns","$sliceColumns","new_numberOfRows","new_rowNames","parallelCombine","all_n","all_l","yi","_ref2","flexibleCombineRows","ckeys","corder","cnames","copies","dummy","_extractor","_inserter","_primarySlicer","_secondarySlicer","_extractor2","nprimary","nsecondary","primaryMajor","_values","offset","_inserter2","_primarySlicer2","primarySlice","fullPrimary","isPrimaryRange","primaryDim","secondarySlice","fullSecondary","isSecondaryRange","inSecondaryDim","outSecondaryDim","outputValues","_secondarySlicer2","pi","inPrimary","outPrimary","in_offset","out_offset","si","columnMajor","_numberOfColumns","_columnMajor","isColumnMajor","setValues","$setValues","setRow","$setRow","full_rows","is_row_range","new_rows","full_columns","is_column_range","new_values","_combiner","primaryFun","secondaryFun","isPrimaryMajor","secondaryName","num_primary","num_secondary","primary_major","used_primary","cur_primary","out_offset2","view_offset","GRanges","vec","seqnames","ranges","strand","elementMetadata","_seqnames","_ranges","_convertToInt8Array","_checkStrandedness","Int8Array","_strand","width","setSeqnames","$setSeqnames","setRanges","ir","$setRanges","setStrand","$setStrand","buildOverlapIndex","restrictToSeqnames","restrictToStrand","by_seqname","starts","ends","seqname_indices","seqname_strand","by_strand","str_indices","olap","GRangesOverlapIndex","all_sn","all_rr","all_st","empty","overlap","query","ignoreStrand","my_results","allowed_strands","seq_index","sstr","_staged_setGroup","_flush_staged_setGroup","GroupedGRanges","rangeLengths","gr","_rangeLengths","accumulated","_computeStarts","_rangeStarts","_flush_staged_setGroup2","rangeStarts","numberOfGroups","setGroup","nops","$setGroup","GroupedGRangesOverlapIndex","runs","lengths","staged","last_start","more_ranges","ngroups","current_start","nranges","fullLength","rev_map","_reverseMapping","overlaps","IRanges","_width","setStart","$setStart","setWidth","$setWidth","tree","IRangesOverlapIndex","all_s","all_w","_tree","_check_entry_index","InternalList","order","expected","observed","_entries","_order","_check_entry_index2","ii","new_entries","new_order","FUN","combiner","first_order","_check_rowRanges","RangedSummarizedExperiment","se","rowRanges","ggr","_check_rowRanges2","_rowRanges","setRowRanges","$setRowRanges","has_empty","has_ggr","widths","setElementMetadata","_rowData","SingleCellExperiment","rse","reducedDimensions","reducedDimensionOrder","alternativeExperiments","alternativeExperimentOrder","ncols","_reducedDimensions","_alternativeExperiments","reducedDimension","alternativeExperimentNames","alternativeExperiment","removeReducedDimension","$removeReducedDimension","setReducedDimension","$setReducedDimension","setReducedDimensionNames","$setReducedDimensionNames","sliceReducedDimensions","$sliceReducedDimensions","removeAlternativeExperiment","$removeAlternativeExperiment","setAlternativeExperiment","$setAlternativeExperiment","setAlternativeExperimentNames","$setAlternativeExperimentNames","sliceAlternativeExperiments","$sliceAlternativeExperiments","SummarizedExperiment","assayOrder","rowData","columnData","_assays","nrows","nr","nc","df","_columnData","_columnNames","assayNames","numberOfAssays","removeAssay","$removeAssay","setAssay","$setAssay","setAssayNames","$setAssayNames","sliceAssays","$sliceAssays","setRowData","$setRowData","setColumnData","$setColumnData","all_dfs","verifyElementMetadata","numExpected","Vector","_elementMetadata","_names","$setElementMetadata","$setNames","all_em","setterTarget","cloneField","presplitFactor","by","buildIntervalTree","rank2position","startRanks","endRanks","positions","fillIndex","at","next","new_starts","new_ends","pos","convertPositionToRank","create_node","recursive_build_tree","one_past_the_end","left_bound","right_bound","start_overlaps_sorted","end_overlaps_sorted","left_node","right_node","node","queryIntervalTree","recursive_query_tree","areArraysEqual","isArrayLike","chooseArrayConstructors","con1","con2","BigInt64Array","BigUint64Array","formatLengthError","checkStringArray","typeMessage","checkNamesArray","lengthMessage","sum","combineNames","all_names","all_lengths","total_n","all_null","createSequence","convertToInt32Array","checkNonNegative","object2map","_collections","fetchAllCollections","cres","reference_download","coll_data","decompressLines","len","_genes","fetchAllGenes","promises","processing","gene_download","resolved","all","res","gene_data","processed","_sets","fetchAllSets","sres","set_data","collection","fetchGenesForAllSets","fetchSetsForAllGenes","by_symbol","by_symbol_lower","mapGenesByIdentifier","lowerCase","host","sfound","tfound","reindexGenesForAllSets","geneMapping","genesForSets","reverse_mapping","gesel_gene","Uint32Array","new_sets","subset","gene","reindexSetsForAllGenes","setsForGenes","remapped","_store","_ncols","MultiMatrix","old","remove","new_matrix","to","_matrix","ScranMatrix","createDenseMatrix","wa","gc","NumericMatrix","isSparse","sparse","isReorganized","reorganized","identities","wipeIdentities","wipe_identities","prefix","extension","tmppath","methods","handleString","_results","AggregateAcrossCellsResults","num_groups","numberOfGenes","num_genes","group_sums","all_sums","group_detected","all_detected","aggregateAcrossCells","average","numberOfThreads","group_data","nthreads","aggregate_across_cells","createBlock","local_buffer","barr","sofar","subsetBlock","filterBlock","dropUnusedBlock","fac","harvest_matrices","arr","BigInt","$$","ptr","cbindWithNames","mat_ptrs","name_ptrs","renamed","common","universe","names_arr","replacement_arr","cbind_with_rownames","internames","computeTopThreshold","largest","_filledClusters","_filledSizes","_filledCenters","_filledWcss","_filledIterations","_filledStatus","ClusterKmeansResults","filled","num_obs","setIterations","set_iterations","setStatus","set_status","fillable","COPY","clusterSizes","cluster_sizes","withinClusterSumSquares","wcss","clusterCenters","centers","clusterKmeans","initSeed","initPCASizeAdjust","pptr","RunPCAResults","byteOffset","cluster_kmeans","_graph","BuildSNNGraphResults","buildSNNGraph","my_neighbors","ref","FindNearestNeighborsResults","findNearestNeighbors","build_snn_graph","_id2","_filledBest","_filledModularity","_filledMembership","_chooseLevel","ClusterSNNGraphMultiLevelResults","numberOfLevels","setBest","set_best","modularity","level","_chooseLevel2","setModularity","set_modularity","_id3","_results2","_filledModularity2","_filledModularityDetails","_filledMembership2","ClusterSNNGraphWalktrapResults","numberOfMergeSteps","which","remaining","num_merge_steps","_id4","_results3","_filledModularity3","_filledMembership3","ClusterSNNGraphLeidenResults","clusterSNNGraph","cluster_snn_graph_multilevel","cluster_snn_graph_walktrap","cluster_snn_graph_leiden","convertToFactor","failure","asWasmArray","warned","isFinite","existing","every","oldlevels","resetLevels","factorize","dropUnusedLevels","uniq","uniq_arr","newLevels","oldLevels","conversion","filterCells","filter_data","filter_cells","BuildNeighborSearchIndexResults","num_dim","buildNeighborSearchIndex","build_neighbor_index","distances","run_data","ind_data","dist_data","NeighborResults","find_nearest_neighbors","groupedSizeFactors","priorCount","reference","group_arr","wasm","grouped_size_factors","guessFeatures","ntotal","early_threshold","ceil","payload","unique_features","ensembl_human","ensembl_mouse","ensembl_6239","ensembl_10116","ensembl_9541","ensembl_7227","ensembl_7955","ensembl_9598","symbol_human","symbol_mouse","symbol_6239","symbol_7955","hsid","mmid","any_ens","highest","hypergeometricTest","markersInSet","numberOfMarkers","featureSetSize","numberOfFeatures","markersInSet_data","numberOfMarkers_data","featureSetSize_data","numberOfFeatures_data","output_data","assumeSorted","ntests","check_length","hypergeometric_test","initializeSparseMatrixFromMatrixMarket","compressed","layered","buf_data","convert_compressed","read_matrix_market_from_buffer","read_matrix_market_from_file","extractMatrixMarketDimensions","read_matrix_market_header_from_buffer","read_matrix_market_header_from_file","sarr","initializeSparseMatrixFromHDF5","subsetRow","subsetColumn","cacheSize","wasm_row","wasm_col","use_row_subset","row_offset","row_length","use_col_subset","col_offset","col_length","read_hdf5_matrix","extractHDF5MatrixDetails","extract_hdf5_matrix_details","vals","integer","initializeDenseMatrixFromDenseArray","initialize_dense_matrix","initializeSparseMatrixFromRds","initialize_sparse_matrix_from_rds","computePerCellQcFilters","block_data","bptr","use_blocks","thresholds","rebuffer","optr","computePerCellQcMetrics","subset_offsets","tmp_subsets","nsubsets","offset_offset","offset_arr","unpack_strings","repack_strings","lengths_arr","enc","buffer_arr","_reference","LoadLabelledReferenceResults","numberOfSamples","num_samples","num_features","numberOfLabels","num_labels","loadLabelledReferenceFromBuffers","ranks","labels","matbuf","markbuf","labbuf","load_singlepp_reference","_reference2","BuildLabelledReferenceResults","sharedFeatures","shared_features","register_features","id_array","registry_contents","convert_features","used","buildLabelledReference","referenceFeatures","top","mat_id_buffer","ref_id_buffer","nfeat","build_singlepp_reference","expectedNumberOfFeatures","_cell_buffer","_label_buffer","LabelCellsResults","predictedLabels","get_best","scoresForCell","get_scores_for_sample","scoresForLabel","get_scores_for_label","fineTuningDelta","get_delta","label_cells","tempmat","labelCells","quantile","run_singlepp","_integrated","IntegrateLabelledReferencesResults","integrated","numberOfReferences","num_references","integrateLabelledReferences","built","id_arr","loaded_arr2","ref_arr2","built_arr2","nrefs","ref_arr","la2","ra2","ba2","integrate_singlepp_references","IntegrateCellLabelsResults","predictedReferences","scoresForReference","integrateCellLabels","assigned","aptrs","assigned_arrs","aptrs_arr","fail","integrate_singlepp","logNormCounts","sf_data","sfptr","use_sf","log_norm_counts","centerSizeFactors","center_size_factors","mnnCorrect","x_data","robustIterations","robustTrim","referencePolicy","mnn_correct","_filledMeans","_filledVariances","_filledFitted","_filledResiduals","_extract","ModelGeneVarResults","numberOfBlocks","_extract2","variances","fitted","num_blocks","fillcheck","fillindex","nblocks","modelGeneVar","model_gene_var","_filledSums","_filledDetected","_filledSubsetTotals","PerCellAdtQcMetricsResults","numberOfSubsets","subsetTotals","subset_totals","num_subsets","perCellAdtQcMetrics","internal","subset_offset","per_cell_adt_qc_metrics","_filledMaxProportions","_filledMaxIndex","PerCellCrisprQcMetricsResults","maxProportions","max_proportion","maxIndex","perCellCrisprQcMetrics","per_cell_crispr_qc_metrics","_filledSubsetProportions","PerCellRnaQcMetricsResults","subsetProportions","subset_proportions","perCellRnaQcMetrics","per_cell_rna_qc_metrics","quickAdtSizeFactors","clust","runPCA","RdsObject","par","parent","RdsVector","attributeNames","mod","fill_attribute_names","anames_buf","attribute_names_buffer","anames_len","attribute_names_length","packer","find_attribute","dispatch","load_attribute_by_index","load_attribute_by_name","RdsIntegerVector","numeric_vector","RdsBooleanVector","RdsDoubleVector","RdsStringVector","fill_string_vector","buf","string_vector_buffer","string_vector_length","RdsGenericVector","load_list_element","RdsS4Object","class_name","package_name","RdsNull","cons","tt","_obj","RdsDetails","formatVersion","format_version","writerVersion","writer_version","readerVersion","reader_version","readRds","parse_rds_from_file","parse_rds_from_buffer","_filledComponents","_filledTotalVariance","setTotalVariance","set_total_variance","varianceExplained","variance_explained","totalVariance","total_variance","scale","feat_data","use_feat","fptr","run_pca","run_blocked_pca","run_multibatch_pca","perplexityToNeighbors","perplexity_to_k","scaleByNeighbors","embeddings","embed_ptrs","index_ptrs","holding_ndims","holding_weights","nembed","deletable","embed_arr","weight_offset","use_weights","allocator","total_ndim","total_len","index_arr","scale_by_neighbors_indices","ndims_arr","scale_by_neighbors_matrices","scoreFeatureSet","feature_data","score_feature_set","scores","checkFillness2","getfun","intifySummary","_filledCohen","_filledLfc","_filledAuc","_filledDeltaDetected","_extractBlockedStat","ScoreMarkersResults","createBlockedStatsFilled","createEffectsFilled","_extractBlockedStat2","delta_detected","scoreMarkers","computeMedian","computeMaximum","score_markers","subsetRows","xcopy","wasm_indices","row_subset","subsetColumns","column_subset","splitRows","singleNull","createMultiMatrix","tkeys","consec","SuggestAdtQcFiltersResults","thresholdsDetected","thresholds_detected","thresholdsSubsetTotals","thresholds_subset_totals","suggestAdtQcFilters","suggest_adt_qc_filters","_filledMaxCount","SuggestCrisprQcFiltersResults","thresholdsMaxCount","thresholds_max_count","suggestCrisprQcFilters","suggest_crispr_qc_filters","SuggestRnaQcFiltersResults","thresholdsSums","thresholds_sums","thresholdsSubsetProportions","thresholds_proportions","suggestRnaQcFilters","suggest_rna_qc_filters","createUint8WasmArray","wasmArraySpace","createInt32WasmArray","createBigUint64WasmArray","createFloat64WasmArray","wasmifyArray","space","chooseNumberOfThreads","threads","maximumThreads","possibleCopy","view_class","matchOptions","choices","spawnArray","checkFillness","check","setFilledFun","getFun","initialize","localFile","scran_custom_nthreads","locateFile","import","loadScran","register","func","get_error_message","wasmMemory","createWasmArray","arrayClass","allocate","Uint8WasmArray","Int32WasmArray","BigUint64WasmArray","Float64WasmArray","WasmArray","Int8WasmArray","Uint16WasmArray","Uint16Array","Int16WasmArray","Int16Array","Uint32WasmArray","BigInt64WasmArray","Float32WasmArray","stringToClass","subsetWasmArray","targetLength","targetName","checkSubsetLength","fillSubset","createWasmArrayView"],"sourceRoot":""}