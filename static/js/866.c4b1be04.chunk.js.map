{"version":3,"file":"static/js/866.c4b1be04.chunk.js","mappings":"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","sources":["workers/KanaDBHandler.js","workers/DownloadsDBHandler.js","workers/helpers.js","utils/utils.js","workers/scran.worker.js","workers/translate.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["var kanaDB;\nvar init = null;\n\nexport function initialize() {\n  init = new Promise((resolve) => {\n    // initialize database on worker creation\n    kanaDB = indexedDB.open(\"KanaDB\", 2);\n\n    kanaDB.onupgradeneeded = (e) => {\n      var kanaDBClient = e.target.result;\n\n      // Currently purging all existing stores when the version is updated.\n      // At some point we may add a more sophisticated upgrade mechanism.\n      try {\n        kanaDBClient.deleteObjectStore(\"analysis\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"analysis_meta\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"file\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"file_meta\");\n      } catch (e) {}\n\n      kanaDBClient.createObjectStore(\"analysis\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"analysis_meta\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"file\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"file_meta\", { keyPath: \"id\" });\n    };\n\n    // Send existing stored analyses, if available.\n    kanaDB.onsuccess = () => {\n      resolve(get_records());\n    };\n\n    kanaDB.onerror = () => {\n      resolve(null);\n    };\n  });\n\n  return init;\n}\n\nfunction get_records() {\n  let store = kanaDB.result\n      .transaction([\"analysis_meta\"], \"readonly\")\n      .objectStore(\"analysis_meta\");\n\n  var allAnalysis = store.getAll();\n  return new Promise((resolve, reject) => {\n    allAnalysis.onsuccess = event => {\n      let vals = allAnalysis.result;\n\n      // no need to transfer the files themselves.\n      vals.forEach((x) => {\n        delete x.files;\n      }); \n\n      resolve(vals);\n    };\n  \n    allAnalysis.onerror = event => {\n      reject(new Error(`failed to query the analysis store in KanaDB: ${event.target.errorCode}`));\n    };\n  });\n}\n\nexport async function getRecords() {\n  await init;\n  return get_records();\n}\n\n/** Functions to save content **/\n\nexport async function saveFile(id, buffer) {\n  await init;\n  let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error when saving file ${id} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let file_store = trans.objectStore(\"file\");\n  let meta_store = trans.objectStore(\"file_meta\");\n\n  let request = meta_store.get(id);\n  let saving = new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      let meta = request.result;\n      if (typeof meta === \"undefined\") {\n        meta = { count: 1, id: id };\n      } else {\n        meta.count++;\n      }\n\n      var data_saving = new Promise((resolve, reject) => {\n        var putrequest = file_store.put({ id: id, payload: buffer.buffer });\n        putrequest.onsuccess = event => {\n          resolve(true);\n        };\n        putrequest.onerror = event => {\n          reject(new Error(`failed to save file ${id} in KanaDB: ${event.target.errorCode}`));\n        };\n      });\n\n      var ref_saving = new Promise((resolve, reject) => {\n        var putrequest = meta_store.put(meta);\n        putrequest.onsuccess = event => {\n          resolve(true);\n        };\n        putrequest.onerror = event => {\n          reject(new Error(`failed to save metadata for file ${id} in KanaDB: ${event.target.errorCode}`));\n        };\n      });\n\n      resolve(Promise.all([data_saving, ref_saving]));\n    };\n\n    request.onerror = event => {\n      reject(new Error(`failed to retrieve metadata ${id} in KanaDB: ${event.target.errorCode}`));\n    };\n  });\n\n  // Only await after attaching all event handlers.\n  await fin;\n  await saving;\n  return;\n}\n\nexport async function saveAnalysis(id, state, files, title) {\n  await init;\n  let trans = kanaDB.result.transaction(\n    [\"analysis\", \"analysis_meta\"],\n    \"readwrite\"\n  );\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error when saving analysis ${id} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let analysis_store = trans.objectStore(\"analysis\");\n  let meta_store = trans.objectStore(\"analysis_meta\");\n\n  let callback = new_id => {\n    var data_saving = new Promise((resolve, reject) => {\n      var putrequest = analysis_store.put({ id: new_id, payload: state.buffer });\n      putrequest.onsuccess = event => {\n        resolve(true);\n      };\n      putrequest.onerror = event => {\n        reject(new Error(`failed to save analysis file ${new_id} in KanaDB: ${event.target.errorCode}`));\n      };\n    });\n\n    var id_saving = new Promise((resolve, reject) => {\n      var putrequest = meta_store.put({\n        id: new_id,\n        files: files,\n        time: Number(new Date()),\n        title: title,\n      });\n      putrequest.onsuccess = event => {\n        resolve(true);\n      };\n      putrequest.onerror = event => {\n        reject(new Error(`failed to save analysis metadata ${new_id} in KanaDB: ${event.target.errorCode}`));\n      };\n    });\n\n    // DO NOT await the promises here!\n    return [new_id, data_saving, id_saving];\n  };\n\n  let output_promise;\n  if (id === null) {\n    let request = meta_store.getAll();\n    output_promise = new Promise((resolve, reject) => {\n      request.onsuccess = event => {\n        resolve(callback(String(request.result.length)));\n      };\n      request.onerror = event => {\n        reject(new Error(`failed to list existing analysis store in KanaDB: ${event.target.errorCode}`));\n      };\n    });\n  } else {\n    output_promise = callback(id);\n  }\n\n  // Only await after attaching all event handlers.\n  let output = await output_promise;\n  await fin;\n  return output[0];\n}\n\n/** Functions to load content **/\n\nexport async function loadFile(id) {\n  await init;\n  let file_store = kanaDB.result\n    .transaction([\"file\"], \"readonly\")\n    .objectStore(\"file\");\n\n  let meta_promise = new Promise((resolve, reject) => {\n    let request = file_store.get(id);\n    request.onsuccess = event => {\n      resolve(request.result !== undefined ? request.result : null);\n    };\n    request.onerror = event => {\n      reject(new Error(`failed to retrieve file ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  });\n\n  var meta = await meta_promise;\n  if (meta !== null) {\n    meta = new Uint8Array(meta[\"payload\"]);\n  }\n  return meta;\n}\n\nexport async function loadAnalysis(id) {\n  await init;\n  let analysis_store = kanaDB.result\n    .transaction([\"analysis\"], \"readonly\")\n    .objectStore(\"analysis\");\n\n  let ana_promise = new Promise((resolve, reject) => {\n    let request = analysis_store.get(id);\n    request.onsuccess = event => {\n      resolve(request.result !== undefined ? request.result : null);\n    };\n    request.onerror = event => {\n      reject(new Error(`failed to retrieve analysis ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  });\n\n  var meta = await ana_promise;\n  if (meta !== null) {\n    meta = new Uint8Array(meta[\"payload\"]);\n  }\n  return meta;\n}\n\n/** Functions to remove content **/\n\nasync function superResolver(x) {\n  let resolved = await x;\n  if (resolved instanceof Array) {\n    let replacement = [];\n    for (const y of resolved) {\n      replacement.push(await superResolver(y));\n    }\n    resolved = replacement;\n  }\n  return resolved;\n}\n\nfunction remove_file(id, file_store, meta_store) {\n  let request = meta_store.get(id);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      let meta = request.result;\n      var refcount = meta[\"count\"] - 1;\n      var promises = [];\n\n      if (refcount === 0) {\n        promises.push(\n          new Promise((resolve, reject) => {\n            let request = file_store.delete(id);\n            request.onsuccess = event => {\n              resolve(true);\n            };\n            request.onerror = event => {\n              reject(new Error(`failed to remove file ${id} from KanaDB: ${event.target.errorCode}`));\n            };\n          })\n        );\n    \n        promises.push(\n          new Promise((resolve, reject) => {\n            let request = meta_store.delete(id);\n            request.onsuccess = event => {\n              resolve(true);\n            };\n            request.onerror = event => {\n              reject(new Error(`failed to remove file metadata ${id} from KanaDB: ${event.target.errorCode}`));\n            };\n          })\n        );\n  \n      } else {\n        promises.push(\n          new Promise((resolve, reject) => {\n            meta.count = refcount;\n            let request = meta_store.put(meta);\n            request.onsuccess = event => {\n              resolve(true);\n            };\n            request.onerror = event => {\n              reject(new Error(`failed to update file metadata ${id} in KanaDB: ${event.target.errorCode}`));\n            };\n          })\n        );\n      }\n\n      resolve(promises);\n    };\n\n    request.onerror = event => {\n      // console.log(event);\n      reject(new Error(`failed to retrieve file metadata ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  });\n}\n\nexport async function removeFile(id) {\n  await init;\n  let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error when removing file ${id} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let file_store = trans.objectStore(\"file\");\n  let meta_store = trans.objectStore(\"file_meta\");\n  let removal = remove_file(id, file_store, meta_store);\n\n  // Only await after attaching all event handlers.\n  await superResolver(removal);\n  await fin;\n  return;\n}\n\nexport async function removeAnalysis(id) {\n  await init;\n  let trans = kanaDB.result.transaction(\n    [\"analysis\", \"analysis_meta\", \"file\", \"file_meta\"],\n    \"readwrite\"\n  );\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error when removing analysis ${id} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let analysis_store = trans.objectStore(\"analysis\");\n  let analysis_meta_store = trans.objectStore(\"analysis_meta\");\n  let file_store = trans.objectStore(\"file\");\n  let file_meta_store = trans.objectStore(\"file_meta\");\n\n  let analysis_removal = new Promise((resolve, reject) => {\n    let request = analysis_store.delete(id);\n    request.onsuccess = event => {\n      resolve(true);\n    };\n    request.onerror = event => {\n      reject(new Error(`failed to delete analysis ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  })\n\n  // Removing all files as well.\n  let request = analysis_meta_store.get(id);\n  let file_removal = new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      let meta = request.result;\n\n      let my_promises = [];\n      for (const v of Object.values(meta[\"files\"][\"datasets\"])) {\n        for (const f of v[\"files\"]) {\n          my_promises.push(remove_file(f[\"id\"], file_store, file_meta_store));\n        }\n      }\n\n      // And THEN removing the analysis metadata, because otherwise\n      // we wouldn't know what the files were, obviously!\n      let deleted = new Promise((resolve, reject) => {\n        let request = analysis_meta_store.delete(id);\n        request.onsuccess = event => {\n          resolve(true);\n        };\n        request.onerror = event => {\n          reject(new Error(`failed to delete analysis metadata ${id} from KanaDB: ${event.target.errorCode}`));\n        };\n      })\n\n      my_promises.push(deleted);\n      resolve(my_promises);\n    };\n\n    request.onerror = event => {\n      reject(new Error(`failed to retrieve analysis metadata ${id} from KanaDB: ${event.target.errorCode}`));\n    };\n  });\n\n  // Only await after attaching all event handlers.\n  await analysis_removal;\n  await superResolver(file_removal);\n  await fin;\n  return true;\n}\n","var DownloadsDB;\nvar init = null;\n\nexport function initialize() {\n  if (init === null) {\n    init = new Promise((resolve, reject) => {\n      // initialize database on worker creation\n      DownloadsDB = indexedDB.open(\"DownloadsDB\", 3);\n\n      DownloadsDB.onupgradeneeded = (e) => {\n        var DownloadsDBClient = e.target.result;\n\n        // Currently purging all existing stores when the version is updated.\n        // At some point we may add a more sophisticated upgrade mechanism.\n        try {\n          DownloadsDBClient.deleteObjectStore(\"downloads\");\n        } catch (e) {}\n\n        DownloadsDBClient.createObjectStore(\"downloads\", { keyPath: \"url\" });\n      };\n\n      DownloadsDB.onsuccess = () => {\n        resolve(null);\n      };\n\n      DownloadsDB.onerror = () => {\n        reject(\"failed to initialize DownloadsDB\");\n      };\n    });\n  }\n\n  return init;\n}\n\nasync function fetchWithProgress(url, startFun, iterFun, endFun, params=null) {\n  let res;\n  if (params == null) {\n    res = await fetch(url);\n  } else {\n    res = await fetch(url, params);\n  }\n\n  if (!res.ok) {\n    throw new Error(\"oops, failed to download '\" + url + \"'\");\n  }\n\n  const cl = res.headers.get(\"content-length\"); // WARNING: this might be NULL!\n  const id = startFun(cl);\n\n  const reader = res.body.getReader();\n  const chunks = [];\n  let total = 0;\n\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      break;\n    }\n    chunks.push(value);\n    total += value.length;\n    iterFun(id, total);\n  }\n\n  let output = new Uint8Array(total);\n  let start = 0;\n  for (const x of chunks) {\n    output.set(x, start);\n    start += x.length;\n  }\n\n  endFun(id, total);\n  return output;\n}\n\nasync function fetchWrapper(url, params = null) {\n  try {\n    const out = await fetchWithProgress(\n      url,\n      (cl) => {\n        postMessage({\n          type: `DOWNLOAD for url: ` + String(url),\n          download: \"START\",\n          url: String(url),\n          total_bytes: String(cl),\n          msg: \"Total size is \" + String(cl) + \" bytes!\",\n        });\n        return url;\n      },\n      (id, sofar) => {\n        postMessage({\n          type: `DOWNLOAD for url: ` + String(url),\n          download: \"PROGRESS\",\n          url: String(url),\n          downloaded_bytes: String(sofar),\n          msg: \"Progress so far, got \" + String(sofar) + \" bytes!\",\n        });\n      },\n      (id, total) => {\n        postMessage({\n          type: `DOWNLOAD for url: ` + String(url),\n          download: \"COMPLETE\",\n          url: String(url),\n          msg: \"Finished, got \" + String(total) + \" bytes!\",\n        });\n      },\n      params\n    );\n\n    return out;\n  } catch (error) {\n    // console.log(\"oops error\", error)\n    postMessage({\n      type: `DOWNLOAD for url: ` + String(url),\n      download: \"START\",\n      url: String(url),\n      total_bytes: 100,\n    });\n\n    let req;\n    if (params == null) {\n      req = fetch(url);\n    } else {\n      req = fetch(url, params);\n    }\n\n    var res = await req;\n    if (!res.ok) {\n      throw new Error(\"failed to download '\" + url + \"' (\" + res.status + \")\");\n    }\n    var buffer = await res.arrayBuffer();\n\n    postMessage({\n      type: `DOWNLOAD for url: ` + String(url),\n      download: \"COMPLETE\",\n      url: String(url),\n    });\n    return new Uint8Array(buffer);\n  }\n}\n\nexport async function get(url, params = null, force = false) {\n  await init;\n\n  if (!force) {\n    let trans = DownloadsDB.result.transaction([\"downloads\"], \"readonly\");\n    let download_store = trans.objectStore(\"downloads\");\n\n    var data_check = new Promise((resolve, reject) => {\n      var already = download_store.get(url);\n      already.onsuccess = event => {\n        if (already.result !== undefined) {\n          resolve(already.result.payload);\n        } else {\n          resolve(null);\n        }\n      };\n      already.onerror = event => {\n        reject(`failed to query DownloadsDB for ${url}: ${event.target.errorCode}`);\n      };\n    });\n\n    var found = await data_check;\n    if (found !== null) {\n      return found;\n    }\n  }\n\n  var buffer = await fetchWrapper(url, params)\n\n  // Technically, this isn't quite right, because we need to close the read\n  // transaction before opening the write transaction; multiple queries to\n  // the same URL from different workers could cause multiple downloads if\n  // they each miss each other's read check. But oh well; the auto-commit\n  // of IDB transactions means that it's hard to do any better. (Specifically,\n  // we can't do an async fetch while the transaction is still open, because\n  // it just closes before the fetch is done.)\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readwrite\");\n\n  // The Promise's function should evaluate immediately\n  // (see https://stackoverflow.com/questions/35177230/are-promises-lazily-evaluated) \n  // so the callbacks should be attached to the transaction before we return to the event loop.\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error for saving ${url} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let download_store = trans.objectStore(\"downloads\");\n  let saving = new Promise((resolve, reject) => {\n    var putrequest = download_store.put({ url: url, payload: buffer });\n    putrequest.onsuccess = event => {\n      resolve(true);\n    };\n    putrequest.onerror = event => {\n      reject(new Error(`failed to cache ${url} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  // Stack all awaits here, AFTER event handlers have been attached.\n  await saving;\n  await fin;\n  return buffer;\n}\n\nexport async function remove(url) {\n  await init;\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readwrite\");\n  let fin = new Promise((resolve, reject) => {\n    trans.oncomplete = (event) => {\n      resolve(null);\n    };\n    trans.onerror = (event) => {\n      reject(new Error(`transaction error for removing ${url} in DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  let download_store = trans.objectStore(\"downloads\")\n  let removal = new Promise((resolve, reject) => {\n    let request = download_store.delete(url);\n    request.onsuccess = event => {\n      resolve(true);\n    };\n    request.onerror = event => {\n      reject(new Error(`failed to remove ${url} from DownloadsDB: ${event.target.errorCode}`));\n    };\n  });\n\n  // Only await after attaching event handlers.\n  await removal;\n  await fin;\n  return;\n}\n","import * as bakana from \"bakana\";\nimport * as gesel from \"gesel\";\nimport * as remotes from \"bakana-remotes\";\nimport * as downloads from \"./DownloadsDBHandler.js\";\n\n// Evade CORS problems and enable caching.\nconst proxy = \"https://cors-proxy.aaron-lun.workers.dev\";\nasync function proxyAndCache(url) {\n  let buffer = await downloads.get(proxy + \"/\" + encodeURIComponent(url));\n  return new Uint8Array(buffer);\n}\n\nbakana.CellLabellingState.setDownload(proxyAndCache);\ngesel.setGeneDownload(proxyAndCache);\nbakana.RnaQualityControlState.setDownload(proxyAndCache);\n\ngesel.referenceDownload(async (file, start, end) => {\n  let url = gesel.referenceBaseUrl() + \"/\" + file;\n  let full = proxy + \"/\" + encodeURIComponent(url);\n  if (start == null && end == null) {\n    let buffer = await downloads.get(full);\n    return new Response(buffer);\n  } else {\n    return fetch(full + \"?start=\" + String(start) + \"&end=\" + String(end));\n  }\n});\n\ngesel.geneDownload(async (file) => {\n  let url = gesel.geneBaseUrl() + \"/\" + file;\n  let buffer = await downloads.get(proxy + \"/\" + encodeURIComponent(url));\n  return new Response(buffer);\n});\n\nremotes.ExperimentHubDataset.setDownloadFun(proxyAndCache);\nbakana.availableReaders[\"ExperimentHub\"] = remotes.ExperimentHubDataset;\n\nexport function extractBuffers(object, store) {\n  if (!object) {\n    return;\n  }\n\n  if (Array.isArray(object)) {\n    for (const element of object) {\n      extractBuffers(element, store);\n    }\n  } else if (object.constructor == Object) {\n    for (const [key, element] of Object.entries(object)) {\n      extractBuffers(element, store);\n    }\n  } else if (ArrayBuffer.isView(object)) {\n    if (!(object.buffer instanceof ArrayBuffer)) {\n      throw \"only ArrayBuffers should be in the message payload\";\n    }\n    store.push(object.buffer);\n  }\n}\n\nexport function postAttempt(step) {\n  postMessage({\n    type: `${step}_START`,\n  });\n}\n\nexport function postSuccess(step, info) {\n  if (typeof info == \"undefined\") {\n    postMessage({\n      type: `${step}_CACHE`,\n    });\n  } else {\n    var transferable = [];\n    extractBuffers(info, transferable);\n    postMessage(\n      {\n        type: `${step}_DATA`,\n        resp: info,\n      },\n      transferable\n    );\n  }\n}\n\nexport function postError(type, err, fatal) {\n  postMessage({\n    type: `${type}_ERROR`,\n    resp: {\n      reason: err.toString(),\n      fatal: fatal,\n    },\n  });\n}\n\nexport function splitMetricsByBlock(metrics, blockLevels, blockIds) {\n  var output = {};\n  var blocks = blockIds.slice();\n  for (var b = 0; b < blockLevels.length; b++) {\n    let current = {};\n    for (const [key, val] of Object.entries(metrics)) {\n      current[key] = val.slice().filter((x, i) => blocks[i] == b);\n    }\n    output[blockLevels[b]] = current;\n  }\n  return output;\n}\n\nexport function splitThresholdsByBlock(thresholds, blockLevels) {\n  var output = {};\n  for (const x of blockLevels) {\n    output[x] = {};\n  }\n\n  for (const [key, val] of Object.entries(thresholds)) {\n    for (var b = 0; b < blockLevels.length; b++) {\n      output[blockLevels[b]][key] = val[b];\n    }\n  }\n\n  return output;\n}\n\nexport async function fetchStepSummary(state, step) {\n  // do not send any response to UI if they have not changed\n  if (!state[step].changed) {\n    return undefined;\n  }\n\n  if (step === \"inputs\") {\n    let output = {};\n\n    let ngenes = {};\n    for (const a of state[step].fetchCountMatrix().available()) {\n      ngenes[a] = state[step].fetchCountMatrix().get(a).numberOfRows();\n    }\n\n    let gene_info = {};\n    for (const [k, v] of Object.entries(\n      state[step].fetchFeatureAnnotations()\n    )) {\n      let info = {};\n      for (const c of v.columnNames()) {\n        let col = v.column(c);\n        if (Array.isArray(col)) {\n          info[c] = col;\n        }\n      }\n\n      if (Array.isArray(v.rowNames())) {\n        info[\"rownames\"] = v.rowNames();\n      }\n\n      gene_info[k] = info;\n    }\n\n    let cell_info = {};\n    for (const c of state[step].fetchCellAnnotations().columnNames()) {\n      let col = state[step].fetchCellAnnotations().column(c);\n      if (isArrayOrView(col)) {\n        const ksumm = describeColumn(col, {\n          all: false,\n          unique: true,\n          colname: c,\n        });\n        cell_info[c] = ksumm;\n      }\n    }\n\n    var blocks = state[step].fetchBlockLevels();\n    if (blocks !== null) {\n      const col = state[step].fetchBlock().slice();\n      if (isArrayOrView(col)) {\n        const ksumm = describeColumn(col, {\n          all: false,\n          unique: true,\n          colname: \"__batch__\",\n        });\n        cell_info[\"__batch__\"] = ksumm;\n      }\n    }\n\n    output = {\n      num_cells: state[step].fetchCountMatrix().numberOfColumns(),\n      num_genes: ngenes,\n      genes: gene_info,\n      annotations: cell_info,\n    };\n\n    return output;\n  } else if (step === \"rna_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().subsetProportions(0),\n    };\n\n    let output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      sums: state[step].fetchFilters().thresholdsSums(),\n      detected: state[step].fetchFilters().thresholdsDetected(),\n      proportion: state[step].fetchFilters().thresholdsSubsetProportions(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    return output;\n  } else if (step === \"adt_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().subsetTotals(0),\n    };\n\n    var output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      detected: state[step].fetchFilters().thresholdsDetected(),\n      proportion: state[step].fetchFilters().thresholdsSubsetTotals(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    // We don't use sums for filtering but we do report it in the metrics,\n    // so we just add some NaNs to the thresholds for consistency.\n    for (const [k, v] of Object.entries(output.thresholds)) {\n      v.sums = NaN;\n    }\n\n    return output;\n  } else if (step === \"crispr_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().maxProportions(),\n    };\n\n    let output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      count: state[step].fetchFilters().thresholdsMaxCount(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    return output;\n  } else if (step === \"cell_filtering\") {\n    let remaining = 0,\n      discard_vec = null;\n    const discardBuff = state[step].fetchDiscards();\n    if (discardBuff) {\n      discardBuff.forEach((x) => {\n        remaining += x == 0;\n      });\n      discard_vec = discardBuff.slice();\n    } else {\n      remaining = state.inputs.fetchCountMatrix().numberOfColumns();\n    }\n    let output = { retained: remaining, discard: discard_vec };\n    return output;\n  } else if (step === \"rna_normalization\") {\n    return {};\n  } else if (step === \"adt_normalization\") {\n    return {};\n  } else if (step === \"crispr_normalization\") {\n    return {};\n  } else if (step === \"feature_selection\") {\n    let output = {\n      means: state[step].fetchResults().means(),\n      vars: state[step].fetchResults().variances(),\n      fitted: state[step].fetchResults().fitted(),\n      resids: state[step].fetchResults().residuals(),\n    };\n    return output;\n  } else if (\n    step === \"rna_pca\" ||\n    step === \"adt_pca\" ||\n    step === \"crispr_pca\"\n  ) {\n    let pcs = state[step].fetchPCs();\n    var var_exp = pcs.varianceExplained();\n    var total_var = pcs.totalVariance();\n    var_exp.forEach((x, i) => {\n      var_exp[i] = x / total_var;\n    });\n    return {\n      var_exp: var_exp,\n    };\n  } else if (step === \"combine_embeddings\") {\n    return {};\n  } else if (step === \"batch_correction\") {\n    return {};\n  } else if (step === \"neighbor_index\") {\n    return {};\n  } else if (step === \"tsne\" || step === \"umap\") {\n    return await state[step].fetchResults();\n  } else if (step === \"kmeans_cluster\") {\n    return {};\n  } else if (step === \"snn_graph_cluster\") {\n    return {};\n  } else if (step === \"choose_clustering\") {\n    var clusters = state[step].fetchClusters();\n    return { clusters: clusters.slice() };\n  } else if (step === \"marker_detection\") {\n    return {};\n  } else if (step === \"cell_labelling\") {\n    let markers = state.marker_detection.fetchResults();\n    if (\"RNA\" in markers) {\n      let results = state[step].computeLabels(markers.RNA);\n      // for (const [k, v] of Object.entries(results.per_reference)) { // TODO: return scores.\n      //   results.per_reference[k] = v.map(x => x.best);\n      // }\n      // if (\"integrated\" in results) {\n      //   results.integrated = results.integrated.map(x => x.best);\n      // }\n      return results;\n    } else {\n      return { per_reference: {} };\n    }\n  } else if (step === \"custom_selections\") {\n    return {};\n  } else if (step === \"feature_set_enrichment\") {\n    let collections = state.feature_set_enrichment.fetchCollectionDetails();\n    let sets = state.feature_set_enrichment.fetchSetDetails();\n    return {\n      collections: collections,\n      sets: {\n        names: sets.names,\n        descriptions: sets.descriptions,\n        sizes: sets.sizes.slice(),\n        collections: sets.collections.slice(),\n      },\n    };\n  }\n}\n\nexport function isArrayOrView(col) {\n  return Array.isArray(col) || ArrayBuffer.isView(col);\n}\n\nexport function describeColumn(\n  col,\n  { all = false, unique = false, colname = null } = {}\n) {\n  let res;\n  if (isArrayOrView(col)) {\n    res = bakana.summarizeArray(col);\n    const uqVals = new Set(col);\n    res[\"num_unique\"] = uqVals.size;\n\n    if ((uqVals.size <= 50) & unique) res[\"values\"] = [...uqVals].sort();\n    if (all) res[\"_all_\"] = col;\n\n    // if type is continous and unique values is less than 50, type is both\n    if (res[\"type\"] === \"continuous\" && uqVals.size <= 50) res[\"type\"] = \"both\";\n\n    if (typeof colname === \"string\" || colname instanceof String)\n      res[\"name\"] = colname;\n  }\n\n  return res;\n}\n","import { randomColor } from \"randomcolor\";\n\nexport const getColors = (data) => {\n  const palette = {\n    1: [\"#1b9e77\"],\n    2: [\"#1b9e77\", \"#d95f02\"],\n    3: [\"#1b9e77\", \"#d95f02\", \"#7570b3\"],\n    4: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\"],\n    5: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\"],\n    6: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\", \"#e6ab02\"],\n    7: [\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#7570b3\",\n      \"#e7298a\",\n      \"#66a61e\",\n      \"#e6ab02\",\n      \"#a6761d\",\n    ],\n    8: [\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#7570b3\",\n      \"#e7298a\",\n      \"#66a61e\",\n      \"#e6ab02\",\n      \"#a6761d\",\n      \"#666666\",\n    ],\n    9: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n    ],\n    10: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n    ],\n    11: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n      \"#ffff99\",\n    ],\n    12: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n      \"#ffff99\",\n      \"#b15928\",\n    ],\n  };\n\n  let cluster_count = Math.max(...data) + 1;\n  let cluster_colors = null;\n  if (cluster_count > Object.keys(palette).length) {\n    cluster_colors = randomColor({\n      luminosity: \"dark\",\n      count: cluster_count + 1,\n    });\n  } else {\n    cluster_colors = palette[cluster_count.toString()];\n  }\n\n  return cluster_colors;\n};\n\nexport function isObject(object) {\n  return typeof object === \"object\" && Array.isArray(object) === false;\n}\n\nexport const code = \"K@𝜂a#$c3ll\";\n\n// this function is from https://developer.mozilla.org/en-US/docs/Glossary/Base64\nexport function utf8_to_b64(str) {\n  return window.btoa(unescape(encodeURIComponent(str)));\n}\n\nexport function generateUID(resource) {\n  let base = `${resource.format}`;\n  switch (resource.format) {\n    case \"SummarizedExperiment\":\n      base += `::${resource.rds.name}::${resource.rds.lastModified}::${resource.rds.size}`;\n      return utf8_to_b64(base);\n    case \"MatrixMarket\":\n      for (let key of [\"genes\", \"mtx\", \"annotations\"]) {\n        if (resource[key]) {\n          base += `::${resource[key].name}::${resource[key].lastModified}::${resource[key].size}`;\n        }\n      }\n      return utf8_to_b64(base);\n    case \"10X\":\n    case \"H5AD\":\n      base += `::${resource.h5.name}::${resource.h5.lastModified}::${resource.h5.size}`;\n      return utf8_to_b64(base);\n    case \"ExperimentHub\":\n      base += `::${resource.id}`;\n      return utf8_to_b64(base);\n    case \"ZippedArtifactdb\":\n      base += `::${resource.zipname}::${resource.zipfile}`;\n      return utf8_to_b64(base);\n    case \"ZippedADB\":\n      base += `::${resource.zipname}::${resource.zipfile}`;\n      return utf8_to_b64(base);\n    default:\n      throw Error(`format: ${resource.format} does not exist`);\n      break;\n  }\n}\n\nexport const MODALITIES = [\"RNA\", \"ADT\", \"CRISPR\"];\n\nexport const getMinMax = (arr) => {\n  var max = -Number.MAX_VALUE,\n    min = Number.MAX_VALUE;\n  arr.forEach(function (x) {\n    if (max < x) {\n      max = x;\n    }\n    if (min > x) {\n      min = x;\n    }\n  });\n  return [min, max];\n};\n\nexport const defaultColor = \"#5F6B7C\";\n\nexport const default_cluster = `${code}::CLUSTERS`;\nexport const default_selection = `${code}::SELECTION`;\n\nexport const getComputedCols = (cols) => {\n  return Object.keys(cols)\n    .filter(\n      (x) =>\n        cols[x].name === default_cluster ||\n        ((cols[x].name.startsWith(code) || cols[x].name === \"__batch__\") &&\n          cols[x].type !== \"continuous\" &&\n          (cols[x][\"type\"] === \"both\" ||\n            (cols[x][\"type\"] === \"categorical\" &&\n              cols[x][\"truncated\"] === false)))\n    )\n    .filter((x) => !cols[x].name.replace(`${code}::`, \"\").startsWith(\"QC\"));\n};\n\nexport const showComputedSection = (cols, custom) => {\n  return getComputedCols(cols).length > 0 || Object.keys(custom).length > 0;\n};\n\nexport const getSuppliedCols = (cols) => {\n  return Object.keys(cols).filter(\n    (x) =>\n      !cols[x].name.startsWith(code) &&\n      cols[x].name !== \"__batch__\" &&\n      cols[x].type !== \"continuous\" &&\n      (cols[x][\"type\"] === \"both\" ||\n        (cols[x][\"type\"] === \"categorical\" && cols[x][\"truncated\"] === false))\n  );\n};\n\nexport const resetApp = () => {\n  window.location.reload();\n};\n","import * as bakana from \"bakana\";\nimport * as scran from \"scran.js\";\nimport * as kana_db from \"./KanaDBHandler.js\";\nimport * as gesel from \"gesel\";\nimport * as hashwasm from \"hash-wasm\";\nimport * as remotes from \"bakana-remotes\";\nimport * as downloads from \"./DownloadsDBHandler.js\";\nimport JSZip from \"jszip\";\n\nimport * as translate from \"./translate.js\";\nimport {\n  extractBuffers,\n  postAttempt,\n  postSuccess,\n  postError,\n  fetchStepSummary,\n  describeColumn,\n  isArrayOrView,\n  fetchWithProgress,\n} from \"./helpers.js\";\nimport { code } from \"../utils/utils.js\";\n/***************************************/\n\nconst default_cluster = `${code}::CLUSTERS`;\nconst default_selection = `${code}::SELECTION`;\n\nlet superstate = null;\nlet preflights = {};\nlet preflights_summary = {};\nlet cache_matrix = null;\nlet cache_anno_markers = {};\n\nfunction createDataset(args) {\n  if (args.format === \"10X\") {\n    return new bakana.TenxHdf5Dataset(\n      args.h5,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"MatrixMarket\") {\n    return new bakana.TenxMatrixMarketDataset(\n      args.mtx,\n      args.genes || null,\n      args.annotations || null,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"H5AD\") {\n    return new bakana.H5adDataset(args.h5, args.options ? args.options : {});\n  } else if (args.format === \"SummarizedExperiment\") {\n    return new bakana.SummarizedExperimentDataset(\n      args.rds,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"ZippedADB\") {\n    return new bakana.ZippedArtifactdbDataset(\n      args.zipname,\n      args.zipfile,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"ExperimentHub\") {\n    return new remotes.ExperimentHubDataset(\n      args.id,\n      args.options ? args.options : {}\n    );\n  } else {\n    throw new Error(\"unknown format '\" + args.format + \"'\");\n  }\n}\n\nfunction summarizeDataset(summary, args) {\n  // TODO: figure out a way to deal with nested dataframes later\n  let cells_summary = {};\n  for (const k of summary.cells.columnNames()) {\n    const kcol = summary.cells.column(k);\n    if (isArrayOrView(kcol))\n      cells_summary[k] = describeColumn(kcol, {\n        all: true,\n        unique: true,\n        colname: k,\n      });\n  }\n  let tmp_meta = {\n    cells: {\n      columns: cells_summary,\n      numberOfCells: summary.cells.numberOfRows(),\n    },\n  };\n\n  if (args.format === \"H5AD\") {\n    tmp_meta[\"all_features\"] = {};\n    let tmod_summary = {};\n    for (const k of summary[\"all_features\"].columnNames()) {\n      const kcol = summary[\"all_features\"].column(k);\n      if (isArrayOrView(kcol)) {\n        tmod_summary[k] = describeColumn(kcol, {\n          all: true,\n          unique: true,\n          colname: k,\n        });\n      }\n    }\n    tmp_meta[\"all_features\"] = {\n      columns: tmod_summary,\n      numberOfFeatures: summary[\"all_features\"].numberOfRows(),\n      rownames: Array.isArray(summary[\"all_features\"].rowNames()),\n    };\n  } else if (args.format === \"SummarizedExperiment\") {\n    tmp_meta[\"modality_features\"] = {};\n    if (\"modality_features\" in summary) {\n      for (const [k, v] of Object.entries(summary.modality_features)) {\n        let tmod_summary = {};\n        for (const k of v.columnNames()) {\n          const kcol = v.column(k);\n          if (isArrayOrView(kcol)) {\n            tmod_summary[k] = describeColumn(kcol, {\n              all: true,\n              unique: true,\n              colname: k,\n            });\n          }\n        }\n        tmp_meta[\"modality_features\"][k] = {\n          columns: tmod_summary,\n          numberOfFeatures: v.numberOfRows(),\n          rownames: Array.isArray(v.rowNames()),\n        };\n      }\n    }\n  } else {\n    tmp_meta[\"modality_features\"] = {};\n    if (\"modality_features\" in summary) {\n      for (const [k, v] of Object.entries(summary.modality_features)) {\n        let tmod_summary = {};\n        for (const k of v.columnNames()) {\n          const kcol = v.column(k);\n          if (isArrayOrView(kcol)) {\n            tmod_summary[k] = describeColumn(kcol, {\n              all: true,\n              unique: true,\n              colname: k,\n            });\n          }\n        }\n        tmp_meta[\"modality_features\"][k] = {\n          columns: tmod_summary,\n          numberOfFeatures: v.numberOfRows(),\n          rownames: Array.isArray(v.rowNames()),\n        };\n      }\n    }\n  }\n\n  if (args.format === \"H5AD\") {\n    tmp_meta[\"all_assay_names\"] = summary.all_assay_names;\n  } else if (\n    args.format === \"SummarizedExperiment\" ||\n    args.format === \"ZippedADB\"\n  ) {\n    tmp_meta[\"modality_assay_names\"] = summary.modality_assay_names;\n  }\n  return tmp_meta;\n}\n\nbakana.setVisualizationAnimate((type, x, y, iter) => {\n  postMessage(\n    {\n      type: type + \"_iter\",\n      x: x,\n      y: y,\n      iteration: iter,\n    },\n    [x.buffer, y.buffer]\n  );\n});\n\nfunction linkKanaDb(collected) {\n  return async (type, file) => {\n    let buffer = file.buffer();\n    var md5 = await hashwasm.md5(buffer);\n    var id = type + \"_\" + file.name() + \"_\" + buffer.length + \"_\" + md5;\n    await kana_db.saveFile(id, buffer);\n    collected.push(id);\n    return id;\n  };\n}\n\nbakana.setResolveLink(kana_db.loadFile);\n\nasync function unserializeAllSteps(contents) {\n  const h5path = \"serialized_out.h5\";\n\n  let output;\n  try {\n    let loader = await bakana.parseKanaFile(contents, h5path);\n    let loaded_state = await bakana.loadAnalysis(h5path, loader, {\n      finishFun: postSuccess,\n    });\n\n    if (superstate !== null) {\n      await bakana.freeAnalysis(superstate);\n    }\n    superstate = loaded_state;\n\n    output = {\n      parameters: translate.toUI(bakana.retrieveParameters(superstate)),\n      other: {\n        custom_selections: superstate.custom_selections.fetchSelections(),\n      },\n    };\n  } finally {\n    bakana.callScran((scran) => scran.removeFile(h5path));\n  }\n\n  return output;\n}\n\nasync function postStepSummary(step) {\n  try {\n    let output = await fetchStepSummary(superstate, step);\n\n    postSuccess(step, output);\n  } catch (err) {\n    console.error(err);\n    postError(step, err, true);\n  }\n}\n\nfunction getMarkerStandAloneForAnnot(annotation, annotation_vec) {\n  let mds;\n  if (!(annotation in cache_anno_markers)) {\n    mds = new bakana.MarkerDetectionStandalone(\n      getMatrix(),\n      annotation_vec.ids.slice()\n    );\n\n    mds.computeAll();\n    cache_anno_markers[annotation] = mds;\n  }\n\n  return cache_anno_markers[annotation];\n}\n\nconst getAnnotation = (annotation, unfiltered = false) => {\n  let vec;\n  if (annotation === \"__batch__\") {\n    vec = superstate.inputs.fetchBlock().slice();\n  } else if (annotation.startsWith(`${code}::QC::`)) {\n    let metric = annotation.replace(`${code}::QC::`, \"\");\n    let split_metric = metric.split(\"_\");\n    let metrics =\n      superstate[\n        `${split_metric[0].toLowerCase()}_quality_control`\n      ].fetchMetrics();\n\n    if (split_metric[1] === \"sums\") {\n      vec = metrics.sums();\n    } else if (split_metric[1] === \"detected\") {\n      vec = metrics.detected();\n    } else if (split_metric[1] === \"proportion\") {\n      if (split_metric[0].toLowerCase() === \"rna\") {\n        vec = metrics.subsetProportions(0);\n      } else if (split_metric[0].toLowerCase() === \"adt\") {\n        vec = metrics.subsetTotals(0);\n      } else if (split_metric[0].toLowerCase() === \"crispr\") {\n        vec = metrics.maxProportions(0);\n      }\n    }\n  } else {\n    vec = superstate.inputs.fetchCellAnnotations().column(annotation);\n  }\n\n  if (!unfiltered) {\n    vec = superstate.cell_filtering.applyFilter(vec);\n  }\n\n  return vec.slice();\n};\n\nconst getMatrix = () => {\n  if (cache_matrix === null) {\n    cache_matrix = new scran.MultiMatrix();\n    let mapping = {\n      RNA: \"rna_normalization\",\n      ADT: \"adt_normalization\",\n      CRISPR: \"crispr_normalization\",\n    };\n    for (const [k, v] of Object.entries(mapping)) {\n      let state = superstate[v];\n      if (state.valid()) {\n        cache_matrix.add(k, state.fetchNormalizedMatrix());\n      }\n    }\n  }\n  return cache_matrix;\n};\n\nconst resetMarkerState = () => {\n  for (const [k, v] of Object.entries(cache_anno_markers)) {\n    v.free();\n  }\n\n  cache_anno_markers = {};\n};\n\n/***************************************/\n\nvar loaded;\nonmessage = function (msg) {\n  const { type, payload } = msg.data;\n\n  // console.log(\"SCRAN.WORKER ::RCV::\", type, payload);\n\n  let fatal = false;\n  if (type === \"INIT\") {\n    fatal = true;\n    let nthreads = Math.round((navigator.hardwareConcurrency * 2) / 3);\n    let back_init = bakana.initialize({ numberOfThreads: nthreads });\n\n    let state_init = back_init.then(() => {\n      return bakana.createAnalysis();\n    });\n\n    state_init.then((x) => {\n      superstate = x;\n      postMessage({\n        type: type,\n        msg: \"Success: analysis state created\",\n      });\n    });\n\n    let kana_init = kana_db.initialize();\n    kana_init\n      .then((output) => {\n        if (output !== null) {\n          postMessage({\n            type: \"KanaDB_store\",\n            resp: output,\n            msg: \"Success: KanaDB initialized\",\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n        postMessage({\n          type: \"KanaDB_ERROR\",\n          msg: \"Error: Cannot initialize KanaDB\",\n        });\n      });\n\n    let down_init = downloads.initialize();\n    down_init\n      .then((output) => {\n        postMessage({\n          type: \"DownloadsDB_store\",\n          resp: output,\n          msg: \"Success: DownloadsDB initialized\",\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        postMessage({\n          type: \"DownloadsDB_ERROR\",\n          msg: \"Error: Cannot initialize DownloadsDB\",\n        });\n      });\n\n    try {\n      let ehub_ids = remotes.ExperimentHubDataset.availableDatasets();\n      postMessage({\n        type: \"ExperimentHub_store\",\n        resp: ehub_ids,\n        msg: \"Success: ExperimentHub initialized\",\n      });\n    } catch (err) {\n      console.error(err);\n      postMessage({\n        type: \"ExperimentHub_ERROR\",\n        msg: \"Error: Cannot access datasets in ExperimentHub\",\n      });\n    }\n\n    loaded = Promise.all([back_init, kana_init, down_init, state_init]);\n\n    loaded\n      .then(() => {\n        postMessage({\n          type: type,\n          msg: \"Success: bakana initialized\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** RUNNING AN ANALYSIS *******************/\n  } else if (type === \"RUN\") {\n    fatal = true;\n    loaded\n      .then((x) => {\n        let inputs = payload.inputs;\n        let files = inputs.files;\n\n        if (files !== null) {\n          // Extracting existing datasets from the preflights.\n          let current = {};\n          for (const [k, v] of Object.entries(files)) {\n            if (\"uid\" in v && v.uid in preflights) {\n              current[k] = preflights[v.uid];\n            } else {\n              current[k] = createDataset(v);\n            }\n            current[k].setOptions(v.options);\n          }\n\n          // Cleaning out the preflight datasets that weren't used.\n          for (const [k, v] of Object.entries(preflights)) {\n            v.clear();\n            delete preflights[k];\n          }\n\n          files = current;\n        }\n\n        resetMarkerState();\n\n        let formatted = translate.fromUI(inputs, payload.params);\n        bakana\n          .runAnalysis(superstate, files, formatted, {\n            startFun: postAttempt,\n            finishFun: postStepSummary,\n          })\n          .catch((err) => {\n            console.error(err);\n            postError(type, err, fatal);\n          });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n    /**************** LOADING EXISTING ANALYSES *******************/\n  } else if (type === \"LOAD\") {\n    fatal = true;\n    let fs = payload.inputs.files;\n\n    if (fs[Object.keys(fs)[0]].format === \"kana\") {\n      let f = fs[Object.keys(fs)[0]].file;\n      loaded\n        .then(async (x) => {\n          const reader = new FileReaderSync(); // eslint-disable-line\n          const zipbuffer = reader.readAsArrayBuffer(f);\n          const unzipped = await JSZip.loadAsync(zipbuffer);\n          let config = JSON.parse(\n            await unzipped.file(\"config.json\").async(\"string\")\n          );\n\n          let buffers = {};\n          for (const x in unzipped.files) {\n            if (x.startsWith(\"datasets/\")) {\n              let current = await unzipped.files[x].async(\"uint8array\");\n              buffers[x.split(\"/\")[1]] = current;\n            }\n          }\n\n          // This re-runs the entire analysis, so throw startFun/finishFun callbacks here.\n          superstate = await bakana.unserializeConfiguration(\n            config,\n            (id) => buffers[id],\n            {\n              state: superstate,\n              startFun: postAttempt,\n              finishFun: postStepSummary,\n            }\n          );\n\n          const other = {\n            custom_selections: superstate.custom_selections.fetchSelections(),\n          };\n\n          var transferrable = [];\n          extractBuffers(config.parameters, transferrable);\n          postMessage(\n            {\n              type: \"loadedParameters\",\n              resp: {\n                parameters: config.parameters,\n                other: other,\n              },\n            },\n            transferrable\n          );\n\n          let features = {};\n          let resp = {};\n          const loaded_ds = superstate.inputs.fetchDatasets();\n          for (const [k, v] of Object.entries(loaded_ds)) {\n            let res = await v.previewPrimaryIds({ cache: true });\n\n            for (const i_mod of [\"RNA\", \"ADT\", \"CRISPR\"]) {\n              if (i_mod in res) {\n                if (!features[i_mod]) {\n                  features[i_mod] = [res[i_mod]];\n                } else {\n                  features[i_mod].push(res[i_mod]);\n                }\n              }\n            }\n          }\n\n          for (const [k, v] of Object.entries(features)) {\n            resp[k] = gesel.intersect(v).length;\n          }\n\n          postMessage({\n            type: \"PREFLIGHT_OPTIONS_DATA\",\n            resp: resp,\n            msg: \"Success: PREFLIGHT_OPTIONS done\",\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n          postError(type, err, fatal);\n        });\n    } else if (fs[Object.keys(fs)[0]].format === \"kanadb\") {\n      loaded\n        .then(async (x) => {\n          var id = fs[Object.keys(fs)[0]].file;\n\n          const jsonbuffer = await kana_db.loadAnalysis(id);\n          const dec = new TextDecoder();\n          let config = JSON.parse(dec.decode(jsonbuffer));\n\n          superstate = await bakana.unserializeConfiguration(\n            config,\n            kana_db.loadFile,\n            {\n              state: superstate,\n              startFun: postAttempt,\n              finishFun: postStepSummary,\n            }\n          );\n        })\n        .catch((err) => {\n          console.error(err);\n          postError(type, err, fatal);\n        });\n    }\n    /**************** SAVING EXISTING ANALYSES *******************/\n  } else if (type === \"EXPORT\") {\n    loaded\n      .then(async (x) => {\n        let buffers = [];\n        let saver = (name, format, file) => {\n          let id = String(buffers.length);\n          buffers.push(file.buffer());\n          return id;\n        };\n\n        // Returns a configuration object.\n        let collected = await bakana.serializeConfiguration(superstate, saver);\n\n        // Let's zip it all up!\n        const zipper = new JSZip();\n        zipper.file(\"config.json\", JSON.stringify(collected));\n        for (var i = 0; i < buffers.length; i++) {\n          zipper.file(\"datasets/\" + String(i), buffers[i]);\n        }\n        let zipbuffer = await zipper.generateAsync({ type: \"uint8array\" });\n        postMessage(\n          {\n            type: \"exportState\",\n            resp: zipbuffer,\n            msg: \"Success: application state exported\",\n          },\n          [zipbuffer.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"EXPORT_RDS\") {\n    loaded\n      .then(async (x) => {\n        let files = await bakana.saveSingleCellExperiment(superstate, \"sce\", {\n          forceBuffer: true,\n        });\n\n        let gene_files = await bakana.saveGenewiseResults(superstate, \"\", {\n          forceBuffer: true,\n        });\n\n        for (const f of gene_files) {\n          files.push(f);\n        }\n        let zipbuffer = await bakana.zipFiles(files);\n\n        postMessage(\n          {\n            type: \"exportRDSState\",\n            resp: zipbuffer,\n            msg: \"Success: application state exported\",\n          },\n          [zipbuffer.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"SAVEKDB\") {\n    // save analysis to inbrowser indexedDB\n    var title = payload.title;\n    loaded\n      .then(async (x) => {\n        let buffers = [];\n        let saver = async (name, format, file) => {\n          // basically linkKanaDb with an extra arg.\n          let buffer = file.buffer();\n          var md5 = await hashwasm.md5(buffer);\n          var id = type + \"_\" + file.name() + \"_\" + buffer.length + \"_\" + md5;\n          await kana_db.saveFile(id, buffer);\n          buffers.push(id);\n          return id;\n        };\n\n        let collected = await bakana.serializeConfiguration(superstate, saver);\n        const enc = new TextEncoder();\n        let config = enc.encode(JSON.stringify(collected));\n        let id = await kana_db.saveAnalysis(null, config, collected, title);\n\n        let recs = await kana_db.getRecords();\n        postMessage({\n          type: \"KanaDB_store\",\n          resp: recs,\n          msg: `Success: Saved analysis to browser (${id})`,\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** KANADB EVENTS *******************/\n  } else if (type === \"REMOVEKDB\") {\n    // remove a saved analysis\n    var id = payload.id;\n    kana_db\n      .removeAnalysis(id)\n      .then(async (output) => {\n        let recs = await kana_db.getRecords();\n        postMessage({\n          type: \"KanaDB_store\",\n          resp: recs,\n          msg: `Success: Removed file from cache (${id})`,\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"PREFLIGHT_OPTIONS\") {\n    loaded.then(async (x) => {\n      let resp = {};\n      try {\n        let counter = 0;\n        let features = {};\n\n        for (const [k, v] of Object.entries(payload.inputs.files)) {\n          if (\"uid\" in v) {\n            let ds = preflights[v.uid];\n\n            if (\n              Array.isArray(payload.options) &&\n              payload.options.length > counter\n            ) {\n              ds.setOptions(payload.options[counter]);\n\n              let res = await ds.previewPrimaryIds({ cache: true });\n\n              for (const i_mod of [\"RNA\", \"ADT\", \"CRISPR\"]) {\n                if (i_mod in res) {\n                  if (!features[i_mod]) {\n                    features[i_mod] = [res[i_mod]];\n                  } else {\n                    features[i_mod].push(res[i_mod]);\n                  }\n                }\n              }\n            }\n          }\n          counter++;\n        }\n\n        for (const [k, v] of Object.entries(features)) {\n          if (v.length !== payload.options.length) {\n            resp[k] = 0;\n          } else {\n            resp[k] = gesel.intersect(v).length;\n          }\n        }\n      } catch (e) {\n        console.error(e);\n        resp.status = \"ERROR\";\n        resp.reason = e.toString();\n      }\n\n      postMessage({\n        type: \"PREFLIGHT_OPTIONS_DATA\",\n        resp: resp,\n        msg: \"Success: PREFLIGHT_OPTIONS done\",\n      });\n    });\n  } else if (type === \"PREFLIGHT_INPUT\") {\n    loaded\n      .then(async (x) => {\n        let resp = {};\n        try {\n          // Registering the UIDs of each new dataset.\n          let current = {};\n          let summary = {};\n          for (const [k, v] of Object.entries(payload.inputs.files)) {\n            if (\"uid\" in v) {\n              if (!(v.uid in preflights)) {\n                preflights[v.uid] = createDataset(v);\n                preflights_summary[v.uid] = await preflights[v.uid].summary({\n                  cache: true,\n                });\n              }\n              current[k] = preflights[v.uid];\n              summary[k] = summarizeDataset(preflights_summary[v.uid], v);\n            } else {\n              let tmp_dataset = createDataset(v);\n              current[k] = tmp_dataset;\n              summary[k] = summarizeDataset(\n                await current[k].summary({ cache: true }),\n                v\n              );\n            }\n          }\n\n          resp.status = \"SUCCESS\";\n          resp.details = summary;\n          // resp.details = await bakana.validateAnnotations(current, { cache: true });\n          // i guess iterate through each dataset and call summary\n        } catch (e) {\n          console.error(e);\n          resp.status = \"ERROR\";\n          resp.reason = e.toString();\n        }\n\n        postMessage({\n          type: \"PREFLIGHT_INPUT_DATA\",\n          resp: resp,\n          msg: \"Success: PREFLIGHT_INPUT done\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** VERSUS MODE *******************/\n  } else if (type === \"computeVersusClusters\") {\n    loaded\n      .then((x) => {\n        let rank_type = payload.rank_type;\n        let modality = payload.modality;\n        let annotation = payload.annotation;\n\n        let resp, raw_res;\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.computeVersus(\n            payload.left,\n            payload.right\n          );\n\n          resp = bakana.formatMarkerResults(\n            raw_res.results[modality],\n            raw_res.left,\n            rank_type\n          );\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          raw_res = mds.computeVersus(\n            annotation_vec.levels.indexOf(payload.left),\n            annotation_vec.levels.indexOf(payload.right)\n          );\n          resp = bakana.formatMarkerResults(\n            raw_res.results[modality],\n            raw_res.left,\n            rank_type\n          );\n        }\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"computeVersusClusters\",\n            resp: resp,\n            msg: \"Success: COMPUTE_VERSUS_CLUSTERS done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeVersusSelections\") {\n    loaded\n      .then((x) => {\n        let rank_type = payload.rank_type;\n        let res = superstate.custom_selections.computeVersus(\n          payload.left,\n          payload.right\n        );\n        let resp = bakana.formatMarkerResults(\n          res[\"results\"][payload.modality],\n          res.left,\n          rank_type\n        );\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"computeVersusSelections\",\n            resp: resp,\n            msg: \"Success: COMPUTE_VERSUS_SELECTIONS done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** OTHER EVENTS FROM UI *******************/\n  } else if (type === \"getMarkersForCluster\") {\n    loaded\n      .then((x) => {\n        let cluster = payload.cluster;\n        let rank_type = payload.rank_type;\n        let modality = payload.modality;\n        let annotation = payload.annotation;\n        let resp;\n        let raw_res;\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.fetchResults()[modality];\n          resp = bakana.formatMarkerResults(raw_res, cluster, rank_type);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          raw_res = mds.fetchResults()[modality];\n          // cache_anno_markers[annotation][modality];\n\n          resp = bakana.formatMarkerResults(\n            raw_res,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type\n          );\n        }\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"setMarkersForCluster\",\n            resp: resp,\n            msg: \"Success: GET_MARKERS_FOR_CLUSTER done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getGeneExpression\") {\n    loaded\n      .then((x) => {\n        let row_idx = payload.gene;\n        let modality = payload.modality;\n\n        const matrix = getMatrix(modality);\n        let vec;\n        if (modality === \"RNA\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else if (modality === \"ADT\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else if (modality === \"CRISPR\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else {\n          throw new Error(\"unknown feature type '\" + modality + \"'\");\n        }\n\n        postMessage(\n          {\n            type: \"setGeneExpression\",\n            resp: {\n              gene: row_idx,\n              expr: vec,\n            },\n            msg: \"Success: GET_GENE_EXPRESSION done\",\n          },\n          [vec.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeCustomMarkers\") {\n    loaded\n      .then((x) => {\n        superstate.custom_selections.addSelection(\n          payload.id,\n          payload.selection\n        );\n        postMessage({\n          type: \"computeCustomMarkers\",\n          msg: \"Success: COMPUTE_CUSTOM_MARKERS done\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getMarkersForSelection\") {\n    loaded\n      .then((x) => {\n        let raw_res = superstate.custom_selections.fetchResults(\n          payload.cluster\n        )[payload.modality];\n        let resp = bakana.formatMarkerResults(raw_res, 1, payload.rank_type);\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"setMarkersForCustomSelection\",\n            resp: resp,\n            msg: \"Success: GET_MARKERS_FOR_SELECTION done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"removeCustomMarkers\") {\n    loaded\n      .then((x) => {\n        superstate.custom_selections.removeSelection(payload.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"animateTSNE\") {\n    loaded\n      .then(async (x) => {\n        await superstate.tsne.animate();\n        postSuccess(\"tsne\", await superstate.tsne.fetchResults());\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"animateUMAP\") {\n    loaded\n      .then(async (x) => {\n        await superstate.umap.animate();\n        postSuccess(\"umap\", await superstate.umap.fetchResults());\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getAnnotation\") {\n    loaded\n      .then((x) => {\n        let annot = payload.annotation;\n        let vec, output;\n\n        vec = getAnnotation(annot, !!payload.unfiltered);\n\n        if (ArrayBuffer.isView(vec)) {\n          output = {\n            type: \"array\",\n            values: vec.slice(),\n          };\n        } else {\n          let uniq_vals = [];\n          let uniq_map = {};\n          let indices = new Int32Array(vec.length);\n          vec.map((x, i) => {\n            if (!(x in uniq_map)) {\n              uniq_map[x] = uniq_vals.length;\n              uniq_vals.push(x);\n            }\n            indices[i] = uniq_map[x];\n          });\n\n          output = {\n            type: \"factor\",\n            index: indices,\n            levels: uniq_vals,\n          };\n        }\n\n        let extracted = [];\n        extractBuffers(output, extracted);\n        postMessage(\n          {\n            type: \"setAnnotation\",\n            resp: {\n              annotation: annot,\n              values: output,\n            },\n            msg: \"Success: GET_ANNOTATION done\",\n          },\n          extracted\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeFeaturesetSummary\") {\n    loaded\n      .then(async (x) => {\n        let { annotation, rank_type, cluster } = payload;\n        let index = rank_type.indexOf(\"-\");\n        let resp;\n        if (default_cluster === annotation) {\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            superstate.marker_detection.fetchResults()[\"RNA\"],\n            cluster,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        } else if (default_selection === annotation) {\n          let sel_indices =\n            superstate.custom_selections.fetchSelectionIndices(cluster);\n          let num_cells = superstate.cell_filtering\n            .fetchFilteredMatrix()\n            .numberOfColumns();\n\n          let arr_sel_indices = new Uint8Array(num_cells);\n          sel_indices.map((x) => arr_sel_indices.set([1], x));\n          let annotation_vec = scran.factorize(arr_sel_indices);\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          let anno_markers = mds.fetchResults()[\"RNA\"];\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers,\n            annotation_vec.levels.indexOf(1),\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          let anno_markers = mds.fetchResults()[\"RNA\"];\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeFeaturesetVSSummary\") {\n    loaded\n      .then(async (x) => {\n        let { annotation, rank_type, left, right } = payload;\n        let index = rank_type.indexOf(\"-\");\n        let resp;\n        if (default_cluster === annotation) {\n          let raw_res = superstate.marker_detection.computeVersus(left, right);\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            raw_res.results[\"RNA\"],\n            raw_res.left,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        } else if (default_selection === annotation) {\n          let anno_markers = superstate.custom_selections.computeVersus(\n            left,\n            right\n          );\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers.results[\"RNA\"],\n            0,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          let raw_res = mds.computeVersus(\n            annotation_vec.levels.indexOf(payload.left),\n            annotation_vec.levels.indexOf(payload.right)\n          );\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            raw_res.results[\"RNA\"],\n            raw_res.left,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getFeatureScores\") {\n    loaded\n      .then((x) => {\n        let { index } = payload;\n\n        let resp =\n          superstate.feature_set_enrichment.computePerCellScores(index);\n        postSuccess(\"setFeatureScores\", resp);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getFeatureGeneIndices\") {\n    loaded\n      .then((x) => {\n        let { index, cluster, annotation, modality, rank_type } = payload;\n\n        let resp =\n          superstate.feature_set_enrichment.fetchFeatureSetIndices(index);\n\n        let raw_res, marker_resp;\n\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.fetchResults()[modality];\n          marker_resp = bakana.formatMarkerResults(raw_res, cluster, rank_type);\n        } else if (default_selection === annotation) {\n          raw_res = superstate.custom_selections.fetchResults(payload.cluster)[\n            payload.modality\n          ];\n          marker_resp = bakana.formatMarkerResults(\n            raw_res,\n            1,\n            payload.rank_type\n          );\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          raw_res = mds.fetchResults()[modality];\n          // cache_anno_markers[annotation][modality];\n\n          marker_resp = bakana.formatMarkerResults(\n            raw_res,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type\n          );\n        }\n\n        let indices = marker_resp.ordering\n          .map((x, i) => (resp.includes(x) ? i : -100))\n          .filter((x) => x !== -100);\n\n        let filtered_marker_resp = {};\n        for (const [k, v] of Object.entries(marker_resp)) {\n          filtered_marker_resp[k] = v\n            .map((x, i) => (indices.includes(i) ? x : -100))\n            .filter((x) => x !== -100);\n        }\n\n        postSuccess(\"setFeatureGeneIndices\", filtered_marker_resp);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeCellAnnotation\") {\n    let { annotation, cluster } = payload;\n    let result = { per_reference: {} };\n    let markers = null;\n    if (default_cluster === annotation) {\n      markers = superstate.marker_detection.fetchResults();\n    } else if (default_selection === annotation) {\n      markers = superstate.custom_selections.fetchResults(cluster);\n    } else {\n      let annotation_vec = scran.factorize(getAnnotation(annotation));\n      let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n      markers = mds.fetchResults();\n    }\n    if (markers !== null && \"RNA\" in markers) {\n      result = superstate.cell_labelling.computeLabels(markers[\"RNA\"]);\n    }\n    postSuccess(\"computeCellAnnotation\", result);\n  } else {\n    console.error(`Type: ${type} not defined`);\n    postError(type, `Type: ${type} not defined`, fatal);\n  }\n};\n","/*****************************************************\n * This file is intended to be vendored into kanapi,\n * so you shouldn't add too many dependencies here.\n * The canonical version of the file is expected to\n * live at src/workers/translate.js in the kana repo.\n *****************************************************/\n\nimport * as bakana from \"bakana\";\n\nconst mappings = {\n  quality_control: {\n    use_mito_default: [\"qc\", \"qc-usemitodefault\"],\n    mito_prefix: [\"qc\", \"qc-mito\"],\n    nmads: [\"qc\", \"qc-nmads\"],\n    skip: [\"qc\", \"skip\"],\n  },\n  adt_quality_control: {\n    nmads: [\"adt_qualitycontrol\", \"nmads\"],\n    min_detected_drop: [\"adt_qualitycontrol\", \"min_detected_drop\"],\n    igg_prefix: [\"adt_qualitycontrol\", \"igg_prefix\"],\n    skip: [\"adt_qualitycontrol\", \"skip\"],\n  },\n  adt_normalization: {\n    num_pcs: [\"adt_normalization\", \"num_pcs\"],\n    num_clusters: [\"adt_normalization\", \"num_clusters\"],\n  },\n  feature_selection: {\n    span: [\"fSelection\", \"fsel-span\"],\n  },\n  pca: {\n    num_hvgs: [\"pca\", \"pca-hvg\"],\n    num_pcs: [\"pca\", \"pca-npc\"],\n  },\n  adt_pca: {\n    num_pcs: [\"adt_pca\", \"num_pcs\"],\n  },\n  combine_embeddings: {\n    weights: [\"combine_embeddings\", \"weights\"],\n  },\n  cell_labelling: {\n    references: null,\n    automatic: true,\n    species: [],\n    gene_id_column: null,\n    gene_id_type: \"ENSEMBL\",\n  },\n  batch_correction: {\n    // method is handled by configureBatchCorrection.\n    num_neighbors: [\"batch_correction\", \"num_neighbors\"],\n  },\n  choose_clustering: {\n    method: [\"cluster\", \"clus-method\"],\n  },\n  // Neighbor indexing is handled by configureApproximateNeighbors.\n  tsne: {\n    perplexity: [\"tsne\", \"tsne-perp\"],\n    iterations: [\"tsne\", \"tsne-iter\"],\n    animate: [\"tsne\", \"animate\"],\n  },\n  umap: {\n    num_neighbors: [\"umap\", \"umap-nn\"],\n    num_epochs: [\"umap\", \"umap-epochs\"],\n    min_dist: [\"umap\", \"umap-min_dist\"],\n    animate: [\"umap\", \"animate\"],\n  },\n  kmeans_cluster: {\n    k: [\"cluster\", \"kmeans-k\"],\n  },\n  snn_graph_cluster: {\n    k: [\"cluster\", \"clus-k\"],\n    scheme: [\"cluster\", \"clus-scheme\"],\n    resolution: [\"cluster\", \"clus-res\"],\n  },\n  // cell_labelling: {\n  //   human_references: [\"annotateCells\", \"annotateCells-human_references\"],\n  //   mouse_references: [\"annotateCells\", \"annotateCells-mouse_references\"],\n  // },\n};\n\nexport function fromUI(inputs, params) {\n  let formatted = params;\n\n  // Replacing all 1:1 mappings.\n  let safeReplace = (step, par, value) => {\n    if (typeof value == \"undefined\") {\n      throw new Error(\n        \"cannot assign undefined parameter to '\" + step + \".\" + par + \"'\"\n      );\n    }\n    if (!(step in formatted)) {\n      throw new Error(\"unknown analysis step '\" + step + \"'\");\n    }\n    let target = formatted[step];\n    if (!(par in target)) {\n      throw new Error(\n        \"unknown analysis parameter '\" + par + \"' for step '\" + step + \"'\"\n      );\n    }\n    target[par] = value;\n  };\n\n  safeReplace(\"inputs\", \"block_factor\", inputs.batch);\n  safeReplace(\"inputs\", \"subset\", inputs.subset);\n\n  // Special handling for multi-step parameters.\n  bakana.configureBatchCorrection(formatted, params.batch_correction[\"method\"]);\n  bakana.configureApproximateNeighbors(\n    formatted,\n    params.neighbor_index[\"approximate\"]\n  );\n\n  // Simplify the combine_embeddings if we see it is all equal.\n  if (formatted.combine_embeddings.weights !== null) {\n    let uniq_weights = new Set([\n      formatted.combine_embeddings.rna_weight,\n      formatted.combine_embeddings.adt_weight,\n      formatted.combine_embeddings.crispr_weight,\n    ]);\n    if (uniq_weights.size <= 1) {\n      formatted.combine_embeddings.weights = null;\n    }\n  }\n\n  return formatted;\n}\n\nexport function toUI(params) {\n  // Setting all 1:1 mappings.\n  let safeExtract = (step, par) => {\n    if (!(step in params)) {\n      throw new Error(\n        \"no available step '\" + step + \"' in the supplied parameters\"\n      );\n    }\n\n    let curstep = params[step];\n    if (!(par in curstep)) {\n      throw new Error(\n        \"no available parameter '\" + par + \"' in step '\" + step + \"'\"\n      );\n    }\n\n    return curstep[par];\n  };\n\n  let reversed = {\n    inputs: {\n      batch: safeExtract(\"inputs\", \"sample_factor\"),\n      subset: safeExtract(\"inputs\", \"subset\"),\n    },\n  };\n\n  for (const [step, spars] of Object.entries(mappings)) {\n    for (const [par, target] of Object.entries(spars)) {\n      if (!(target[0] in reversed)) {\n        reversed[target[0]] = {};\n      }\n\n      let currev = reversed[target[0]];\n      if (target[1] in currev) {\n        throw new Error(\n          \"duplicate entry for parameter '\" + target[0] + \".\" + target[1] + \"'\"\n        );\n      }\n      currev[target[1]] = safeExtract(step, par);\n    }\n  }\n\n  // Mopping up the rest.\n  reversed.batch_correction.method = bakana.guessBatchCorrectionConfig(params);\n  reversed.ann = {\n    approximate: bakana.guessApproximateNeighborsConfig(params),\n  };\n\n  // Converting it into a dictionary for easier consumption by the UI.\n  if (reversed.combine_embeddings.weights === null) {\n    reversed.combine_embeddings.weights = {};\n  }\n\n  return reversed;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [764,705,522], () => (__webpack_require__(2866)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"343\":\"41526f1f\",\"433\":\"1a280f0e\",\"522\":\"1ea0527e\",\"705\":\"4ba25ce9\",\"764\":\"c63fbfc6\",\"814\":\"75f32851\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t866: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([764,705,522].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["kanaDB","init","get_records","allAnalysis","result","transaction","objectStore","getAll","Promise","resolve","reject","onsuccess","event","vals","forEach","x","files","onerror","Error","concat","target","errorCode","async","getRecords","loadFile","id","file_store","meta_promise","request","get","undefined","meta","Uint8Array","superResolver","resolved","Array","replacement","y","push","remove_file","meta_store","refcount","promises","delete","count","put","DownloadsDB","fetchWrapper","url","params","arguments","length","out","startFun","iterFun","endFun","res","fetch","ok","headers","reader","body","getReader","chunks","total","done","value","read","output","start","set","fetchWithProgress","cl","postMessage","type","String","download","total_bytes","msg","sofar","downloaded_bytes","error","req","status","buffer","arrayBuffer","force","download_store","data_check","already","payload","found","trans","fin","oncomplete","saving","putrequest","proxy","proxyAndCache","downloads","encodeURIComponent","extractBuffers","object","store","isArray","element","constructor","Object","key","entries","ArrayBuffer","isView","postAttempt","step","postSuccess","info","transferable","resp","postError","err","fatal","reason","toString","splitMetricsByBlock","metrics","blockLevels","blockIds","blocks","slice","b","current","val","filter","i","splitThresholdsByBlock","thresholds","isArrayOrView","col","describeColumn","all","unique","colname","bakana","uqVals","Set","size","sort","setDownload","gesel","file","end","full","Response","remotes","setDownloadFun","code","default_cluster","default_selection","superstate","preflights","preflights_summary","cache_matrix","cache_anno_markers","createDataset","args","format","h5","options","mtx","genes","annotations","rds","zipname","zipfile","summarizeDataset","summary","cells_summary","k","cells","columnNames","kcol","column","tmp_meta","columns","numberOfCells","numberOfRows","tmod_summary","numberOfFeatures","rownames","rowNames","v","modality_features","all_assay_names","modality_assay_names","postStepSummary","state","changed","ngenes","a","fetchCountMatrix","available","gene_info","fetchFeatureAnnotations","c","cell_info","fetchCellAnnotations","ksumm","fetchBlockLevels","fetchBlock","num_cells","numberOfColumns","num_genes","sums","fetchMetrics","detected","proportion","subsetProportions","data","default","bids","listed","fetchFilters","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","subsetTotals","thresholdsSubsetTotals","NaN","maxProportions","thresholdsMaxCount","remaining","discard_vec","discardBuff","fetchDiscards","inputs","retained","discard","means","fetchResults","vars","variances","fitted","resids","residuals","pcs","fetchPCs","var_exp","varianceExplained","total_var","totalVariance","clusters","fetchClusters","markers","marker_detection","computeLabels","RNA","per_reference","collections","feature_set_enrichment","fetchCollectionDetails","sets","fetchSetDetails","names","descriptions","sizes","fetchStepSummary","console","getMarkerStandAloneForAnnot","annotation","annotation_vec","mds","getMatrix","ids","computeAll","iter","iteration","kana_db","getAnnotation","vec","unfiltered","startsWith","split_metric","replace","split","toLowerCase","cell_filtering","applyFilter","scran","mapping","ADT","CRISPR","valid","add","fetchNormalizedMatrix","loaded","onmessage","nthreads","Math","round","navigator","hardwareConcurrency","back_init","numberOfThreads","state_init","then","kana_init","indexedDB","open","onupgradeneeded","e","kanaDBClient","deleteObjectStore","createObjectStore","keyPath","catch","down_init","DownloadsDBClient","ehub_ids","availableDatasets","uid","setOptions","clear","resetMarkerState","free","formatted","safeReplace","par","batch","subset","batch_correction","neighbor_index","combine_embeddings","weights","rna_weight","adt_weight","crispr_weight","translate","finishFun","fs","keys","f","zipbuffer","FileReaderSync","readAsArrayBuffer","unzipped","JSZip","config","JSON","parse","buffers","other","custom_selections","fetchSelections","transferrable","parameters","features","loaded_ds","fetchDatasets","previewPrimaryIds","cache","i_mod","jsonbuffer","analysis_store","ana_promise","dec","TextDecoder","decode","collected","saver","name","zipper","stringify","generateAsync","forceBuffer","gene_files","title","md5","hashwasm","data_saving","ref_saving","TextEncoder","encode","output_promise","callback","new_id","id_saving","time","Number","Date","recs","analysis_meta_store","file_meta_store","analysis_removal","file_removal","my_promises","values","deleted","counter","ds","tmp_dataset","details","raw_res","rank_type","modality","computeVersus","left","right","results","levels","indexOf","cluster","row_idx","gene","matrix","row","expr","addSelection","selection","removeSelection","tsne","animate","umap","annot","uniq_vals","uniq_map","indices","Int32Array","map","index","extracted","computeEnrichment","sel_indices","fetchSelectionIndices","fetchFilteredMatrix","arr_sel_indices","anno_markers","computePerCellScores","marker_resp","fetchFeatureSetIndices","ordering","includes","filtered_marker_resp","cell_labelling","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","chunkId","reduce","u","miniCssF","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","nmd","paths","children","p","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next"],"sourceRoot":""}