{"version":3,"file":"static/js/343.07177662.chunk.js","mappings":"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","sources":["../node_modules/wasmarrays.js/src/derived.js","../node_modules/scran.js/browser/runUmap.js","../node_modules/bakana/browser/steps/umap.worker.js","../node_modules/scran.js/browser/utils.js","../node_modules/wasmarrays.js/src/create.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { buffer } from \"./globals.js\";\nimport { WasmArray } from \"./base.js\";\n\n/** \n * Wrapper around an unsigned 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint8WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint8WasmArray extends WasmArray {\n    /**\n     * @return {Uint8Array} A Uint8Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string}\n     */\n    static className = \"Uint8WasmArray\";\n    // We're returning the name explicitly here instead of relying\n    // on the constructor.name trick, as the name of the class can\n    // change during minification.\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around a signed 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt8WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int8WasmArray extends WasmArray {\n    /**\n     * @return {Int8Array} An Int8Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Int8WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number}\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around an unsigned 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint16WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint16WasmArray extends WasmArray {\n    /**\n     * @return {Uint16Array} A Uint16Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Uint16WasmArray\";\n\n    /**\n     * Size of the each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage a signed 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt16WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int16WasmArray extends WasmArray {\n    /**\n     * @return {Int16Array} An Int16Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Int16WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage an unsigned 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint32WasmArray extends WasmArray {\n    /**\n     * @return {Uint32Array} A Uint32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Uint32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a signed 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int32WasmArray extends WasmArray {\n    /**\n     * @return {Int32Array} An Int32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Int32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage an unsigned 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigUint64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class BigUint64WasmArray extends WasmArray {\n    /**\n     * @return {BigUint64Array} A BigUint64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new BigUint64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"BigUint64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a signed 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigInt64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class BigInt64WasmArray extends WasmArray {\n    /**\n     * @return {BigInt64Array} An BigInt64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new BigInt64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"BigInt64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a 32-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Float32WasmArray extends WasmArray {\n    /**\n     * @return {Float32Array} A Float32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Float32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Float32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a 64-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Float64WasmArray extends WasmArray {\n    /**\n     * @return {Float64Array} A Float64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Float64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Float64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\nconst choices = {\n    \"Uint8WasmArray\": Uint8WasmArray,\n    \"Int8WasmArray\": Int8WasmArray,\n    \"Uint16WasmArray\": Uint16WasmArray,\n    \"Int16WasmArray\": Int16WasmArray,\n    \"Uint32WasmArray\": Uint32WasmArray,\n    \"Int32WasmArray\": Int32WasmArray,\n    \"BigUint64WasmArray\": BigUint64WasmArray,\n    \"BigInt64WasmArray\": BigInt64WasmArray,\n    \"Float32WasmArray\": Float32WasmArray,\n    \"Float64WasmArray\": Float64WasmArray\n};\n\n/**\n * Retrieve class from its name.\n *\n * @param {string} name - Name of the {@linkplain WasmArray} class.\n *\n * @return {class} Class object corresponding to `name`.\n */\nexport function stringToClass(name) {\n    if (!(name in choices)){ \n        throw new Error(\"unknown WasmArray class '\" + name + \"'\");\n    }\n    return choices[name];\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildNeighborSearchIndexResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the UMAP status object on the Wasm heap, typically created by {@linkcode initializeUmap}.\n * @hideconstructor\n */\nexport class UmapStatus {\n    #id;\n    #status;\n    #coordinates;\n\n    constructor(id, raw_status, raw_coordinates) {\n        this.#id = id;\n        this.#status = raw_status;\n        this.#coordinates = raw_coordinates;\n        return;\n    }\n\n    /**\n     * @return {UmapStatus} A deep copy of this object.\n     */\n    clone() {\n        let coord_copy = this.#coordinates.clone();\n        return gc.call(\n            module => this.#status.deepcopy(coord_copy.offset), \n            UmapStatus, \n            coord_copy\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.#status.num_observations();\n    }\n\n    /**\n     * @return {number} Number of epochs processed so far.\n     * This changes with repeated invocations of {@linkcode runUmap}, up to the maximum in {@linkcode UmapStatus#totalEpochs totalEpochs}.\n     */\n    currentEpoch() {\n        return this.#status.epoch();\n    }\n\n    /**\n     * @return {number} Total number of epochs used to initialize this object.\n     */\n    totalEpochs() {\n        return this.#status.num_epochs();\n    }\n\n    /**\n     * Run the UMAP algorithm for a certain time.\n     * This method may be called any number of times.\n     *\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.runTime=null] - Number of milliseconds for which the algorithm is allowed to run before returning.\n     * If `null`, no limit is imposed on the runtime.\n     *\n     * @return The algorithm status in `x` is advanced up to the total number of epochs used to initialize `x`,\n     * or until the requested run time is exceeded, whichever comes first.\n     */\n    run(options = {}) {\n        let { runTime = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        if (runTime === null) {\n            runTime = -1;\n        }\n        wasm.call(module => module.run_umap(this.#status, runTime));\n    }\n\n    /**\n     * @return {object} Object with `x` and `y` keys.\n     * Corresponding values are Float64Array objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.#coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free() {\n        if (this.#status !== null) {\n            gc.release(this.#id);\n            this.#status = null;\n        }\n        if (this.#coordinates !== null) {\n            this.#coordinates.free();\n            this.#coordinates = null;\n        }\n        return;\n    }\n}\n\n/**\n * @param {BuildNeighborSearchIndexResults|FindNearestNeighborsResults} x * A pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}).\n *\n * Alternatively, a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * The number of neighbors should be equal to `neighbors`, otherwise a warning is raised.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.neighbors=15] - Number of neighbors to use in the UMAP algorithm.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {number} [options.epochs=500] - Number of epochs to run the UMAP algorithm.\n * @param {number} [options.minDist=0.01] - Minimum distance between points in the UMAP algorithm.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {UmapStatus} Object containing the initial status of the UMAP algorithm.\n */\nexport function initializeUmap(x, options = {}) {\n    const { neighbors = 15, epochs = 500, minDist = 0.01, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var my_nnres;\n    var raw_coords;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let nnres;\n\n        if (x instanceof BuildNeighborSearchIndexResults) {\n            my_nnres = findNearestNeighbors(x, neighbors, { numberOfThreads: nthreads });\n            nnres = my_nnres;\n        } else {\n            if (neighbors != x.numberOfNeighbors()) {\n                console.warn(\"number of neighbors in 'x' does not match 'neighbors'\");\n            }\n            nnres = x;\n        }\n\n        raw_coords = utils.createFloat32WasmArray(2 * nnres.numberOfCells());\n        output = gc.call(\n            module => module.initialize_umap(nnres.results, epochs, minDist, raw_coords.offset, nthreads),\n            UmapStatus,\n            raw_coords\n        );\n\n    } catch(e) {\n        utils.free(output);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_nnres);\n    }\n\n    return output;\n}\n\n/**\n * Run the UMAP algorithm.\n * This is a wrapper around {@linkcode initializeUmap} and {@linkcode UmapStatus#run run}.\n *\n * @param {BuildNeighborSearchIndexResults|FindNearestNeighborsResults} x A pre-built neighbor search index from {@linkcode buildNeighborSearchIndex}.\n *\n * Alternatively, a pre-computed set of neighbor search results from {linkcode findNearestNeighbors}.\n * The number of neighbors should be equal to `neighbors`, otherwise a warning is raised.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.neighbors=15] - Number of neighbors to use in the UMAP algorithm.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {number} [options.epochs=500] - Number of epochs to run the UMAP algorithm.\n * @param {number} [options.minDist=0.01] - Minimum distance between points in the UMAP algorithm.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {object} Object containing coordinates of the UMAP embedding, see {@linkcode UmapStatus#extractCoordinates UmapStatus.extractCoordinates} for more details.\n */\nexport function runUmap(x, options = {}){\n    const { neighbors = 15, epochs = 500, minDist = 0.01, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n    let ustat = initializeUmap(x, { neighbors, epochs, minDist, numberOfThreads });\n    ustat.run();\n    return ustat.extractCoordinates();\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as vizutils from \"./utils/viz_child.js\";\nimport * as aworkers from \"./abstract/worker_child.js\";\n\nvar cache = {};\nvar init_changed = false;\nvar init_parameters = {};\nvar run_parameters = {};\nvar dead = false;\n\nfunction rerun(animate) {\n    var delay = vizutils.chooseDelay(animate);\n    var current_status = cache.init.clone();\n\n    try {\n        cache.total = current_status.totalEpochs();\n        for (; current_status.currentEpoch() < cache.total; ) {\n            current_status.run({ runTime: delay });\n\n            if (animate) {\n                var xy = current_status.extractCoordinates();\n                aworkers.sendMessage({\n                    \"type\": \"umap_iter\",\n                    \"x\": xy.x,\n                    \"y\": xy.y,\n                    \"iteration\": current_status.currentEpoch()\n                }, [xy.x.buffer, xy.y.buffer]);\n            }\n        }\n        cache.final = current_status.extractCoordinates();\n    } finally {\n        current_status.free();\n    }\n}\n\nvar loaded;\naworkers.registerCallback(msg => {\n    var id = msg.data.id;\n    if (dead) {\n        aworkers.sendMessage({\n            \"id\": id,\n            \"type\": \"error\",\n            \"error\": \"UMAP worker is dead and cannot process messages\"\n        });\n        return;\n    }\n\n    if (msg.data.cmd == \"INIT\") {\n        loaded = scran.initialize(msg.data.scranOptions);\n        loaded\n            .then(x => {\n                aworkers.sendMessage({\n                    \"id\": id,\n                    \"type\": \"init_worker\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                aworkers.sendMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n\n    } else if (msg.data.cmd == \"RUN\") {\n        loaded\n            .then(x => {\n                var new_neighbors;\n                if (\"neighbors\" in msg.data) {\n                    utils.freeCache(cache.neighbors);\n                    cache.neighbors = vizutils.recreateNeighbors(msg.data.neighbors);\n                    new_neighbors = true;\n                } else {\n                    new_neighbors = false;\n                }\n        \n                var init_args = { \"min_dist\": msg.data.params.min_dist, \"num_epochs\": msg.data.params.num_epochs };\n                if (!new_neighbors && !utils.changedParameters(init_args, init_parameters)) {\n                    init_changed = false;\n                } else {\n                    utils.freeCache(cache.init);\n                    cache.init = scran.initializeUmap(cache.neighbors, { epochs: init_args.num_epochs, minDist: init_args.min_dist });\n                    init_parameters = init_args;\n                    init_changed = true;\n                }\n        \n                // Nothing downstream depends on the run results, so we don't set any changed flag.\n                var run_args = {};\n                if (init_changed || utils.changedParameters(run_args, run_parameters)) {\n                    rerun(msg.data.params.animate);\n                    run_parameters = run_args;\n                }\n        \n                aworkers.sendMessage({\n                    \"id\": id,\n                    \"type\": \"umap_run\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                aworkers.sendMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n    \n    } else if (msg.data.cmd == \"RERUN\") {\n        loaded\n            .then(x => {\n                rerun(true);\n                aworkers.sendMessage({\n                    \"id\": id,\n                    \"type\": \"umap_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                aworkers.sendMessage({\n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n          \n    } else if (msg.data.cmd == \"FETCH\") {\n        loaded\n            .then(x => {\n                var info = {\n                    \"x\": cache.final.x.slice(),\n                    \"y\": cache.final.y.slice(),\n                    \"iterations\": cache.total\n                };\n                var transfer = [info.x.buffer, info.y.buffer];\n                aworkers.sendMessage({\n                    \"id\": id,\n                    \"type\": \"umap_fetch\",\n                    \"data\": info\n                }, transfer);\n            })\n            .catch(error => {\n                aworkers.sendMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n\n    } else if (msg.data.cmd == \"KILL\") {\n        dead = true;\n        loaded\n            .then(x => {\n                scran.terminate();\n                aworkers.sendMessage({\n                    \"id\": id,\n                    \"type\": \"umap_killed\",\n                    \"data\": null\n                });\n            })\n            .catch(error => {\n                aworkers.sendMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n\n    } else {\n        aworkers.sendMessage({\n            \"id\": id,\n            \"type\": \"error\",\n            \"error\": \"unknown message type '\" + JSON.stringify(msg.data) + \"'\"\n        });\n    }\n});\n","import { buffer, wasmArraySpace, maximumThreads } from \"./wasm.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Helper function to create a Uint8WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Uint8WasmArray} Uint8WasmArray on the **scran.js** Wasm heap.\n */\nexport function createUint8WasmArray(length) {\n    return wa.createUint8WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Int32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Int32WasmArray} Int32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createInt32WasmArray(length) {\n    return wa.createInt32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a BigUint64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {BigUint64WasmArray} BigUint64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createBigUint64WasmArray (length) {\n    return wa.createBigUint64WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float32WasmArray} Float32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat32WasmArray(length) {\n    return wa.createFloat32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float64WasmArray} Float64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat64WasmArray(length) {\n    return wa.createFloat64WasmArray(wasmArraySpace(), length);\n}\n\nexport function wasmifyArray(x, expected) {\n    if (x instanceof wa.WasmArray) {\n        if (expected !== null && expected != x.constructor.className) {\n            throw new Error(\"expected '\" + expected + \"', got '\" + x.constructor.className + \"'\");\n        }\n\n        if (x.space === wasmArraySpace()) {\n            // Creating a view. This ensures that callers can always call\n            // free() on the output of this function without worrying about\n            // whether they are breaking something else that was using 'x'.\n            if (x.owner === null) {\n                return x.view();\n            } else {\n                return x; // it's already a view, so we just pass it along.\n            }\n        } else {\n            // If it's a different space, then we have to make a copy.\n            return x.clone(wasmArraySpace());\n        }\n    }\n\n    let y = null;\n    if (expected !== null) {\n        y = wa.convertToWasmArray(wasmArraySpace(), x, wa.stringToClass(expected));\n    } else {\n        y = wa.convertToWasmArray(wasmArraySpace(), x);\n    }\n\n    return y;\n}\n\nexport function chooseNumberOfThreads(threads) {\n    if (threads == null) {\n        return maximumThreads();\n    } else {\n        return threads;\n    }\n}\n\n/**\n * Try to free a **scran.js** object's memory (typically involving some memory allocated on the Wasm heap) by calling its `free` method.\n *\n * @param {?object} x - Instance of a **scran.js** or **wasmarrays.js** class to be freed.\n * May also be `null` or undefined.\n * \n * @return The output of `x.free()` - unless `x` is undefined or `null`, in which case nothing is performed.\n */\nexport function free(x) {\n    if (typeof x == \"undefined\" || x == null) {\n        return;\n    }\n    return x.free();\n}\n\nexport function extractXY(ncells, coordinates) {\n    let x = new Float64Array(ncells);\n    let y = new Float64Array(ncells);\n\n    for (var i = 0; i < ncells; i++) {\n        x[i] = coordinates[2 * i];\n        y[i] = coordinates[2 * i + 1];\n    }\n\n    return { \"x\": x, \"y\": y };\n}\n\n/**\n * Possibly copy an array out of the Wasm heap, avoiding potential invalidation at the cost of some efficiency.\n *\n * @param {TypedArray} x - Array of data, possibly on the **scran.js** Wasm heap.\n * @param {(string|boolean)} copy - Copying mode to use.\n *\n * @return {TypedArray|WasmArray} The return value depends on the value of `copy`:\n * - If `copy = true`, a TypedArray copy of `x` is created with `x.slice()` and returned.\n *   This is a good default to avoid invalidation of TypedArray views on the heap upon reallocation, by creating a Javascript-owned copy for downstream use.\n * - If `copy = false`, `x` is returned directly.\n *   This avoids making any copy but runs the risk of invalidation when the Wasm heap is resized;\n *   it should only be used when no further Wasm allocations are performed within the lifetime of `x`.\n * - If `copy = \"view\"`, a WasmArray view is created from `x` and returned.\n *   This avoids any copy and is robust to invalidation but requires an extra `WasmArray.array()` call to create a TypedArray.\n */\nexport function possibleCopy(x, copy) {\n    if (copy === \"view\") {\n        if (x.buffer !== buffer()) {\n            throw new Error(\"cannot use copy = \\\"view\\\" for non-Wasm TypedArrays\");\n        }\n\n        let view_class = x.constructor.name.replace(\"Array\", \"WasmArray\");\n\n        // This function should only be used for objects generated in the\n        // buffer owned by scran.js, so we can assume that x's space is the\n        // same as that of the wasmArraySpace().\n        return wa.createWasmArrayView(wasmArraySpace(), x.length, x.byteOffset, wa.stringToClass(view_class));\n\n    } else if (copy) {\n        return x.slice();\n\n    } else {\n        return x;\n    }\n}\n\nexport function matchOptions(name, value, choices) {\n    if (choices.indexOf(value) == -1) {\n        throw new Error(\"'\" + name + \"=' should be one of '\" + choices.join(\"', '\") + \"'\");\n    }\n}\n\nexport function toTypedArray(buffer, wasSupplied, asTypedArray) {\n    if (asTypedArray) {\n        if (!wasSupplied) {\n            const output = buffer.slice();\n            buffer.free();\n            return output;\n        } else {\n            return buffer.array();\n        }\n    } else {\n        return buffer;\n    }\n}\n\nexport function checkOtherOptions(options) {\n    for (const key of Object.keys(options)) {\n        throw new Error(\"unknown option '\" + key + \"'\");\n    }\n}\n","import { allocate } from \"./globals.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return {WasmArray} Instance of a {@linkplain WasmArray} subclass.\n */\nexport function createWasmArray(space, length, arrayClass) {\n    return allocate(space, length, arrayClass);\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint8WasmArray} Instance of a {@linkplain Uint8WasmArray}.\n */\nexport function createUint8WasmArray(space, length) { \n    return createWasmArray(space, length, Uint8WasmArray); \n}\n\n/**\n * Create a {@linkplain Int8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int8WasmArray} Instance of a {@linkplain Int8WasmArray}.\n */\nexport function createInt8WasmArray(space, length) { \n    return createWasmArray(space, length, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint16WasmArray} Instance of a {@linkplain Uint16WasmArray}.\n */\nexport function createUint16WasmArray(space, length) { \n    return createWasmArray(space, length, Uint16WasmArray); \n}\n\n/**\n * Create a {@linkplain Int16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int16WasmArray} Instance of a {@linkplain Int16WasmArray}.\n */\nexport function createInt16WasmArray(space, length) { \n    return createWasmArray(space, length, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint32WasmArray} Instance of a {@linkplain Uint32WasmArray}.\n */\nexport function createUint32WasmArray(space, length) { \n    return createWasmArray(space, length, Uint32WasmArray); \n}\n\n/**\n * Create a {@linkplain Int32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int32WasmArray} Instance of a {@linkplain Int32WasmArray}.\n */\nexport function createInt32WasmArray(space, length) { \n    return createWasmArray(space, length, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {BigUint64WasmArray} Instance of a {@linkplain BigUint64WasmArray}.\n */\nexport function createBigUint64WasmArray(space, length) { \n    return createWasmArray(space, length, BigUint64WasmArray); \n}\n\n/**\n * Create a {@linkplain BigInt64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {BigInt64WasmArray} Instance of a {@linkplain BigInt64WasmArray}.\n */\nexport function createBigInt64WasmArray(space, length) { \n    return createWasmArray(space, length, BigInt64WasmArray); \n}\n\n/**\n * Create a {@linkplain Float32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Float32WasmArray} Instance of a {@linkplain Float32WasmArray}.\n */\nexport function createFloat32WasmArray(space, length) { \n    return createWasmArray(space, length, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Float64WasmArray} Instance of a {@linkplain Float64WasmArray}.\n */\nexport function createFloat64WasmArray(space, length) { \n    return createWasmArray(space, length, Float64WasmArray); \n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [691,450], () => (__webpack_require__(3343)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and chunks that the entrypoint depends on\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"120\":\"568b3440\",\"450\":\"4145df50\",\"691\":\"9a33b0ff\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and chunks that the entrypoint depends on\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t343: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(691),\n\t\t__webpack_require__.e(450)\n\t]).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["Uint8WasmArray","WasmArray","array","Uint8Array","buffer","this","space","offset","length","_defineProperty","Int8WasmArray","Int8Array","Uint16WasmArray","Uint16Array","Int16WasmArray","Int16Array","Uint32WasmArray","Uint32Array","Int32WasmArray","Int32Array","BigUint64WasmArray","BigUint64Array","BigInt64WasmArray","BigInt64Array","Float32WasmArray","Float32Array","Float64WasmArray","Float64Array","choices","stringToClass","name","Error","_id","WeakMap","_status","_coordinates","UmapStatus","constructor","id","raw_status","raw_coordinates","_classPrivateFieldInitSpec","_classPrivateFieldSet","clone","coord_copy","_classPrivateFieldGet","gc","module","deepcopy","numberOfCells","num_observations","currentEpoch","epoch","totalEpochs","num_epochs","run","options","arguments","undefined","runTime","others","_objectWithoutProperties","_excluded","utils","wasm","run_umap","extractCoordinates","free","initializeUmap","x","neighbors","epochs","minDist","numberOfThreads","_excluded2","my_nnres","raw_coords","output","nthreads","nnres","BuildNeighborSearchIndexResults","findNearestNeighbors","numberOfNeighbors","console","warn","initialize_umap","results","e","loaded","cache","init_changed","init_parameters","run_parameters","dead","rerun","animate","delay","vizutils","current_status","init","total","xy","aworkers","y","final","msg","data","cmd","scran","scranOptions","then","catch","error","new_neighbors","init_args","params","min_dist","run_args","info","slice","transfer","JSON","stringify","createInt32WasmArray","wa","wasmArraySpace","createFloat32WasmArray","createFloat64WasmArray","wasmifyArray","expected","className","owner","view","chooseNumberOfThreads","threads","maximumThreads","extractXY","ncells","coordinates","i","possibleCopy","copy","view_class","replace","byteOffset","checkOtherOptions","key","Object","keys","createWasmArray","arrayClass","allocate","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","m","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","push","bind","moreModules","runtime","pop","next"],"sourceRoot":""}