{"version":3,"file":"static/js/985.b0e597fb.chunk.js","mappings":"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","sources":["../node_modules/scran.js/browser/file.js","../node_modules/scran.js/browser/hdf5.js","../node_modules/wasmarrays.js/src/subset.js","../node_modules/scran.js/browser/guessFeatures.js","../node_modules/bakana-remotes/src/utils.js","../node_modules/bakana-remotes/src/gypsum.js","../node_modules/bakana-remotes/src/SewerRat.js","../node_modules/jaspagate/src/h5.js","../node_modules/scran.js/browser/clusterGraph.js","../node_modules/scran.js/browser/abstract/file.js","../node_modules/jaspagate/src/globals.js","../node_modules/scran.js/browser/suggestAdtQcFilters.js","../node_modules/scran.js/browser/initializeMatrixFromHdf5.js","../node_modules/bioconductor/src/miscellaneous.js","../node_modules/bakana/browser/steps/tsne.js","../node_modules/pako/dist/pako.esm.mjs","../node_modules/bakana/browser/steps/snn_graph_cluster.js","../node_modules/scran.js/browser/suggestCrisprQcFilters.js","../node_modules/bakana/browser/steps/kmeans_cluster.js","../node_modules/bakana/browser/steps/utils/normalization.js","../node_modules/bakana/browser/steps/utils/general.js","../node_modules/bioconductor/src/clone-utils.js","../node_modules/gesel/src/fetchSingleCollection.js","../node_modules/bakana/browser/steps/crispr_pca.js","../node_modules/bakana/browser/steps/utils/abstract/workers_parent.js","../node_modules/scran.js/browser/scaleByNeighbors.js","../node_modules/gesel/src/reindexSetsForAllGenes.js","../node_modules/bakana/browser/steps/rna_quality_control.js","../node_modules/wasmarrays.js/src/derived.js","../node_modules/bioconductor/src/Annotated.js","../node_modules/gesel/src/fetchSingleSet.js","../node_modules/bioconductor/src/overlap-utils.js","../node_modules/bioconductor/src/DataFrame.js","../node_modules/scran.js/browser/initializeSparseMatrixFromRds.js","../node_modules/gesel/src/fetchSetsForGene.js","../node_modules/bakana/browser/readers/mtx.js","../node_modules/gesel/src/fetchGenesForSet.js","../node_modules/scran.js/browser/ScranMatrix.js","../node_modules/bakana/browser/readers/utils/abstract/stream.js","../node_modules/scran.js/browser/perCellCrisprQcMetrics.js","../node_modules/scran.js/browser/runTsne.js","../node_modules/scran.js/browser/matrixStats.js","../node_modules/bakana/browser/steps/umap.js","../node_modules/scran.js/browser/labelCells.js","../node_modules/gesel/src/reindexGenesForAllSets.js","../node_modules/gesel/src/fetchGenesForAllSets.js","../node_modules/gesel/src/mapGenesByIdentifier.js","../node_modules/bakana/browser/steps/adt_normalization.js","../node_modules/gesel/src/searchSetText.js","../node_modules/scran.js/browser/block.js","../node_modules/bioconductor/src/GRanges.js","../node_modules/bakana/browser/steps/utils/markers.js","../node_modules/scran.js/browser/computeClrm1Factors.js","../node_modules/randomcolor/randomColor.js","../node_modules/gesel/src/fetchAllGenes.js","../node_modules/bakana/browser/steps/cell_filtering.js","../node_modules/gesel/src/fetchAllSets.js","../node_modules/bakana/browser/steps/combine_embeddings.js","../node_modules/bakana/browser/steps/abstract/worker_parent.js","../node_modules/scran.js/browser/findNearestNeighbors.js","../node_modules/bakana/browser/readers/utils/features.js","../node_modules/bioconductor/src/DenseMatrix.js","../node_modules/bakana/browser/steps/crispr_quality_control.js","../node_modules/scran.js/browser/scoreGsdecon.js","../node_modules/scran.js/browser/normalizeCounts.js","../node_modules/scran.js/browser/subset.js","../node_modules/bakana/browser/steps/feature_selection.js","../node_modules/scran.js/browser/abstract/realize.js","../node_modules/scran.js/browser/mnnCorrect.js","../node_modules/bioconductor/src/IRanges.js","../node_modules/bakana/browser/readers/ArtifactDB-abstract.js","../node_modules/scran.js/browser/internal/computePerCellQcMetrics.js","../node_modules/papaparse/papaparse.min.js","../node_modules/scran.js/browser/cbind.js","../node_modules/bakana/browser/steps/adt_quality_control.js","../node_modules/bakana/browser/steps/neighbor_index.js","../node_modules/scran.js/browser/modelGeneVariances.js","../node_modules/scran.js/browser/factorize.js","../node_modules/jszip/dist/jszip.min.js","../node_modules/bakana/browser/readers/abstract/file.js","../node_modules/scran.js/browser/suggestRnaQcFilters.js","../node_modules/scran.js/browser/perCellRnaQcMetrics.js","../node_modules/bakana/browser/steps/rna_normalization.js","../node_modules/bakana/browser/steps/choose_clustering.js","../node_modules/scran.js/browser/filterCells.js","../node_modules/bioconductor/src/RangedSummarizedExperiment.js","../node_modules/scran.js/browser/wasm.js","../node_modules/scran.js/browser/perCellAdtQcMetrics.js","../node_modules/bakana/browser/steps/batch_correction.js","../node_modules/bioconductor/src/AllGenerics.js","../node_modules/bakana/browser/readers/utils/extract.js","../node_modules/scran.js/browser/clusterKmeans.js","../node_modules/scran.js/browser/delayed.js","../node_modules/scran.js/browser/utils.js","../node_modules/scran.js/browser/rds.js","../node_modules/bakana/browser/steps/marker_detection.js","../node_modules/scran.js/browser/initializeMatrixFromArrays.js","../node_modules/scran.js/browser/hypergeometricTest.js","../node_modules/scran.js/browser/MultiMatrix.js","../node_modules/bioconductor/src/Vector.js","../node_modules/gesel/src/fetchSetsForAllGenes.js","../node_modules/scran.js/browser/runPca.js","../node_modules/bakana/browser/steps/rna_pca.js","../node_modules/scran.js/browser/wasm/scran.js","../node_modules/bakana/browser/readers/10x.js","../node_modules/scran.js/browser/internal/computePerCellQcFilters.js","../node_modules/wasmarrays.js/src/create.js","../node_modules/bioconductor/src/SummarizedExperiment.js","../node_modules/bioconductor/src/GroupedGRanges.js","../node_modules/bakana/browser/steps/crispr_normalization.js","../node_modules/gesel/src/fetchEmbeddings.js","../node_modules/scran.js/browser/initializeSparseMatrixFromMatrixMarket.js","../node_modules/gesel/src/fetchAllCollections.js","../node_modules/bioconductor/src/utils.js","../node_modules/bioconductor/src/InternalList.js","../node_modules/@babel/runtime/helpers/esm/asyncIterator.js","../node_modules/scran.js/browser/buildSnnGraph.js","../node_modules/scran.js/browser/aggregateAcrossCells.js","../node_modules/scran.js/browser/scoreMarkers.js","../node_modules/scran.js/browser/realizeFile.js","../node_modules/bakana/browser/steps/adt_pca.js"],"sourcesContent":["import * as afile from \"./abstract/file.js\";\n\n/**\n * Write a byte array to a path on the native file system (Node.js) or to the virtual file system (browser).\n *\n * @param {string} path - Path to the output file on the relevant file system.\n * @param {Uint8Array} buffer - Buffer to write to file.\n *\n * @return `buffer` is written to the binary file `path`.\n */\nexport function writeFile(path, buffer) {\n    afile.writeFile(path, buffer);\n    return;\n}\n\n/**\n * Read a byte array from a path on the native file system (Node.js) or the virtual file system (browser).\n *\n * @param {string} path - Path to a file on the relevant file system.\n *\n * @return {Uint8Array} Binary contents of the file.\n */\nexport function readFile(path) {\n    return afile.readFile(path);\n}\n\n/**\n * Remove a file from the native file system (Node.js) or the virtual file system (browser).\n *\n * @param {string} path - Path to the file on the relevant file system.\n *\n * @return Deletes the specified file from the relevant file system.\n * If `path` does not exist, this function is a no-op.\n */\nexport function removeFile(path) {\n    if (existsFile(path)) {\n        afile.removeFile(path);\n    }\n    return;\n}\n\n/**\n * Check if a file exists on the native file system (Node.js) or the virtual file system (browser).\n *\n * @param {string} path - Path to the file on the relevant file system.\n *\n * @return {boolean} Whether the file exists.\n */\nexport function existsFile(path) {\n    return afile.existsFile(path);\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as fac from \"./factorize.js\";\n\nfunction check_shape(x, shape) {\n    if (shape.length > 0) {\n        let full_length = shape.reduce((a, b) => a * b);\n        if (x.length != full_length) {\n            throw new Error(\"length of 'x' must be equal to the product of 'shape'\");\n        }\n    } else {\n        if (x instanceof Array || ArrayBuffer.isView(x)) {\n            if (x.length != 1) {\n                throw new Error(\"length of 'x' should be 1 for a scalar dataset\");\n            }\n        } else {\n            x = [x];\n        }\n    }\n    return x;\n}\n\nfunction guess_shape(x, shape) {\n    if (shape === null) {\n        if (typeof x == \"string\" || typeof x == \"number\" || (x instanceof Object && x.constructor == Object)) {\n            x = [x];\n            shape = []; // scalar, I guess.\n        } else {\n            shape = [x.length];\n        }\n    } else {\n        x = check_shape(x, shape);\n    }\n    return { x: x, shape: shape };\n}\n\nfunction forbid_strings(x) {\n    if (Array.isArray(x)) {\n        // no strings allowed!\n        for (const x0 of x) {\n            if (typeof x0 === \"string\") {\n                throw new Error(\"'x' should not contain any strings for a non-string HDF5 dataset\");\n            }\n        }\n    }\n}\n\nfunction fetch_max_string_length(lengths) {\n    let maxlen = 0;\n    lengths.array().forEach(y => {\n        if (maxlen < y) {\n            maxlen = y;\n        }\n    });\n    return maxlen;\n}\n\n/**\n * Representation of a HDF5 string type.\n */\nexport class H5StringType {\n    #encoding\n    #length;\n\n    /**\n     * Sentinel value for variable-length strings.\n     */\n    static variableLength = -1; \n\n    /**\n     * @param {string} encoding - Encoding for the strings, should be either ASCII or UTF-8.\n     * @param {number} length - Non-negative integer specifying the maximum length of the strings.\n     * (See {@linkcode findMaxStringLength} to determine the maximum length from an array of strings.)\n     * This can be set to {@linkcode H5StringType#variableLength variableLength} to indicate that the strings are of variable length. \n     */\n    constructor(encoding, length) {\n        if (encoding != \"ASCII\" && encoding != \"UTF-8\") {\n            throw new Error(\"'encoding' must be one of 'ASCII' or 'UTF-8'\");\n        }\n        this.#encoding = encoding;\n        this.#length = length;\n    }\n\n    /**\n     * @member {number}\n     * @desc Length of the string type, or {@linkcode H5StringType#variableLength variableLength} for variable-length strings.\n     */\n    get length() {\n        return this.#length;\n    }\n\n    /**\n     * @member {string}\n     * @desc Encoding of the string type.\n     */\n    get encoding() {\n        return this.#encoding;\n    }\n};\n\n/**\n * Determine the maximum string length in an array of strings or an array of objects with string properties.\n * This is typically used to set the maximum string length in the {@linkplain H5StringType} constructor.\n *\n * @param {Array} x - An array of strings, or an array of objects where the properties named in `fields` contain strings.\n * @param {?Array} fields - An array of strings containing the names of properties that are strings for each entry of `x`.\n * This assumes that each entry of `x` is an object, otherwise it should be set to `null` if each entry of `x` contains a string.\n *\n * @return {number|Array} The maximum string length across all strings in `x`, if `fields = null`.\n * Otherwise, an array of length equal to `fields` containing the maximum string length for each field.\n */\nexport function findMaxStringLength(x, fields) {\n    if (fields === null) {\n        return wasm.call(module => module.get_max_str_len(x));\n    } else if (fields instanceof Array) {\n        return wasm.call(module => module.get_max_str_len_compound(x, fields));\n    } else {\n        throw new Error(\"'fields' must be 'null' or an array of property names\");\n    }\n}\n\n/**\n * Representation of a HDF5 enum type.\n */\nexport class H5EnumType {\n    #code;\n    #levels;\n\n    /**\n     * @param {string} code - String specifying the integer type for the codes.\n     * This should be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64.\n     * @param {Array|object} levels - Array of unique strings containing the names of the levels.\n     * The position of each string in this array is used as the integer code for each level.\n     * Alternatively, an object where each key is the name of a level and each value is the corresponding integer code.\n     */\n    constructor(code, levels) {\n        this.#code = code;\n        if (levels instanceof Array) {\n            let collected = {};\n            for (var i = 0; i < levels.length; i++) {\n                collected[levels[i]] = i;\n            }\n            this.#levels = collected;\n        } else {\n            this.#levels = levels;\n        }\n    }\n\n    /**\n     * @member {string}\n     * @desc Integer type for the codes.\n     */\n    get code() {\n        return this.#code;\n    }\n\n    /**\n     * @member {object}\n     * @desc Mapping from level names (keys) and the corresponding integer code (values).evels.\n     */\n    get levels() {\n        return this.#levels;\n    }\n}\n\n/**\n * Representation of a HDF5 compound type.\n */\nexport class H5CompoundType {\n    #members\n\n    /**\n     * @param {object} members - Object where the keys are the names of members and the values are the types.\n     * The order of the keys determines the order of the members in the compound type.\n     * Each value may be:\n     * - The string `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64.\n     * - The string `\"FloatX\"` for `X` of 32 or 64.\n     * - A {@linkplain H5StringType}.\n     */\n    constructor(members) {\n        this.#members = members;\n    }\n\n    /**\n     * @member {object}\n     * @desc Object describing the members of the compound type.\n     */\n    get members() {\n        return this.#members;\n    }\n}\n\nfunction downcast_type(type) {\n    if (typeof type == \"string\") {\n        if (type == \"String\") {\n            return { mode: \"string\", encoding: \"UTF-8\", length: -1 };\n        } else {\n            return { mode: \"numeric\", type: type };\n        }\n    } else if (type instanceof H5StringType) {\n        return { mode: \"string\", encoding: type.encoding, length: type.length };\n    } else if (type instanceof H5EnumType) {\n        let levels = [];\n        for (const [key, val] of Object.entries(type.levels)) {\n            levels.push({ name: key, value: val });\n        }\n        return { mode: \"enum\", code_type: type.code, levels: levels };\n    } else if (type instanceof H5CompoundType) {\n        let converted = [];\n        for (const [key, val] of Object.entries(type.members)) {\n            converted.push({ name: key, type: downcast_type(val) });\n        }\n        return { mode: \"compound\", members: converted };\n    } else {\n        throw new Error(\"unknown type when downcasting\");\n    }\n}\n\nfunction upcast_type(type) {\n    if (type.mode == \"string\") {\n        return new H5StringType(type.encoding, type.length);\n    } else if (type.mode == \"numeric\" || type.mode == \"other\") {\n        return type.type;\n    } else if (type.mode == \"enum\") {\n        let levels = {};\n        for (const { name, value } of type.levels) {\n            levels[name] = value;\n        }\n        return new H5EnumType(type.code_type, levels);\n    } else if (type.mode == \"compound\") {\n        let converted = {};\n        for (const x of type.members) {\n            converted[x.name] = upcast_type(x.type);\n        }\n        return new H5CompoundType(converted);\n    } else {\n        throw new Error(\"unknown type '\" + type.mode + \"' when upcasting\");\n    }\n}\n\nfunction upgrade_type(type, levels, maxStringLength, x) {\n    if (typeof type == \"string\") {\n        if (type == \"String\") {\n            if (maxStringLength === null) {\n                if (x === null) {\n                    maxStringLength = H5StringType.variableLength;\n                } else {\n                    // Use fixed width strings to take better advantage of ccompression.\n                    maxStringLength = findMaxStringLength(x, null);\n                }\n            }\n            return new H5StringType(\"UTF-8\", maxStringLength);\n        } else if (type == \"Enum\") {\n            return new H5EnumType(\"Int32\", levels);\n        }\n    }\n    return type;\n}\n\nfunction convert_enums(type, levels, x) {\n    if (type == \"Enum\" && (typeof levels == \"undefined\" || levels == null)) {\n        let ulevels = new Set(x);\n        let levels = Array.from(ulevels).sort();\n        let mapping = {};\n        levels.forEach((l, i) => { mapping[l] = i; });\n        type = new H5EnumType(\"Int32\", mapping);\n        x = x.map(y => mapping[y]);\n    }\n    return { type, x };\n}\n\n/**\n * Base class for HDF5 objects.\n */\nexport class H5Base {\n    #file;\n    #name;\n    #attributes;\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the object inside the file.\n     */\n    constructor(file, name) {\n        this.#file = file;\n        this.#name = name;\n    }\n\n    /**\n     * @member {string}\n     * @desc Path to the HDF5 file.\n     */\n    get file() {\n        return this.#file;\n    }\n\n    /**\n     * @member {string}\n     * @desc Name of the object inside the file.\n     */\n    get name() {\n        return this.#name;\n    }\n\n    /**\n     * @member {Array}\n     * @desc Array containing the names of all attributes of this object.\n     */\n    get attributes() {\n        return this.#attributes;\n    }\n\n    set_attributes(attributes) { // internal use only, for subclasses.\n        this.#attributes = attributes;\n    }\n\n    /**\n     * Read an attribute of the object.\n     *\n     * @param {string} attr - Name of the attribute.\n     * @return {object} Object containing;\n     * - `values`, an array containing the values of the attribute.\n     *   This is of length 1 if the attribute is scalar.\n     * - `shape`, an array specifying the shape of the attribute.\n     *   This is empty if the attribute is scalar.\n     * - `type`, the type of the attribute.\n     *   This may be a string, a {@linkplain H5StringType}, a {@linkplain H5EnumType} or a {@linkplain H5CompoundType}.\n     */\n    readAttribute(attr) {\n        let output = { values: null, type: null, shape: null };\n\n        let x = wasm.call(module => new module.LoadedH5Attr(this.file, this.name, attr));\n        try {\n            output.shape = x.shape();\n            output.type = upcast_type(x.type());\n            if (output.type instanceof H5StringType) {\n                output.values = x.string_values();\n            } else if (output.type instanceof H5EnumType) {\n                output.values = x.numeric_values().slice();\n            } else if (output.type instanceof H5CompoundType) {\n                output.values = x.compound_values();\n            } else {\n                output.values = x.numeric_values().slice();\n            }\n        } finally {\n            x.delete();\n        }\n\n        // For back-compatibility purposes.\n        if (output.type instanceof H5EnumType) {\n            output.levels = output.type.levels;\n        }\n        return output;\n    }\n\n    /**\n     * Write an attribute for the object.\n     *\n     * @param {string} attr - Name of the attribute.\n     * @param {string|H5StringType|H5EnumType|H5CompoundType} type - Type of dataset to create.\n     * Strings can be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64; or `\"FloatX\"` for `X` of 32 or 64.\n     * @param {?Array} shape - Array containing the dimensions of the dataset to create.\n     * If set to an empty array, this will create a scalar dataset.\n     * If set to `null`, this is determined from `x`.\n     * @param {(TypedArray|Array|string|number)} x - Values to be written to the new dataset, see {@linkcode H5DataSet#write write}.\n     * This should be of length equal to the product of `shape`;\n     * unless `shape` is empty, in which case it should either be of length 1, or a single number or string.\n     * @param {object} [options={}] - Optional parameters.\n     */\n    writeAttribute(attr, type, shape, x, options = {}) {\n        let { maxStringLength = null, levels = null, ...others } = options;\n        utils.checkOtherOptions(others);\n\n        let conv = convert_enums(type, levels, x);\n        type = conv.type;\n        x = conv.x;\n\n        if (x === null) {\n            throw new Error(\"cannot write 'null' to HDF5\"); \n        }\n\n        let guessed = guess_shape(x, shape);\n        x = guessed.x;\n        shape = guessed.shape;\n        type = upgrade_type(type, levels, maxStringLength, x);\n\n        // For back-compatibility purposes.\n        if (type == \"String\") {\n            type = new H5StringType(\"UTF-8\", H5StringType.variableLength);\n        } else if (type == \"Enum\") {\n            type = new H5EnumType(\"Int32\", levels);\n        }\n\n        let type2 = downcast_type(type);\n        if (type2.mode == \"string\") {\n            wasm.call(module => module.create_string_hdf5_attribute(this.file, this.name, attr, shape, type2.encoding, type2.length));\n            wasm.call(module => module.write_string_hdf5_attribute(this.file, this.name, attr, x));\n\n        } else if (type2.mode == \"enum\") {\n            wasm.call(module => module.create_enum_hdf5_attribute(this.file, this.name, attr, shape, type2.code_type, type2.levels));\n            let y = utils.wasmifyArray(x, type2.code_type + \"WasmArray\");\n            try {\n                wasm.call(module => module.write_enum_hdf5_attribute(this.file, this.name, attr, y.offset));\n            } finally {\n                y.free();\n            }\n\n        } else if (type2.mode == \"compound\") {\n            wasm.call(module => module.create_compound_hdf5_attribute(this.file, this.name, attr, shape, type2.members));\n            wasm.call(module => module.write_compound_hdf5_attribute(this.file, this.name, attr, x));\n\n        } else {\n            forbid_strings(x);\n            let y = utils.wasmifyArray(x, null);\n            try {\n                wasm.call(module => module.create_numeric_hdf5_attribute(this.file, this.name, attr, shape, type2.type));\n                wasm.call(module => module.write_numeric_hdf5_attribute(this.file, this.name, attr, y.constructor.className, y.offset));\n            } finally {\n                y.free();\n            }\n        }\n\n        this.#attributes.push(attr);\n        return;\n    }\n}\n\n/**\n * Representation of a group inside a HDF5 file.\n *\n * @augments H5Base\n */\nexport class H5Group extends H5Base {\n    #children;\n    #attributes;\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the group inside the file.\n     * @param {object} [options={}] - Optional parameters, for internal use only.\n     */\n    constructor(file, name, options = {}) {\n        const { newlyCreated = false, ...others } = options;\n        utils.checkOtherOptions(others);\n        super(file, name);\n\n        if (newlyCreated) {\n            this.#children = {};\n            this.set_attributes([]);\n        } else {\n            let x = wasm.call(module => new module.H5GroupDetails(file, name));\n            try {\n                this.#children = x.children();\n                this.set_attributes(x.attributes());\n            } finally {\n                x.delete();\n            }\n        }\n    }\n\n    /**\n     * @member {object}\n     * @desc An object where the keys are the names of the immediate children and the values are strings specifying the object type of each child.\n     * Each string can be one of `\"Group\"`, `\"DataSet\"` or `\"Other\"`.\n     */\n    get children() {\n        return this.#children;\n    }\n\n    #child_name(child) {\n        let new_name = this.name;\n        if (new_name != \"/\") {\n            new_name += \"/\";\n        } \n        new_name += child;\n        return new_name;\n    }\n\n    /**\n     * @param {string} name - Name of the child element to open.\n     * @param {object} [options={}] - Further options to pass to the {@linkplain H5Group} or {@linkplain H5DataSet} constructors.\n     *\n     * @return {H5Group|H5DataSet} Object representing the child element.\n     */\n    open(name, options = {}) {\n        let new_name = this.#child_name(name);\n        if (name in this.#children) {\n            if (this.#children[name] == \"Group\") {\n                return new H5Group(this.file, new_name, options);\n            } else if (this.#children[name] == \"DataSet\") {\n                return new H5DataSet(this.file, new_name, options); \n            } else {\n                throw new Error(\"don't know how to open '\" + name + \"'\");\n            }\n        } else {\n            throw new Error(\"no '\" + name + \"' child in this HDF5 Group\");\n        }\n    }\n\n    /**\n     * @param {string} name - Name of the group to create.\n     *\n     * @return {@H5Group} A group is created as an immediate child of the current group.\n     * A {@linkplain H5Group} object is returned representing this new group.\n     * If a group already exists at `name`, it is returned directly.\n     */\n    createGroup(name) {\n        let new_name = this.#child_name(name);\n        if (name in this.children) {\n            if (this.children[name] == \"Group\") {\n                return new H5Group(this.file, new_name);\n            } else {\n                throw new Error(\"existing child '\" + new_name + \"' is not a HDF5 group\");\n            }\n        } else {\n            wasm.call(module => module.create_hdf5_group(this.file, new_name));\n            this.children[name] = \"Group\";\n            return new H5Group(this.file, new_name, { newlyCreated: true });\n        }\n    }\n\n    /**\n     * @param {string} name - Name of the dataset to create.\n     * @param {string} type - Type of dataset to create, see {@linkcode H5DataSet#type H5DataSet.type}.\n     * @param {Array} shape - Array containing the dimensions of the dataset to create.\n     * This can be set to an empty array to create a scalar dataset.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {number} [options.compression=6] - Deflate compression level.\n     * @param {?Array} [options.chunks=null] - Array containing the chunk dimensions.\n     * This should have length equal to `shape`, with each value being no greater than the corresponding value of `shape`.\n     * If `null`, it defaults to `shape`.\n     *\n     * @return {H5DataSet} A dataset of the specified type and shape is created as an immediate child of the current group.\n     * A {@linkplain H5DataSet} object is returned representing this new dataset.\n     */\n    createDataSet(name, type, shape, options = {}) {\n        let { maxStringLength = null, x = null, levels = null, compression = 6, chunks = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        type = upgrade_type(type, levels, maxStringLength, x);\n\n        let new_name = this.#child_name(name);\n        if (chunks === null) {\n            chunks = shape;\n        }\n\n        let type2 = downcast_type(type);\n        if (type2.mode == \"string\") {\n            wasm.call(module => module.create_string_hdf5_dataset(this.file, new_name, shape, compression, chunks, type2.encoding, type2.length));\n        } else if (type2.mode == \"enum\") {\n            wasm.call(module => module.create_enum_hdf5_dataset(this.file, new_name, shape, compression, chunks, type2.code_type, type2.levels));\n        } else if (type2.mode == \"compound\") {\n            wasm.call(module => module.create_compound_hdf5_dataset(this.file, new_name, shape, compression, chunks, type2.members));\n        } else {\n            wasm.call(module => module.create_numeric_hdf5_dataset(this.file, new_name, shape, compression, chunks, type2.type));\n        }\n\n        this.children[name] = \"DataSet\";\n        return new H5DataSet(this.file, new_name, { newlyCreated: true, type: type, shape: shape });\n    }\n\n    /**\n     * This convenience method combines {@linkcode H5Group#createDataSet createDataSet} with {@linkcode H5DataSet#write write}.\n     * It is particularly useful for string types as it avoids having to specify the `maxStringLength` during creation based on the `x` used during writing.\n     * \n     * @param {string} name - Name of the dataset to create.\n     * @param {string} type - Type of dataset to create, see {@linkcode H5DataSet#type H5DataSet.type}.\n     * @param {Array} shape - Array containing the dimensions of the dataset to create.\n     * If set to an empty array, this will create a scalar dataset.\n     * If set to `null`, this is determined from `x`.\n     * @param {(TypedArray|Array|string|number)} x - Values to be written to the new dataset, see {@linkcode H5DataSet#write H5DataSet.write}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {number} [options.compression=6] - Deflate compression level.\n     * @param {?Array} [options.chunks=null] - Array containing the chunk dimensions.\n     * This should have length equal to `shape`, with each value being no greater than the corresponding value of `shape`.\n     * If `null`, it defaults to `shape`.\n     *\n     * @return {H5DataSet} A dataset of the specified type and shape is created as an immediate child of the current group.\n     * The same dataset is then filled with the contents of `x`.\n     * A {@linkplain H5DataSet} object is returned representing this new dataset.\n     */\n    writeDataSet(name, type, shape, x, options = {}) {\n        if (x === null) {\n            throw new Error(\"cannot write 'null' to HDF5\"); \n        }\n\n        let conv = convert_enums(type, options.levels, x);\n        type = conv.type;\n        x = conv.x;\n\n        let guessed = guess_shape(x, shape);\n        let handle = this.createDataSet(name, type, guessed.shape, { x, ...options });\n        handle.write(guessed.x);\n        return handle;\n    }\n}\n\n/**\n * Representation of a HDF5 file as a top-level group.\n *\n * @augments H5Group\n */\nexport class H5File extends H5Group {\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {object} [options={}] - Further options to pass to the {@linkplain H5Group} constructor.\n     */\n    constructor(file, options = {}) {\n        super(file, \"/\", options);\n    }\n}\n\n/**\n * Create a new HDF5 file.\n *\n * @param {string} path - Path to the file.\n *\n * @return {H5File} A new file is created at `path`.\n * A {@linkplain H5File} object is returned.\n */\nexport function createNewHdf5File(path) {\n    wasm.call(module => module.create_hdf5_file(path));\n    return new H5File(path, { newlyCreated: true });\n}\n\n/**\n * Representation of a dataset inside a HDF5 file.\n *\n * @augments H5Base\n */\nexport class H5DataSet extends H5Base {\n    #shape;\n    #type;\n    #values;\n    #levels;\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the dataset inside the file.\n     * @param {object} [options={}] - Optional parameters.\n     */\n    constructor(file, name, options = {}) {\n        const { newlyCreated = false, load = null, shape = null, type = null, values = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        super(file, name);\n\n        if (newlyCreated) {\n            if (shape === null || type === null) {\n                throw new Error(\"need to pass 'shape' and 'type' if 'newlyCreated = true'\");\n            }\n            this.#shape = shape;\n            this.#type = type;\n            this.set_attributes([]);\n\n        } else {\n            let x = wasm.call(module => new module.H5DataSetDetails(file, name));\n            try {\n                this.#type = upcast_type(x.type());\n                this.#shape = x.shape();\n                this.set_attributes(x.attributes());\n            } finally {\n                x.delete();\n            }\n        }\n    }\n\n    /**\n     * @member {string|H5StringType|H5EnumType|H5CompoundType}\n     * @desc The type of the dataset.\n     * For strings, this will be one of:\n     * - `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64.\n     * - `\"FloatX\"` may for `X` of 32 or 64.\n     * - `\"Other\"`, for an unknown type.\n     */\n    get type() {\n        return this.#type;\n    }\n\n    /**\n     * @member {Array}\n     * @desc Array of integers containing the dimensions of the dataset.\n     * If this is empty, the dataset is a scalar.\n     */\n    get shape() {\n        return this.#shape;\n    }\n\n    /**\n     * @member {(Array|TypedArray)}\n     * @desc The contents of this dataset.\n     * This has length equal to the product of {@linkcode H5DataSet#shape shape};\n     * unless this dataset is scalar, in which case it has length 1.\n     */\n    get values() {\n        let x = wasm.call(module => new module.LoadedH5DataSet(this.file, this.name));\n        try {\n            if (typeof this.#type == \"string\") {\n                if (this.#type == \"Other\") {\n                    throw new Error(\"cannot load dataset for an unsupported type\");\n                }\n                return x.numeric_values().slice();\n            } else if (this.#type instanceof H5StringType) {\n                return x.string_values();\n            } else if (this.#type instanceof H5EnumType) {\n                return x.numeric_values().slice();\n            } else if (this.#type instanceof H5CompoundType) {\n                return x.compound_values();\n            } else {\n                throw new Error(\"cannot load dataset for an unsupported type\");\n            }\n        } finally {\n            x.delete();\n        }\n    }\n\n    // Provided for back-compatibility only.\n    get levels() {\n        return this.#type.levels;\n    }\n\n    load() {\n        return this.values;\n    }\n\n    get loaded() {\n        return true;\n    }\n\n    /**\n     * @param {Array|TypedArray|number|string} x - Values to write to the dataset.\n     * This should be of length equal to the product of {@linkcode H5DataSet#shape shape};\n     * unless `shape` is empty, in which case it should either be of length 1, or a single number or string.\n     * @param {object} [options={}] - Optional parameters.\n     *\n     * @return `x` is written to the dataset on file.\n     * No return value is provided.\n     */\n    write(x, options = {}) {\n        const { cache = false, ...others } = options;\n        utils.checkOtherOptions(others);\n\n        if (x === null) {\n            throw new Error(\"cannot write 'null' to HDF5\"); \n        }\n        x = check_shape(x, this.shape);\n\n        if (typeof this.#type == \"string\") {\n            if (this.#type == \"Other\") {\n                throw new Error(\"cannot write dataset for an unsupported type\");\n            }\n            forbid_strings(x);\n            let y = utils.wasmifyArray(x, null);\n            try {\n                wasm.call(module => module.write_numeric_hdf5_dataset(this.file, this.name, y.constructor.className, y.offset));\n            } finally {\n                y.free();\n            }\n\n        } else if (this.#type instanceof H5StringType) {\n            wasm.call(module => module.write_string_hdf5_dataset(this.file, this.name, x));\n\n        } else if (this.#type instanceof H5EnumType) {\n            let y = utils.wasmifyArray(x, this.#type.code + \"WasmArray\");\n            try {\n                wasm.call(module => module.write_enum_hdf5_dataset(this.file, this.name, y.offset));\n            } finally {\n                y.free();\n            }\n\n        } else if (this.#type instanceof H5CompoundType) {\n            wasm.call(module => module.write_compound_hdf5_dataset(this.file, this.name, x));\n\n        } else {\n            throw new Error(\"cannot write dataset for an unsupported type\");\n        }\n    }\n}\n\nfunction extract_names(host, output, recursive = true) {\n    for (const [key, val] of Object.entries(host.children)) {\n        if (val == \"Group\") {\n            output[key] = {};\n            if (recursive) {\n                extract_names(host.open(key), output[key], recursive);\n            }\n        } else {\n            let data = host.open(key);\n\n            let dclass;\n            if (data.type instanceof H5StringType) {\n                dclass = \"string\";\n            } else if (data.type instanceof H5EnumType) {\n                dclass = \"enum\";\n            } else if (data.type instanceof H5CompoundType) {\n                dclass = \"compound\";\n            } else if (typeof data.type == \"string\") {\n                if (data.type.startsWith(\"Uint\") || data.type.startsWith(\"Int\")) {\n                    dclass = \"integer\";\n                } else if (data.type.startsWith(\"Float\")) {\n                    dclass = \"float\";\n                } else {\n                    dclass = data.type.toLowerCase();\n                }\n            } else {\n                dclass = \"unknown\";\n            }\n\n            output[key] = dclass + \" dataset\";\n        }\n    }\n}\n\n/**\n * Extract object names from a HDF5 file.\n *\n * @param {string} path - Path to a HDF5 file.\n * For web applications, this should be saved to the virtual filesystem with {@linkcode writeFile}.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.group=\"\"] - Group to use as the root of the search.\n * If an empty string is supplied, the entire file is used as the root.\n * @param {boolean} [options.recursive=true] - Whether to recursively extract names inside child groups.\n * \n * @return {object} Nested object where the keys are the names of the HDF5 objects and values are their types.\n * HDF5 groups are represented by nested Javascript objects in the values;\n * these nested objects are empty if `recursive = false`.\n * HDF5 datasets are represented by strings specifying the data type - i.e., `\"integer\"`, `\"float\"`, `\"string\"` or `\"other\"`.\n */\nexport function extractHdf5ObjectNames(path, options = {}) {\n    const { group = \"\", recursive = true, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var src;\n    if (group == \"\") {\n        src = new H5File(path);\n    } else {\n        src = new H5Group(path, group);\n    }\n\n    var output = {};\n    extract_names(src, output, recursive);\n    return output;\n}\n\n/**\n * Load a dataset from a HDF5 file.\n *\n * @param {string} path - Path to a HDF5 file.\n * For web applications, this should be saved to the virtual filesystem with {@linkcode writeFile}.\n * @param {string} name - Name of a dataset inside the HDF5 file.\n * \n * @return {object} An object containing:\n * - `dimensions`, an array containing the dimensions of the dataset.\n * - `contents`, a Int32Array, Float64Array or array of strings, depending on the type of the dataset. \n */\nexport function loadHdf5Dataset(path, name) {\n    var x = new H5DataSet(path, name, { load: true });\n    return {\n        \"dimensions\": x.shape,\n        \"contents\": x.values\n    };\n}\n","import { createWasmArray } from \"./create.js\";\n\n/**\n * Helper utility to determine the length of a subset, for use in allocations.\n *\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {?boolean} filter - How to interpret `subset`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {number} targetLength - Length of the target vector to be subsetted by `subset`.\n * @param {string} targetName - Name of the target vector, for use in error messages.\n *\n * @return {number} Length of the subsetted vector.\n */\nexport function checkSubsetLength(subset, filter, targetLength, targetName) {\n    if (filter === null) {\n        subset.forEach(i => {\n            if (i < 0 || i >= targetLength) {\n                throw new Error(\"'subset' contains out-of-range indices for '\" + targetName + \"'\");\n            }\n        });\n        return subset.length;\n    } \n\n    if (subset.length != targetLength) {\n        throw new Error(\"'subset' and '\" + targetName + \"' should have the same length\");\n    }\n\n    let sum = 0;\n    subset.forEach(x => { sum += (x != 0); });\n    if (filter) {\n        return subset.length - sum;\n    } \n\n    return sum;\n}\n\n/**\n * Helper utility to fill a subset from one TypedArray to another.\n *\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {?boolean} filter - How to interpret `subset`.\n * See the argument of the same name in {@linkcode subsetWasmArray} for more details.\n * @param {TypedArray} input - Input array to subset.\n * @param {TypedArray} output - Output array to store the subset, of length defined by {@linkcode checkSubsetLength}.\n *\n * @return `output` is filled with the specified subset of values from `input`.\n */\nexport function fillSubset(subset, filter, input, output) {\n    if (filter == null) {\n        subset.forEach((s, i) => {\n            output[i] = input[s];\n        });\n    } else if (filter) {\n        let j = 0;\n        subset.forEach((y, i) => {\n            if (y == 0) {\n                output[j] = input[i];\n                j++;\n            }\n        });\n    } else {\n        let j = 0;\n        subset.forEach((y, i) => {\n            if (y !== 0) {\n                output[j] = input[i];\n                j++;\n            }\n        });\n    }\n}\n\n/**\n * Create a new WasmArray from a subset of an existing WasmArray.\n * \n * @param {WasmArray} x - The input WasmArray.\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * \n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to `subset`, if `filter = null`; \n * the number of truthy elements in `subset`, if `filter = false`;\n * or the number of falsey elements in `subset`, if `filter = true`.\n *\n * @return {WasmArray} Array of the same type of `x` and in the same space, containing the desired subset `subset`.\n * If `buffer` is supplied, it is directly returned.\n */\nexport function subsetWasmArray(x, subset, { filter = null, buffer = null } = {}) {\n    let len = checkSubsetLength(subset, filter, x.length, \"x\"); \n\n    if (buffer == null) {\n        // Function better be a no-throw from now on.\n        buffer = createWasmArray(x.space, len, x.constructor);\n    } else if (buffer.length !== len) {\n        throw new Error(\"length of 'buffer' is not consistent with 'subset'\");\n    }\n\n    let barr = buffer.array();\n    let xarr = x.array();\n    fillSubset(subset, filter, xarr, barr);\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Guess the identity of the features from their names.\n *\n * @param {Array} features - Array of strings containing feature identifiers, typically Ensembl IDs or gene symbols.\n * Elements may also be `null` or undefined if an identifier is missing.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceTaxonomy=false] - Whether to force the use of taxonomy IDs for human and mouse.\n * This is `false` for back compatibility.\n *\n * @return {object} An object containing:\n *\n * - `species`, the inferred species as a string.\n *   This can be either `\"human\"` or `\"mouse\"`, or an NCBI taxonomy ID (one of 6239, 10116, 9541, 7227, 7955, 9598).\n *   If `forceTaxonomy = true`, human and mouse are replaced with 9606 and 10090, respectively.\n * - `type`: the feature identifier type.\n *   This can either be `\"ensembl\"` or `\"symbol\"`.\n * - `confidence`: the percentage of entries in `x` that are consistent with the inferred identity.\n */\nexport function guessFeatures(features, options = {}) {\n    const { forceTaxonomy = false, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let ntotal = features.length;\n    let early_threshold = Math.ceil(ntotal / 2);\n    let format = payload => {\n        payload.confidence /= ntotal;\n        return payload;\n    };\n\n    // Duplicated entries only count as one match, so as to avoid problems with\n    // chromosome positions, feature type specifications, etc. Note that we\n    // still need to use the full length to compute 'ntotal', otherwise we\n    // wouldn't be penalizing the duplicates properly.\n    let unique_features = new Set;\n    for (const f of features) {\n        if (typeof f == \"string\") {\n            unique_features.add(f);\n        }\n    }\n\n    let ensembl_human = 0;\n    let ensembl_mouse = 0;\n    let ensembl_6239 = 0;\n    let ensembl_10116 = 0; // Ensembl only, Rat symbols are indistiguishable from mice.\n    let ensembl_9541 = 0; // Ensembl only, Mfac symbols are indistiguishable from human.\n    let ensembl_7227 = 0; // Ensembl only, fly symbols are crazy.\n    let ensembl_7955 = 0;\n    let ensembl_9598 = 0; // Ensembl only, Chimp symbols are indistinguishable from human.\n\n    let symbol_human = 0;\n    let symbol_mouse = 0;\n    let symbol_6239 = 0;\n    let symbol_7955 = 0;\n\n    let hsid = (forceTaxonomy ? \"9606\" : \"human\");\n    let mmid = (forceTaxonomy ? \"10090\" : \"mouse\");\n    let collected = [];\n\n    // Checking if it's any type of Ensembl.\n    let any_ens = 0;\n    for (const x of unique_features) {\n        if (x && x.match(/^ENS[A-Z]*G[0-9]{11}$/)) {\n            any_ens++;\n        }\n    }\n\n    if (any_ens) {\n        for (const x of unique_features) {\n            if (x) {\n                if (x.startsWith(\"ENSG\")) {\n                    ensembl_human++;\n                } else if (x.startsWith(\"ENSMUSG\")) {\n                    ensembl_mouse++;\n                } else if (x.startsWith(\"ENSRNOG\")) {\n                    ensembl_10116++;\n                } else if (x.startsWith(\"ENSMFAG\")) {\n                    ensembl_9541++;\n                } else if (x.startsWith(\"ENSDARG\")) {\n                    ensembl_7955++;\n                } else if (x.startsWith(\"ENSPTRG\")) {\n                    ensembl_9598++;\n                }\n            }\n        }\n\n        collected.push({ species: hsid, type: \"ensembl\", confidence: ensembl_human });\n        collected.push({ species: mmid, type: \"ensembl\", confidence: ensembl_mouse });\n        collected.push({ species: \"10116\", type: \"ensembl\", confidence: ensembl_10116 });\n        collected.push({ species: \"9541\", type: \"ensembl\", confidence: ensembl_9541 });\n        collected.push({ species: \"7955\", type: \"ensembl\", confidence: ensembl_7955 });\n        collected.push({ species: \"9598\", type: \"ensembl\", confidence: ensembl_9598 });\n\n        // See if we can quit early and avoid the other checks.\n        for (const x of collected) {\n            if (x.confidence >= early_threshold) {\n                return format(x);\n            }\n        }\n    }\n\n    // Human symbol; starts with upper case, no lower case, and not an Ensembl of any kind.\n    // We also ignore VEGA gene identifiers, as these are antiquated; and MGI identifiers,\n    // which are all-caps and thus confusing.\n    for (const x of unique_features) {\n        if (x && x.match(/^[A-Z][^a-z]+$/) && !x.match(/^ENS[A-Z]+[0-9]{11}/) && !x.match(/^OTT.{4}[0-9]{11}/) && !x.match(/^MGI:[0-9]+/)) {\n            symbol_human++;\n        }\n    }\n    {\n        let payload = { species: hsid, type: \"symbol\", confidence: symbol_human };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Mouse symbol; starts with upper case, but no upper case after that.\n    for (const x of unique_features) {\n        if (x && x.match(/^[A-Z][^A-Z]+$/)) {\n            symbol_mouse++;\n        }\n    }\n    {\n        let payload = { species: mmid, type: \"symbol\", confidence: symbol_mouse };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm Ensembl (WormBase).\n    for (const x of unique_features) {\n        if (x && x.match(/^WBGene[0-9]+$/)) {\n            ensembl_6239++;\n        }\n    }\n    {\n        let payload = { species: \"6239\", type: \"ensembl\", confidence: ensembl_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Fly Ensembl (FlyBase).\n    for (const x of unique_features) {\n        if (x && x.match(/^FBgn[0-9]+$/)) {\n            ensembl_7227++;\n        }\n    }\n    {\n        let payload = { species: \"7227\", type: \"ensembl\", confidence: ensembl_7227 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm symbols; at least three lower case with a dash and numbers.\n    for (const x of unique_features) {\n        if (x && x.match(/^[a-z]{3,}-[0-9]+$/)) {\n            symbol_6239++;\n        }\n    }\n    {\n        let payload = { species: \"6239\", type: \"symbol\", confidence: symbol_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Zebrafish symbols; at least three lower case letters, no dash, followed by numbers and/or more lower case.\n    for (const x of unique_features) {\n        if (x && x.match(/^[a-z]{3,}[0-9a-z]+$/)) {\n            symbol_7955++;\n        }\n    }\n    {\n        let payload = { species: \"7955\", type: \"symbol\", confidence: symbol_7955 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Picking the best.\n    let highest = collected[0];\n    for (var i = 1; i < collected.length; i++) {\n        if (collected[i].confidence > highest.confidence) {\n            highest = collected[i];\n        }\n    }\n\n    return format(highest);\n}\n","import * as bioc from \"bioconductor\";\n\nexport function cloneCached(x, cached) {\n    return (cached ? bioc.CLONE(x) : x);\n}\n\n/**\n * A representation of a matrix of expression values, where the values are hosted on the Wasm heap for easier compute via [**scran.js**](https://github.com/jkanche/scran.js).\n * See [here](https://jkanche.github.io/scran.js/ScranMatrix.html) for more details.\n *\n * @external ScranMatrix\n */ \n\n/**\n * A representation of multiple {@linkplain external:ScranMatrix ScranMatrix} objects, where each object contains data for the same cells but across a different feature space, e.g., for different data modalities.\n * See [here](https://jkanche.github.io/scran.js/MultiMatrix.html) for more details.\n *\n * @external MultiMatrix\n */ \n\n\n/**\n * A DataFrame from the [**bioconductor**](https://github.com/LTLA/bioconductor.js) package, where each column is represented by some arbitrary vector-like object.\n * See [here](https://ltla.github.io/bioconductor.js/DataFrame.html) for more details.\n *\n * @external DataFrame\n */ \n\n/**\n * Representation of a file that is agnostic to the environment (Node.js or browser) or the nature of the contents (buffer or file path).\n * See [here](https://ltla.github.io/bakana/SimpleFile.html) for more details.\n *\n * @external SimpleFile\n */ \n\nexport async function defaultDownload(u) {\n    const res = await fetch(u);\n    if (res.ok) {\n        throw new Error(\"failed to fetch '\" + u + \"' (\" + String(resp.status) + \")\");\n    }\n    return new Uint8Array(await res.arrayBuffer());\n}\n","import * as bakana from \"bakana\";\nimport * as utils from \"./utils.js\";\n\nclass GypsumNavigator {\n    #download;\n    #url;\n    #prefix;\n    #path;\n    #manifest;\n\n    constructor(prefix, path, url, download) {\n        this.#prefix = prefix;\n        this.#path = path;\n        this.#url = url;\n        this.#download = download;\n        this.#manifest = null;\n    }\n\n    async get(path, asBuffer) {\n        let full_path = this.#prefix;\n        if (this.#path !== null) {\n            full_path += \"/\" + this.#path;\n        }\n        full_path += \"/\" + path;\n        return this.#download(this.#url + \"/file/\" + encodeURIComponent(full_path));\n    }\n\n    async exists(path) {\n        if (this.#manifest == null) {\n            const manuri = this.#url + \"/file/\" + encodeURIComponent(this.#prefix + \"/..manifest\");\n            const raw_man = await this.#download(manuri);\n            const dec = new TextDecoder;\n            this.#manifest = JSON.parse(dec.decode(raw_man));\n        }\n        let lookup = (this.#path === null ? \"\" : this.#path + \"/\") + path;\n        return (lookup in this.#manifest);\n    }\n\n    clean(localPath) {}\n}\n\n/**\n * Dataset represented by a SummarizedExperiment in the [**gypsum**](https://github.com/ArtifactDB/gypsum-worker) store.\n * This extends the [AbstractDataset](https://kanaverse.github.io/bakana/AbstractAlabasterDataset.html) class.\n */\nexport class GypsumDataset extends bakana.AbstractAlabasterDataset {\n    #id;\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * @param {function} fun - A (possibly `async`) function that accepts a URL and returns a Uint8Array of that URL's contents.\n     * @return {function} Previous setting of the downloader function.\n     */\n    static setDownloadFun(fun) {\n        let previous = GypsumDataset.#downloadFun;\n        GypsumDataset.#downloadFun = fun;\n        return previous;\n    }\n\n    /**\n     * @param {string} project - Name of the project.\n     * @param {string} asset - Name of the asset.\n     * @param {string} version - Name of the version.\n     * @param {?string} path - Path to the SummarizedExperiment inside the version directory.\n     * This can be `null` if the SummarizedExperiment exists at the root of the directory.\n     * @param {string} [url=https://gypsum.artifactdb.com] - URL to the **gypsum** REST API.\n     */\n    constructor(project, asset, version, path, url = \"https://gypsum.artifactdb.com\") {\n        super(new GypsumNavigator(project + \"/\" + asset + \"/\" + version, path, url, GypsumDataset.#downloadFun));\n        this.#id = { project, asset, version, path, url };\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"gypsum\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return { id: { ...(this.#id) }, options: this.options() };\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        const enc = new TextEncoder;\n        const buffer = enc.encode(JSON.stringify(this.#id));\n\n        // Storing it as a string in the buffer.\n        let output = {\n            type: \"id\",\n            file: new bakana.SimpleFile(buffer, { name: \"id\" })\n        };\n\n        return {\n            files: [ output ],\n            options: this.options()\n        }\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode GypsumDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {GypsumDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        let args = {};\n\n        // This should contain 'id'.\n        for (const x of files) {\n            const dec = new TextDecoder;\n            args[x.type] = dec.decode(x.file.buffer());\n        }\n\n        if (!(\"id\" in args)) {\n            throw new Error(\"expected a file of type 'id' when unserializing a GypsumDataset\"); \n        }\n        const id = JSON.parse(args.id);\n\n        let output = new GypsumDataset(id.project, id.asset, id.version, id.path, id.url);\n        output.setOptions(options);\n        return output;\n    }\n}\n\n/**\n * Result represented as a SummarizedExperiment in the [**gypsum**](https://github.com/ArtifactDB/gypsum-worker) store.\n * This extends the [AbstractResult](https://kanaverse.github.io/bakana/AbstractAlabasterResult.html) class.\n * @hideconstructor\n */\nexport class GypsumResult extends bakana.AbstractAlabasterResult {\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * @param {function} fun - A (possibly `async`) function that accepts a URL and returns a Uint8Array of that URL's contents.\n     * @return {function} Previous setting of the downloader function.\n     */\n    static setDownloadFun(fun) {\n        let previous = GypsumResult.#downloadFun;\n        GypsumResult.#downloadFun = fun;\n        return previous;\n    }\n\n    /**\n     * @param {string} project - Name of the project.\n     * @param {string} asset - Name of the asset.\n     * @param {string} version - Name of the version.\n     * @param {?string} path - Path to the SummarizedExperiment inside the version directory.\n     * This can be `null` if the SummarizedExperiment exists at the root of the directory.\n     * @param {string} [url=https://gypsum.artifactdb.com] - URL to the **gypsum** REST API.\n     */\n    constructor(project, asset, version, path, url = \"https://gypsum.artifactdb.com\") {\n        super(new GypsumNavigator(project + \"/\" + asset + \"/\" + version, path, url, GypsumResult.#downloadFun));\n    }\n}\n","import * as bakana from \"bakana\";\nimport * as utils from \"./utils.js\";\n\nclass SewerRatNavigator {\n    #url;\n    #prefix;\n    #download;\n    #check;\n\n    constructor(prefix, url, download, check) {\n        this.#prefix = prefix;\n        this.#url = url;\n        this.#download = download;\n        this.#check = check;\n    }\n\n    async get(path, asBuffer) {\n        return this.#download(this.#url + \"/retrieve/file?path=\" + encodeURIComponent(this.#prefix + \"/\" + path));\n    }\n\n    async exists(path) {\n        return this.#check(this.#url + \"/retrieve/file?path=\" + encodeURIComponent(this.#prefix + \"/\" + path));\n    }\n\n    clean(localPath) {}\n}\n\nasync function defaultCheck(u) {\n    let resp = await fetch(u, { method: \"HEAD\" });\n    if (resp.ok) {\n        return true;\n    } else if (resp.status == 404) {\n        return false;\n    } else {\n        throw new Error(\"failed to check existence of '\" + u + \"' (\" + String(resp.status) + \")\");\n    }\n}\n\n/**\n * Dataset represented by a SummarizedExperiment in a [**SewerRat**](https://github.com/ArtifactDB/SewerRat)-registered directory.\n * This extends the [AbstractAlabasterDataset](https://kanaverse.github.io/bakana/AbstractAlabasterDataset.html) class.\n */\nexport class SewerRatDataset extends bakana.AbstractAlabasterDataset {\n    #id;\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * @param {function} fun - A (possibly `async`) function that accepts a URL and returns a Uint8Array of that URL's contents.\n     * @return {function} Previous setting of the download function.\n     */\n    static setDownloadFun(fun) {\n        let previous = SewerRatDataset.#downloadFun;\n        SewerRatDataset.#downloadFun = fun;\n        return previous;\n    }\n\n    static #checkFun = defaultCheck;\n\n    /**\n     * @param {function} fun - A (possibly `async`) function that accepts a URL, performs a HEAD request and returns a Response object.\n     * @return {function} Previous setting of the HEAD function.\n     */\n    static setCheckFun(fun) {\n        let previous = SewerRatDataset.#checkFun;\n        SewerRatDataset.#checkFun = fun;\n        return previous;\n    }\n\n    /**\n     * @param {string} path - Absolute path to a SummarizedExperiment on the **SewerRat**'s filesystem.\n     * @param {string} url - URL to the **SewerRat** REST API. \n     */\n    constructor(path, url) {\n        super(new SewerRatNavigator(path, url, SewerRatDataset.#downloadFun, SewerRatDataset.#checkFun));\n        this.#id = { path, url };\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"SewerRat\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return { id: { ...(this.#id) }, options: this.options() };\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        const enc = new TextEncoder;\n        const buffer = enc.encode(JSON.stringify(this.#id));\n\n        // Storing it as a string in the buffer.\n        let output = {\n            type: \"id\",\n            file: new bakana.SimpleFile(buffer, { name: \"id\" })\n        };\n\n        return {\n            files: [ output ],\n            options: this.options()\n        }\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode CollaboratordbDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {CollaboratordbDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        let args = {};\n\n        // This should contain 'id'.\n        for (const x of files) {\n            const dec = new TextDecoder;\n            args[x.type] = dec.decode(x.file.buffer());\n        }\n\n        if (!(\"id\" in args)) {\n            throw new Error(\"expected a file of type 'id' when unserializing SewerRat dataset\"); \n        }\n        const id = JSON.parse(args.id);\n\n        let output = new SewerRatDataset(id.path, id.url);\n        output.setOptions(options);\n        return output;\n    }\n}\n\n/**\n * Result represented as a SummarizedExperiment in the [**gypsum**](https://github.com/ArtifactDB/gypsum-worker) store.\n * This extends the [AbstractAlabasterResult](https://kanaverse.github.io/bakana/AbstractAlabasterResult.html) class.\n */\nexport class SewerRatResult extends bakana.AbstractAlabasterResult {\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * @param {function} fun - A (possibly `async`) function that accepts a URL and returns a Uint8Array of that URL's contents.\n     * @return {function} Previous setting of the download function.\n     */\n    static setDownloadFun(fun) {\n        let previous = SewerRatResult.#downloadFun;\n        SewerRatResult.#downloadFun = fun;\n        return previous;\n    }\n\n    static #checkFun = defaultCheck;\n\n    /**\n     * @param {function} fun - A (possibly `async`) function that accepts a URL and returns a boolean indicating whether that URL can be accessed without a 404.\n     * @return {function} Previous setting of the HEAD function.\n     */\n    static setCheckFun(fun) {\n        let previous = SewerRatResult.#checkFun;\n        SewerRatResult.#checkFun = fun;\n        return previous;\n    }\n\n    /**\n     * @param {string} path - Absolute path to a SummarizedExperiment on the **SewerRat**'s filesystem.\n     * @param {string} url - URL to the **SewerRat** REST API. \n     */\n    constructor(path, url) {\n        super(new SewerRatNavigator(path, url, SewerRatResult.#downloadFun, SewerRatResult.#checkFun));\n    }\n}\n","/**\n * Representation of a group inside a HDF5 file.\n * This is an abstract interface that should not be created directly.\n * @hideconstructor\n */\nexport class H5Group {\n    /**\n     * @member {Array}\n     * @desc Array containing the names of all attributes of this object.\n     */\n    attributes() {\n        throw new Error(\"'attributes()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @param {string} attr - Name of the attribute.\n     * @return {object} Object containing:\n     * - `values`, an Array or TypedArray containing the attribute data.\n     *   This should have length equal to the product of `shape` for non-scalar attributes.\n     * - `shape`, an Array containing the dimensions of the attribute.\n     *   This is empty for scalar attributes, in which case `values` will have length 1.\n     */\n    readAttribute(attr) {\n        throw new Error(\"'readAttribute()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @param {string} attr - Name of the attribute.\n     * @param {string} type - Type of attribute to create.\n     * This can be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64; or `\"FloatX\"` for `X` of 32 or 64; or `\"String\"`.\n     * @param {?Array} shape - Array containing the dimensions of the attribute to create.\n     * If set to an empty array, this will create a scalar dataset.\n     * @param {TypedArray|Array} x - Values to be written to the new attribute.\n     * This should be of length equal to the product of `shape` - unless `shape` is empty, in which case it should be of length 1.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.maxStringLength=null] - Maximum length of the strings to be saved.\n     * Only used when `type = \"String\"`.\n     * If `null`, this is inferred from the maximum length of strings in `data`.\n     */\n    writeAttribute(attr, type, shape, data, options = { maxStringLength: null }) {\n        throw new Error(\"'writeAttribute()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @return {Array} Names of the children of this group.\n     */\n    children() {\n        throw new Error(\"'children()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @param {string} name - Name of the child element to open.\n     * @return {H5Group|H5DataSet} Object representing the child element.\n     */\n    open(name) {\n        throw new Error(\"'open()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @param {string} name - Name of the group to create.\n     *\n     * @return {@H5Group} A group is created as an immediate child of the current group.\n     * A {@linkplain H5Group} object is returned representing this new group.\n     * If a group already exists at `name`, it is returned directly.\n     */\n    createGroup(name) {\n        throw new Error(\"'createGroup()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @param {string} name - Name of the dataset to create.\n     * @param {string|object} type - Type of dataset to create.\n     * This can be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64; or `\"FloatX\"` for `X` of 32 or 64; or `\"String\"`.\n     * @param {Array} shape - Array containing the dimensions of the dataset to create.\n     * This can be set to an empty array to create a scalar dataset.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {number} [options.maxStringLength=null] - Maximum length of the strings to be saved.\n     * Only used when `type = \"String\"`.\n     * If `null`, this should be inferred from the maximum length of strings in `options.data`.\n     * If `options.data` is `null`, this must be provided for `type = \"String\"`.\n     * @param {?(Array|TypedArray)} [options.data=null] - Array to be written to the dataset.\n     * This is equivalent to calling {@linkcode H5DataSet#write H5DataSet.write} immediately after the dataset is created.\n     *\n     * @return {H5DataSet} A dataset of the specified type and shape is created as an immediate child of the current group.\n     * A {@linkplain H5DataSet} object is returned representing this new dataset.\n     */\n    createDataSet(name, type, shape, options = { maxStringLength: null, data: null }) {\n        throw new Error(\"'createDataSet()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @return Closes the group handle.\n     * Any subsequent method invocations on this group or its children are considered invalid.\n     */\n    close() {\n        throw new Error(\"'close()' is not implemented in this H5Group subclass\");\n    }\n}\n\n/**\n * Representation of a dataset inside a HDF5 file.\n * This is an abstract interface that should not be created directly.\n * @hideconstructor\n */\nexport class H5DataSet {\n    /**\n     * @member {Array}\n     * @desc Array containing the names of all attributes of this object.\n     */\n    attributes() {\n        throw new Error(\"'attributes()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @param {string} attr - Name of the attribute.\n     * @return {object} Object containing:\n     * - `values`, an Array or TypedArray containing the attribute data.\n     *   This should have length equal to the product of `shape` for non-scalar attributes.\n     * - `shape`, an Array containing the dimensions of the attribute.\n     *   This is empty for scalar attributes, in which case `values` will have length 1.\n     */\n    readAttribute(attr) {\n        throw new Error(\"'readAttribute()' is not implemented in this H5Group subclass\");\n    }\n\n    /**\n     * @return {string|object} String containing the type of the dataset.\n     * This may be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64; or `\"FloatX\"` for `X` of 32 or 64; or `\"String\"`.\n     * Alternatively, this may be an object representing a compound dataype, where keys and values are the names and types of each component.\n     */\n    type() {\n        throw new Error(\"'type()' is not implemented in this H5DataSet subclass\");\n    }\n\n    /**\n     * @return {Array} Array of integers containing the dimensions of the dataset.\n     * If this is an empty array, the dataset is a scalar.\n     */\n    shape() {\n        throw new Error(\"'shape()' is not implemented in this H5DataSet subclass\");\n    }\n\n    /**\n     * @return {Array|TypedArray} The contents of this dataset.\n     * This has length equal to the product of {@linkcode H5DataSet#shape shape} - unless this dataset is scalar, in which case it has length 1.\n     * For compound datatypes, each element of the output array is an object.\n     */\n    values() {\n        throw new Error(\"'values()' is not implemented in this H5DataSet subclass\");\n    }\n\n    /**\n     * @param {Array|TypedArray} x - Values to write to the dataset.\n     * This should be of length equal to the product of {@linkcode H5DataSet#shape shape} -  unless `shape` is empty, in which case it should be of length 1.\n     * @param {object} [options={}] - Optional parameters.\n     *\n     * @return `x` is written to the dataset on file.\n     * No return value is provided.\n     */\n    write(x, options = {}) {\n        throw new Error(\"'write()' is not implemented in this H5DataSet subclass\");\n    }\n\n    /**\n     * @return Closes the dataset handle.\n     * Any subsequent method invocations on this dataset need not be valid.\n     */\n    close() {\n        throw new Error(\"'close()' is not implemented in this H5DataSet subclass\");\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildSnnGraphResults } from \"./buildSnnGraph.js\";\n\n/**\n * Wrapper around multi-level clustering results on the Wasm heap, produced by {@linkcode clusterGraph}.\n * @hideconstructor\n */\nexport class ClusterMultilevelResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n    }\n\n    /**\n     * @return {number} Number of levels in the results.\n     */\n    numberOfLevels() {\n        return this.#results.num_levels();\n    }\n\n    /**\n     * @return {number} Level with the lowest modularity.\n     */\n    bestLevel() {\n        return this.#results.best_level();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the modularity.\n     * Defaults to the best clustering level from {@linkcode ClusterMultilevelResults#bestLevel bestLevel}.\n     *\n     * @return {number} The modularity at the specified level.\n     */\n    modularity(options = {}) {\n        let { level = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        if (level == null) {\n            level = this.bestLevel();\n        }\n        return this.#results.modularity(level);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the cluster membership.\n     * Defaults to the best clustering level from {@linkcode ClusterMultilevelResults#bestLevel bestLevel}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Array containing the cluster membership for each cell.\n     */\n    membership(options = {}) {\n        let { level = null, copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        if (level == null) {\n            level = -1;\n        }\n        return utils.possibleCopy(this.#results.membership(level), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the walktrap clustering results on the Wasm heap, produced by {@linkcode clusterGraph}.\n * @hideconstructor\n */\nexport class ClusterWalktrapResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n    }\n\n    /**\n     * @return {number} Number of merge steps used by the Walktrap algorithm.\n     */\n    numberOfMergeSteps() {\n        return this.#results.num_merge_steps();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.at=null] - Index at which to extract the modularity.\n     * This can be any value from 0 to {@linkcode ClusterWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * Set to `null` to obtain the largest modularity across all merge steps.\n     * @return {number} The modularity at the specified merge step, or the maximum modularity across all merge steps.\n     */\n    modularity(options = {}) {\n        let { at = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        if (at === null) {\n            at = -1;\n        }\n        return this.#results.modularity(at);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Int32Array|Int32WasmArray} Array containing the cluster membership for each cell.\n     */\n    membership(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.membership(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the Leiden clustering results on the Wasm heap, produced by {@linkcode clusterGraph}.\n * @hideconstructor\n */\nexport class ClusterLeidenResults {\n    #id;\n    #results;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The quality of the Leiden clustering.\n     *\n     * Note that Leiden's quality score is technically a different measure from modularity.\n     * Nonetheless, we use `modularity` for consistency with the other SNN clustering result classes.\n     */\n    modularity() {\n        return this.#results.modularity();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     */\n    membership(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.membership(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using community detection on the SNN graph.\n *\n * @param {BuildSnnGraphResults} x - The shared nearest neighbor graph constructed by {@linkcode buildSnnGraph}.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.multiLevelResolution=1] - The resolution of the multi-level clustering, when `method = \"multilevel\"`.\n * Larger values result in more fine-grained clusters.\n * @param {number} [options.leidenResolution=1] - The resolution of the Leiden clustering, when `method = \"leiden\"`.\n * Larger values result in more fine-grained clusters.\n * @param {boolean} [options.leidenModularityObjective=false] - Whether to use the modularity as the objective function when `method = \"leiden\"`.\n * By default, the Constant-Potts Model is used instead.\n * Set to `true` to get an interpretation of the resolution on par with that of `method = \"multilevel\"`.\n * @param {number} [options.walktrapSteps=4] - Number of steps for the Walktrap algorithm, when `method = \"walktrap\"`.\n *\n * @return {ClusterMultiLevelResults|ClusterWalktrapResults|ClusterLeidenResults} Object containing the clustering results.\n * The class of this object depends on the choice of `method`.\n */\nexport function clusterGraph(x, options = {}) {\n    const { \n        method = \"multilevel\", \n        multiLevelResolution = 1, \n        leidenResolution = 1, \n        leidenModularityObjective = false,\n        walktrapSteps = 4,\n        ...others\n    } = options;\n    utils.checkOtherOptions(others);\n\n    var output;\n    try {\n        if (method == \"multilevel\") {\n            output = gc.call(\n                module => module.cluster_multilevel(x.graph, multiLevelResolution),\n                ClusterMultilevelResults\n            );\n        } else if (method == \"walktrap\") {\n            output = gc.call(\n                module => module.cluster_walktrap(x.graph, walktrapSteps),\n                ClusterWalktrapResults\n            );\n        } else if (method == \"leiden\") {\n            output = gc.call(\n                module => module.cluster_leiden(x.graph, leidenResolution, leidenModularityObjective),\n                ClusterLeidenResults\n            );\n        } else {\n            throw new Error(\"unknown method '\" + method + \"'\")\n        }\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as wasm from \"../wasm.js\";\n\nexport function writeFile(path, buffer) {\n    wasm.call(module => module.FS.writeFile(path, buffer));\n    return;\n}\n\nexport function readFile(path) {\n    return wasm.call(module => module.FS.readFile(path, { encoding: 'binary' }));\n}\n\nexport function removeFile(path) {\n    wasm.call(module => module.FS.unlink(path));\n    return;\n}\n\nexport function existsFile(path) {\n    return wasm.call(module => module.FS.analyzePath(path).exists);\n}\n","/**\n * Interface for methods to interact with the filesystem and HDF5 files.\n * Applications are expected to implement each of the documented methods.\n * @hideconstructor\n */\nexport class GlobalsInterface {\n    /**\n     * @param {string} path - Local path to a file.\n     * This should lie inside some application-specific concept of a directory, even if a local filesystem does not exist (e.g., an S3 bucket, or a Zip archive).\n     * @param {object} [options={}] - Further options.\n     * @param {boolean} [options.asBuffer=false] - Whether to return the file contents as a Uint8Array.\n     *\n     * @return {Uint8Array|string|Promise<Uint8Array|string>}\n     * Relative or absolute path to the file on the local filesystem.\n     * If `asBuffer = true` or if no local filesystem is available, a Uint8Array of the file contents is returned instead.\n     * A promise of a string or Uint8Array may also be returned.\n     *\n     * Callers should pass the (Promise-resolved) return value to {@linkcode GlobalsInterface#clean clean} once the file is no longer required.\n     */\n    get(path, options = {}) {\n        throw new Error(\"'get()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {string} path - Local path to a file, see {@linkcode GlobalsInterface#get get} for details.\n     * Note that this should not be a path to a directory;\n     * developers of {@linkcode readObject} functions should check for the existence of particular files inside a directory, rather than the directory itself.\n     * @return {boolean|Promise<boolean>} Whether the `path` exists.\n     */\n    exists(path) {\n        throw new Error(\"'exists()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {string} path - Local path to a file, see {@linkcode GlobalsInterface#get get} for details.\n     * @param {Uint8Array} contents - Contents of the file.\n     *\n     * @return {undefined|Promise<undefined>} `contents` is stored at `path`.\n     * The exact nature of this storage depends on the application -\n     * it may involve saving a file to the local filesystem, or uploading a file to a server, etc.\n     * If `path` already exists, it should be overwritten with `contents`.\n     * No value is returned, though the method may be asynchronous.\n     */\n    write(path, contents) {\n        throw new Error(\"'write()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {string|Uint8Array} x - Return value of {@linkcode GlobalsInterface#get get}.\n     * @return {undefined|Promise<undefined>} Any resources used by {@linkcode GlobalsInterface#get get} to return `x` can be freed.\n     * For example, if `x` is a path referring to a temporary file, it can be removed.\n     * No value is returned, though the method may be asynchronous.\n     */ \n    clean(path) {\n        throw new Error(\"'clean()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {string} from - Local path to a file to be copied, see {@linkcode GlobalsInterface#get get} for details.\n     * @param {string} to - Local path to the new location of the file, see {@linkcode GlobalsInterface#get get} for details.\n     * @return {undefined|Promise<undefined>} The contents of `from` are copied to `to`.\n     * No value is returned, though the method may be asynchronous.\n     */\n    copy(from, to) {\n        throw new Error(\"'copy()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {string} path - Local path to a directory.\n     * As with {@linkcode GlobalsInterface#get get}, the path may refer to a directory not on the local filesystem, e.g., on a remote server, inside an archive file.\n     * It is assumed that all parent directories have already been created.\n     * @return {undefined|Promise<undefined>} A new directory is created at `path`.\n     * (This may be a no-op if the application does not support creation of directories.)\n     * No value is returned, though the method may be asynchronous.\n     */ \n    mkdir(path) {\n        throw new Error(\"'mkdir()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {string} path - Local path to a HDF5 file.\n     * As with {@linkcode GlobalsInterface#get get}, the path may refer to a file not on the local filesystem, e.g., on a remote server, inside an archive file.\n     *\n     * @return {H5Group|Promise<H5Group>} A read-only handle to the HDF5 file, or a promise thereof.\n     */\n    h5open(contents) {\n        throw new Error(\"'h5open()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {H5Group} handle - Return value of {@linkcode GlobalsInterface#h5open h5open}.\n     * This will already have its {@linkcode H5Group#close close} method invoked.\n     * @return {undefined|Promise<undefined>} This should execute clean-up operations when the file used in `h5open` is no longer needed.\n     * No value is returned, possibly asynchronously.\n     */\n    h5close(handle) {\n        throw new Error(\"'h5close()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {string} path - Local path to a HDF5 file to be created.\n     * As with {@linkcode GlobalsInterface#get get}, the path may refer to a file not on the local filesystem, e.g., on a remote server, inside an archive file.\n     *\n     * @return {H5Group|Promise<H5Group>} A read-write handle to a new HDF5 file, or a promise thereof.\n     * This may refer to, e.g.,  a temporary file in a virtual filesystem, if no local filesystem exists.\n     */\n    h5create(path) {\n        throw new Error(\"'h5create()' is not implemented in this GlobalsInterface subclass\");\n    }\n\n    /**\n     * @param {H5Group} handle - Return value of {@linkcode GlobalsInterface#h5create h5create}.\n     * This will already have its {@linkcode H5Group#close close} method invoked.\n     * @param {boolean} failed - Whether an error occurred when writing to the HDF5 file. \n     *\n     * @return {?Uint8Array|Promise<?Uint8Array>} This should execute clean-up operations when no more write operations are to be performed on the file returned by `h5create`.\n     * If `failed = true`, any existing resources associated with the file may be deleted, and `null` should be returned, possibly asynchronously.\n     */\n    h5finish(handle, failed) {\n        throw new Error(\"'h5finish()' is not implemented in this GlobalsInterface subclass\");\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellAdtQcMetricsResults } from \"./perCellAdtQcMetrics.js\";\n\n/**\n * Wrapper class for the ADT-based QC filtering results, produced by {@linkcode suggestAdtQcFilters}.\n * @hideconstructor\n */\nexport class SuggestAdtQcFiltersResults {\n    #results;\n    #id;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * This should be set to `false` or `\"view\"` to modify entries, e.g., after calling creating an instance with {@linkcode emptySuggestAdtQcFiltersResults}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the number of detected ADTs for each batch.\n     */\n    detected(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * This should be set to `false` or `\"view\"` to modify entries, e.g., after calling creating an instance with {@linkcode emptySuggestAdtQcFiltersResults}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the total counts for subset `i` in each batch.\n     */\n    subsetSum(i, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.subset_sum(i), copy);\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {boolean} Whether blocking was used to compute the thresholds\n     */\n    isBlocked() {\n        return this.#results.isBlocked();\n    }\n\n    /**\n     * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestAdtQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Uint8Array.\n     * If `false`, a Uint8WasmArray is returned instead.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the high-quality calls.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of high-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    filter(metrics, options = {}) {\n        const { block = null, asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, asTypedArray, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics from the ADT count matrix.\n *\n * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {number} [options.minDetectedDrop=0.1] - Minimum relative drop in the number of detected ADTs before a cell is to be considered a low-quality cell.\n * By default, cells must exhibit at least a 10% decrease from the median before filtering is applied.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestAdtQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestAdtQcFilters(metrics, options = {}) {\n    const { numberOfMADs = 3, minDetectedDrop = 0.1, block = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n    }\n\n    return internal.computePerCellQcFilters(\n        metrics, \n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_adt_qc_filters(x.results, use_blocks, bptr, numberOfMADs, minDetectedDrop),\n            SuggestAdtQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestAdtQcFiltersResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode filterCells} calls.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestAdtQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestAdtQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestAdtQcFiltersResults(numberOfSubsets, numberOfBlocks),\n        SuggestAdtQcFiltersResults\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\nexport function initializeMatrixFromHdf5(file, name, options = {}) {\n    const { forceInteger = true, forceSparse = true, layered = true, subsetRow = null, subsetColumn = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    const details = extractHdf5MatrixDetails(file, name);\n    if (details.format == \"dense\") {\n        return initializeSparseMatrixFromHdf5Dataset(file, name, { forceInteger, forceSparse, layered, subsetRow, subsetColumn });\n    } else {\n        return initializeSparseMatrixFromHdf5Group(file, name, details.rows, details.columns, (details.format == \"csr\"), { forceInteger, layered, subsetRow, subsetColumn });\n    }\n}\n\n// Back-compatibility.\nexport const initializeSparseMatrixFromHdf5 = initializeMatrixFromHdf5;\n\nfunction processSubsets(subsetRow, subsetColumn, FUN) {\n    let output;\n    let wasm_row;\n    let wasm_column;\n\n    try {\n        let row_offset = 0;\n        let row_length = 0;\n        const use_row_subset = subsetRow !== null;\n        if (use_row_subset) {\n            wasm_row = utils.wasmifyArray(subsetRow, \"Int32WasmArray\");\n            row_offset = wasm_row.offset;\n            row_length = wasm_row.length;\n        }\n\n        let col_offset = 0;\n        let col_length = 0;\n        const use_col_subset = subsetColumn !== null;\n        if (use_col_subset) {\n            wasm_column = utils.wasmifyArray(subsetColumn, \"Int32WasmArray\");\n            col_offset = wasm_column.offset;\n            col_length = wasm_column.length;\n        }\n\n        output = gc.call(\n            module => FUN(\n                module, \n                use_row_subset, \n                row_offset, \n                row_length, \n                use_col_subset, \n                col_offset, \n                col_length\n            ), \n            ScranMatrix\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(wasm_row);\n        utils.free(wasm_column);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a {@link ScranMatrix} from a 2-dimensional dataset in a HDF5 file.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the 2-dimensional Dataset containing the matrix. \n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.transposed=true] - Whether the matrix is stored in a transposed format (i.e., HDF5 rows correspond to columns of the matrix).\n * Transposition is commonly used to preserve the memory layout when storing matrices from column-major frameworks like R or Fortran.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.forceSparse=true] - Whether to create a sparse matrix, even when `name` refers to a dense matrix in a HDF5 dataset.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, see [**tatami_layered**](https://github.com/tatami-inc/tatami_layered) for more details.\n * Only used if a sparse matrix is created (i.e., `forceSparse = true` or `name` refers to a HDF5 group)\n * and the matrix contents are integer (i.e., the relevant HDF5 dataset is of an integer type or `forceInteger = true`).\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n * @param {?(Array|TypedArray|Int32WasmArray)} [options.subsetRow=null] - Row indices to extract.\n * All indices must be non-negative integers less than the number of rows in the sparse matrix.\n * @param {?(Array|TypedArray|Int32WasmArray)} [options.subsetColumn=null] - Column indices to extract.\n * All indices must be non-negative integers less than the number of columns in the sparse matrix.\n *\n * @return {ScranMatrix} In-memory matrix.\n */\nexport function initializeMatrixFromHdf5Dataset(file, name, options = {}) {\n    const { transposed = true, forceInteger = true, forceSparse = true, layered = true, subsetRow = null, subsetColumn = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    return processSubsets(\n        subsetRow,\n        subsetColumn, \n        (module, use_row_subset, row_offset, row_length, use_col_subset, col_offset, col_length) => {\n            return module.initialize_from_hdf5_dense(\n                file, \n                name, \n                transposed,\n                forceInteger,\n                forceSparse,\n                layered,\n                use_row_subset,\n                row_offset,\n                row_length,\n                use_col_subset,\n                col_offset,\n                col_length\n            );\n        }\n    );\n}\n\n// Back-compatibility.\nexport const initializeSparseMatrixFromHdf5Dataset = initializeMatrixFromHdf5Dataset;\n\n/**\n * Initialize a (potentially layered) sparse {@link ScranMatrix} from a group in a HDF5 file.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string|object} name - Name of the HDF5 group containing the matrix.\n * This group should contain the `data`, `indices` and `indptr` datasets, corresponding to the compressed sparse components.\n * Alternatively, this may be an object with the `data`, `indices` and `indptr` properties, each of which is a string contianing the name of the dataset corresponding to each component.\n * @param {number} numberOfRows - Number of rows in the sparse matrix.\n * @param {number} numberOfColumns - Number of columns in the sparse matrix.\n * @param {boolean} byRow - Whether the matrix is in the compressed sparse row format.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, see [**tatami_layered**](https://github.com/tatami-inc/tatami_layered) for more details.\n * Only used if the relevant HDF5 dataset contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n * @param {?(Array|TypedArray|Int32WasmArray)} [options.subsetRow=null] - Row indices to extract.\n * All indices must be non-negative integers less than the number of rows in the sparse matrix.\n * @param {?(Array|TypedArray|Int32WasmArray)} [options.subsetColumn=null] - Column indices to extract.\n * All indices must be non-negative integers less than the number of columns in the sparse matrix.\n *\n * @return {ScranMatrix} In-memory matrix containing sparse data.\n */\nexport function initializeSparseMatrixFromHdf5Group(file, name, numberOfRows, numberOfColumns, byRow, options = {}) {\n    const { forceInteger = true, layered = true, subsetRow = null, subsetColumn = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    if (typeof name == \"string\") {\n        name = { data: name + \"/data\", indices: name + \"/indices\", indptr: name + \"/indptr\" };\n    }\n\n    return processSubsets(\n        subsetRow,\n        subsetColumn, \n        (module, use_row_subset, row_offset, row_length, use_col_subset, col_offset, col_length) => {\n            return module.initialize_from_hdf5_sparse(\n                file,\n                name.data,\n                name.indices,\n                name.indptr,\n                numberOfRows,\n                numberOfColumns,\n                !byRow,\n                forceInteger,\n                layered, \n                use_row_subset,\n                row_offset,\n                row_length,\n                use_col_subset,\n                col_offset,\n                col_length\n            );\n        }\n    );\n}\n\nexport function extractHdf5MatrixDetails(file, name) { \n    let output = {};\n    let arr = utils.createInt32WasmArray(5);\n\n    try {\n        wasm.call(module => module.extract_hdf5_matrix_details(file, name, arr.offset));\n\n        let vals = arr.array();\n        if (vals[0] > 0) {\n            output.format = \"dense\";\n        } else if (vals[1] > 0) {\n            output.format = \"csc\";\n        } else {\n            output.format = \"csr\";\n        }\n\n        output.rows = vals[2];\n        output.columns = vals[3];\n        output.integer = vals[4] > 0;\n    } finally {\n        arr.free();\n    }\n\n    return output;\n}\n","/**\n * @param {Array|TypedArray} x - Array of values to be interpreted as truthy or falsey.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.not=false] - Whether to select the entries of `x` that are falsey.\n *\n * @return {Array} Array of indices of the entries of `x` that are truthy (if `not=false`) or falsey (if `not=true`).\n * This array is guaranteed to be sorted in ascending order.\n */\nexport function which(x, { not = false } = {}) {\n    let output = [];\n    x.forEach((y, i) => {\n        if ((!y) == not) {\n            output.push(i);\n        }\n    });\n    return output;\n}\n\n/**\n * Given a factor, return the indices corresponding to each level.\n * This can be used in subsequent {@linkcode splitRows} calls.\n *\n * @param {Array|TypedArray} factor - Array containing the factor of interest.\n *\n * @return {Object} Object where each key is a factor level and each value is an array containing the indices corresponding to that level in `factor`.\n */\nexport function presplitFactor(factor) {\n    let by = {};\n    factor.forEach((x, i) => {\n        if (!(x in by)) {\n            by[x] = [];\n        }\n        by[x].push(i);\n    });\n    return by;\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\nexport const step_name = \"tsne\";\n\n/**\n * This creates a t-SNE embedding based on the neighbor index constructed by {@linkplain NeighborIndexState}.\n * This wraps [`runTSNE`](https://kanaverse.github.io/scran.js/global.html#runTSNE)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class TsneState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createTsneWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n        \n            output.iterations = this.#parameters.iterations;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(perplexity, iterations, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            var k = scran.perplexityToNeighbors(perplexity);\n            nn_out = vizutils.computeNeighbors(this.#index, k);\n        }\n\n        let args = {\n            \"perplexity\": perplexity,\n            \"iterations\": iterations,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the t-SNE runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    \n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode AdtQualityControlState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            perplexity: 30,\n            iterations: 500,\n            animate: false\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `tsne` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.perplexity] - Number specifying the perplexity for the probability calculations.\n     * @param {number} [parameters.iterations] - Number of iterations to run the algorithm.\n     * @param {boolean} [parameters.animate] - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return t-SNE coordinates are computed in parallel on a separate worker thread.\n     * A promise is returned that resolves when those calculations are complete.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, TsneState.defaults());\n\n        let same_neighbors = (!this.#index.changed && parameters.perplexity === this.#parameters.perplexity);\n        if (same_neighbors && parameters.iterations == this.#parameters.iterations) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(parameters.perplexity, parameters.iterations, parameters.animate, !same_neighbors);\n\n        this.#parameters = parameters;\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******* Animators *********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.perplexity, this.#parameters.iterations, true, true);\n\n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => {\n                    return {\n                        \"type\": \"tsne_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\nexport const step_name = \"snn_graph_cluster\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkplain NeighborIndexState}.\n * This wraps [`clusterGraph`](https://kanaverse.github.io/scran.js/global.html#clusterGraph) \n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode SnnGraphClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSnnGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterGraph(this.#cache.graph, {\n            method: algorithm,\n            multiLevelResolution: multilevel_resolution,\n            leidenResolution: leiden_resolution,\n            leidenModularityObjective: true, // avoid problems with unstable interpretation of leidenResolution.\n            walktrapSteps: walktrap_steps\n        });\n        return;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode SnnGraphClusterState#compute compute} for details.\n     */\n    static defaults() {\n        return { \n            k: 10,\n            scheme: \"rank\",\n            algorithm: \"multilevel\",\n            multilevel_resolution: 1,\n            leiden_resolution: 1,\n            walktrap_steps: 4\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.k] - Number of nearest neighbors used to construct the graph.\n     * @param {string} [parameters.scheme] - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {string} [parameters.algorithm] - Algorithm to use for community detection.\n     * This can be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n     * @param {number} [parameters.multilevel_resolution] - Resolution of the multi-level community detection.\n     * @param {number} [parameters.leiden_resolution] - Resolution of the Leiden community detection.\n     * @param {number} [parameters.walktrap_steps] - Number of merge steps for the Walktrap algorithm.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        parameters = utils.defaultizeParameters(parameters, SnnGraphClusterState.defaults());\n        this.changed = false;\n\n        if (this.#index.changed || parameters.k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(parameters.k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.changed = true;\n        }\n\n        if (this.changed || parameters.scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(parameters.scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.changed = true \n        }\n\n        if (this.changed \n            || parameters.algorithm !== this.#parameters.algorithm \n            || parameters.multilevel_resolution !== this.#parameters.multilevel_resolution \n            || parameters.leiden_resolution !== this.#parameters.leiden_resolution \n            || parameters.walktrap_steps !== this.#parameters.walktrap_steps \n            || (!this.#valid() && run_me))\n        {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(parameters.algorithm, parameters.multilevel_resolution, parameters.leiden_resolution, parameters.walktrap_steps);\n            } else {\n                delete this.#cache.clusters;\n            }\n            this.changed = true;\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellCrisprQcMetricsResults } from \"./perCellCrisprQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestCrisprQcFilters}.\n * @hideconstructor\n */\nexport class SuggestCrisprQcFiltersResults {\n    #id;\n    #results;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * This should be set to `false` or `\"view\"` to modify entries, e.g., after calling creating an instance with {@linkcode emptySuggestCrisprQcFiltersResults}.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the maximum count in each batch.\n     */\n    maxValue(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.max_value(), copy);\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestCrisprQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Uint8Array.\n     * If `false`, a Uint8WasmArray is returned instead.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the high-quality calls.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of high-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    filter(metrics, options = {}) {\n        const { block = null, asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, asTypedArray, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics for CRISPR guide counts.\n *\n * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestCrisprQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestCrisprQcFilters(metrics, options = {}) {\n    const { numberOfMADs = 3, block = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n    }\n\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_crispr_qc_filters(x.results, use_blocks, bptr, numberOfMADs),\n            SuggestCrisprQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestCrisprQcFiltersResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode filterCells} calls.\n *\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestCrisprQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestCrisprQcFiltersResults(numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestCrisprQcFiltersResults(numberOfBlocks),\n        SuggestCrisprQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"kmeans_cluster\";\n\n/**\n * This step performs k-means clustering on the PCs, \n * wrapping the [`clusterKmeans`](https://kanaverse.github.io/scran.js/global.html#clusterKmeans) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode KmeansClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode KmeansClusterState#compute compute} for details.\n     */\n    static defaults() {\n        return { k: 10 };\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.k] - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        parameters = utils.defaultizeParameters(parameters, KmeansClusterState.defaults());\n        this.changed = false;\n\n        if (this.#correct.changed || parameters.k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchCorrected();\n                this.#cache.raw = scran.clusterKmeans(\n                    pcs,\n                    parameters.k,\n                    { \n                        numberOfDims: this.#correct.fetchNumberOfDimensions(),\n                        numberOfCells: this.#correct.fetchNumberOfCells(),\n                        initMethod: \"var-part\" \n                    }\n                );\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.changed = true;\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n}\n","export function subsetSums(qc, filter, mat) {\n    let output = new Float64Array(mat.numberOfColumns());\n    let keep = filter.fetchKeep();\n\n    // unsafe, so no more Wasm allocations past this point. \n    let sums = qc.fetchMetrics().sum({ copy: false }); \n\n    if (keep === null) {\n        output.set(sums);\n    } else {\n        var j = 0;\n        keep.forEach((x, i) => {\n            if (x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                output[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    // Just an alias for back-compatibility.\n    scran.free(object);\n    return;\n}\n\nexport function defaultizeParameters(parameters, defaults, extra = []) {\n    let output = defaults;\n    for (const [name, val] of Object.entries(parameters)) {\n        if (name in defaults || extra.indexOf(name) >= 0) {\n            output[name] = val;\n        } else {\n            throw new Error(\"unknown parameter '\" + name + \"'\");\n        }\n    }\n    return output;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n\nexport async function defaultDownload(url) {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return new Uint8Array(await resp.arrayBuffer());\n}\n\nexport function guessFeatureTypes(genes) {\n    let output = { columns: {} };\n\n    let rn = genes.rowNames();\n    if (rn !== null) {\n        output.row_names = scran.guessFeatures(rn, { forceTaxonomy: true });\n    }\n\n    for (const key of genes.columnNames()) {\n        let curcol = genes.column(key);\n        if (curcol instanceof Array) {\n            output.columns[key] = scran.guessFeatures(genes.column(key), { forceTaxonomy: true });\n        }\n    }\n\n    return output;\n}\n\nexport function subsetInvalidFactors(arrays) {\n    let N = arrays[0].length;\n    let output = { arrays: [], retain: null };\n\n    let invalid = new Uint8Array(N);\n    invalid.fill(0);\n    for (const x of arrays) {\n        let transformed = scran.convertToFactor(x, { action: \"none\", placeholder: -1 });\n        output.arrays.push(transformed);\n        transformed.ids.forEach((y, i) => {\n            if (y == -1) {\n                invalid[i] = 1;\n            }\n        });\n    }\n\n    let num_invalid = 0;\n    invalid.forEach(y => { num_invalid += y; });\n    if (num_invalid == 0) {\n        return output;\n    }\n\n    let retain = new Int32Array(N - num_invalid);\n    {\n        let counter = 0;\n        for (var i = 0; i < N; i++) {\n            if (invalid[i] == 0) {\n                retain[counter] = i;\n                counter++;\n            }\n        }\n    }\n    output.retain = retain;\n\n    for (var i = 0; i < output.arrays.length; i++) {\n        let x = output.arrays[i];\n        let new_x = scran.subsetFactor(x, retain);\n        scran.free(x.ids);\n        x.ids = new_x.ids;\n        x.levels = new_x.levels;\n    }\n\n    return output;\n}\n","import * as generics from \"./AllGenerics.js\";\n\nexport function setterTarget(object, inPlace) {\n    return (inPlace ? object : generics.CLONE(object, { deepCopy: false }));\n}\n\nexport function cloneField(value, deepCopy) {\n    return (deepCopy ? generics.CLONE(value) : value);\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllCollections.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\n\nasync function initialize(species) {\n    let res = await utils.retrieveRangesWithExtras(species + \"_collections.tsv\");\n    _ranges.set(species, res.ranges);\n    _sizes.set(species, res.extra);\n\n    let first = 0;\n    let starts = [];\n    for (const s of res.extra) {\n        starts.push(first);\n        first += s;\n    }\n    _starts.set(species, starts);\n\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of sets in each collection.\n * Each value corresponds to a collection in {@linkcode fetchAllCollections}.\n * @async\n */\nexport async function fetchCollectionSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of collections for this species.\n * @async\n */\nexport async function numberOfCollections(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} collection - Collection ID, see {@linkcode fetchAllCollections} for details.\n * \n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full collection details if {@linkcode fetchAllCollections} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all collection details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllCollections}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the collection.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllCollections}.\n *\n * If `collection = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleCollection(species, collection, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllCollections(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (collection !== null) {\n                return ffound[collection];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (collection == null) {\n        return;\n    }\n\n    let cfound = cached.get(collection);\n    if (typeof cfound !== \"undefined\") {\n        return cfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_collections.tsv\", _ranges.get(species), collection);\n    let split = text.split(\"\\t\");\n    let output = {\n        title: split[0],\n        description: split[1],\n        species: split[2],\n        maintainer: split[3],\n        source: split[4],\n        start: _starts.get(species)[collection],\n        size: _sizes.get(species)[collection]\n    };\n\n    cached.set(collection, output);\n    return output;\n}\n\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"crispr_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise CRISPR abundance data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPca`](https://kanaverse.github.io/scran.js/global.html#runPca) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm' should be a CrisprNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized CRISPR abundance matrix,\n     * available after running {@linkcode CrisprPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.num_pcs] - Number of PCs to return.\n     * @param {string} [parameters.block_method] - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"project\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, CrisprPcaState.defaults());\n        this.changed = false;\n\n        // For back-compatibility.\n        if (parameters.block_method == \"weight\") {\n            parameters.block_method = \"project\";\n        }\n\n        if (this.#norm.changed || parameters.num_pcs !== this.#parameters.num_pcs || parameters.block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPca(mat, { numberOfPCs: parameters.num_pcs, block: block, blockMethod: parameters.block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = parameters.num_pcs;\n            this.#parameters.block_method = parameters.block_method;\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode CrisprPcaState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n","export function registerCallback(worker, callback) {\n    worker.onmessage = callback;\n    return;\n}\n\nexport function sendMessage(worker, message, transfer) {\n    worker.postMessage(message, transfer);\n    return;\n}\n\nexport function terminateWorker(worker) {\n    worker.terminate();\n    return;\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { buildNeighborSearchIndex, BuildNeighborSearchIndexResults } from \"./findNearestNeighbors.js\"; \n\n/**\n * Scale embeddings based on the variation between neighboring cells.\n * This aims to equalize the noise across embeddings for the same population of cells across different data modalities,\n * allowing them to be combined into a single embedding for coordinated downstream analyses.\n * Check out the [**mumosa**](https://github.com/libscran/mumosa) documentation for more details.\n *\n * @param {Array} embeddings - Array of Float64WasmArrays containing column-major matrices where rows are dimensions and columns are cells.\n * All entries of this array should contain data for the same number and ordering of cells.\n * @param {number} numberOfCells - Number of cells in all embeddings.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.neighbors=20] - Number of neighbors to use for quantifying variation.\n * Larger values provide a more stable calculation but assume larger subpopulations.\n * @param {?Array} [options.indices=null] - Array of {@linkplain BuildNeighborSearchIndexResults} objects, \n * where each entry is constructed from the corresponding entry of `embeddings` (see {@linkcode buildNeighborSearchIndex}).\n * This can be used to avoid redundant calculation of indices if they are already available.\n * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n * If `false`, a Float64WasmArray is returned instead.\n * @param {?Float64WasmArray} [options.buffer=null] - Array in which to store the combined embedding.\n * This should have length equal to the product of `numberOfCells` and the sum of dimensions of all embeddings.\n * @param {boolean} [options.approximate=true] - Should we construct an approximate search index if `indices` is not supplied?\n * @param {?(Array|TypedArray|Float64WasmArray)} [options.weights=null] - Array of length equal to the number of embeddings, containing a non-enegative relative weight for each embedding.\n * This is used to scale each embedding if non-equal noise is desired in the combined embedding.\n * If `null`, all embeddings receive the same weight.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64Array|Float64WasmArray} Array containing the combined embeddings in column-major format, i.e., dimensions in rows and cells in columns.\n * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n */\nexport function scaleByNeighbors(embeddings, numberOfCells, options = {}) {\n    let { neighbors = 20, indices = null, asTypedArray = true, buffer = null, approximate = true, weights = null, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let embed_ptrs;\n    let index_ptrs;\n    let holding_weights;\n    let local_buffer = null;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let nembed = embeddings.length;\n        embed_ptrs = utils.createBigUint64WasmArray(nembed);\n        let embed_arr = embed_ptrs.array();\n        for (var i = 0; i < nembed; i++) {\n            embed_arr[i] = BigInt(embeddings[i].offset);\n        }\n\n        let ndims = [];\n        let total_ndim = 0;\n        for (var i = 0; i < nembed; i++) {\n            let n = embeddings[i].length;\n            let ND = Math.floor(n / numberOfCells);\n            if (numberOfCells * ND !== n) {\n                throw new Error(\"length of arrays in 'embeddings' should be a multiple of 'numberOfCells'\");\n            }\n            ndims.push(ND);\n            total_ndim += ND;\n        }\n\n        if (indices === null) {\n            indices = [];\n            for (var i = 0; i < nembed; i++) {\n                indices.push(buildNeighborSearchIndex(embeddings[i], { numberOfDims: ndims[i], numberOfCells: numberOfCells, approximate: approximate }));\n            }\n        } else {\n            if (nembed !== indices.length) {\n                throw new Error(\"'indices' and 'embeddings' should have the same length\");\n            }\n            for (var i = 0; i < nembed; i++) {\n                let index = indices[i];\n                if (numberOfCells != index.numberOfCells()) {\n                    throw new Error(\"each element of 'indices' should have the same number of cells as 'numberOfCells'\");\n                }\n                if (ndims[i] != index.numberOfDims()) {\n                    throw new Error(\"each element of 'indices' should have the same number of dimensions as its embedding in 'embeddings'\");\n                }\n            }\n        }\n\n        let weight_offset = 0;\n        let use_weights = false;\n        if (weights !== null) {\n            use_weights = true;\n            holding_weights = utils.wasmifyArray(weights, \"Float64WasmArray\");\n            if (holding_weights.length != nembed) {\n                throw new Error(\"length of 'weights' should be equal to the number of embeddings\");\n            }\n            weight_offset = holding_weights.offset;\n        }\n\n        index_ptrs = utils.createBigUint64WasmArray(nembed);\n        let index_arr = index_ptrs.array();\n        for (var i = 0; i < nembed; i++) {\n            let index = indices[i];\n            index_arr[i] = BigInt(indices[i].index.$$.ptr);\n        }\n\n        let total_len = total_ndim * numberOfCells;\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(total_len);\n            buffer = local_buffer;\n        } else if (total_len !== buffer.length) {\n            throw new Error(\"length of 'buffer' should be equal to the product of 'numberOfCells' and the total number of dimensions\");\n        }\n\n        wasm.call(module => module.scale_by_neighbors(\n            numberOfCells, \n            nembed, \n            embed_ptrs.offset, \n            index_ptrs.offset, \n            buffer.offset, \n            neighbors, \n            use_weights, \n            weight_offset,\n            nthreads\n        ));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(embed_ptrs);\n        utils.free(index_ptrs);\n        utils.free(holding_weights);\n    }\n\n    return utils.toTypedArray(buffer, local_buffer == null, asTypedArray);\n}\n","/**\n * Reindex the gene-to-set mappings for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to create a mapping of all sets containing each of their own genes.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and should be an array containing the corresponding **gesel** gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * @param {Array} setsForGenes - Array of length equal to the number of **gesel** gene IDs.\n * Each entry corresponds to a **gesel** gene ID and is an array containing the set IDs for all sets containing that gene.\n * This is typically obtained from {@linkcode fetchSetsForAllGenes}.\n *\n * @return {Array} Array of length equal to `geneMapping`.\n * Each entry corresponds to a gene in the user-supplied universe and is a Uint32Array where the elements are the **gesel** set IDs containing that gene.\n * If a gene in `geneMapping` maps to multiple **gesel** IDs, we report all sets containing any of its mapped **gesel** gene IDs.\n */\nexport function reindexSetsForAllGenes(geneMapping, setsForGenes) {\n    let remapped = new Array(geneMapping.length);\n    for (var i = 0; i < geneMapping.length; i++) {\n        let collected = new Set;\n        for (const gesel_gene of geneMapping[i]) {\n            for (const set of setsForGenes[gesel_gene]) {\n                collected.add(set);\n            }\n        }\n        remapped[i] = (new Uint32Array(collected)).sort();\n    }\n    return remapped;\n}\n","import * as scran from \"scran.js\"; \nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as rutils from \"../readers/index.js\";\n\nconst baseUrl = \"https://github.com/kanaverse/kana-special-features/releases/download/v1.0.0\";\n\nexport const step_name = \"rna_quality_control\";\n\n/**\n * Results of computing per-cell RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellRnaQcMetricsResults.html) for details.\n *\n * @external PerCellRnaQcMetricsResults\n */\n\n/**\n * Suggested filters for the RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestRnaQcFiltersResults.html) for details.\n *\n * @external SuggestRnaQcFiltersResults\n */\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellRnaQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellRnaQcMetrics)\n * and [`suggestRnaQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestRnaQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.keep_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        output.species = bioc.CLONE(output.species);\n        return output;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing a vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be retained after filtering.\n     * This is available after running {@linkcode RnaQualityControlState#compute compute}.\n     */\n    fetchKeep() {\n        return this.#cache.keep_buffer;\n    }\n\n    /**\n     * @return {external:SuggestRnaQcFiltersResults} Result of filtering on the RNA-derived QC metrics.\n     * This is available after running {@linkcode RnaQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {external:PerCellRnaQcMetricsResults} RNA-derived QC metrics,\n     * available after running {@linkcode RnaQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode RnaQualityControlState#compute compute} for details.\n     */\n    static defaults () {\n        return {\n            guess_ids: true,\n            gene_id_column: null,\n            use_reference_mito: true,\n            species: [],\n            gene_id_type: \"ENSEMBL\",\n            mito_prefix: \"mt-\",\n\n            filter_strategy: \"automatic\", \n            nmads: 3,\n\n            sum_threshold: 100,\n            detected_threshold: 100,\n            mito_threshold: 0.2\n        };\n    }\n\n    static configureFeatureParameters(use_reference_mito, guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"9606\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Array of strings containing the taxonomy IDs for species where mitochondrial gene lists are available.\n     * @type {Array}\n     */\n    static mitochondriaSpecies = [ \n        \"9606\",  // Mouse\n        \"10090\", // Human\n        \"6239\",  // C. elegans\n        \"10116\", // Rat\n        \"9541\",  // M. fascicularis\n        \"7227\",  // Fly\n        \"7955\",  // Zebrafish\n        \"9598\"   // Chimp\n    ];\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #acquire_reference(species, feature_type) {\n        let output = new Set;\n        let mito_lists = RnaQualityControlState.#mito_lists;\n\n        for (const s of species) {\n            let target = s + \"-mito-\" + feature_type.toLowerCase() + \".txt.gz\";\n            if (!(target in mito_lists)) {\n                let contents = await RnaQualityControlState.#downloadFun(baseUrl + \"/\" + target);\n                let lines = await rutils.readLines2(contents, { compression: \"gz\" });\n                mito_lists[target] = lines;\n            }\n\n            mito_lists[target].forEach(x => { output.add(x); });\n        }\n\n        return output;\n    }\n\n    static #mito_lists = {};\n\n    /**\n     * Flush all cached lists of mitochondrial genes.\n     *\n     * By default, {@linkcode RnaQualityControlState#compute compute} will cache the mitochondrial gene lists in a static member for re-use across {@linkplain RnaQualityControlState} instances.\n     * These cached lists are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        RnaQualityControlState.#mito_lists = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download the reference mitochondrial gene lists.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = RnaQualityControlState.#downloadFun;\n        RnaQualityControlState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} [parameters.guess_ids] - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If set to `true`, the following logic is applied:\n     *\n     * - If `use_reference_mito = true`, the annotation column that best matches human/mouse Ensembl/symbols is set as `gene_id_column`.\n     *   Based on the identified species and feature type, `species` and `gene_id_type` are also set.\n     * - If `use_reference_mito = false`, the annotation column that best matches human/mouse symbols is set as `gene_id_column`.\n     *\n     * @param {?(string|number)} [parameters.gene_id_column] - Name or index of the column of the feature annotations that contains the gene identifiers for the RNA modality.\n     * If `null`, the row names are used.\n     * Ignored if `guess_ids = true`.\n     * @param {boolean} [parameters.use_reference_mito] - Whether to use the reference lists of mitochondrial genes.\n     * If `false`, mitochondrial genes are instead identified from their prefix.\n     * @param {Array} [parameters.species] - Array of strings specifying zero, one or more species to use to obtain a reference list of mitochondrial genes.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode RnaQualityControlState#mitochondriaSpecies mitochondriaSpecies}).\n     * Ignored if `guess_ids = true`.\n     * @param {string} [parameters.gene_id_type] - Name of the feature type in the reference list of mitochondrial genes.\n     * This can be any one of `\"ENSEMBL\"`, `\"SYMBOL\"`, or `\"ENTREZ\"`.\n     * Ignored if `guess_ids = true`.\n     * @param {?string} [parameters.mito_prefix] - Case-insensitive prefix to use to identify mitochondrial genes from the dataset.\n     * Only used when `use_reference_mito = false`; in such cases, `gene_id_column` should point to symbols.\n     * If `null`, no prefix-based identification is performed.\n     * @param {string} [parameters.filter_strategy] - Strategy for defining a filter threshold for the QC metrics.\n     * This can be `\"automatic\"` or `\"manual\"`.\n     * @param {number} [parameters.nmads] - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * Only used when `filter_strategy = \"automatic\"`.\n     * @param {number} [parameters.sum_threshold] - Manual threshold on the sum of counts for each cell.\n     * Cells are only retained if their sums are equal to or greater than this threshold.\n     * Only used when `filter_strategy = \"manual\"`.\n     * @param {number} [parameters.detected_threshold] - Manual threshold on the detected number of features for each cell.\n     * Cells are only retained if the detected number is equal to or greater than this threshold.\n     * Only used when `filter_strategy = \"manual\"`.\n     * @param {number} [parameters.mito_threshold] - Manual threshold on the mitochondrial proportion for each cell.\n     * Cells are only retained if their totals are less than or equal to this threshold.\n     * Only used when `filter_strategy = \"manual\"`.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, RnaQualityControlState.defaults(), [\"automatic\"]);\n        this.changed = false;\n\n        // Some back-compatibility here.\n        if (typeof parameters.guess_ids == \"undefined\") {\n            if (\"automatic\" in parameters) {\n                parameters.guess_ids = parameters.automatic;\n            } else {\n                parameters.guess_ids = true;\n            }\n        }\n\n        if (\n            this.#inputs.changed || \n            parameters.guess_ids !== this.#parameters.guess_ids ||\n            parameters.use_reference_mito !== this.#parameters.use_reference_mito || \n            (\n                !parameters.guess_ids && \n                (\n                    parameters.gene_id_column !== this.#parameters.gene_id_column || \n                    (!parameters.use_reference_mito && parameters.mito_prefix !== this.#parameters.mito_prefix) ||\n                    (\n                        parameters.use_reference_mito && \n                        (\n                            utils.changedParameters(parameters.species, this.#parameters.species) || \n                            parameters.gene_id_type !== this.#parameters.gene_id_type\n                        )\n                    )\n                )\n            ) \n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                let gene_id_column2 = parameters.gene_id_column;\n                let species2 = parameters.species;\n                let gene_id_type2 = parameters.gene_id_type;\n\n                if (parameters.guess_ids) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let backcomp = RnaQualityControlState.configureFeatureParameters(parameters.use_reference_mito, guesses);\n                    gene_id_column2 = backcomp.gene_id_column;\n                    species2 = backcomp.species;\n                    gene_id_type2 = backcomp.gene_id_type;\n                }\n\n                var gene_info = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let val = (gene_id_column2 == null ? gene_info.rowNames() : gene_info.column(gene_id_column2));\n                var subsets = utils.allocateCachedArray(gene_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (val !== null) {\n                    if (parameters.use_reference_mito) {\n                        let lists = await this.#acquire_reference(species2, gene_id_type2);\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if (lists.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else if (parameters.mito_prefix !== null) {\n                        var lower_mito = parameters.mito_prefix.toLowerCase();\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"RNA\");\n                this.#cache.metrics = scran.perCellRnaQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || \n            parameters.filter_strategy !== this.#parameters.filter_strategy ||\n            parameters.nmads !== this.#parameters.nmads ||\n            parameters.sum_threshold !== this.#parameters.sum_threshold ||\n            parameters.detected_threshold !== this.#parameters.detected_threshold ||\n            parameters.mito_threshold !== this.#parameters.mito_threshold\n        ) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n\n                if (parameters.filter_strategy === \"automatic\") {\n                    this.#cache.filters = scran.suggestRnaQcFilters(this.#cache.metrics, { numberOfMADs: parameters.nmads, block: block });\n                } else if (parameters.filter_strategy === \"manual\") {\n                    let block_levels = this.#inputs.fetchBlockLevels();\n                    this.#cache.filters = scran.emptySuggestRnaQcFiltersResults(1, block_levels === null ? 1 : block_levels.length);\n                    this.#cache.filters.sum({ copy: false }).fill(parameters.sum_threshold);\n                    this.#cache.filters.detected({ copy: false }).fill(parameters.detected_threshold);\n                    this.#cache.filters.subsetProportion(0, { copy: false }).fill(parameters.mito_threshold);\n                } else {\n                    throw new Error(\"unknown RNA QC filtering strategy '\" + filter_strategy + \"'\");\n                }\n\n                var keep = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"keep_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: keep });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n        }\n\n        this.#parameters = parameters;\n        this.#parameters.species = bioc.CLONE(this.#parameters.species); // avoid pass-by-reference behavior.\n        return;\n    }\n}\n","import { buffer } from \"./globals.js\";\nimport { WasmArray } from \"./base.js\";\n\n/** \n * Wrapper around an unsigned 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint8WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint8WasmArray extends WasmArray {\n    /**\n     * @return {Uint8Array} A Uint8Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string}\n     */\n    static className = \"Uint8WasmArray\";\n    // We're returning the name explicitly here instead of relying\n    // on the constructor.name trick, as the name of the class can\n    // change during minification.\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around a signed 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt8WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int8WasmArray extends WasmArray {\n    /**\n     * @return {Int8Array} An Int8Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Int8WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number}\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around an unsigned 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint16WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint16WasmArray extends WasmArray {\n    /**\n     * @return {Uint16Array} A Uint16Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Uint16WasmArray\";\n\n    /**\n     * Size of the each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage a signed 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt16WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int16WasmArray extends WasmArray {\n    /**\n     * @return {Int16Array} An Int16Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Int16WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage an unsigned 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Uint32WasmArray extends WasmArray {\n    /**\n     * @return {Uint32Array} A Uint32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Uint32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"Uint32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a signed 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Int32WasmArray extends WasmArray {\n    /**\n     * @return {Int32Array} An Int32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Int32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Int32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage an unsigned 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigUint64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class BigUint64WasmArray extends WasmArray {\n    /**\n     * @return {BigUint64Array} A BigUint64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new BigUint64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     * @type {string} \n     */\n    static className = \"BigUint64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a signed 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigInt64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class BigInt64WasmArray extends WasmArray {\n    /**\n     * @return {BigInt64Array} An BigInt64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new BigInt64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"BigInt64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a 32-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat32WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Float32WasmArray extends WasmArray {\n    /**\n     * @return {Float32Array} A Float32Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Float32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Float32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a 64-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat64WasmArray} function.\n *\n * @hideconstructor\n * @augments WasmArray\n */\nexport class Float64WasmArray extends WasmArray {\n    /**\n     * @return {Float64Array} A Float64Array view of the allocated memory.\n     * Note that this may be invalidated by subsequent Wasm heap allocations.\n     */\n    array() {\n        return new Float64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     * @type {string} \n     */\n    static className = \"Float64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     * @type {number} \n     */\n    static valueSize = 8;\n}\n\nconst choices = {\n    \"Uint8WasmArray\": Uint8WasmArray,\n    \"Int8WasmArray\": Int8WasmArray,\n    \"Uint16WasmArray\": Uint16WasmArray,\n    \"Int16WasmArray\": Int16WasmArray,\n    \"Uint32WasmArray\": Uint32WasmArray,\n    \"Int32WasmArray\": Int32WasmArray,\n    \"BigUint64WasmArray\": BigUint64WasmArray,\n    \"BigInt64WasmArray\": BigInt64WasmArray,\n    \"Float32WasmArray\": Float32WasmArray,\n    \"Float64WasmArray\": Float64WasmArray\n};\n\n/**\n * Retrieve class from its name.\n *\n * @param {string} name - Name of the {@linkplain WasmArray} class.\n *\n * @return {class} Class object corresponding to `name`.\n */\nexport function stringToClass(name) {\n    if (!(name in choices)){ \n        throw new Error(\"unknown WasmArray class '\" + name + \"'\");\n    }\n    return choices[name];\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as utils from \"./utils.js\";\nimport * as list from \"./List.js\";\n\n/**\n * The Annotated class provides a store for arbitrary object-wide metadata.\n * It is intended as a base class for other structures and should not be constructed directly.\n *\n * Constructors of Annotated subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE` method to return an instance of the subclass.\n */\nexport class Annotated {\n    /**\n     * @param {Object|Map|Array|List} metadata - Arbitrary list of metadata.\n     * An object/Map is converted to a named {@link List}, while an array is converted to an unnamed List.\n     */\n    constructor(metadata) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        if (!(metadata instanceof list.List)) {\n            metadata = new list.List(metadata);\n        }\n        this._metadata = metadata;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {List} List of arbitrary metadata.\n     */\n    metadata() {\n        return this._metadata;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object|Map|Array|List} value - Object containing the metadata.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Annotated} The Annotated object after replacing the metadata.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setMetadata(value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n\n        if (!(value instanceof list.List)) {\n            value = new list.List(value);\n        }\n        target._metadata = value;\n\n        return target;\n    }\n\n    $setMetadata(value) {\n        return this.setMetadata(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE({ deepCopy = true }) {\n        let output = new this.constructor;\n        output._metadata = cutils.cloneField(this._metadata, deepCopy);\n        return output;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllSets.js\";\nimport { fetchCollectionSizes } from \"./fetchSingleCollection.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\nconst _parents = new Map;\nconst _internal_number = new Map;\n\nasync function initialize(species) {\n    const [ sres, csizes ] = await Promise.all([ \n        utils.retrieveRangesWithExtras(species + \"_sets.tsv\"), \n        fetchCollectionSizes(species) \n    ]);\n    _ranges.set(species, sres.ranges);\n    _sizes.set(species, sres.extra);\n\n    let parents = [];\n    let internal_number = [];\n    var totals = 0;\n    for (var i = 0; i < csizes.length; i++) {\n        let colsize = csizes[i];\n        for (var j = 0; j < colsize; j++) {\n            parents.push(i);\n            internal_number.push(j);\n        }\n        totals += colsize;\n    }\n\n    if (totals != sres.extra.length) {\n        throw new Error(\"discrepancy between number of sets and sum of collection sizes\");\n    }\n\n    _parents.set(species, parents);\n    _internal_number.set(species, internal_number);\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of genes in each set.\n * Each value corresponds to a set in {@linkcode fetchAllSets}.\n * @async\n */\nexport async function fetchSetSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of sets for this species.\n * @async\n */\nexport async function numberOfSets(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full set details if {@linkcode fetchAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the set.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllSets}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                console.log(set);\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sfound = cached.get(set);\n    if (typeof sfound !== \"undefined\") {\n        return sfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_sets.tsv\", _ranges.get(species), set);\n    let split = text.split(\"\\t\");\n    let output = {\n        name: split[0],\n        description: split[1],\n        size: _sizes.get(species)[set],\n        collection: _parents.get(species)[set],\n        number: _internal_number.get(species)[set]\n    };\n\n    cached.set(set, output);\n    return output;\n}\n\n\n","import * as utils from \"./utils.js\";\n\nexport function convertPositionToRank(start, end, { slice = null } = {}) {\n    let n = (slice == null ? start.length : slice.length);\n\n    let positions = new Int32Array(n * 2);\n    let add = new Uint8Array(n * 2);\n    let index = new Int32Array(n * 2);\n\n    {\n        let counter = 0;\n        let fillIndex = i => {\n            let at = counter * 2;\n            let next = at + 1;\n            positions[at] = start[i];\n            positions[next] = end[i];\n            add[at] = 1;\n            add[next] = 0;\n            index[at] = counter;\n            index[next] = counter;\n            counter++;\n        };\n\n        if (slice === null) {\n            for (var i = 0; i < n; i++) {\n                fillIndex(i);                                \n            }\n        } else {\n            for (const i of slice) {\n                fillIndex(i);\n            }\n        }\n    }\n\n    let order = utils.createSequence(positions.length);\n    order.sort((i, j) => positions[i] - positions[j]);\n\n    let rank2position = [];\n    let new_starts = new Int32Array(n);\n    let new_ends = new Int32Array(n);\n\n    let last = null;\n    for (const i of order) {\n        let pos = positions[i];\n        let idx = index[i];\n\n        if (pos !== last) {\n            rank2position.push(pos);\n            last = pos;\n        }\n\n        if (add[i]) {\n            new_starts[idx] = rank2position.length - 1;\n        } else {\n            new_ends[idx] = rank2position.length - 1;\n        }\n    }\n\n    return { rank2position, startRanks: new_starts, endRanks: new_ends };\n}\n\nexport function buildIntervalTree(start, end, { slice = null } = {}) {\n    let { rank2position, startRanks, endRanks } = convertPositionToRank(start, end, { slice });\n\n    // Now, building an nicely balanced interval tree based on the ranks.\n    let tree = [ create_node(0, rank2position.length) ];\n    if (slice === null) {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], i, tree, 0);\n        }\n    } else {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], slice[i], tree, 0);\n        }\n    }\n\n    // Running a clean-up operation to convert ranks back to positions.\n    let one_past_the_end = (rank2position.length > 0 ? rank2position[rank2position.length - 1] + 1 : 1);\n    rank2position.push(one_past_the_end);\n\n    for (const x of tree) {\n        x.left_bound = rank2position[x.left_bound];\n        x.right_bound = rank2position[x.right_bound];\n        x.center = rank2position[x.center];\n\n        // Also sorting ranges by increasing start and DECREASING end positions.\n        let start_overlaps_sorted = x.overlaps.slice().sort((a, b) => start[a] - start[b]);\n        let end_overlaps_sorted = x.overlaps.sort((a, b) => end[b] - end[a]) // reversed order - deliberate!\n        x.overlaps = {\n            start: start_overlaps_sorted.map(i => [start[i], i]),\n            end: end_overlaps_sorted.map(i => [end[i], i])\n        };\n    }\n\n    return tree;\n}\n\nfunction create_node(left_bound, right_bound) {\n    return { \n        left_bound: left_bound,\n        right_bound: right_bound,\n        center: left_bound + Math.floor((right_bound - left_bound) / 2),\n        left_node: null,\n        right_node: null,\n        overlaps: []\n    };\n}\n\nfunction recursive_build_tree(start, end, index, tree, node) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        if (current.right_node === null) {\n            current.right_node = tree.length;\n            tree.push(create_node(current.center, current.right_bound));\n        }\n        recursive_build_tree(start, end, index, tree, current.right_node);\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Let 0-length ranges fall through to the next clause if they lie exactly on the center.\n        if (current.left_node === null) {\n            current.left_node = tree.length;\n            tree.push(create_node(current.left_bound, current.center));\n        }\n        recursive_build_tree(start, end, index, tree, current.left_node);\n\n    } else {\n        // At some point, every range ends up here. This is because left_bound\n        // == center upon successive halving to create new nodes, so every\n        // range will eventually overlap a center at its own start position.\n        current.overlaps.push(index);\n    }\n}\n\nexport function queryIntervalTree(start, end, tree) {\n    let results = [];\n    if (start > tree.right_bound) {\n        return results;\n    }\n\n    if (end < tree.left_bound || (end == tree.left_bound && end > start)) { // Still allow 0-length ranges to fall through for search.\n        return results;\n    }\n\n    recursive_query_tree(start, end, tree, 0, results); \n    return results;\n}\n\nfunction recursive_query_tree(start, end, tree, node, results) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        for (const overlap of current.overlaps.end) {\n            if (overlap[0] > start) {\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.right_node !== null) {\n            recursive_query_tree(start, end, tree, current.right_node, results);\n        }\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Again, let zero-length ranges fall through if they lie directly on the center.\n        for (const overlap of current.overlaps.start) {\n            if (overlap[0] < end || (overlap[0] == end && start == end)) { // handle zero-length ranges directly on the start position of the center-overlapping range.\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.left_node !== null) {\n            recursive_query_tree(start, end, tree, current.left_node, results);\n        }\n\n    } else {\n        for (const overlap of current.overlaps.start) {\n            results.push(overlap[1]);\n        }\n\n        if (end > current.center) {\n            if (current.right_node !== null) {\n                recursive_query_tree(start, end, tree, current.right_node, results);\n            }\n        }\n        if (start < current.center) {\n            if (current.left_node !== null) {\n                recursive_query_tree(start, end, tree, current.left_node, results);\n            }\n        }\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A DataFrame is a collection of equilength vector-like objects as \"columns\".\n * The number of rows in the DataFrame is equal to the length of the columns, where the i-th row consists of the i-th element from each column.\n *\n * This class supports optional row names, which are either `null` or an array of strings of length equal to the number of rows.\n *\n * This class supports empty instances with a non-zero number of rows, which may be useful for piece-wise construction.\n *\n * The vector-like object for each column is expected to have methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * The DataFrame itself defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Constructors of DataFrame subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE`, `_bioconductor_COMBINE` and `_bioconductor_SLICE` methods to return an instance of the subclass.\n *\n * @augments Annotated\n */\nexport class DataFrame extends ann.Annotated {\n    /**\n     * @param {Object|Map} columns - Object or Map where keys are the column names and the values are equilength vector-like objects.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?number} [options.numberOfRows=null] - Non-negative value specifying the number of rows in the DataFrame.\n     * If `null`, this is automatically determined from the length of the vectors in `columns`, or from the length of `rowNames`.\n     * If non-`null`, this should not conflict with the inferred lengths from `columns` or `rowNames`.\n     * @param {?Array} [options.rowNames=null] - Array of strings containing the names for each row.\n     * If non-`null`, this should have the same length as the vectors inside `columns`, if any exist.\n     * If `null`, no row names are used.\n     * @param {?Array} [options.columnOrder=null] - Array of strings specifying the ordering of the columns.\n     * If non-`null`, this should have the same values as the keys of `columns`.\n     * If `null`, an arbitrary ordering is obtained from `columns`.\n     * @param {Object|Array|Map|List} [options.metadata={}] - Arbitrary metadata, see the {@link Annotated} constructor. \n     */\n    constructor(columns, { numberOfRows = null, rowNames = null, columnOrder = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n        this._numberOfRows = numberOfRows;\n        this._rowNames = rowNames;\n        \n        try {\n            this._columns = new il.InternalList(columns, columnOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize columns for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n\n        for (const k of this._columns.names()) {\n            let n = generics.LENGTH(this._columns.entry(k));\n            if (this._numberOfRows == null) {\n                this._numberOfRows = n;\n            } else if (n != this._numberOfRows) {\n                throw new Error(\"expected all arrays in 'columns' to have equal length\");\n            }\n        }\n\n        if (rowNames != null) {\n            if (this._numberOfRows == null) {\n                this._numberOfRows = rowNames.length;\n            }\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._numberOfRows, \"'numberOfRows' or the length of arrays in 'columns'\");\n        }\n\n        if (this._numberOfRows == null) {\n            this._numberOfRows = 0;\n        }\n    }\n\n    static className = \"DataFrame\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the column names in the specified order.\n     */\n    columnNames() {\n        return this._columns.names();\n    }\n\n    /**\n     * @param {string} name - Name of a column.\n     * @return {boolean} Whether the column exists in this DataFrame.\n     */\n    hasColumn(name) {\n        return this._columns.has(name);\n    }\n\n    /**\n     * @return {number} Number of rows in this DataFrame.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns in this DataFrame.\n     */\n    numberOfColumns() {\n        return this._columns.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Column to retrieve, either by name or index.\n     * @return {*} The contents of column `i` as a vector-like object.\n     */\n    column(i) {\n        return this._columns.entry(i);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     * \n     * @return {DataFrame} The DataFrame after removing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeColumn(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.delete(i, { inPlace });\n        return target;\n    }\n\n    $removeColumn(i) {\n        return this.removeColumn(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame after adding/replacing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, value, { inPlace = false } = {}) {\n        if (generics.LENGTH(value) != this._numberOfRows) {\n            throw new Error(\"expected 'value' to have the same length as the number of rows in 'x'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.set(i, value, { inPlace });\n        return target;\n    }\n\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = target._columns.setNames(names, { inPlace });\n        return target;\n    }\n\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names != null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this._numberOfRows, \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceColumns(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.slice(i, { inPlace });\n        return target;\n    }\n\n    $sliceColumns(i) {\n        return this.sliceColumns(i, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_SLICE(i, { allowView = false }) {\n        let options = { allowView };\n\n        let new_columns = this._columns.apply(v => generics.SLICE(v, i, options));\n        let new_rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, i, options));\n\n        let new_numberOfRows;\n        if (i.constructor == Object) {\n            new_numberOfRows = i.end - i.start;\n        } else {\n            new_numberOfRows = i.length;\n        }\n\n        let output = new this.constructor;\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return output;\n    }\n\n    _bioconductor_COMBINE(objects) {\n        let all_c = [this._columns];\n        let all_n = [this._rowNames];\n        let all_l = [this._numberOfRows];\n\n        for (const yi of objects) {\n            all_c.push(yi._columns);\n            all_n.push(yi._rowNames);\n            all_l.push(yi._numberOfRows);\n        }\n\n        let new_numberOfRows = utils.sum(all_l);\n        let new_rowNames = utils.combineNames(all_n, all_l, new_numberOfRows);\n        let new_columns = il.InternalList.parallelCombine(all_c, generics.COMBINE);\n\n        let output = new this.constructor;\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return output;\n    }\n\n    _bioconductor_CLONE({ deepCopy = true }) {\n        let output = super._bioconductor_CLONE({ deepCopy });\n        output._columns = cutils.cloneField(this._columns, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n        output._numberOfRows = this._numberOfRows;\n        return output;\n    }\n};\n\n/**\n * Flexibly combine multiple DataFrames by row by filling in missing columns with an array of `null`s.\n * This is equivalent to calling {@linkcode COMBINE} on an array of DataFrames that may have mismatching columns.\n *\n * @param {Array} objects - Array of {@linkplain DataFrame}s to be combined.\n *\n * @return {DataFrame} The combined DataFrame, where the number of rows is equal to sum of rows across `objects`,\n * and the columns is equal to the union of columns across `objects`.\n */\nexport function flexibleCombineRows(objects) {\n    let ckeys = new Set();\n    let corder = [];\n    for (const current of objects) {\n        let cnames = current.columnNames();\n        for (const a of cnames) {\n            if (!ckeys.has(a)) {\n                ckeys.add(a);\n                corder.push(a);\n            }\n        }\n    }\n\n    let copies = [];\n    for (const current of objects) {\n        let dummy = new Array(current.numberOfRows());\n        dummy.fill(null);\n        let copy = generics.CLONE(current, { deepCopy: false });\n\n        for (const a of corder) {\n            if (!current.hasColumn(a)) {\n                copy.$setColumn(a, dummy);\n            }\n        }\n\n        copy._columns = copy._columns.reorder(corder);\n        copies.push(copy);\n    }\n\n    return generics.COMBINE(copies);\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Initialize a sparse matrix from an R object loaded from an RDS file.\n *\n * @param {RdsObject} x - Handle to an object inside an RDS file.\n * This should be an integer/numeric matrix, `dgCMatrix` or `dgTMatrix` object.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, see [**tatami_layered**](https://github.com/tatami-inc/tatami_layered) for more details.\n * Only used if the R matrix is of an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {ScranMatrix} Matrix containing sparse data.\n */\nexport function initializeSparseMatrixFromRds(x, options = {}) {\n    const { forceInteger = true, layered = true, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.initialize_from_rds(x.object.$$.ptr, forceInteger, layered),\n            ScranMatrix\n        );\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchSetsForAllGenes.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return {number} Number of genes that belong to at least one set for `species`.\n * This can be used as a more appropriate universe size in {@linkcode testEnrichment}.\n */\nexport async function effectiveNumberOfGenes(species) {\n    let ffound = await full.fetchSetsForAllGenes(species, { download: false });\n    if (ffound !== null) {\n        let okay = 0;\n        for (const x of ffound) {\n            okay += x.length > 0;\n        }\n        return okay;\n    }\n\n    let ranged = _ranges.get(species);\n    if (typeof ranged === \"undefined\") {\n        _cache.set(species, new Map);\n        ranged = await utils.retrieveRanges(species + \"_gene2set.tsv\")\n        _ranges.set(species, ranged);\n    }\n\n    let okay = 0;\n    for (var i = 1; i < ranged.length; i++) {\n        if (ranged[i] > ranged[i-1] + 1) {\n            okay++;\n        }\n    }\n\n    return okay;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} gene - Gene ID, see {@linkcode fetchAllGenes} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full gene-to-set mappings if {@linkcode fetchSetsForAllGenes} was called before this function. \n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all gene-to-set mappings up-front to avoid range requests.\n * This is done by calling {@linkcode fetchSetsForAllGenes}\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs of all sets containing the gene.\n * IDs are treated as indices into the return value of {@linkcode fetchAllSets} or as input to {@linkcode fetchSingleSet}.\n *\n * If `gene = null`, no return value is provided.\n * \n * @async\n */\nexport async function fetchSetsForGene(species, gene, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchSetsForAllGenes(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (gene !== null) {\n                return ffound[gene];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound === \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_gene2set.tsv\"));\n    }\n    if (gene == null) {\n        return;\n    }\n\n    let gfound = spfound.get(gene);\n    if (typeof gfound !== \"undefined\") {\n        return gfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_gene2set.tsv\", _ranges.get(species), gene);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(gene, output);\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X Matrix Market format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/matrices) for details.\n */\nexport class TenxMatrixMarketDataset {\n    #matrix_file;\n    #feature_file;\n    #barcode_file;\n\n    #dimensions;\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"mtx\", file: fun(this.#matrix_file) }];\n\n        if (this.#feature_file !== null) {\n            files.push({ type: \"genes\", file: fun(this.#feature_file) });\n        }\n\n        if (this.#barcode_file !== null) {\n            files.push({ type: \"annotations\", file: fun(this.#barcode_file) });\n        }\n\n        let options = this.options(); \n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} matrixFile - A Matrix Market file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {?(SimpleFile|string|Uint8Array|File)} featureFile - Contents of a feature annotation file.\n     * If `null`, it is assumed that no file was available.\n     * @param {?(SimpleFile|string|Uint8Array|File)} barcodeFile - Contents of a barcode annotation file.\n     * If `null`, it is assumed that no file was available.\n     */\n    constructor(matrixFile, featureFile, barcodeFile) {\n        if (matrixFile instanceof afile.SimpleFile) {\n            this.#matrix_file = matrixFile;\n        } else {\n            this.#matrix_file = new afile.SimpleFile(matrixFile);\n        }\n\n        if (featureFile instanceof afile.SimpleFile || featureFile == null) {\n            this.#feature_file = featureFile;\n        } else {\n            this.#feature_file = new afile.SimpleFile(featureFile);\n        }\n\n        if (barcodeFile instanceof afile.SimpleFile || barcodeFile == null) {\n            this.#barcode_file = barcodeFile;\n        } else {\n            this.#barcode_file = new afile.SimpleFile(barcodeFile);\n        }\n\n        this.#options = TenxMatrixMarketDataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxMatrixMarketDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxMatrixMarketDataset#load load} (but not {@linkcode TenxMatrixMarketDataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * If `null` or the string is not present among the feature types, no RNA features are to be loaded.\n     *\n     * If no feature type information is available in the dataset, all features are considered to be genes by default.\n     * This behavior can be explicitly requested by setting this argument to the only non-`null` value among all `featureType*Name` parameters.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * If `null` or the string is not present among the feature types, no ADT features are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be ADTs.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * If `null` or the string is not present among the feature types, no guides are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be guides.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxMatrixMarketDataset#load load} or {@linkcodeTenxMatrixMarketDataset#summary summary}. \n     */\n    clear() {\n        this.#dimensions = null;\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"MatrixMarket\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate(args) {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #fetch_dimensions() {\n        if (this.#dimensions !== null) {\n            return;\n        }\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let headers = scran.extractMatrixMarketDimensions(this.#matrix_file.content(), { \"compression\": (is_gz ? \"gzip\" : \"none\") });\n        this.#dimensions = [headers.rows, headers.columns];\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        let NR = this.#dimensions[0];\n        if (this.#feature_file == null) {\n            this.#raw_features = new bioc.DataFrame({}, { numberOfRows: NR });\n            return;\n        }\n\n        let fname = this.#feature_file.name();\n        var is_gz = fname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#feature_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        if (parsed.length == NR + 1) {\n            // If it seems to have a header, we just use that directly.\n            let output = {};\n            let headers = parsed.shift();\n            headers.forEach((x, i) => {\n                output[x] = parsed.map(y => y[i]);\n            });\n            this.#raw_features = output;\n            return;\n        }\n\n        // Otherwise, we assume it's standard 10X CellRanger output, without a header.\n        if (parsed.length !== NR) {\n            throw new Error(\"number of matrix rows is not equal to the number of rows in '\" + fname + \"'\");\n        } \n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        let output = new bioc.DataFrame({}, { numberOfRows: NR }); // build it piece-by-piece for a well-defined order.\n        output.$setColumn(\"id\", ids);\n        output.$setColumn(\"name\", symb);\n\n        if (parsed[0].length > 2) {\n            let types = [];\n            parsed.forEach(x => { types.push(x[2]); });\n            output.$setColumn(\"type\", types);\n        }\n\n        this.#raw_features = output;\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        if (this.#barcode_file == null) {\n            this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: this.#dimensions[1] });\n            return;\n        }\n\n        let bname = this.#barcode_file.name();\n        var is_gz = bname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#barcode_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        // Check if a header is present or not. Standard 10X output doesn't have a \n        // header but we'd like to support some kind of customization.\n        let diff = this.#dimensions[1] - parsed.length;\n        let headers;\n        if (diff == 0) {\n            headers = parsed[0]; // whatever, just using the first row. Hope it's unique enough!\n        } else if (diff == -1) {\n            headers = parsed.shift();\n        } else {\n            throw new Error(\"number of matrix columns is not equal to the number of rows in '\" + bname + \"'\");\n        }\n\n        let annotations = {}\n        headers.forEach((x, i) => {\n            annotations[x] = parsed.map(y => y[i]);\n        });\n\n        for (const [k, v] of Object.entries(annotations)) {\n            let conv = eutils.promoteToNumber(v);\n            if (conv !== null) {\n                annotations[k] = conv;\n            }\n        }\n\n        this.#raw_cells = new bioc.DataFrame(annotations);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxMatrixMarketDataset#load load} but the order of values may be different.\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRIPSR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxMatrixMarketDataset#defaults defaults} or with {@linkcode TenxMatrixMarketDataset#setOptions setOptions}.\n     *\n     * If the feature annotation file is absent or if it lacks a third column for the feature types,\n     * `load()` will assume that all features are genes (i.e., only the RNA modality is present).\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let loaded = scran.initializeSparseMatrixFromMatrixMarket(this.#matrix_file.content(), { \"compression\": (is_gz ? \"gzip\" : \"none\") });\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\"); \n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    async serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxMatrixMarketDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxMatrixMarketDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        let args = {};\n        for (const x of files) {\n            if (x.type in args) {\n                throw new Error(\"duplicate file of type '\" + x.type + \"' detected during MatrixMarket unserialization\");\n            }\n            args[x.type] = x.file;\n        }\n\n        if (!(\"mtx\" in args)) {\n            throw new Error(\"expected file of type 'mtx' for during MatrixMarket unserialization\");\n        }\n\n        let feat = null;\n        if (\"genes\" in args) {\n            feat = args.genes;\n        }\n\n        let barcode = null;\n        if (\"annotations\" in args) {\n            barcode = args.annotations;\n        }\n\n        let output = new TenxMatrixMarketDataset(args.mtx, feat, barcode);\n        output.setOptions(options);\n        return output;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchGenesForAllSets.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full set-to-gene mappings if {@linkcode fetchGenesForAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set-to-gene information up-front to avoid range requests.\n * This is done by calling {@linkcode fetchGenesForAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs for all genes belonging to the set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchGenesForSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchGenesForAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound == \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_set2gene.tsv\"));\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sefound = spfound.get(set);\n    if (typeof sefound !== \"undefined\") {\n        return sefound;\n    }\n\n    let ranges = _ranges.get(species);\n    let text = await utils.retrieveBytesByIndex(species + \"_set2gene.tsv\", ranges, set);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(set, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Wrapper around a matrix allocated on the Wasm heap.\n * @hideconstructor\n */\nexport class ScranMatrix {\n    #id;\n    #matrix;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#matrix = raw;\n        return;\n    }\n\n    /**\n     * @return {ScranMatrix} A clone of the current ScranMatrix instance.\n     * This can be freed independently of the current instance.\n     */\n    clone() {\n        return gc.call(\n            module => this.#matrix.clone(),\n            ScranMatrix\n        );\n    }\n\n    // Internal use only, not documented.\n    get matrix() {\n        return this.#matrix;\n    }\n\n    /**\n     * @return {number} Number of rows in the matrix.\n     */\n    numberOfRows() {\n        return this.#matrix.nrow();\n    }\n\n    /**\n     * @return {number} Number of columns in the matrix.\n     */\n    numberOfColumns() {\n        return this.#matrix.ncol();\n    }\n\n    /**\n     * @param {number} i - Index of the row to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n     * If `false`, a Float64WasmArray is returned instead.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     *\n     * @return {Float64Array|Float64WasmArray} An array containing the contents of row `i`.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    row(i, options = {}) {\n        let { asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        let tmp = null;\n\n        try {\n            if (buffer == null) {\n                tmp = utils.createFloat64WasmArray(this.#matrix.ncol());\n                buffer = tmp;\n            }\n            this.#matrix.row(i, buffer.offset);\n        } catch (e) {\n            utils.free(tmp);\n            throw e;\n        }\n\n        return utils.toTypedArray(buffer, tmp == null, asTypedArray);\n    }\n\n    /**\n     * @param {number} i - Index of the column to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n     * If `false`, a Float64WasmArray is returned instead.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     *\n     * @return {Float64Array|Float64WasmArray} An array containing the contents of column `i`.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    column(i, options = {}) {\n        let { asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        let tmp = null;\n\n        try {\n            if (buffer == null) {\n                tmp = utils.createFloat64WasmArray(this.#matrix.nrow());\n                buffer = tmp;\n            }\n            this.#matrix.column(i, buffer.offset);\n        } catch (e) {\n            utils.free(tmp);\n            throw e;\n        }\n\n        return utils.toTypedArray(buffer, tmp == null, asTypedArray);\n    }\n\n    /** \n     * Free the memory on the Wasm heap for this.#matrix.\n     * This invalidates this object and all of its references.\n     */\n    free() {\n        if (this.#matrix !== null) {\n            gc.release(this.#id);\n            this.#matrix = null;\n        }\n        return;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is sparse.\n     */\n    isSparse() {\n        return this.#matrix.sparse();\n    }\n}\n","export function stream(file, chunkSize, callback, resolve, reject) {\n    reject(\"no support for file paths in the browser context\");\n}\n\nexport function peek(file, n) {\n    throw new Error(\"no support for file paths in the browser context\");\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \n\n/**\n * Wrapper for the CRISPR-based metrics allocated on the Wasm heap, produced by {@linkcode perCellCrisprQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellCrisprQcMetricsResults {\n    #id;\n    #results;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64WasmArray} Array containing the total count across guides for each cell.\n     */\n    sum(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.sum(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Int32Array|Int32WasmArray} Array containing the total number of detected guides for each cell.\n     */\n    detected(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.detected(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64WasmArray} Array containing the count of the most abundant guide for each cell.\n     */\n    maxValue(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.max_value(), copy);\n    }\n\n    /**\n     * @return {Float64Array} Array containing the proportion of counts in the most abundant guide for each cell.\n     */\n    maxProportion() {\n        let out = this.maxValue();\n        let denom = this.sum({ copy: false });\n        out.forEach((x, i) => { out[i] /= denom[i] });\n        return out;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Int32Array|Int32WasmArray} Array containing the index of the most abundant guide for each cell.\n     */\n    maxIndex(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.max_index(), copy);\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the CRISPR guide count matrix.\n *\n * @param {ScranMatrix} x - The count matrix for CRISPR guides.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellCrisprQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellCrisprQcMetrics(x, options = {}) {\n    const { numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.per_cell_crispr_qc_metrics(x.matrix, nthreads),\n        PerCellCrisprQcMetricsResults\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildNeighborSearchIndexResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the t-SNE status object on the Wasm heap, typically created by {@linkcode initializeTsne}.\n * @hideconstructor\n */\nexport class TsneStatus {\n    #id;\n    #status;\n    #coordinates;\n\n    constructor(id, raw_status, raw_coordinates) {\n        this.#id = id;\n        this.#status = raw_status;\n        this.#coordinates = raw_coordinates;\n        return;\n    }\n\n    /**\n     * @return {TsneStatus} A deep copy of this object.\n     */\n    clone() {\n        return gc.call(\n            module => this.#status.deepcopy(), \n            TsneStatus, \n            this.#coordinates.clone()\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.#status.num_observations();\n    }\n\n    /**\n     * @return {number} Number of iterations processed so far.\n     * This will change with repeated invocations of {@linkcode runTsne} on this object.\n     */\n    iterations () {\n        return this.#status.iterations();\n    }\n\n    /**\n     * @return {object} Object with `x` and `y` keys.\n     * The corresponding values are Float64Array objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.#coordinates.array()); \n    }\n\n    /**\n     * Run the t-SNE algorithm to the specified number of iterations or for a certain time.\n     * This method may be called any number of times.\n     *\n     * @param {object} [options={}] - Optional parameters.\n     * @param {number} [options.maxIterations=1000] - Maximum number of iterations to perform.\n     * This number includes all existing iterations that were already performed in `x` from previous calls to this method,\n     * so it should be greater than {@linkcode TsneStatus#iterations iterations}.\n     * @param {?number} [options.runTime=null] - Number of milliseconds for which the algorithm is allowed to run before returning.\n     * If `null`, no limit is imposed on the runtime.\n     *\n     * @return The algorithm status in `x` is advanced up to the requested number of iterations,\n     * or until the requested run time is exceeded, whichever comes first.\n     */\n    run(options = {}) {\n        let { maxIterations = 1000, runTime = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        if (runTime === null) {\n            runTime = -1;\n        }\n        wasm.call(module => module.run_tsne(this.#status, runTime, maxIterations, this.#coordinates.offset));\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free() {\n        if (this.#status !== null) {\n            gc.release(this.#id);\n            this.#status = null;\n        }\n        if (this.#coordinates !== null) {\n            this.#coordinates.free();\n            this.#coordinates = null;\n        }\n        return;\n    }\n}\n\n/**\n * @param {number} perplexity - Perplexity to use in the t-SNE algorithm.\n * @return {number} Appropriate number of neighbors to use in the nearest neighbor search.\n */\nexport function perplexityToNeighbors(perplexity) {\n    return wasm.call(module => module.perplexity_to_k(perplexity));\n}\n\n/**\n * @param {BuildNeighborSearchIndexResults|FindNearestNeighborsResults} x A pre-built neighbor search index from {@linkcode buildNeighborSearchIndex}.\n *\n * Alternatively, a pre-computed set of neighbor search results from {linkcode findNearestNeighbors}.\n * The number of neighbors should be equal to `neighbors`, otherwise a warning is raised.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.perplexity=30] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {?number} [options.neighbors=null] - Number of nearest neighbors to find.\n * If `null`, defaults to the output of {@linkcode perplexityToNeighbors perplexityToNeighbors(perplexity)}.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {TsneStatus} Object containing the initial status of the t-SNE algorithm.\n */\nexport function initializeTsne(x, options = {}) {\n    const { perplexity = 30, neighbors = null, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var my_nnres;\n    var raw_coords;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    const k = (neighbors == null ? perplexityToNeighbors(perplexity) : neighbors);\n\n    try {\n        let nnres;\n\n        if (x instanceof BuildNeighborSearchIndexResults) {\n            my_nnres = findNearestNeighbors(x, k, { numberOfThreads: nthreads });\n            nnres = my_nnres\n        } else {\n            if (k != x.numberOfNeighbors()) {\n                console.warn(\"number of neighbors in 'x' does not match 'neighbors'\");\n            }\n            nnres = x;\n        }\n\n        raw_coords = utils.createFloat64WasmArray(2 * nnres.numberOfCells());\n        wasm.call(module => module.randomize_tsne_start(nnres.numberOfCells(), raw_coords.offset, 42));\n        output = gc.call(\n            module => module.initialize_tsne(nnres.results, perplexity, nthreads),\n            TsneStatus,\n            raw_coords\n        );\n\n    } catch(e) {\n        utils.free(output);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_nnres);\n    }\n\n    return output;\n}\n\n/**\n * Run the t-SNE algorithm to the specified number of iterations.\n * This is a wrapper around {@linkcode initializeTsne} and {@linkcode TsneStatus#run run}.\n *\n * @param {BuildNeighborSearchIndexResults|FindNearestNeighborsResults} x A pre-built neighbor search index from {@linkcode buildNeighborSearchIndex}.\n *\n * Alternatively, a pre-computed set of neighbor search results from {linkcode findNearestNeighbors}.\n * The number of neighbors should be equal to `neighbors`, otherwise a warning is raised.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.perplexity=30] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {?number} [options.neighbors=null] - Number of nearest neighbors to find.\n * If `null`, defaults to the output of {@linkcode perplexityToNeighbors perplexityToNeighbors(perplexity)}.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {number} [options.maxIterations=1000] - Maximum number of iterations to perform.\n *\n * @return {object} Object containing coordinates of the t-SNE embedding, see {@linkcode TsneStatus#extractCoordinates TsneStatus.extractCoordinates} for more details.\n */\nexport function runTsne(x, options = {}) {\n    const { perplexity = 30, neighbors = null, numberOfThreads = null, maxIterations = 1000, ...others } = options;\n    utils.checkOtherOptions(others);\n    let tstat = initializeTsne(x, { perplexity, neighbors, numberOfThreads });\n    tstat.run({ maxIterations });\n    return tstat.extractCoordinates();\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\nfunction matrix_sums(x, row, options = {}) {\n    let { asTypedArray = true, buffer = null, numberOfThreads = 1, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let local_buffer = null;\n    let dim = (row ? x.numberOfRows() : x.numberOfColumns());\n\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(dim);\n            buffer = local_buffer;\n        } else if (buffer.length != dim) {\n            throw new Error(\"'buffer' should have length equal to the number of \" + (row ? \"rows\" : \"columns\"));\n        }\n        wasm.call(module => module.matrix_sums(x.matrix, row, buffer.offset, numberOfThreads));\n\n    } catch(e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return utils.toTypedArray(buffer, local_buffer == null, asTypedArray);\n}\n\n/**\n * Compute the row sums of a {@link ScranMatrix}.\n *\n * @param {ScranMatrix} x - A matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n * If `false`, a Float64WasmArray is returned instead.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to that of the number of rows of `x`.\n * If `null`, an array is allocated by the function.\n * @param {number} [options.numberOfThreads=1] - Number of threads to use for the calculation.\n *\n * @return {Float64Array|Float64WasmArray} Array containing the row sums.\n * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n */\nexport function rowSums(x, options = {}) {\n    return matrix_sums(x, true, options);\n}\n\n/**\n * Compute the column sums of a {@link ScranMatrix}.\n *\n * @param {ScranMatrix} x - A matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n * If `false`, a Float64WasmArray is returned instead.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to that of the number of columns of `x`.\n * If `null`, an array is allocated by the function.\n * @param {number} [options.numberOfThreads=1] - Number of threads to use for the calculation.\n *\n * @return {Float64Array|Float64WasmArray} Array containing the column sums.\n * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n */\nexport function columnSums(x, options = {}) {\n    return matrix_sums(x, false, options);\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\nexport const step_name = \"umap\";\n\n/**\n * This creates a UMAP embedding based on the neighbor index constructed at {@linkplain NeighborIndexState}.\n * This wraps [`runUMAP`](https://kanaverse.github.io/scran.js/global.html#runUMAP)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class UmapState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createUmapWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n\n            output.iterations = this.#parameters.num_epochs;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode UmapState#compute compute} for details.\n     */\n    static defaults()  {\n        return {\n            num_neighbors: 15,\n            num_epochs: 500,\n            min_dist: 0.1,\n            animate: false\n        };\n    }\n\n    #core(num_neighbors, num_epochs, min_dist, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            nn_out = vizutils.computeNeighbors(this.#index, num_neighbors);\n        }\n\n        let args = {\n            \"num_neighbors\": num_neighbors,\n            \"num_epochs\": num_epochs,\n            \"min_dist\": min_dist,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the UMAP runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `umap` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.num_neighbors] - Number of neighbors to use to construct the simplicial sets.\n     * @param {number} [parameters.num_epochs] - Number of epochs to run the algorithm.\n     * @param {number} [parameters.min_dist] - Number specifying the minimum distance between points.\n     * @param {boolean} [parameters.animate] - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return UMAP coordinates are computed in parallel on a separate worker thread.\n     * A promise that resolves when the calculations are complete.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, UmapState.defaults());\n\n        let same_neighbors = (!this.#index.changed && parameters.num_neighbors === this.#parameters.num_neighbors);\n        if (same_neighbors && parameters.num_epochs === this.#parameters.num_epochs && parameters.min_dist === this.#parameters.min_dist) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(parameters.num_neighbors, parameters.num_epochs, parameters.min_dist, parameters.animate, !same_neighbors);\n\n        this.#parameters = parameters;\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.num_neighbors, this.#parameters.num_epochs, this.#parameters.min_dist, true, true);\n      \n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => { \n                    return {\n                        \"type\": \"umap_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as init from \"./initializeMatrixFromArrays.js\";\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around a labelled reference dataset on the Wasm heap, typically produced by {@linkcode loadLabelCellsReferenceFromBuffers}.\n * @hideconstructor\n */\nclass LoadedLabelCellsReference {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of samples in this dataset.\n     */\n    numberOfSamples() {\n        return this.#reference.num_samples();\n    }\n\n    /**\n     * @return {number} Number of features in this dataset.\n     */\n    numberOfFeatures() {\n        return this.#reference.num_features();\n    }\n\n    /**\n     * @return {number} Number of labels in this dataset.\n     */\n    numberOfLabels() {\n        return this.#reference.num_labels();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\n/**\n * Load a reference dataset for annotation in {@linkecode labelCells}.\n * The reference should be represented by several files, the contents of which are described in the [**singlepp_loaders** documentation](https://github.com/SingleR-inc/singlepp_loaders).\n * \n * @param {Uint8Array|Uint8WasmArray} ranks - Buffer containing the Gzipped CSV file containing a matrix of ranks.\n * Each line corresponds to a sample and contains a comma-separated vector of ranks across all features.\n * All lines should contain the same number of entries.\n * This is effectively a row-major matrix where rows are samples and columns are features.\n * (Advanced users may note that this is transposed in C++.) \n * @param {Uint8Array|Uint8WasmArray} markers - Buffer containing the Gzipped GMT file containing the markers for each pairwise comparison between labels.\n * For `markers`, the GMT format is a tab-separated file with possibly variable numbers of fields for each line.\n * Each line corresponds to a pairwise comparison between labels, defined by the first two fields.\n * The remaining fields should contain indices of marker features (referring to columns of `matrix`) that are upregulated in the first label when compared to the second.\n * Markers should be sorted in order of decreasing strength.\n * @param {Uint8Array|Uint8WasmArray} labels - Buffer containing the Gzipped text file containing the label for each sample.\n * Each line should contain an integer representing a particular label, from `[0, N)` where `N` is the number of unique labels.\n * The number of lines should be equal to the number of rows in `matrix`.\n * The actual names of the labels are usually held elsewhere.\n * \n * @return {LoadedLabelCellsReference} Object containing the reference dataset.\n */\nexport function loadLabelCellsReferenceFromBuffers(ranks, markers, labels) {\n    var output;\n    var matbuf;\n    var markbuf;\n    var labbuf;\n\n    try {\n        matbuf = utils.wasmifyArray(ranks, \"Uint8WasmArray\");\n        markbuf = utils.wasmifyArray(markers, \"Uint8WasmArray\");\n        labbuf = utils.wasmifyArray(labels, \"Uint8WasmArray\");\n        output = gc.call(\n            module => module.load_singlepp_reference(labbuf.offset, labbuf.length, markbuf.offset, markbuf.length, matbuf.offset, matbuf.length),\n            LoadedLabelCellsReference\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(markbuf);\n        utils.free(labbuf);\n    }\n\n    return output;\n}\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around a built labelled reference dataset on the Wasm heap, typically produced by {@linkcode trainLabelCellsReference}.\n * @hideconstructor\n */\nclass TrainedLabelCellsReference {\n    #id;\n    #reference;\n\n    constructor(id, raw, expected_features) {\n        this.#id = id;\n        this.#reference = raw;\n        this.expectedNumberOfFeatures = expected_features;\n        return;\n    }\n\n    // internal use only.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of shared features between the test and reference datasets.\n     */\n    numberOfFeatures() {\n        return this.#reference.num_features();\n    }\n\n    /**\n     * @return {number} Number of labels in this dataset.\n     */\n    numberOfLabels() {\n        return this.#reference.num_labels();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\n/**\n * @ignore\n */\nexport function intersectFeatures(testFeatures, referenceFeatures) { // exported only for testing purposes.\n    let registry = new Map;\n\n    for (var i = 0; i < testFeatures.length; i++) {\n        let id = testFeatures[i];\n        if (id !== null && !registry.has(id)) { // first hit gets the preference.\n            registry.set(id, i);\n        }\n    }\n\n    let tkeep = [], rkeep = [];\n    for (var i = 0; i < referenceFeatures.length; i++) {\n        let id = referenceFeatures[i];\n        if (id == null) {\n            continue;\n        }\n\n        if (!Array.isArray(id)) {\n            if (registry.has(id)) {\n                tkeep.push(registry.get(id));\n                registry.delete(id); // deleting to avoid a future match to the same ID, as the intersection must be unique in its first/second hits.\n                rkeep.push(i);\n            }\n\n        } else { // otherwise, it's an array of multiple synonymous gene names.\n            for (const xid of id) {\n                if (registry.has(xid)) {\n                    tkeep.push(registry.get(xid));\n                    registry.delete(xid);\n                    rkeep.push(i);\n                    break;\n                }\n            }\n        }\n    }\n\n    return { \"test\": tkeep, \"reference\": rkeep };\n}\n\n/**\n * Train a reference dataset for annotation in {@linkcode labelCells}.\n * The build process involves harmonizing the identities of the features available in the test dataset compared to the reference.\n * Specifically, a feature must be present in both datasets in order to be retained. \n * Of those features in the intersection, only the `top` markers from each pairwise comparison are ultimately used for classification.\n *\n * Needless to say, `testFeatures` should match up to the rows of the {@linkplain ScranMatrix} that is actually used for annotation in {@linkcode labelCells}.\n *\n * @param {Array} testFeatures - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * @param {LoadedLabelCellsReference} loadedReference - A reference dataset, typically loaded with {@linkcode loadLabelCellsReferenceFromBuffers}.\n * @param {Array} referenceFeatures - An array of feature identifiers (usually strings) of length equal to the number of features in `reference`.\n * Each entry may also be an array of synonymous identifiers, in which case the first identifier that matches to an entry of `features` is used.\n * Contents of `referenceFeatures` are expected to exhibit some overlap with identifiers in `testFeatures`.\n * Any `null` entries are considered to be incomparable.\n * If multiple entries of `referenceFeatures` match to the same feature in `features`, only the first matching entry is used and the rest are ignored.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.top=20] - Number of top marker features to use.\n * These features are taken from each pairwise comparison between labels.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {TrainedLabelCellsReference} Object containing the built reference dataset.\n */\nexport function trainLabelCellsReference(testFeatures, loadedReference, referenceFeatures, options = {}) {\n    const { top = 20, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var test_id_buffer;\n    var ref_id_buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    if (referenceFeatures.length != loadedReference.numberOfFeatures()) {\n        throw new Error(\"length of 'referenceFeatures' should be equal to the number of features in 'loadedReference'\");\n    }\n    const intersection = intersectFeatures(testFeatures, referenceFeatures);\n\n    try {\n        test_id_buffer = utils.wasmifyArray(intersection.test, \"Int32WasmArray\");\n        ref_id_buffer = utils.wasmifyArray(intersection.reference, \"Int32WasmArray\");\n        output = gc.call(\n            module => module.train_singlepp_reference(\n                test_id_buffer.length,\n                test_id_buffer.offset,\n                ref_id_buffer.offset,\n                loadedReference.reference,\n                top,\n                nthreads\n            ),\n            TrainedLabelCellsReference,\n            testFeatures.length\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(test_id_buffer);\n        utils.free(ref_id_buffer);\n    }\n\n    return output;\n}\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around the cell labelling results on the Wasm heap, typically produced by {@linkcode labelCells}.\n * @hideconstructor\n */\nclass LabelCellsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of labels used in {@linkcode labelCells}.\n     */\n    numberOfLabels() {\n        return this.#results.num_labels();\n    }\n\n    /**\n     * @return {number} Number of cells that were labelled.\n     */\n    numberOfCells() {\n        return this.#results.num_samples();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * @return {Int32Array|Int32WasmArray} Array of length equal to the number of cells,\n     * containing the index of the best label for each cell.\n     */\n    predicted(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.best(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the cell of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n     * If `false`, a Float64WasmArray is returned instead.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode LabelCellsResults#numberOfLabels numberOfLabels}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores for this cell across all labels.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    scoreForCell(i, options = {}) {\n        let { asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n\n        let tmp = null;\n        try {\n            if (buffer == null) {\n                tmp = utils.createFloat64WasmArray(this.#results.num_labels());\n                buffer = tmp;\n            }\n            this.#results.score_for_sample(i, buffer.offset);\n        } catch (e) {\n            utils.free(tmp);\n            throw e;\n        }\n\n        return utils.toTypedArray(buffer, tmp == null, asTypedArray);\n    }\n\n    /**\n     * @param {number} i - Index of the label of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * Only used if `buffer` is not supplied.\n     * @return {Float64Array|Float64WasmArray} Array containing the scores across all cells for this label.\n     */\n    scoreForLabel(i, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.score_for_label(i), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of cells,\n     * containing the difference in scores between the best and second-best labels.\n     */\n    delta(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.delta(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n    }\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n * This uses the [**SingleR** algorithm](https://github.com/SingleR-inc/singlepp) for cell type annotation.\n *\n * @param {ScranMatrix} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * @param {BuildLabelledReferenceResults} reference - A built reference dataset, typically generated by {@linkcode buildLabelledReference}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {LabelCellsResults} Labelling results for each cell in `x`.\n */\nexport function labelCells(x, reference, options = {}) {\n    const { numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var output = null;\n    var matbuf;\n    var tempmat;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let target;\n        if (x instanceof ScranMatrix) {\n            target = x.matrix;\n        } else if (x instanceof wa.Float64WasmArray) {\n            // Back-compatibility only.\n            tempmat = init.initializeDenseMatrixFromDenseArray(numberOfFeatures, numberOfCells, x, { forceInteger: false });\n            target = tempmat.matrix;\n        } else {\n            throw new Error(\"unknown type for 'x'\");\n        }\n\n        if (target.nrow() != reference.expectedNumberOfFeatures) {\n            throw new Error(\"number of rows in 'x' should be equal to length of 'features' used to build 'reference'\");\n        }\n\n        output = gc.call(\n            module => module.run_singlepp(target, reference.reference, quantile, nthreads),\n            LabelCellsResults\n        );\n    } finally {\n        utils.free(matbuf);\n        utils.free(tempmat);\n    }\n\n    return output;\n}\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around integrated reference datasets on the Wasm heap, typically produced by {@linkcode integrateLabelledReferences}.\n * @hideconstructor\n */\nclass IntegratedLabelCellsReferences {\n    #id;\n    #integrated;\n\n    constructor(id, raw, expected_features) {\n        this.#id = id;\n        this.#integrated = raw;\n        this.expectedNumberOfFeatures = expected_features;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get integrated() {\n        return this.#integrated;\n    }\n\n    /**\n     * @return {number} Number of reference datasets.\n     */\n    numberOfReferences() {\n        return this.#integrated.num_references();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#integrated !== null) {\n            gc.release(this.#id);\n            this.#integrated = null;\n        }\n    }\n}\n\n/**\n * Prepare a classifier that integrates multiple reference datasets.\n * This allows users to choose the best label for a test cell based on its classifications in multiple references.\n *\n * @param {Array} testFeatures - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain a single identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * If any entries are duplicated, only the first occurrence is used and the rest are ignored.\n * @param {Array} loadedReferences - Array of {@linkplain LoadedLabelCellsReference} objects, typically created with {@linkcode loadLabelCellsReferenceFromBuffers}.\n * @param {Array} referenceFeatures - Array of length equal to `loadedReferences`, \n * containing arrays of feature identifiers (usually strings) of length equal to the number of features the corresponding entry of `loadedReferences`.\n * Each entry may also be an array of synonymous identifiers, in which case the first identifier that matches to an entry of `testFeatures` is used.\n * Contents of `referenceFeatures` are expected to exhibit some overlap with identifiers in `testFeatures`.\n * Any `null` entries are considered to be incomparable.\n * If multiple entries of `referenceFeatures` match to the same feature in `testFeatures`, only the first matching entry is used and the rest are ignored.\n * @param {Array} trainedReferences - Array of {@linkplain TrainedLabelCellsReference} objects, typically generated by calling {@linkcode trainLabelCellsReference} \n * on the same `testFeatures` and the corresponding entries of `loadedReferences` and `referenceFeatures`.\n * This should have length equal to that of `loadedReferences`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {IntegratedLabelCellsReference} Object containing the integrated references.\n */\nexport function integrateLabelCellsReferences(testFeatures, loadedReferences, referenceFeatures, trainedReferences, options = {}) {\n    const { numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let interlen_arr;\n    let test_id_arr = [];\n    let test_id_ptr_arr;\n    let ref_id_arr = [];\n    let ref_id_ptr_arr;\n    let loaded_arr;\n    let trained_arr;\n    let output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    // Checking the inputs.\n    let nrefs = loadedReferences.length;\n    if (referenceFeatures.length != nrefs) {\n        throw new Error(\"'loadedReferences' and 'referenceFeatures' should be of the same length\");\n    }\n    if (trainedReferences.length != nrefs) {\n        throw new Error(\"'loadedReferences' and 'trainedReferences' should be of the same length\");\n    }\n    for (var i = 0; i < nrefs; i++) {\n        if (loadedReferences[i].numberOfFeatures() != referenceFeatures[i].length) {\n            throw new Error(\"length of each 'referenceFeatures' should be equal to the number of features in the corresponding 'loadedReferences'\");\n        }\n    }\n\n    try {\n        for (var i = 0; i < nrefs; i++) {\n            const intersection = intersectFeatures(testFeatures, referenceFeatures[i]);\n            test_id_arr.push(utils.wasmifyArray(intersection.test, \"Int32WasmArray\"));\n            ref_id_arr.push(utils.wasmifyArray(intersection.reference, \"Int32WasmArray\"));\n        }\n\n        loaded_arr = utils.createBigUint64WasmArray(nrefs);\n        trained_arr = utils.createBigUint64WasmArray(nrefs);\n        test_id_ptr_arr = utils.createBigUint64WasmArray(nrefs);\n        ref_id_ptr_arr = utils.createBigUint64WasmArray(nrefs);\n        interlen_arr = utils.createInt32WasmArray(nrefs);\n        {\n            let la = loaded_arr.array();\n            let ta = trained_arr.array(); \n            let tia = test_id_ptr_arr.array();\n            let ria = ref_id_ptr_arr.array();\n            let ia = interlen_arr.array();\n            for (var i = 0; i < nrefs; i++) {\n                la[i] = BigInt(loadedReferences[i].reference.$$.ptr);\n                ta[i] = BigInt(trainedReferences[i].reference.$$.ptr);\n                tia[i] = BigInt(test_id_arr[i].offset);\n                ria[i] = BigInt(ref_id_arr[i].offset);\n                ia[i] = test_id_arr[i].length;\n            }\n        }\n\n        output = gc.call(\n            module => module.integrate_singlepp_references(\n                nrefs,\n                interlen_arr.offset,\n                test_id_ptr_arr.offset,\n                ref_id_ptr_arr.offset,\n                loaded_arr.offset,\n                trained_arr.offset,\n                nthreads\n            ),\n            IntegratedLabelCellsReferences,\n            testFeatures.length\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        for (const x of test_id_arr) {\n            utils.free(x);\n        }\n        for (const x of ref_id_arr) {\n            utils.free(x);\n        }\n        utils.free(test_id_ptr_arr);\n        utils.free(ref_id_ptr_arr);\n        utils.free(loaded_arr);\n        utils.free(trained_arr);\n    }\n\n    return output;\n}\n\n/**************************************************\n **************************************************/\n\n/**\n * Wrapper around the integrated cell labelling results on the Wasm heap, typically produced by {@linkcode integrateLabelCells}.\n * @hideconstructor\n */\nclass IntegrateLabelCellsResults {\n    #id\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of labels used in {@linkcode integratedLabelCells}.\n     */\n    numberOfReferences() {\n        return this.#results.num_references();\n    }\n\n    /**\n     * @return {number} Number of cells that were labelled.\n     */\n    numberOfCells() {\n        return this.#results.num_samples();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Int32Array|Int32WasmArray} Array of length equal to the number of cells,\n     * containing the index of the best reference for each cell.\n     */\n    predicted(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.best(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the cell of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n     * If `false`, a Float64WasmArray is returned instead.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * This should have the same length as the {@linkcode IntegrateLabelCellsResults#numberOfReferences numberOfReferences}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores for this cell across all labels.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    scoreForCell(i, options = {}) {\n        let { asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n\n        let tmp;\n        try {\n            if (buffer == null) {\n                tmp = utils.createFloat64WasmArray(this.#results.num_references());\n                buffer = tmp;\n            }\n            this.#results.score_for_sample(i, buffer.offset);\n        } catch (e) {\n            utils.free(tmp);\n            throw e;\n        }\n        return utils.toTypedArray(buffer, tmp == null, asTypedArray);\n    }\n\n    /**\n     * @param {number} i - Index of the reference of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the scores across all cells for this label.\n     */\n    scoreForReference(i, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.score_for_reference(i), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Copying mode, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of cells,\n     * containing the difference in scores between the best and second-best references.\n     */\n    delta(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.delta(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n    }\n}\n\n/**\n * Integrate cell labels across multiple reference datasets.\n *\n * @param {ScranMatrix} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * @param {IntegratedLabelCellsReferences} integrated - An integrated set of reference datasets, typically generated by {@linkcode integrateLabelCellsReferences}.\n * @param {Array} assigned - An array of length equal to the number of references in `integrated`.\n * This should contain the result of classification of `x` with each individual reference via {@linkcode labelCells}.\n * Each element should be a {@linkplain LabelCellsResults} object; or an Array, TypedArray or Int32WasmArray of length equal to the number of cells in `x`.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {IntegrateLabelCellsResults} Integrated labelling results for each cell in `x`.\n */\nexport function integrateLabelCells(x, assigned, integrated, options = {}) {\n    const { numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let nrefs = integrated.numberOfReferences();\n    if (assigned.length != nrefs) {\n        throw new Error(\"length of 'assigned' should be equal to the number of references in 'integrated'\");\n    }\n\n    let output;\n    var matbuf;\n    var tempmat;\n    let assigned_ptrs;\n    let assigned_arrs = new Array(nrefs);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let target;\n        if (x instanceof ScranMatrix) {\n            target = x.matrix;\n        } else if (x instanceof wa.Float64WasmArray) {\n            // Back-compatibility only.\n            tempmat = init.initializeDenseMatrixFromDenseArray(numberOfFeatures, numberOfCells, x, { sparse: false, forceInteger: false });\n            target = tempmat.matrix;\n        } else {\n            throw new Error(\"unknown type for 'x'\");\n        }\n        if (target.nrow() != integrated.expectedNumberOfFeatures) {\n            throw new Error(\"number of rows in 'x' should be equal to length of 'features' used to build 'reference'\");\n        }\n\n        assigned_ptrs = utils.createBigUint64WasmArray(nrefs);\n        let assigned_ptr_arr = assigned_ptrs.array();\n        for (var i = 0; i < assigned.length; i++) {\n            let current = assigned[i];\n            if (current instanceof LabelCellsResults) {\n                current = current.predicted({ copy: \"view\" });\n            }\n            if (current.length != x.numberOfColumns()) {\n                throw new Error(\"length of each element in 'assigned' should be equal to number of columns in 'x'\");\n            }\n            assigned_arrs[i] = utils.wasmifyArray(current, \"Int32WasmArray\");\n            assigned_ptr_arr[i] = BigInt(assigned_arrs[i].offset);\n        }\n    \n        output = gc.call(\n            module => module.integrate_singlepp(\n                target,\n                assigned_ptrs.offset,\n                integrated.integrated,\n                quantile,\n                nthreads\n            ),\n            IntegrateLabelCellsResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally{\n        utils.free(assigned_ptrs);\n        for (const x of assigned_arrs) {\n            utils.free(x);\n        }\n        utils.free(matbuf);\n        utils.free(tempmat);\n    }\n\n    return output;\n}\n","/**\n * Reindex the gene sets for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to convert the **gesel** gene IDs to indices within that universe.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and should be an array containing the corresponding **gesel** gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * @param {Array} genesForSets - Array of length equal to the number of reference gene sets.\n * Each entry corresponds to a set and is an array containing **gesel** gene IDs for all genes in that set.\n * This is typically obtained from {@linkcode fetchGenesForAllSets}.\n *\n * @return {Array} Array of length equal to `genesForSets`. \n * Each entry corresponds to a reference gene set and is a Uint32Array where the elements are indices into `geneMapping`, specifying the genes in the user's universe that belong to that set.\n * If a gene in `geneMapping` maps to multiple **gesel** IDs, it is considered to belong to all sets containing any of its mapped **gesel** gene IDs.\n */\nexport function reindexGenesForAllSets(geneMapping, genesForSets) {\n    let reverse_mapping = new Map;\n    for (var i = 0; i < geneMapping.length; i++) {\n        for (const gesel_gene of geneMapping[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found == \"undefined\") {\n                found = new Set;\n                reverse_mapping.set(gesel_gene, found);\n            }\n            found.add(i);\n        }\n    }\n\n    // Converting everything to an array for easier iteration. \n    for (const [k, v] of reverse_mapping) {\n        reverse_mapping[k] = new Uint32Array(v);\n    }\n\n    let new_sets = new Array(genesForSets.length);\n    for (var i = 0; i < genesForSets.length; i++) {\n        let subset = new Set;\n        for (const gesel_gene of genesForSets[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found !== \"undefined\") {\n                for (const gene of found) {\n                    subset.add(gene);\n                }\n            }\n        }\n        new_sets[i] = (new Uint32Array(subset)).sort();\n    }\n\n    return new_sets;\n}\n\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set-to-gene mappings if they are not already available.\n * If `false`, `null` is returned if the set-to-gene mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of sets for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllSets} and is an array of integers containing the IDs for all genes belonging to that set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If the set-to-gene mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchGenesForAllSets(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_set2gene.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full set-to-gene information for species '\" + species + \"'\");\n    }\n\n    var set_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = set_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import { fetchAllGenes } from \"./fetchAllGenes.js\";\n\nvar by_symbol = new Map;\nvar by_symbol_lower = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} type - Type of the identifier to use as the key of the map, e.g., `\"ensembl\"`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.lowerCase=false] - Whether to use lower-case keys in the map.\n *\n * @return {Map} Map where each key is a string containing a (possibly lower-cased) identifier of the specified `type` and each value is an array.\n * Each array contains the **gesel** gene IDs associated with the `type` identifier, see {@linkcode fetchAllGenes} for ore details.\n *\n * @async\n */\nexport async function mapGenesByIdentifier(species, type, { lowerCase = false } = {}) {\n    let host = (lowerCase ? by_symbol_lower : by_symbol);\n\n    let sfound = host.get(species);\n    if (typeof sfound === \"undefined\") {\n        sfound = new Map;\n        host.set(species, sfound);\n    }\n\n    let tfound = sfound.get(type);\n    if (typeof tfound === \"undefined\") {\n        tfound = new Map;\n        sfound.set(type, tfound);\n\n        let _genes = (await fetchAllGenes(species, { types: [ type ] })).get(type);\n        for (var i = 0; i < _genes.length; i++) {\n            for (let y of _genes[i]) {\n                if (lowerCase) {\n                    y = y.toLowerCase();\n                }\n\n                let current = tfound.get(y);\n                if (typeof current !== \"undefined\") {\n                    current.add(i);\n                } else {\n                    tfound.set(y, new Set([i]));\n                }\n            }\n        }\n\n        for (const [key, val] of tfound) {\n            tfound.set(key, Array.from(val));\n        }\n    }\n\n    return tfound;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`groupedSizeFactors`](https://kanaverse.github.io/scran.js/global.html#groupedSizeFactors) \n * and [`normalizeCounts`](https://kanaverse.github.io/scran.js/global.html#normalizeCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"ADT\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized ADT values,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the ADT-derived size factor for each cell in the (QC-filtered) dataset.\n     * This is available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        return this.#cache.sf_buffer;\n    }\n\n    /**\n     * @return {object} Object containing the parameters,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n        var raw_sf = this.#cache.raw_sf_buffer;\n        if (raw_sf.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        var block = this.#filter.fetchFilteredBlock();\n        let buffer = utils.allocateCachedArray(raw_sf.length, \"Float64Array\", this.#cache, \"sf_buffer\");\n        scran.centerSizeFactors(raw_sf, { block: block, buffer: buffer });\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.normalizeCounts(mat, { sizeFactors: buffer, allowZeros: true });\n        return;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode AdtNormalizationState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            remove_bias: true\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} [parameters.remove_bias] - Whether to remove composition bias between cell subpopulations via the CLRm1 method.\n     * Users can set this to `false` to speed up the compute, at the cost of retaining biases in downstream steps.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, AdtNormalizationState.defaults());\n        this.changed = false;\n\n        if (this.#qc.changed || this.#filter.changed || parameters.remove_bias !== this.#parameters.remove_bias) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n                if (parameters.remove_bias) {\n                    this.#cache.raw_sf_buffer = scran.computeClrm1Factors(mat);\n                } else {\n                    this.#cache.raw_sf_buffer = nutils.subsetSums(this.#qc, this.#filter, mat);\n                }\n\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\n\nexport function binarySearch(query, vector) {\n    let left = 0;\n    let right = vector.length;\n\n    while (left < right) {\n        let mid = Math.trunc((left + right) / 2);\n        if (vector[mid] < query) {\n            left = mid + 1;\n        } else if (vector[mid] > query) {\n            right = mid;\n        } else {\n            return mid;\n        }\n    }\n\n    return left;\n}\n\nasync function fetchSetsByToken(species, token, file, all_ranges, all_ordered, all_cache) {\n    let actual_file = species + \"_\" + file;\n\n    let cached = all_cache.get(species);\n    if (typeof cached === \"undefined\") {\n        const { ranges, order } = await utils.retrieveNamedRanges(actual_file);\n        all_ranges.set(species, ranges);\n        all_ordered.set(species, order);\n        cached = new Map;\n        all_cache.set(species, cached);\n    }\n\n    if (token == null) {\n        return;\n    }\n\n    let tfound = cached.get(token);\n    if (typeof tfound !== \"undefined\") {\n        return tfound;\n    }\n\n    let ranges = all_ranges.get(species);\n    let output;\n    if (token.includes(\"*\") || token.includes(\"?\")) {\n        let ordered = all_ordered.get(species);\n\n        // Wildcard handling.\n        let initstub = token.replace(/[*?].*/, \"\")\n        let pos = (initstub == \"\" ? 0 : binarySearch(initstub, ordered));\n        let regex = new RegExp(token.replace(/[*]/g, \".*\").replace(/[?]/g, \".\"));\n\n        let collected = [];\n        let to_cache = [];\n        let union = new Set;\n\n        while (pos < ordered.length) {\n            let candidate = ordered[pos];\n            if (initstub != \"\" && !candidate.startsWith(initstub)) {\n                break;\n            }\n\n            let cfound = cached.get(candidate);\n            if (typeof cfound === \"undefined\") {\n                let rr = ranges.get(candidate);\n                collected.push(utils.retrieveBytes(actual_file, rr[0], rr[1]).then(utils.convertToUint32Array));\n                to_cache.push(candidate);\n            } else {\n                for (const y of cfound) {\n                    union.add(y);\n                }\n            }\n\n            pos++;\n        }\n\n        let resolved = await Promise.all(collected);\n        for (var i = 0; i < resolved.length; i++) {\n            let x = resolved[i];\n            cached.set(to_cache[i], x);\n            for (const y of x) {\n                union.add(y);\n            }\n        }\n\n        output = new Uint32Array(union);\n\n    } else {\n        // Direct handling.\n        let rr = ranges.get(token);\n        if (typeof rr === \"undefined\") {\n            return new Uint32Array;\n        }\n        let text = await utils.retrieveBytes(actual_file, rr[0], rr[1]);\n        output = utils.convertToUint32Array(text);\n    }\n\n    cached.set(token, output);\n    return output;\n}\n\nconst n_cache = new Map;\nconst n_ranges = new Map;\nconst n_ordered = new Map;\n\nasync function fetchSetsByNameToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-names.tsv\", n_ranges, n_ordered, n_cache);\n}\n\nconst d_cache = new Map;\nconst d_ranges = new Map;\nconst d_ordered = new Map;\n\nasync function fetchSetsByDescriptionToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-descriptions.tsv\", d_ranges, d_ordered, d_cache);\n}\n\nexport async function preloadTokens(species, resp, ordered, cache, msg) {\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch full set of \" + msg + \" tokens for species '\" + species + \"'\");\n    }\n\n    let lines = utils.decompressLines(await resp.arrayBuffer());\n    if (lines.length !== ordered.length) {\n        throw new Error(\"mismatch in lengths between token names and set indices for species '\" + species + \"'\");\n    }\n\n    for (var i = 0; i < lines.length; i++) {\n        cache.set(ordered[i], utils.convertToUint32Array(lines[i]));\n    }\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return Preloads the search indices for use in {@linkcode searchSetText}.\n * This performs a one-off download of the indices such that further calls to {@linkcode searchSetText} do not need to perform HTTP range requests.\n */\nexport async function preloadSearchSetText(species) {\n    let full = await Promise.all([ \n        utils.reference_download(species + \"_tokens-names.tsv.gz\"),\n        utils.reference_download(species + \"_tokens-descriptions.tsv.gz\"),\n        fetchSetsByNameToken(species, null),\n        fetchSetsByDescriptionToken(species, null)\n    ]);\n    await preloadTokens(species, full[0], n_ordered.get(species), n_cache.get(species), \"name\");\n    await preloadTokens(species, full[1], d_ordered.get(species), d_cache.get(species), \"description\");\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} query - Query string containing multiple words to search in the names and/or descriptions of each set.\n *\n * Each stretch of alphanumeric characters and dashes is treated as a single word.\n * All other characters are treated as punctuation between words, except for the following wildcards:\n *\n * - `*`: match zero or more alphanumeric or dash characters.\n * - `?`: match exactly one alphanumeric or dash character.\n *\n * A set's name and/or description must contain all words in `query` to be considered a match.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inName=true] - Whether to search the name of the set for matching words.\n * @param {boolean} [options.inDescription=true] - Whether to search the description of the set for matching words.\n *\n * @return {Array} Array of indices of the sets with names and/or descriptions that match `query`.\n * @async\n */\nexport async function searchSetText(species, query, { inName = true, inDescription = true } = {}) {\n    // Tokenizing the query using the same logic as in the feedstock repository,\n    // but preserving our wildcards for special handling later.\n    let processed = query.toLowerCase().replace(/[^a-zA-Z0-9-?*]/g, \" \");\n    let tokens = processed.split(/\\s+/);\n    tokens = tokens.filter(x => x !== \"\" || x !== \"-\");\n\n    let init = [];\n    if (inName) {\n        init.push(fetchSetsByNameToken(species, null));\n    }\n    if (inDescription) {\n        init.push(fetchSetsByDescriptionToken(species, null));\n    }\n    await Promise.all(init); // force initialization of all caches.\n\n    let gathered_names = [];\n    if (inName) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_names.push(fetchSetsByNameToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let gathered_descriptions = [];\n    if (inDescription) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_descriptions.push(fetchSetsByDescriptionToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let resolved_names = await Promise.all(gathered_names);\n    let resolved_descriptions = await Promise.all(gathered_descriptions);\n\n    let gathered = [];\n    for (var i = 0; i < tokens.length; i++) {\n        let n = (inName ? resolved_names[i] : []);\n        let d = (inDescription ? resolved_descriptions[i] : []);\n\n        let combined = new Uint32Array(n.length + d.length);\n        combined.set(n);\n        combined.set(d, n.length);\n        gathered.push(combined);\n    }\n\n    return utils.intersect(gathered);\n}\n","import * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as fac from \"./factorize.js\";\n\n/**\n * Create a blocking factor for a set of contiguous blocks, usually to accompany the output of {@linkcode cbind} on matrices representing different batches.\n * This can be used as the blocking factor in functions such as {@linkcode modelGeneVar} or {@linkcode scoreMarkers}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n *\n * @param {(Array|TypedArray)} ncells - Array of integers specifying the number of cells in each block.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the sum of `ncells`.\n *\n * @return {Int32WasmArray} Array containing the blocking factor.\n * Each value specifies the block of origin for each cell.\n *\n * If `buffer` was supplied, it is used as the return value. \n */\nexport function createBlock(ncells, options = {}) {\n    let { buffer = null, ...other } = options;\n    utils.checkOtherOptions(other);\n    let total = 0;\n    ncells.forEach(x => { total += x; });\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(total);\n            buffer = local_buffer;\n        } else if (buffer.length !== total) {\n            throw new Error(\"'buffer' should have length equal to sum of 'ncells'\");\n        }\n\n        let barr = buffer.array();\n        let sofar = 0;\n        for (var i = 0; i < ncells.length; i++) {\n            let old = sofar;\n            sofar += ncells[i];\n            barr.fill(i, old, sofar);\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ir from \"./IRanges.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * A GRanges object is a collection of genomic ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a sequence name, a start position on that sequence, and a width.\n * Each range may also be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The GRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Constructors of GRanges subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE`, `_bioconductor_SLICE` and `_bioconductor_COMBINE` methods to return an instance of the subclass.\n *\n * @extends Vector\n */\nexport class GRanges extends vec.Vector {\n    static #convertToInt8Array(x) {\n        if (x instanceof Int8Array) {\n            return x;\n        } else {\n            return new Int8Array(x);\n        }\n    }\n\n    static #checkStrandedness(strand) {\n        for (const y of strand) {\n            if (y < -1 || y > 1) {\n                throw new Error(\"'strand' must be -1, 0 or 1\");\n            }\n        }\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {IRanges} ranges - Position and width of the range on its specified sequence.\n     * This should have the same length as `seqnames`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.strand=null] - Array containing the strandedness of each genomic range.\n     * This should be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * If `null`, this is assumed to be 0 for all genomic ranges.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object|Array|Map|List} [options.metadata={}] - Arbitrary metadata, see the {@link Annotated} constructor. \n     */\n    constructor(seqnames, ranges, { strand = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(seqnames.length, { names, elementMetadata, metadata });\n\n        utils.checkStringArray(seqnames, \"seqnames\");\n        this._seqnames = seqnames;\n\n        let n = seqnames.length;\n        if (n !== generics.LENGTH(ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"'seqnames'\");\n        }\n        this._ranges = ranges;\n\n        if (strand !== null) {\n            if (n !== strand.length) {\n                throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n            }\n            strand = GRanges.#convertToInt8Array(strand);\n            GRanges.#checkStrandedness(strand);\n        } else {\n            strand = new Int8Array(n);\n            strand.fill(0);\n        }\n        this._strand = strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each genomic range.\n     */\n    start() {\n        return this._ranges.start();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each genomic range.\n     */\n    end() {\n        return this._ranges.end();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each genomic range.\n     */\n    width() {\n        return this._ranges.width();\n    }\n\n    /**\n     * @return {Array} Array of strings containing the sequence name for each genomic range.\n     */\n    seqnames() {\n        return this._seqnames;\n    }\n\n    /**\n     * @return {IRanges} Start positions and widths for all ranges on their specified sequence names.\n     */\n    ranges() {\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int8Array} Array containing the strandedness for each genomic range - 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     */\n    strand() {\n        return this._strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the sequence names to `seqnames`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setSeqnames(seqnames, { inPlace = false } = {}) {\n        utils.checkNamesArray(seqnames, \"replacement 'seqnames'\", generics.LENGTH(this), \"'LENGTH(<GRanges>)'\");\n        let target = cutils.setterTarget(this, inPlace); \n        target._seqnames = seqnames;\n        return target;\n    }\n\n    $setSeqnames(seqnames) {\n        return this.setSeqnames(seqnames, { inPlace: true });\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the ranges to `ranges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof ir.IRanges)) {\n            throw new Error(\"'ranges' should be an IRanges object\");\n        }\n\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"replacement 'ranges'\", \"'LENGTH(<GRanges>)'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._ranges = ranges;\n        return target;\n    }\n\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the strands to `strand`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStrand(strand, { inPlace = false } = {}) {\n        if (this._strand.length !== strand.length) {\n            throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n        }\n        strand = GRanges.#convertToInt8Array(strand);\n        GRanges.#checkStrandedness(strand);\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._strand = strand;\n        return target;\n    }\n\n    $setStrand(strand) {\n        return this.setStrand(strand, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        let indices = utils.createSequence(generics.LENGTH(this));\n        let by_seqname = generics.SPLIT(indices, this._seqnames);\n        let starts = this.start();\n        let ends = this.end();\n\n        if (restrictToSeqnames !== null && restrictToSeqnames instanceof Array) {\n            restrictToSeqnames = new Set(restrictToSeqnames);\n        }\n        if (restrictToStrand !== null && restrictToStrand instanceof Array) {\n            restrictToStrand = new Set(restrictToStrand);\n        }\n\n        for (const name of Object.keys(by_seqname)) {\n            if (restrictToSeqnames !== null && !restrictToSeqnames.has(name)) {\n                delete by_seqname[name];\n                continue;\n            }\n            let seqname_indices = by_seqname[name];\n            let seqname_strand = generics.SLICE(this._strand, seqname_indices);\n            let by_strand = generics.SPLIT(seqname_indices, seqname_strand);\n\n            for (const str of Object.keys(by_strand)) {\n                if (restrictToStrand !== null && !restrictToStrand.has(Number(str))) {\n                    delete by_strand[str];\n                    continue;\n                }\n                let str_indices = by_strand[str];\n                by_strand[str] = olap.buildIntervalTree(starts, ends, { slice: str_indices });\n            }\n            by_seqname[name] = by_strand;\n        }\n\n        return new GRangesOverlapIndex(by_seqname);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._seqnames.length;\n    }\n\n    _bioconductor_SLICE(i, { allowView = false }) {\n        let output = super._bioconductor_SLICE(i, { allowView });\n        output._seqnames = generics.SLICE(this._seqnames, i, { allowView });\n        output._ranges = generics.SLICE(this._ranges, i, { allowView });\n        output._strand = generics.SLICE(this._strand, i, { allowView });\n        return output;\n    }\n\n    _bioconductor_COMBINE(objects) {\n        let output = super._bioconductor_COMBINE(objects);\n\n        let all_sn = [this._seqnames];\n        let all_rr = [this._ranges];\n        let all_st = [this._strand];\n        for (const x of objects) {\n            all_sn.push(x._seqnames);\n            all_rr.push(x._ranges);\n            all_st.push(x._strand);\n        }\n\n        output._seqnames = generics.COMBINE(all_sn);\n        output._ranges = generics.COMBINE(all_rr);\n        output._strand = generics.COMBINE(all_st);\n        return output;\n    }\n\n    _bioconductor_CLONE({ deepCopy = true }) {\n        let output = super._bioconductor_CLONE({ deepCopy });\n        output._seqnames = cutils.cloneField(this._seqnames, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n        output._strand = cutils.cloneField(this._strand, deepCopy);\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} A zero-length GRanges object.\n     */\n    static empty() {\n        return new GRanges([], ir.IRanges.empty());\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GRanges} objects.\n * This is typically constructed using the {@linkcode GRanges#buildOverlapIndex GRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GRangesOverlapIndex {\n    constructor(index) {\n        this._index = index;\n    }\n\n    /**\n     * @param {GRanges} query - The query object, containing ranges to be overlapped with those in the reference GRanges (that was used to construct this GRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let n = generics.LENGTH(query);\n        let results = new Array(n);\n        let starts = query.start();\n        let ends = query.end();\n\n        for (var i = 0; i < n; i++) {\n            results[i] = [];\n            let my_results = results[i];\n\n            let name = query._seqnames[i];\n            if (!(name in this._index)) {\n                continue;\n            }\n            let seq_index = this._index[name];\n\n            let strand = query._strand[i];\n            let allowed_strands;\n            if (ignoreStrand || strand == 0) {\n                allowed_strands = Object.keys(seq_index);\n            } else {\n                let sstr = String(strand);\n                if (!(sstr in seq_index)) {\n                    continue;\n                }\n                allowed_strands = [ sstr ];\n            }\n\n            let start = starts[i];\n            let end = ends[i];\n            for (const str of allowed_strands) {\n                let str_results = olap.queryIntervalTree(start, end, seq_index[str]);\n                str_results.forEach(x => my_results.push(x));\n            }\n        }\n\n        return results;\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as wa from \"wasmarrays.js\";\n\n// SOFT-DEPRECATED BEGIN.\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false, compute_auc = true } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = permuter(handle.open(x, { load: true }).values);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (i == \"auc\" && !compute_auc) {\n            continue;\n        }\n\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(rhandle.children)) {\n                current[j] = permuter(rhandle.open(j, { load: true }).values);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\nexport function fillGroupStats(object, i, vals) {\n    object.means(i, { copy: false }).set(vals.means);\n    object.detected(i, { copy: false }).set(vals.detected);\n\n    for (const [s, v] of Object.entries(vals.cohen)) {\n        object.cohensD(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.lfc)) {\n        object.deltaMean(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.delta_detected)) {\n        object.deltaDetected(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    if (\"auc\" in vals) {\n        for (const [s, v] of Object.entries(vals.auc)) {\n            object.auc(i, { summary: summaries2int[s], copy: false }).set(v);\n        }\n    }\n}\n\nexport function formatMarkerResults(results, group, rankEffect) {\n    if (!rankEffect || rankEffect === undefined) {\n        rankEffect = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let increasing = false;\n        let summary = \"mean\";\n        if (rankEffect.match(/-min$/)) {\n            summary = \"min\";\n        } else if (rankEffect.match(/-min-rank$/)) {\n            summary = \"min-rank\";\n            increasing = true;\n        }\n\n        let ranking;\n        if (rankEffect.match(/^cohen-/)) {\n            ranking = results.cohensD(group, { summary: summary, copy: false });\n        } else if (rankEffect.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: summary, copy: false });\n        } else if (rankEffect.match(/^lfc-/)) {\n            ranking = results.deltaMean(group, { summary: summary, copy: false });\n        } else if (rankEffect.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: summary, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rankEffect + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.mean(group, { copy: false }));\n    var stat_lfc = reorder(results.deltaMean(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n// SOFT-DEPRECATED END.\n\nexport function locateVersusCache(left, right, cache) {\n    let left_small = left < right;\n\n    let bigg = (left_small ? right : left);\n    if (!(bigg in cache)) {\n        cache[bigg] = {};\n    }\n    let biggversus = cache[bigg];\n\n    let smal = (left_small ? left : right); \n    let rerun = !(smal in biggversus);\n    if (rerun) {\n        biggversus[smal] = {};\n    }\n\n    return { \n        cached: biggversus[smal],\n        run: rerun,\n        left_small: left_small\n    };\n}\n\nexport function freeVersusResults(cache) {\n    if (cache) {\n        for (const v of Object.values(cache)) {\n            for (const v2 of Object.values(v)) {\n                for (const m of Object.values(v2)) {\n                    scran.free(m);\n                }\n            }\n        }\n        for (const k of Object.keys(cache)) {\n            delete cache[k];\n        }\n    }\n}\n\nexport function computeVersusResults(matrices, clusters, block, keep, cache, lfc_threshold, compute_auc) {\n    let new_block = null;\n    if (block !== null) {\n        new_block = wa.subsetWasmArray(block, keep);\n        scran.dropUnusedLevels(new_block);\n    }\n\n    for (const modality of matrices.available()) {\n        let modmat = matrices.get(modality);\n        let sub;\n        try {\n            sub = scran.subsetColumns(modmat, keep);\n            cache[modality] = scran.scoreMarkers(sub, clusters, { block: new_block, threshold: lfc_threshold, computeAuc: compute_auc });\n        } finally {\n            scran.free(sub);\n        }\n    }\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute size factors to remove composition biases from ADT data using the [CLRm1 strategy](https://github.com/libscran/clrm1).\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {object} [options={}] - Optional parameters.\n * If `null`, this is automatically set to the row means of `x`.\n * @param {?Float64WasmArray} [options.buffer=null] - Output buffer for the size factors.\n * This should have length equal to the number of columns in `x`.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64Array|Float64WasmArray} Array of length equal to the number of columns in `x`, containing the CLRm1 size factors for all cells.\n * Note that the factors are not centered and should be passed to {@linkcode centerSizeFactors} before calling {@linkcode normalizeCounts}.\n * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n */\nexport function computeClrm1Factors(x, options = {}) {\n    let { asTypedArray = true, buffer = null, priorCount = 10, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n    var local_buffer = null;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (!(buffer instanceof wa.Float64WasmArray)) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' must be equal to the number of columns in 'x'\");\n        }\n\n        wasm.call(module => module.compute_clrm1_factors(x.matrix, buffer.offset, nthreads));\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n    \n    return utils.toTypedArray(buffer, local_buffer == null, asTypedArray);\n}\n","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [18,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [46,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [62,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [178, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [257, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [282, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","import { gene_download, decompressLines } from \"./utils.js\";\n\nvar _genes = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Array} [options.types=null] - Array of strings specifying the identifier types to be retrieved.\n * The exact choice of strings depends on how the references were constructed.\n * If `null`, it defaults to an array containing `\"symbol\"`, `\"entrez\"` and `\"ensembl\"`.\n *\n * @return {Map} Object where each key is named after an identifier type in `types`.\n * Each value is an array where each element corresponds to a gene and is itself an array of strings containing all identifiers of the current type for that gene.\n *\n * The arrays for different identifier types are all of the same length, and corresponding elements across these arrays describe the same gene.\n * **gesel**'s identifier for each gene (i.e., the \"gene ID\") is defined as the index of that gene in any of these arrays.\n *\n * @async\n */\nexport async function fetchAllGenes(species, { types = null } = {}) {\n    if (types == null) {\n        types = [ \"symbol\", \"entrez\", \"ensembl\" ];\n    }\n\n    let target = _genes.get(species);\n    if (typeof target == \"undefined\") {\n        target = new Map;\n        _genes.set(species, target);\n    }\n\n    let output = new Map;\n    let promises = [];\n    let processing = [];\n\n    for (const t of types) {\n        let found = target.get(t);\n        if (typeof found == \"undefined\") {\n            promises.push(gene_download(species + \"_\" + t + \".tsv.gz\"));\n            processing.push(t);\n        } else {\n            output.set(t, found);\n        }\n    }\n\n    if (promises.length > 0) {\n        let resolved = await Promise.all(promises);\n        for (var i = 0; i < resolved.length; i++) {\n            let res = resolved[i];\n            if (!res.ok) {\n                throw \"failed to fetch symbol information for genes\";\n            }\n            var buffer = await res.arrayBuffer();\n\n            let gene_data = decompressLines(buffer);\n            let processed = [];\n            for (const x of gene_data) {\n                if (x == \"\") {\n                    processed.push([]);\n                } else {\n                    processed.push(x.split(\"\\t\"));\n                }\n            }\n\n            let t = processing[i];\n            target.set(t, processed);\n            output.set(t, processed);\n        }\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as wa from \"wasmarrays.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_qc_module from \"./rna_quality_control.js\";\nimport * as adt_qc_module from \"./adt_quality_control.js\";\nimport * as crispr_qc_module from \"./crispr_quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction find_usable_upstream_states(qc_states, in_use) {\n    let tmp = utils.findValidUpstreamStates(qc_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (in_use[k]) {\n            to_use.push(qc_states[k]);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells,\n * based on metrics and thresholds computed in {@linkplain RnaQualityControlState} and friends.\n * It wraps the [`filterCells`](https://kanaverse.github.io/scran.js/global.html#filterCells) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * For multi-modal datasets, this can combine quality calls from all valid modalities; \n * a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        if (!(qc_states.RNA instanceof rna_qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc_states.RNA' should be a RnaQualityControlState object\");\n        }\n        if (!(qc_states.ADT instanceof adt_qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc_states.ADT' should be a AdtQualityControlState object\");\n        }\n        if (!(qc_states.CRISPR instanceof crispr_qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc_states.CRISPR' should be a CrisprQualityControlState object\");\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.keep_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing the filtered and normalized matrices for all modalities,\n     * available after running {@linkcode CellFilteringState#compute compute}.\n     */\n    fetchFilteredMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Int32WasmArray} Array of length equal to the number of cells after filtering, \n     * containing the block assignment for each cell.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    /**\n     * @return {?Uint8WasmArray} Array of length equal to the number of cells in the dataset,\n     * indicating whether each cell should be kept after filtering.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null`, if no upstream filtering steps were performed.\n     */\n    fetchKeep() {\n        if (\"keep_buffer\" in this.#cache) {\n            return this.#cache.keep_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n\n        let inputs = this.#inputs.fetchCountMatrix();\n        for (const a of inputs.available()) {\n            let src = inputs.get(a);\n\n            let sub;\n            if (\"keep_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.keep_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"keep_buffer\" in this.#cache) {\n                // Filtering on the block. Might as well force a load of the\n                // matrix, it'll be needed once we have the blocks anyway.\n                let filtered_ncols = this.fetchFilteredMatrix().numberOfColumns();\n                let bcache = utils.allocateCachedArray(filtered_ncols, \"Int32Array\", this.#cache, \"block_buffer\");\n                wa.subsetWasmArray(block, this.#cache.keep_buffer, { buffer: bcache, filter: false });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode CellFilteringState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            use_rna: true,\n            use_adt: true,\n            use_crispr: true\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} [parameters.use_rna] - Whether to use the RNA-derived QC metrics for filtering.\n     * @param {boolean} [parameters.use_adt] - Whether to use the ADT-derived QC metrics for filtering.\n     * @param {boolean} [parameters.use_crispr] - Whether to use the CRISPR-derived QC metrics for filtering.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, CellFilteringState.defaults());\n        this.changed = false;\n\n        if (this.#inputs.changed ||\n            this.#parameters.use_rna !== parameters.use_rna || \n            this.#parameters.use_adt !== parameters.use_adt || \n            this.#parameters.use_crispr !== parameters.use_crispr)\n        {\n            this.changed = true;\n        }\n\n        let to_use = find_usable_upstream_states(this.#qc_states, { RNA: parameters.use_rna, ADT: parameters.use_adt, CRISPR: parameters.use_crispr });\n        if (!this.changed) {\n            for (const u of to_use) {\n                if (u.changed) {\n                    this.changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.changed) {\n            if (to_use.length > 0) {\n                let first = to_use[0].fetchKeep();\n\n                if (to_use.length > 1) {\n                    // Lack of a keep signal any modality causes the cell to be removed. \n                    let keep_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"keep_buffer\");\n                    keep_buffer.fill(1);\n\n                    let keep_arr = keep_buffer.array();\n                    for (const u of to_use) {\n                        u.fetchKeep().forEach((y, i) => { keep_arr[i] = keep_arr[i] && y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    utils.freeCache(this.#cache.keep_buffer);\n                    this.#cache.keep_buffer = first.view();\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.keep_buffer);\n                delete this.#cache.keep_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n\n        this.#parameters = parameters;\n    }\n\n    /**\n     * Apply the same filter to an array of data for each cell in the unfiltered dataset.\n     * This is typically used to filter the columns of {@linkcode InputsState#fetchCellAnnotations InputsState.fetchCellAnnotations} for downstream use.\n     * (See the {@linkcode CellFilteringState#undoFilter undoFilter} method for the reverse operation.)\n     * Any calls to this method should be done after running {@linkcode CellFilteringState#compute compute}.\n     *\n     * @param {Array|TypedArray} Any array-like object of length equal to the number of cells in the unfiltered dataset.\n     * \n     * @return {Array|TypedArray} An array-like object of the same type as `x`,\n     * where all elements corresponding to high-quality cells have been retained.\n     * This will have number of columns equal to that of {@linkcode CellFilteringState#fetchFilteredMatrix fetchFilteredMatrix}.\n     */\n    applyFilter(x) {\n        let expect_len = this.#inputs.fetchCountMatrix().numberOfColumns();\n        if (expect_len != x.length) {\n            throw new Error(\"length of 'x' should be equal to the number of cells in the unfiltered dataset\");\n        }\n\n        if (!(\"keep_buffer\" in this.#cache)) {\n            return x.slice(); // making a copy.\n        } else {\n            let keep = this.#cache.keep_buffer.array();\n            return x.filter((y, i) => keep[i]);\n        }\n    }\n\n    /**\n     * Undo the effect of filtering on an array of column indices on the filtered matrix, so that they now refer to column indices on the unfiltered matrix.\n     * This is primarily useful for adjusting indices from downstream steps like {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices}.\n     * The output of this function can be combined with {@linkcode InputsState#undoSubset InputsState.undoSubset} to obtain column indices on the original matrix,\n     * which can be used in other contexts, e.g., like {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the unfiltered matrix.\n     */\n    undoFilter(indices) {\n        let max_index = this.fetchFilteredMatrix().numberOfColumns();\n        for (const x of indices) {\n            if (x < 0 || x >= max_index) {\n                throw new Error(\"entries of 'indices' should be less than the number of cells in the filtered dataset\");\n            }\n        }\n\n        if (!('keep_buffer' in this.#cache)) {\n            return;\n        }\n\n        let keep = [];\n        this.#cache.keep_buffer.forEach((x, i) => {\n            if (x !== 0) {\n                keep.push(i);\n            }\n        });\n\n        indices.forEach((x, i) => {\n            indices[i] = keep[x];\n        });\n    }\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\nimport { fetchAllCollections } from \"./fetchAllCollections.js\";\n\nvar _sets = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set details if they are not already available.\n * If `false`, `null` is returned if the set details have not already been loaded into memory.\n *\n * @return {Array} Array of objects where each entry corresponds to a set and contains the details about that set.\n * Each object can be expected to contain:\n * \n * - `name`, the name of the set.\n * - `description`, the description of the set.\n * - `size`, the number of genes in the set.\n * - `collection`, the index of the collection containing the set.\n * - `number`, the number of the set within the collection.\n *\n * In a **gesel** context, the identifier for a set (i.e., the \"set ID\") is defined as the index of the set in this array.\n *\n * If the set details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllSets(species, { download = true } = {}) {\n    let found = _sets.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    found = [];\n    _sets.set(species, found);\n\n    var [ sres, _collections ] = await Promise.all([reference_download(species + \"_sets.tsv.gz\"), fetchAllCollections(species)]);\n    if (!sres.ok) {\n        throw new Error(\"failed to fetch set information for species '\" + species + \"'\");\n    }\n    var set_data = decompressLines(await sres.arrayBuffer());\n\n    for (var i = 0; i < set_data.length; i++) {\n        let x = set_data[i];\n        var details = x.split(\"\\t\");\n        found.push({\n            \"name\": details[0],\n            \"description\": details[1],\n            \"size\": Number(details[2])\n        });\n    }\n\n    let start = 0;\n    for (var i = 0; i < _collections.length; i++) {\n        let len = _collections[i].size;\n\n        // For easier access going the other way.\n        for (var j = 0; j < len; j++) {\n            found[j + start].collection = i;\n            found[j + start].number = j;\n        }\n\n        start += len;\n    }\n\n    return found;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_pca_module from \"./rna_pca.js\";\nimport * as adt_pca_module from \"./adt_pca.js\";\nimport * as crispr_pca_module from \"./crispr_pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\nfunction find_nonzero_upstream_states(pca_states, weights) {\n    let tmp = utils.findValidUpstreamStates(pca_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (weights[k] > 0) {\n            to_use.push(k);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the [`scaleByNeighbors`](https://kanaverse.github.io/scran.js/global.html#scaleByNeighbors) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        if (!(pca_states.RNA instanceof rna_pca_module.RnaPcaState)) {\n            throw new Error(\"'pca_states.RNA' should be an RnaPcaState object\");\n        }\n        if (!(pca_states.ADT instanceof adt_pca_module.AdtPcaState)) {\n            throw new Error(\"'pca_states.ADT' should be an AdtPcaState object\");\n        }\n        if (!(pca_states.CRISPR instanceof crispr_pca_module.CrisprPcaState)) {\n            throw new Error(\"'pca_states.CRISPR' should be an CrisprPcaState object\");\n        }\n        this.#pca_states = pca_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the combined embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchCombined() {\n        return this.#cache.combined_buffer;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfCells() {\n        return this.#cache.num_cells;\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#cache.total_dims;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode CombineEmbeddingsState#compute compute} for details.\n     */\n    static defaults() {\n        return { \n            rna_weight: 1,\n            adt_weight: 1,\n            crispr_weight: 0,\n            approximate: true\n        };\n    }\n\n    static #createPcsView(cache, upstream) {\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.rna_weight] - Relative weight of the RNA embeddings.\n     * @param {number} [parameters.adt_weight] - Relative weight of the ADT embeddings.\n     * @param {number} [parameters.crispr_weight] - Relative weight of the CRISPR embeddings.\n     * @param {boolean} [parameters.approximate] - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, CombineEmbeddingsState.defaults());\n        this.changed = false;\n\n        for (const v of Object.values(this.#pca_states)) {\n            if (v.changed) {\n                this.changed = true;\n                break;\n            }\n        }\n\n        if (parameters.approximate !== this.#parameters.approximate) {\n            this.#parameters.approximate = parameters.approximate;\n            this.changed = true;\n        }\n\n        if (parameters.rna_weight !== this.#parameters.rna_weight ||\n            parameters.adt_weight !== this.#parameters.adt_weight ||\n            parameters.crispr_weight !== this.#parameters.crispr_weight)\n        {\n            this.#parameters.rna_weight = parameters.rna_weight;\n            this.#parameters.adt_weight = parameters.adt_weight;\n            this.#parameters.crispr_weight = parameters.crispr_weight;\n            this.changed = true;\n        }\n\n        if (this.changed) { \n            const weights = { RNA: parameters.rna_weight, ADT: parameters.adt_weight, CRISPR: parameters.crispr_weight };\n            let to_use = find_nonzero_upstream_states(this.#pca_states, weights);\n\n            if (to_use.length > 1) {\n                let weight_arr = to_use.map(x => weights[x]);\n                let collected = [];\n                let total = 0;\n                let ncells = null;\n\n                for (const k of to_use) {\n                    let curpcs = this.#pca_states[k].fetchPCs();\n                    collected.push(curpcs.principalComponents({ copy: \"view\" }));\n                    if (ncells == null) {\n                        ncells = curpcs.numberOfCells();\n                    } else if (ncells !== curpcs.numberOfCells()) {\n                        throw new Error(\"number of cells should be consistent across all embeddings\");\n                    }\n                    total += curpcs.numberOfPCs();\n                }\n\n                let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: parameters.approximate });\n                this.#cache.num_cells = ncells;\n                this.#cache.total_dims = total;\n\n            } else {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let upstream = this.#pca_states[to_use[0]].fetchPCs();\n\n                utils.freeCache(this.#cache.combined_buffer);\n                this.#cache.combined_buffer = upstream.principalComponents({ copy: \"view\" }).view();\n                this.#cache.num_cells = upstream.numberOfCells();\n                this.#cache.total_dims = upstream.numberOfPCs();\n            }\n        }\n\n        return;\n    }\n}\n","/**\n * Webpack (or something in kana's build system) specifically recognizes the\n * hard-coded path in this 'new Worker(new URL(...))' pattern. This is why we\n * have hard-coded creators for the workers rather than allowing callers to\n * pass in the URL as a variable, as that doesn't pack the worker's JS.\n */\n\nexport function createTsneWorker() {\n    return new Worker(new URL(\"../tsne.worker.js\", import.meta.url), { type: \"module\" });\n}\n\nexport function createUmapWorker() {\n    return new Worker(new URL(\"../umap.worker.js\", import.meta.url), { type: \"module\" });\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPcaResults } from \"./runPca.js\";\n\n/** \n * Wrapper for the neighbor search index on the Wasm heap, typically produced by {@linkcode buildNeighborSearchIndex}.\n * @hideconstructor\n */\nexport class BuildNeighborSearchIndexResults {\n    #id;\n    #index; \n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#index = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the index.\n     */\n    numberOfCells() {\n        return this.#index.num_obs();\n    }\n\n    /**\n     * @return {number} Number of dimensions in the index.\n     */\n    numberOfDims() {\n        return this.#index.num_dim();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#index !== null) {\n            gc.release(this.#id);\n            this.#index = null;\n        }\n        return;\n    }\n\n    // Internal only, not documented.\n    get index() {\n        return this.#index;\n    }\n}\n\n/**\n * Build the nearest neighbor search index.\n *\n * @param {(RunPcaResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPcaResults} input, we extract the principal components.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {boolean} [options.approximate=true] - Whether to build an index for an approximate neighbor search.\n *\n * @return {BuildNeighborSearchIndexResults} Index object to use for neighbor searches.\n */\nexport function buildNeighborSearchIndex(x, options = {}) {\n    let { numberOfDims = null, numberOfCells = null, approximate = true, ...others } = options;\n    utils.checkOtherOptions(others);\n    var buffer;\n    var output;\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPcaResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.build_neighbor_index(pptr, numberOfDims, numberOfCells, approximate),\n            BuildNeighborSearchIndexResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/** \n * Wrapper for the neighbor search results on the Wasm heap, typically produced by {@linkcode findNearestNeighbors}.\n * @hideconstructor\n */\nexport class FindNearestNeighborsResults {\n    #id;\n    #results;\nu\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.truncate=null] - Maximum number of neighbors to count for each cell.\n     * If `null` or greater than the number of available neighbors, all neighbors are counted.\n     * @return {number} The total number of neighbors across all cells.\n     * This is usually the product of the number of neighbors and the number of cells.\n     */\n    size(options = {}) {\n        const { truncate = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        return this.#results.size(FindNearestNeighborsResults.#numberToTruncate(truncate));\n    }\n\n    /**\n     * @return {number} The number of cells used in the search.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    /**\n     * @return {number} Number of neighbors that were requested in the search.\n     */\n    numberOfNeighbors() {\n        return this.#results.num_neighbors();\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    static #numberToTruncate(truncate) {\n        return (truncate === null ? -1 : truncate);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Int32WasmArray} [options.runs=null] - A Wasm-allocated array of length equal to {@linkcode FindNearestNeighborsResults#numberOfCells numberOfCells},\n     * to be used to store the number of neighbors per cell.\n     * @param {?Int32WasmArray} [options.indices=null] - A Wasm-allocated array of length equal to {@linkcode FindNearestNeighborsResults#size size},\n     * to be used to store the indices of the neighbors of each cell.\n     * @param {?Float64WasmArray} [options.distances=null] - A Wasm-allocated array of length equal to {@linkcode FindNearestNeighborsResults#size size},\n     * to be used to store the distances to the neighbors of each cell.\n     * @param {?number} [options.truncate=null] - Maximum number of nearest neighbors to serialize for each cell.\n     * If `null` or greater than the number of available neighbors, all neighbors are used.\n     *\n     * @return {object} \n     * An object is returned with the `runs`, `indices` and `distances` keys, each with an appropriate TypedArray as the value.\n     *\n     * If all of the arguments are non-`null`, the TypedArrays in the returned object are views on the corresponding input WasmArrays.\n     * Note that these views may be invalidated on the next allocation on the Wasm heap.\n     *\n     * If only some of the arguments are non-`null`, an error is raised.\n     */\n    serialize(options = {}) {\n        const { runs = null, indices = null, distances = null, truncate = null, ...others } = options;\n        utils.checkOtherOptions(others);\n\n        var copy = (runs === null) + (indices === null) + (distances === null);\n        if (copy != 3 && copy != 0) {\n            throw new Error(\"either all or none of 'runs', 'indices' and 'distances' can be 'null'\");\n        }\n\n        let nkeep = FindNearestNeighborsResults.#numberToTruncate(truncate);\n        var output;\n\n        if (copy === 3) {\n            var run_data;\n            var ind_data;\n            var dist_data;\n            \n            try {\n                run_data = utils.createInt32WasmArray(this.numberOfCells());\n                let s = this.#results.size(nkeep);\n                ind_data = utils.createInt32WasmArray(s);\n                dist_data = utils.createFloat64WasmArray(s);\n                this.#results.serialize(run_data.offset, ind_data.offset, dist_data.offset, nkeep);\n\n                output = { \n                    \"runs\": run_data.slice(), \n                    \"indices\": ind_data.slice(), \n                    \"distances\": dist_data.slice() \n                };\n            } finally {\n                utils.free(run_data);\n                utils.free(ind_data);\n                utils.free(dist_data);\n            }\n\n        } else {\n            this.#results.serialize(runs.offset, indices.offset, distances.offset, nkeep);\n            output = {\n                \"runs\": runs.array(),\n                \"indices\": indices.array(),\n                \"distances\": distances.array()\n            };\n        }\n\n        return output;\n    }\n\n    /**\n     * @param {Int32WasmArray|Array|TypedArray} runs An array of length equal to {@linkcode FindNearestNeighborsResults#numberOfCells numberOfCells},\n     * containing the number of neighbors per cell.\n     * @param {Int32WasmArray|Array|TypedArray} indices An array of length equal to {@linkcode FindNearestNeighborsResults#size size},\n     * containing the indices of the neighbors of each cell.\n     * @param {Float64WasmArray|Array|TypedArray} indices An array of length equal to {@linkcode FindNearestNeighborsResults#size size},\n     * containing the distances to the neighbors of each cell.\n     *\n     * @return {FindNearestNeighborsResults} Object containing the unserialized search results.\n     */\n    static unserialize(runs, indices, distances) {\n        var output;\n        var run_data;\n        var ind_data;\n        var dist_data;\n\n        try {\n            run_data = utils.wasmifyArray(runs, \"Int32WasmArray\");\n            ind_data = utils.wasmifyArray(indices, \"Int32WasmArray\");\n            dist_data = utils.wasmifyArray(distances, \"Float64WasmArray\");\n            output = gc.call(\n                module => new module.NeighborResults(runs.length, run_data.offset, ind_data.offset, dist_data.offset),\n                FindNearestNeighborsResults\n            );\n\n        } catch (e) {\n            utils.free(output);\n            throw e;\n\n        } finally { \n            utils.free(run_data);\n            utils.free(ind_data);\n            utils.free(dist_data);\n        }\n\n        return output;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Find the nearest neighbors for each cell.\n *\n * @param {NeighborSearchIndex} x The neighbor search index built by {@linkcode buildNeighborSearchIndex}.\n * @param {number} k Number of neighbors to find.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {FindNearestNeighborsResults} Object containing the search results.\n */\nexport function findNearestNeighbors(x, k, options = {}) {\n    const { numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.find_nearest_neighbors(x.index, k, nthreads),\n        FindNearestNeighborsResults\n    );\n}\n\n/**\n * Truncate existing neighbor search results to the `k` nearest neighbors for each cell.\n * This is exactly or approximately equal to calling {@linkcode findNearestNeighbors} with the new `k`,\n * depending on whether `approximate = false` or `approximate = true` was used to build the search index, respectively.\n *\n * @param {FindNearestNeighborsResults} x Existing neighbor search results from {@linkcode findNearestNeighbors}.\n * @param {number} k Number of neighbors to retain.\n * If this is larger than the number of available neighbors, all neighbors are retained.\n *\n * @return {FindNearestNeighborsResults} Object containing the truncated search results.\n */\nexport function truncateNearestNeighbors(x, k) {\n    return gc.call(\n        module => module.truncate_nearest_neighbors(x.results, k),\n        FindNearestNeighborsResults\n    );\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\n\nfunction create_solo_default_object(value, modality) {\n    let output = {};\n    output[modality] = value;\n    return output;\n}\n\nexport function reportFeatures(rawFeatures, typeField) {\n    if (rawFeatures.hasColumn(typeField)) {\n        let by_type = bioc.presplitFactor(rawFeatures.column(typeField));\n        let copy = rawFeatures.removeColumn(typeField);\n        return bioc.SPLIT(copy, by_type);\n    } else {\n        return create_solo_default_object(rawFeatures, \"\");\n    }\n}\n\nfunction is_subset_noop(indices, full_length) {\n    if (indices.length != full_length) {\n        return false;\n    }\n    for (var i = 0; i < full_length; i++) {\n        if (i !== indices[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction renameByModality(input, indexToNames, featureTypeMapping) {\n    let output = {};\n    for (let [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null) {\n            if (typeof v !== \"string\") {\n                if (v < indexToNames.length) {\n                    v = indexToNames[v];\n                } else {\n                    continue;\n                }\n            }\n            if (v in input) {\n                output[k] = input[v];\n            }\n        }\n    }\n    return output;\n}\n\nfunction splitByModality(features, typeField, featureTypeMapping) {\n    let by_type = bioc.presplitFactor(features.column(typeField));\n    if (featureTypeMapping === null) {\n        return by_type;\n    }\n    return renameByModality(by_type, [], featureTypeMapping); // positional indices for feature types don't make sense when splitting by (string) levels of a type column.\n}\n\nfunction findUnnamedDefault(featureTypeMapping, featureTypeDefault) {\n    let found = null;\n    let multiple = false;\n    for (const [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null) {\n            if (found !== null) {\n                multiple = true;\n            }\n            found = k;\n        }\n    }\n\n    if (found === null || multiple) {\n        return featureTypeDefault;\n    } else {\n        return found;\n    }\n}\n\nexport function extractSplitPrimaryIds(features, typeField, featureTypeMapping, featureTypeDefault, primary) {\n    if (typeField !== null && features.hasColumn(typeField)) {\n        let by_type = splitByModality(features, typeField, featureTypeMapping);\n        for (const [k, v] of Object.entries(by_type)) {\n            let col = extractPrimaryIdColumn(k, features, primary);\n            by_type[k] = bioc.SLICE(col, v);\n        }\n        return by_type;\n    }\n\n    // Seeing if any featureTypeMapping is set to the unnamed string.\n    let new_default = findUnnamedDefault(featureTypeMapping, featureTypeDefault);\n    let output = {};\n    output[new_default] = extractPrimaryIdColumn(new_default, features, primary);\n    return output;\n}\n\nexport function splitScranMatrixAndFeatures(loaded, rawFeatures, typeField, featureTypeMapping, featureTypeDefault) {\n    let output = { matrix: new scran.MultiMatrix };\n\n    try {\n        output.matrix.add(\"\", loaded);\n\n        let current_features = bioc.CLONE(rawFeatures, { deepCopy: false }); // because we're deleting a column.\n        if (typeField !== null && current_features.hasColumn(typeField)) {\n            let by_type = splitByModality(current_features, typeField, featureTypeMapping);\n            let type_keys = Object.keys(by_type);\n            let skip_subset = is_subset_noop(type_keys[0], loaded.numberOfRows());\n\n            if (type_keys.length > 1 || !skip_subset) {\n                let replacement = new scran.MultiMatrix({ store: scran.splitRows(loaded, by_type) });\n                scran.free(output.matrix);\n                output.matrix = replacement;\n            } else {\n                output.matrix.rename(\"\", type_keys[0]);\n            }\n\n            delete current_features[typeField];\n            output.features = bioc.SPLIT(current_features, by_type);\n\n        } else {\n            let new_default = featureTypeDefault;\n            if (featureTypeMapping !== null) {\n                new_default = findUnnamedDefault(featureTypeMapping, featureTypeDefault);\n            }\n            output.matrix.rename(\"\", new_default);\n            output.features = create_solo_default_object(current_features, new_default);\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction extractPrimaryIdColumn(modality, modality_features, primary) {\n    if (!(modality in primary)) {\n        throw new Error(\"modality '\" + modality + \"' has no primary key identifier\");  \n    }\n    let id = primary[modality];\n\n    if ((typeof id == \"string\" && modality_features.hasColumn(id)) || (typeof id == \"number\" && id < modality_features.numberOfColumns())) {\n        return modality_features.column(id);\n    } \n\n    return modality_features.rowNames();\n}\n\nexport function extractPrimaryIds(features, primary) {\n    let output = {};\n    for (const [k, v] of Object.entries(features)) {\n        output[k] = extractPrimaryIdColumn(k, v, primary);\n    }\n    return output;\n}\n\nexport function extractRemappedPrimaryIds(features, indexToNames, featureTypeMapping, primary) {\n    let renamed = renameByModality(features, indexToNames, featureTypeMapping);\n    return extractPrimaryIds(renamed, primary);\n}\n","import * as cutils from \"./clone-utils.js\";\n\n/**\n * Dense matrix of numbers.\n * Not really a Bioconductor-exclusive data structure, but we need this at a minimum for the {@linkplain SummarizedExperiment} to be useful.\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * Constructors of DataFrame subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE`, `_bioconductor_COMBINE_ROWS`, `_bioconductor_COMBINE_COLUMNS` and `_bioconductor_SLICE_2D` methods to return an instance of the subclass.\n */\nexport class DenseMatrix {\n    /**\n     * @param {number} numberOfRows - Number of rows, duh.\n     * @param {number} numberOfColumns - Number of columns.\n     * @param {TypedArray} values - 1-dimensional array of the matrix contents.\n     * This should have length equal to the product of `numberOfRows` and `numberOfColumns`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.columnMajor=true] - Whether `values` represents a column-major layout.\n     */\n    constructor(numberOfRows, numberOfColumns, values, { columnMajor = true } = {}) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._numberOfRows = numberOfRows;\n        this._numberOfColumns = numberOfColumns;\n        this._values = values;\n        this._columnMajor = columnMajor;\n        if (numberOfRows * numberOfColumns != values.length) {\n            throw new Error(\"length of 'values' should be equal to the product of 'dimensions'\");\n        }\n    }\n\n    static name = \"DenseMatrix\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {number} Number of rows.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns.\n     */\n    numberOfColumns() {\n        return this._numberOfColumns;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is column-major.\n     */\n    isColumnMajor() {\n        return this._columnMajor;\n    }\n\n    /**\n     * @return {TypedArray} Matrix contents as a 1-dimensional array.\n     */\n    values() {\n        return this._values;\n    }\n\n    #extractor(i, nprimary, nsecondary, allowView, primaryMajor) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                output[s] = this._values[offset];\n                offset += nprimary;\n            }\n            return output;\n\n        } else {\n            let start = i * nsecondary;\n            let end = start + nsecondary;\n            if (allowView) {\n                return this._values.subarray(start, end);\n            } else {\n                return this._values.slice(start, end);\n            }\n        }\n    }\n\n    /**\n     * Retrieve the contents of a particular row.\n     *\n     * @param {number} i - Index of the row of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the row `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    row(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfRows, this._numberOfColumns, allowView, !this._columnMajor);\n    }\n\n    /**\n     * Retrieve the contents of a particular column.\n     *\n     * @param {number} i - Index of the column of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the column `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    column(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfColumns, this._numberOfRows, allowView, this._columnMajor);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setValues(values, { inPlace = false } = {}) {\n        if (values.length !== this._values.length) {\n            throw new Error(\"replacement 'values' should have length equal to 'values()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._values = values;\n        return target;\n    }\n\n    $setValues(values) {\n        return this.setValues(values, { inPlace: true });\n    }\n\n    #inserter(i, nprimary, nsecondary, primaryMajor, replacement) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                this._values[offset] = replacement[s];\n                offset += nprimary;\n            }\n        } else {\n            let start = i * nsecondary;\n            this._values.set(replacement, start);\n        }\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRow(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfColumns) {\n            throw new Error(\"replacement row should have length equal to 'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfRows, target._numberOfColumns, !target._columnMajor, values);\n        return target;\n    }\n\n    $setRow(i, value) {\n        return this.setRow(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of rows in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfRows) {\n            throw new Error(\"replacement column should have length equal to 'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfColumns, target._numberOfRows, target._columnMajor, values);\n        return target;\n    }\n\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(rows, columns, {}) {\n        let output = new this.constructor;\n\n        let full_rows = (rows === null);\n        let is_row_range = (!full_rows && rows.constructor == Object);\n        let new_rows = full_rows ? this._numberOfRows : (is_row_range ? rows.end - rows.start : rows.length);\n        output._numberOfRows = new_rows;\n\n        let full_columns = (columns === null);\n        let is_column_range = (!full_columns && columns.constructor == Object);\n        let new_columns = full_columns ? this._numberOfColumns : (is_column_range ? columns.end - columns.start : columns.length);\n        output._numberOfColumns = new_columns;\n\n        let new_values = new this._values.constructor(new_rows * new_columns);\n        output._values = new_values;\n\n        if (this._columnMajor) {\n            this.#primarySlicer(columns, full_columns, is_column_range, this._numberOfColumns, rows, full_rows, is_row_range, this._numberOfRows, new_rows, new_values);\n        } else {\n            this.#primarySlicer(rows, full_rows, is_row_range, this._numberOfRows, columns, full_columns, is_column_range, this._numberOfColumns, new_columns, new_values);\n        }\n        output._columnMajor = this._columnMajor;\n        return output;\n    }\n\n    #primarySlicer(primarySlice, fullPrimary, isPrimaryRange, primaryDim, secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues) {\n        if (fullPrimary) {\n            for (var p = 0; p < primaryDim; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p);\n            }\n        } else if (isPrimaryRange) {\n            for (var p = primarySlice.start; p < primarySlice.end; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p - primarySlice.start);\n            }\n        } else {\n            for (var pi = 0; pi < primarySlice.length; pi++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, primarySlice[pi], pi);\n            }\n        }\n    }\n\n    #secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, inPrimary, outPrimary) {\n        let in_offset = inPrimary * inSecondaryDim;\n        let out_offset = outPrimary * outSecondaryDim;\n\n        if (fullSecondary) {\n            let view = this._values.subarray(in_offset, in_offset + inSecondaryDim);\n            outputValues.set(view, out_offset);\n        } else if (isSecondaryRange) {\n            for (var s = secondarySlice.start; s < secondarySlice.end; s++) {\n                outputValues[out_offset + s - secondarySlice.start] = this._values[in_offset + s];\n            }\n        } else {\n            for (var si = 0; si < secondarySlice.length; si++) {\n                outputValues[out_offset + si] = this._values[in_offset + secondarySlice[si]];\n            }\n        }\n    }\n\n    _combiner(objects, primaryFun, secondaryFun, isPrimaryMajor, secondaryName) {\n        let num_primary = primaryFun(this);\n        let num_secondary = secondaryFun(this);\n        for (const x of objects) {\n            if (secondaryFun(x) !== num_secondary) {\n                throw new Error(\"all objects must have the same number of \" + secondaryName);\n            }\n            num_primary += primaryFun(x);\n        }\n\n        let primary_major = isPrimaryMajor(this);\n        let values = new this._values.constructor(num_primary * num_secondary);\n\n        if (primary_major) {\n            let used_primary = 0;\n            for (var i = 0; i <= objects.length; i++) {\n                let current = (i == 0 ? this : objects[i - 1]);\n                let cur_primary = primaryFun(current);\n                let out_offset = used_primary * num_secondary;\n\n                if (isPrimaryMajor(current)) {\n                    values.set(current._values, out_offset);\n                } else {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let in_offset = s * cur_primary;\n                        let out_offset2 = out_offset + s;\n                        for (var p = 0; p < cur_primary; p++) {\n                            values[out_offset2 + p * num_secondary] = current._values[in_offset + p];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        } else {\n            let used_primary = 0;\n            for (var i = 0; i <= objects.length; i++) {\n                let current = (i == 0 ? this : objects[i - 1]);\n                let cur_primary = primaryFun(current);\n\n                if (!isPrimaryMajor(current)) {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let view_offset = s * cur_primary;\n                        let view = current._values.subarray(view_offset, view_offset + cur_primary);\n                        values.set(view, used_primary + s * num_primary);\n                    }\n                } else {\n                    for (var p = 0; p < cur_primary; p++) {\n                        let in_offset = p * num_secondary;\n                        let out_offset = used_primary + p;\n                        for (var s = 0; s < num_secondary; s++) {\n                            values[out_offset + s * num_primary] = current._values[in_offset + s];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        }\n\n        return { num_primary, num_secondary, values, primary_major };\n    }\n\n    _bioconductor_COMBINE_ROWS(objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfRows,\n            x => x._numberOfColumns,\n            x => !(x._columnMajor),\n            \"columns\"\n        );\n\n        let output = new this.constructor;\n        output._numberOfRows = combined.num_primary;\n        output._numberOfColumns = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = !(combined.primary_major);\n        return output;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfColumns,\n            x => x._numberOfRows,\n            x => x._columnMajor,\n            \"rows\"\n        );\n\n        let output = new this.constructor;\n        output._numberOfColumns = combined.num_primary;\n        output._numberOfRows = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = combined.primary_major;\n        return output;\n    }\n\n    _bioconductor_CLONE({ deepCopy = true } = {}) {\n        let output = new this.constructor;\n        output._values = (deepCopy ? this._values.slice() : this._values);\n        output._numberOfRows = this._numberOfRows;\n        output._numberOfColumns = this._numberOfColumns;\n        output._columnMajor = this._columnMajor;\n        return output;\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"crispr_quality_control\";\n\n/**\n * Results of computing per-cell CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellCrisprQcMetricsResults.html) for details.\n *\n * @external PerCellCrisprQcMetricsResults\n */\n\n/**\n * Suggested filters for the CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestCrisprQcFiltersResults.html) for details.\n *\n * @external SuggestCrisprQcFiltersResults\n */\n\n/**\n * This step applies quality control on the CRISPR guide count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellCrisprQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellCrisprQcMetrics)\n * and [`suggestCrisprQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestCrisprQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.keep_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestCrisprQcFiltersResults} Result of filtering on the CRISPR-derived QC metrics.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing a vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be retained after filtering.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchKeep() {\n        return this.#cache.keep_buffer;\n    }\n\n    /**\n     * @return {external:PerCellCrisprQcMetricsResults} CRISPR-derived QC metrics,\n     * available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode CrisprQualityControlState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            filter_strategy: \"automatic\",\n            nmads: 3,\n\n            max_threshold: 0\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} [parameters.filter_strategy][- Strategy for defining a filter threshold for the QC metrics.\n     * This can be `\"automatic\"` or `\"manual\"`.\n     * @param {number} [parameters.nmads] - Number of MADs to use for automatically selecting the filter threshold on the maximum count. \n     * Only used when `filter_strategy = \"automatic\"`.\n     * @param {number} [parameters.max_threshold] - Manual threshold on the maximum count for each cell.\n     * Cells are only retained if their maximums are greater than or equal to this threshold.\n     * Only used when `filter_strategy = \"manual\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, CrisprQualityControlState.defaults());\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var mat = this.#inputs.fetchCountMatrix().get(\"CRISPR\");\n                this.#cache.metrics = scran.perCellCrisprQcMetrics(mat);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || \n            parameters.filter_strategy !== this.#parameters.filter_strategy ||\n            parameters.nmads !== this.#parameters.nmads ||\n            parameters.max_threshold !== this.#parameters.max_threshold\n        ) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n\n                if (parameters.filter_strategy === \"automatic\") {\n                    this.#cache.filters = scran.suggestCrisprQcFilters(this.#cache.metrics, { numberOfMADs: parameters.nmads, block: block });\n                } else if (parameters.filter_strategy === \"manual\") {\n                    let block_levels = this.#inputs.fetchBlockLevels();\n                    this.#cache.filters = scran.emptySuggestCrisprQcFiltersResults(block_levels === null ? 1 : block_levels.length);\n                    this.#cache.filters.maxValue({ copy: false }).fill(parameters.max_threshold);\n                } else {\n                    throw new Error(\"unknown CRISPR QC filter strategy '\" + filter_strategy + \"'\");\n                }\n\n                var keep = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"keep_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: keep });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.filter_strategy = parameters.filter_strategy;\n            this.#parameters.nmads = parameters.nmads;\n            this.#parameters.max_threshold = parameters.max_threshold;\n        }\n\n        return;\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute per-cell scores for the activity of a feature set using the [**gsdecon**](https://github.com/libscran/gsdecon) method.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {Uint8Array|Uint8WasmArray|TypedArray|Array} features - An array of length equal to the number of rows in `x`, indicating which features belong to the set.\n * A non-zero value for any entry indicates that the corresponding row of `x` is part of the feature set.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {boolean} [options.scale=false] - Whether to scale the expression matrix to unit variance for each feature before computing the per-feature weights.\n * Setting to `true` improves robustness (or reduces sensitivity) to the behavior of highly variable features in the set.\n * @param {string} [options.blockWeightPolicy=\"variable\"] The policy for weighting each block so that it contributes the same number of effective observations to the covariance matrix.\n *\n * - `\"variable\"` ensures that, past a certain size (default 1000 cells), larger blocks do not dominate the definition of the PC space.\n *   Below the threshold size, blocks are weighted in proportion to their size to reduce the influence of very small blocks. \n * - `\"equal\"` uses the same weight for each block, regardless of size.\n * - `\"none\"` does not apply any extra weighting, i.e., the contribution of each block is proportional to its size.\n *\n * This option is only used if `block` is not `null`.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {object} Object containing:\n *\n * - `weights`, a Float64Array containing per-gene weights for each feature in the set.\n * - `scores`, a Float64Array containing the per-cell scores for each column of `x`.\n */\nexport function scoreGsdecon(x, features, options = {}) {\n    const { block = null, scale = false, blockWeightPolicy = \"variable\", numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let temp;\n    let output = {};\n    let feature_data, block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        // Setting up the features.\n        if (features.length !== x.numberOfRows()) {\n            throw new Error(\"Uint8Array 'features' must be of length equal to the number of rows in 'x'\");\n        }\n        feature_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n\n        // Setting up the blocks.\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        temp = wasm.call(module => module.score_gsdecon(x.matrix, feature_data.offset, use_blocks, bptr, scale, blockWeightPolicy, nthreads));\n        output.weights = temp.weights().slice();\n        output.scores = temp.scores().slice();\n\n    } finally {\n        utils.free(block_data);\n        utils.free(feature_data);\n        if (temp) {\n            temp.delete();\n        }\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as wasm from \"./wasm.js\";\nimport { columnSums } from \"./matrixStats.js\";\n\n/**\n * Compute log-transformed normalized expression values.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.sizeFactors=null] - Array of positive numbers containing the size factor for each cell in `x`.\n * This should have length equal to the number of columns in `x`.\n * If centering is required, it should be applied with {@linkcode centerSizeFactors} - no additional centering is performed here.\n * If `null`, size factors are computed from the centered column sums of `x`.\n * @param {boolean} [options.log=true] - Whether to perform log-transformation.\n * @param {boolean} [options.allowZeros=false] - Whether size factors of zero should be allowed.\n * If `true`, size factors of zero are converted to the smallest non-zero size factor across all cells.\n * If `false`, an error is raised instead.\n * @param {boolean} [options.allowZeros=false] - Whether non-finite size factors should be allowed.\n * If `true`, size factors of infinity or NaN are converted to the largest non-zero size factor in the dataset or 1, respectively.\n * If `false`, an error is raised instead.\n *\n * @return {ScranMatrix} A matrix of the same type as `x` containing normalized expression values.\n * If `log = true`, the values in the matrix are log-transformed.\n */\nexport function normalizeCounts(x, options = {}) {\n    const { sizeFactors = null, log = true, allowZeros = false, allowNonFinite = false, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var sf_data;\n    var output;\n\n    try {\n        if (sizeFactors !== null) {\n            sf_data = utils.wasmifyArray(sizeFactors, \"Float64WasmArray\");\n            if (sf_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'sizeFactors' must be equal to number of columns in 'x'\");\n            }\n        } else {\n            sf_data = utils.createFloat64WasmArray(x.numberOfColumns());\n            columnSums(x, { buffer : sf_data });\n            wasm.call(module => module.center_size_factors(sf_data.length, sf_data.offset, false, 0, true)); // assume unblocked in the default case.\n        }\n\n        output = gc.call(\n            module => module.normalize_counts(x.matrix, sf_data.offset, log, allowZeros, allowNonFinite),\n            x.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(sf_data);\n    }\n    \n    return output;\n}\n\n/**\n * Center size factors in preparation for log-transformation in {@linkcode normalizeCounts}.\n *\n * @param {TypedArray|WasmArray} sizeFactors - Array of non-negative size factors, one per cell.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array of length equal to `sizeFactors`, containing the block assignment for each cell.\n * If `toLowestBlock = true`, all size factors are scaled by the same value such that the block with the lowest mean size factor is centered.\n * Otherwise, the size factors in each block are centered separately. \n * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n * If `false`, a Float64WasmArray is returned instead.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to that of `sizeFactors`.\n * If `null`, an array is allocated by the function.\n * @param {boolean} [options.toLowestBlock=true] - Whether to scale the size factors so that the block with the lowest mean size factor is centered.\n * This preserves differences in scaling between blocks.\n * If `false`, each block of size factors is centered as if `centerSizeFactors` was called separately on each block.\n *\n * @return {Float64Array|Float64WasmArray} Array containing the centered size factors.\n * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n */\nexport function centerSizeFactors(sizeFactors, options = {}) {\n    let { block = null, asTypedArray = true, buffer = null, toLowestBlock = true, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let local_buffer = null;\n    let block_data;\n\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(sizeFactors.length);\n            buffer = local_buffer;\n        }\n\n        if (buffer !== sizeFactors) {\n            buffer.set(sizeFactors instanceof wa.WasmArray ? sizeFactors.array() : sizeFactors);\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != buffer.length) {\n                throw new Error(\"'block' must be of length equal to that of 'sizeFactors'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        wasm.call(module => module.center_size_factors(buffer.length, buffer.offset, use_blocks, bptr, toLowestBlock));\n\n    } catch(e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return utils.toTypedArray(buffer, local_buffer == null, asTypedArray);\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport { MultiMatrix } from \"./MultiMatrix.js\";\n\n/**\n * Slice a {@linkplain ScranMatrix} by its rows.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Row indices to extract.\n * All indices must be non-negative integers less than `mat.numberOfRows()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A ScranMatrix containing the subset of rows from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetRows(x, indices, options = {}) {\n    const { inPlace = false, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.row_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Slice a ScranMatrix by its columns.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Column indices to extract.\n * Al indices must be a non-negative integer less than `mat.numberOfColumns()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A new ScranMatrix containing the subset of columns from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetColumns(x, indices, options = {}) {\n    const { inPlace = false, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.column_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Split a {@linkplain ScranMatrix} by row.\n *\n * @param {ScranMatrix} matrix - A ScranMatrix object.\n * @param {object} split - Object specifying how rows should be split.\n * Each value should be an Array/TypedArray of 0-based row indices.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.singleNull=false] - Whether `null` should be returned if `split` only contains one level and all rows are represented exactly once.\n * This can be used to avoid the creation of a redundant {@linkplain ScranMatrix} object.\n * @param {boolean} [options.createMultiMatrix=false] - Whether the output should be returned as a {@linkplain MultiMatrix}.\n *\n * @return {object|MultiMatrix} Object with the same keys as `split` where each value is a ScranMatrix for the corresponding subset of rows.\n * Alternatively, this is wrapped in a MultiMatrix if `createMultiMatrix = true`.\n */\nexport function splitRows(matrix, split, options = {}) {\n    const { singleNull = false, createMultiMatrix = false, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let output = {};\n    let tkeys = Object.keys(split);\n\n    if (tkeys.length == 1) {\n        let chosen = split[tkeys[0]];\n        let consec = (chosen.length == matrix.numberOfRows());\n        if (consec) {\n            for (var i = 0; i < chosen.length; i++) {\n                if (i != chosen[i]) {\n                    consec = false;\n                    break;\n                }\n            }\n        }\n\n        if (consec) {\n            if (singleNull) {\n                return null;\n            } else {\n                output[tkeys[0]] = matrix.clone();\n                return output;\n            }\n        }\n    }\n\n    let stuff;\n    try {\n        for (const k of tkeys) {\n            output[k] = subsetRows(matrix, split[k]);\n        }\n\n        // Sticking this inside the trycatch, so that\n        // memory is released if the constructor fails. \n        if (createMultiMatrix) {\n            stuff = new MultiMatrix({ store: output });\n        }\n    } catch (e) {\n        for (const v of Object.values(output)) {\n            v.free();\n        }\n        throw e;\n    }\n\n    if (createMultiMatrix) {\n        return stuff;\n    } else {\n        return output;\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\n\nexport const step_name = \"feature_selection\";\n\n/**\n * Results of per-gene variance modelling,\n * see [here](https://kanaverse.github.io/scran.js/ModelGeneVarResults.html) for details.\n *\n * @external ModelGeneVarResults\n */\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the [`modelGeneVariances`](https://kanaverse.github.io/scran.js/global.html#modelGeneVariances) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:ModelGeneVarResults} Variance modelling results,\n     * available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.results;\n    }\n\n    /**\n     * @return {Float64Array} Array of length equal to the number of genes,\n     * containing the sorted residuals after fitting a mean-dependent trend to the variances.\n     * Available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode FeatureSelectionState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            span: 0.3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, FeatureSelectionState.defaults());\n        this.changed = false;\n        \n        if (this.#norm.changed || parameters.span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            if (this.valid()) {\n                let mat = this.#norm.fetchNormalizedMatrix();\n                let block = this.#filter.fetchFilteredBlock();\n                this.#cache.results = scran.modelGeneVariances(mat, { span: parameters.span, block: block });\n\n                this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n                this.#cache.sorted_residuals.sort();\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n}\n","import * as methods from \"../file.js\";\n\nexport function temp(prefix, extension) {\n    let tmppath;\n    do {\n        tmppath = prefix + String(Number(new Date())) + \"_\" + String(Math.round(Math.random() * 10000)) + extension;\n    } while (methods.existsFile(tmppath));\n    return tmppath;\n}\n\nexport function handleString(file) {\n    throw new Error(\"cannot access the file system in a browser context\");\n}\n","import * as utils from \"./utils.js\";\nimport { RunPcaResults } from \"./runPca.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Perform mutual nearest neighbor (MNN) correction on a low-dimensional representation to remo\n * This is used to remove batch effects prior to downstream analyses like clustering,\n * check out the [**mnncorrect**](https://github.com/libscran/mnncorrect) for details.\n *\n * @param {(RunPcaResults|TypedArray|Array|Float64WasmArray)} x - A matrix of low-dimensional results where rows are dimensions and columns are cells.\n * If this is a {@linkplain RunPcaResults} object, the PCs are automatically extracted.\n * Otherwise, the matrix should be provided as an array in column-major form, with specification of `numberOfDims` and `numberOfCells`.\n * @param {(Int32WasmArray|Array|TypedArray)} block - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform normalization within each block.\n * @param {object} [options={}] - Further optional parameters.\n * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n * If `false`, a Float64WasmArray is returned instead.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer of length equal to the product of the number of cells and dimensions,\n * to be used to store the corrected coordinates for each cell.\n * If `null`, this is allocated and returned by the function.\n * @param {?number} [options.numberOfDims=null] - Number of dimensions in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {?number} [options.numberOfCells=null] - Number of cells in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {number} [options.k=15] - Number of neighbors to use in the MNN search. \n * @param {number} [options.numberOfMADs=3] - Number of MADs to use to define the threshold on the distances to the neighbors,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustIterations=2] - Number of robustness iterations to use for computing the center of mass,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustTrim=0.25] - Proportion of furthest observations to remove during robustness iterations, \n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {string} [options.referencePolicy=\"max-rss\"] - What policy to use to choose the first reference batch.\n * This can be the largest batch (`\"max-size\"`), the most variable batch (`\"max-variance\"`), the batch with the highest RSS (`\"max-rss\"`) or batch 0 in `block` (`\"input\"`).\n * @param {boolean} [options.approximate=true] - Whether to perform an approximate nearest neighbor search.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64Array|Float64WasmArray} Array of length equal to `x`, containing the batch-corrected low-dimensional coordinates for all cells.\n * Corrected values are organized using the column-major layout, where rows are dimensions and columns are cells.\n * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n */\nexport function mnnCorrect(x, block, options = {}) {\n    let { \n        asTypedArray = true,\n        buffer = null, \n        numberOfDims = null,\n        numberOfCells = null,\n        k = 15,\n        numberOfMADs = 3, \n        robustIterations = 2, \n        robustTrim = 0.25,\n        referencePolicy = \"max-rss\",\n        approximate = true,\n        numberOfThreads = null,\n        ...others\n    } = options;\n    utils.checkOtherOptions(others);\n\n    let local_buffer = null;\n    let x_data;\n    let block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (x instanceof RunPcaResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            x = x.principalComponents({ copy: \"view\" });\n        } else {\n            if (numberOfDims === null || numberOfCells === null || numberOfDims * numberOfCells !== x.length) {\n                throw new Error(\"length of 'x' must be equal to the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n            x_data = utils.wasmifyArray(x, \"Float64WasmArray\");\n            x = x_data;\n        }\n\n        if (buffer == null) {\n            local_buffer = utils.createFloat64WasmArray(numberOfCells * numberOfDims);\n            buffer = local_buffer;\n        } else if (buffer.length !== x.length) {\n            throw new Error(\"length of 'buffer' must be equal to the product of the number of dimensions and cells\");\n        }\n\n        block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n        if (block_data.length != numberOfCells) {\n            throw new Error(\"'block' must be of length equal to the number of cells in 'x'\");\n        }\n\n        wasm.call(module => module.mnn_correct(\n            numberOfDims, \n            numberOfCells,\n            x.offset,\n            block_data.offset,\n            buffer.offset,\n            k,\n            numberOfMADs,\n            robustIterations,\n            robustTrim,\n            referencePolicy,\n            approximate,\n            nthreads\n        ));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n        \n    } finally {\n        utils.free(x_data);\n    }\n\n    return utils.toTypedArray(buffer, local_buffer == null, asTypedArray);\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * An IRanges object is a collection of integer ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a start position and a width, and may be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The IRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Constructors of IRanges subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE`, `_bioconductor_SLICE` and `_bioconductor_COMBINE` methods to return an instance of the subclass.\n *\n * @extends Vector\n */\nexport class IRanges extends vec.Vector {\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} start - Array of start positions for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Array|TypedArray} width - Array of widths for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object|Array|Map|List} [options.metadata={}] - Arbitrary metadata, see the {@link Annotated} constructor. \n     */\n    constructor(start, width, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(start.length, { names, elementMetadata, metadata });\n\n        this._start = utils.convertToInt32Array(start);\n        utils.checkNonNegative(this._start, \"start\");\n\n        this._width = utils.convertToInt32Array(width);\n        utils.checkNonNegative(this._width, \"width\");\n\n        let n = this._start.length;\n        if (n !== this._width.length) {\n            throw new Error(\"'start' and 'width' should have the same length\");\n        }\n    }\n\n    static className = \"IRanges\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each range.\n     */\n    start() {\n        return this._start;\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each range.\n     */\n    end() {\n        return this._start.map((x, i) => x + this._width[i]);\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each range.\n     */\n    width() {\n        return this._width;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the start positions to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStart(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'start' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"start\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._start = candidate;\n        return target;\n    }\n\n    $setStart(value) {\n        return this.setStart(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the widths to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setWidth(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'width' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"width\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._width = candidate;\n        return target;\n    }\n\n    $setWidth(value) {\n        return this.setWidth(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain IRanges} instances.\n     */\n    buildOverlapIndex() {\n        let tree = olap.buildIntervalTree(this._start, this.end());\n        return new IRangesOverlapIndex(tree);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._start.length;\n    }\n\n    _bioconductor_SLICE(i, { allowView = false }) {\n        let output = super._bioconductor_SLICE(i, { allowView });\n        output._start = generics.SLICE(this._start, i, { allowView });\n        output._width = generics.SLICE(this._width, i, { allowView });\n        return output;\n    }\n\n    _bioconductor_COMBINE(objects) {\n        let output = super._bioconductor_COMBINE(objects);\n\n        let all_s = [this._start];\n        let all_w = [this._width];\n        for (const x of objects) {\n            all_s.push(x._start);\n            all_w.push(x._width);\n        }\n\n        output._start = generics.COMBINE(all_s);\n        output._width = generics.COMBINE(all_w);\n        return output;\n    }\n\n    _bioconductor_CLONE({ deepCopy = true }) {\n        let output = super._bioconductor_CLONE({ deepCopy });\n        output._start = cutils.cloneField(this._start, deepCopy);\n        output._width = cutils.cloneField(this._width, deepCopy);\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRanges} A zero-length IRanges object.\n     */\n    static empty() {\n        return new IRanges(new Int32Array, new Int32Array);\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain IRanges} objects.\n * This is typically constructed using the {@linkcode IRanges#buildOverlapIndex IRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query IRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class IRangesOverlapIndex {\n    constructor(tree) {\n        this._tree = tree;\n    }\n\n    /**\n     * @param {IRanges} query - The query object, containing ranges to be overlapped with those in the reference IRanges (that was used to construct this IRangesOverlapIndex object).\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain IRanges} object.\n     */\n    overlap(query) {\n        let n = generics.LENGTH(query);\n        let output = new Array(n);\n        for (var i = 0; i < n; i++) {\n            output[i] = olap.queryIntervalTree(query._start[i], query._start[i] + query._width[i], this._tree);\n        }\n        return output;\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**\n * Any class that satisfies the ArtifactdbProjectNavigator contract, so called as it is intended to \"navigate\" an ArtifactDB project directory.\n * This should provide the following methods:\n * \n * - `metadata(p)`, a (possibly async) method that accepts a string `p` containing a relative path to a resource inside an ArtifactDB project directory,\n *   and returns an object containing the metadata for that object.\n *   Any redirections should be resolved by this method.\n *\n *   Note that {@linkplain AbstractArtifactdbDataset} will automatically cache the outputs of all `metadata()` calls between any invocations of {@linkcode AbstractArtifactdbDataset#clear clear},\n *   to improve efficiency when repeatedly accessing the same metadata.\n *   The same applies to {@linkplain AbstractArtifactdbResult}.\n * - `file(p)`, a (possibly async) method that accepts a string `p` containing a relative path inside a project directory and returns the contents of the file at that path.\n *   The return value should typically be a Uint8Array; on Node.js, methods may alternatively return a string containing a path to the file on the local file system.\n *   The method does not need to handle redirections from `p`.\n *\n * Optionally, the ArtifactdbProjectNavigator class may implement a `clear()` method to remove any cached content.\n * This will be called by {@linkcode AbstractArtifactdbDataset#clear AbstractArtifactdbDataset.clear} and  {@linkcode AbstractArtifactdbResult#clear AbstractArtifactdbResult.clear}.\n *\n * @typedef ArtifactdbProjectNavigator\n */\n\n/**************************\n ******* Internals ********\n **************************/\n\nasync function load_data_frame(info, navigator) {\n    if (typeof info == \"string\") {\n        info = await navigator.metadata(info);\n    }\n    let contents = await navigator.file(info.path);\n\n    let colnames;\n    let columns;\n    let rownames = null;\n\n    if (info[\"$schema\"].startsWith(\"csv_data_frame/\")) {\n        // TODO: replace with comservatory parser.\n        let parsed = await eutils.readTable2(contents, { delim: \",\" });\n        colnames = parsed.shift();\n\n        columns = new Array(colnames.length);\n        for (var i = 0; i < columns.length; i++) {\n            let current = [];\n            for (const x of parsed) {\n                current.push(x[i]);\n            }\n            columns[i] = current;\n        }\n\n        if (info.data_frame.row_names) {\n            rownames = columns.shift();\n            colnames.shift();\n        }\n\n        // Mutating the type... this doesn't quite handle NAs and NaNs properly, but whatever.\n        for (var i = 0; i < columns.length; i++) {\n            let type = info.data_frame.columns[i].type;\n            if (type == \"integer\") {\n                columns[i] = new Int32Array(columns[i]);\n            } else if (type == \"number\") {\n                columns[i] = new Float64Array(columns[i]);\n            } else if (type == \"boolean\") {\n                columns[i] = columns[i].map(x => x == \"true\");\n            }\n        }\n\n    } else if (info[\"$schema\"].startsWith(\"hdf5_data_frame/\")) {\n        let out = scran.realizeFile(contents);\n        try {\n            let handle = new scran.H5File(out.path);\n            let ghandle = handle.open(info.hdf5_data_frame.group);\n\n            colnames = ghandle.open(\"column_names\", { load: true }).values;\n            if (info.data_frame.row_names) {\n                rownames = ghandle.open(\"row_names\", { load: true }).values;\n            }\n\n            columns = [];\n            let chandle = ghandle.open(\"data\");\n            for (var i = 0; i < colnames.length; i++) {\n                if (!(String(i) in chandle.children)) {\n                    columns.push(null);\n                    continue;\n                }\n\n                let dhandle = chandle.open(String(i), { load: true });\n                let current = dhandle.values;\n\n                let type = info.data_frame.columns[i];\n                if (type == \"integer\") {\n                    if (current instanceof Float64Array || current instanceof Float32Array) {\n                        current = new Int32Array(current);\n                    }\n\n                } else if (type == \"number\") {\n                    if (!(current instanceof Float64Array) && !(current instanceof Float32Array)) {\n                        current = new Float64Array(current);\n                    }\n\n                } else if (type == \"boolean\") {\n                    let replacement = new Array(current.length);\n                    for (var i = 0; i < current.length; i++) {\n                        if (current[i] == -2147483648) {\n                            replacement[i] = null;\n                        } else {\n                            replacement[i] = current[i] != 0\n                        }\n                    }\n                    current = replacement;\n\n                } else if (type == \"string\" || type == \"date\") {\n                    if (\"missing-value-placeholder\" in dhandle.attributes) {\n                        let placeholder = dhandle.readAttribute(\"missing-value-placeholder\").values[0];\n                        for (var i = 0; i < current.length; i++) {\n                            if (current[i] == placeholder) {\n                                current[i] = null;\n                            }\n                        }\n                    }\n                }\n\n                columns.push(current);\n            }\n        } finally {\n            out.flush();\n        }\n\n    } else {\n        throw new Error(\"unknown data_frame schema type '\" + info[\"$schema\"] + \"'\");\n    }\n\n    let new_columns = {};\n    let new_colnames = [];\n    for (var i = 0; i < columns.length; i++) {\n        if (info.data_frame.columns[i].type === \"other\") {\n            let nest_meta = await navigator.metadata(info.data_frame.columns[i].resource.path);\n            try {\n                new_columns[colnames[i]] = await load_data_frame(nest_meta, navigator);\n                new_colnames.push(colnames[i]);\n            } catch (e) {\n                console.warn(e);\n            }\n        } else {\n            new_columns[colnames[i]] = columns[i];\n            new_colnames.push(colnames[i]);\n        }\n    }\n\n    return new bioc.DataFrame(new_columns, { \n        columnOrder: new_colnames, \n        rowNames: rownames, \n        numberOfRows: info.data_frame.dimensions[0] \n    });\n}\n\nconst main_experiment_name = \"\";\n\nasync function extract_all_features(path, navigator) {\n    let extract_features = async se_meta => {\n        if (\"row_data\" in se_meta.summarized_experiment) {\n            let row_path = se_meta.summarized_experiment.row_data.resource.path;\n            return await load_data_frame(row_path, navigator);\n        } else {\n            return new bioc.DataFrame({}, { numberOfRows: se_meta.summarized_experiment.dimensions[0] });\n        }\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let output = {};\n    output[main_experiment_name] = await extract_features(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta && \"alternative_experiments\" in full_meta.single_cell_experiment) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                output[alt.name] = await extract_features(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return output;\n}\n\nasync function extract_all_assay_names(path, navigator) {\n    let extract_assay_names = se_meta => {\n        let output = [];\n        for (const ass of se_meta.summarized_experiment.assays) {\n            output.push(ass.name);\n        }\n        return output;\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let assays = {};\n    assays[main_experiment_name] = extract_assay_names(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta && \"alternative_experiments\" in full_meta.single_cell_experiment) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                assays[alt.name] = extract_assay_names(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return assays;\n}\n\n// This specifically loads the log-counts created by the dumper.\n// TODO: replace this with chihaya.js.\nasync function extract_logcounts(handle, navigator) {\n    if (handle.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (handle.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (Math.abs(handle.open(\"value\", { load: true }).values[0] - Math.log(2)) > 0.00000001) {\n        return null;\n    }\n    if (handle.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (handle.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n\n    let ghandle2 = handle.open(\"seed\");\n    if (ghandle2.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle2.readAttribute(\"delayed_operation\").values[0] !== \"unary math\") {\n        return null;\n    }\n    if (ghandle2.open(\"method\", { load: true }).values[0] !== \"log1p\") {\n        return null;\n    }\n\n    let ghandle3 = ghandle2.open(\"seed\");\n    if (ghandle3.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle3.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (ghandle3.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (ghandle3.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n    if (ghandle3.open(\"along\", { load: true }).values[0] !== 1) {\n        return null;\n    }\n    let sf = ghandle3.open(\"value\", { load: true }).values;\n\n    let ahandle = ghandle3.open(\"seed\");\n    if (ahandle.readAttribute(\"delayed_type\").values[0] !== \"array\") {\n        return null;\n    }\n    if (ahandle.readAttribute(\"delayed_array\").values[0] !== \"custom alabaster local array\") {\n        return null;\n    }\n    let path = ahandle.open(\"path\", { load: true }).values[0];\n\n    let mat;\n    let output;\n    try {\n        mat = await extract_assay_raw(path, navigator, false); // don't force it to be integer, but we don't mind if it is.\n        output = scran.normalizeCounts(mat, { sizeFactors: sf, center: false });\n    } finally {\n        scran.free(mat);\n    }\n\n    return output;\n}\n\nasync function extract_assay(meta, assay, navigator, forceInteger) {\n    if (typeof assay == \"string\") {\n        var counter = 0;\n        for (const ass of meta.summarized_experiment.assays) {\n            if (ass.name == assay) {\n                assay = counter;\n                break;\n            }\n            counter++;\n        }\n        if (counter == meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay '\" + assay + \"' not found\");\n        }\n    } else {\n        if (assay >= meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay \" + String(assay) + \" out of range\");\n        }\n    }\n\n    let asspath = meta.summarized_experiment.assays[assay].resource.path;\n    return extract_assay_raw(asspath, navigator, forceInteger);\n}\n\nasync function extract_assay_raw(asspath, navigator, forceInteger) {\n    let assmeta = await navigator.metadata(asspath);\n    let contents = await navigator.file(assmeta.path);\n    let output;\n\n    let schema = assmeta[\"$schema\"];\n    let is_dense = schema.startsWith(\"hdf5_dense_array/\");\n    let is_sparse = schema.startsWith(\"hdf5_sparse_matrix/\");\n\n    if (is_dense || is_sparse) {\n        let name = (is_sparse ?  assmeta.hdf5_sparse_matrix.group : assmeta.hdf5_dense_array.dataset);\n        let stuff = scran.realizeFile(contents);\n        try {\n            output = scran.initializeSparseMatrixFromHdf5(stuff.path, name, { forceInteger });\n        } finally {\n            stuff.flush();\n        }\n\n    } else if (assmeta[\"$schema\"].startsWith(\"hdf5_delayed_array/\")) {\n        let stuff = scran.realizeFile(contents);\n        try {\n            let fhandle = new scran.H5File(stuff.path);\n            let ghandle = fhandle.open(assmeta.hdf5_delayed_array.group);\n\n            // TODO: replace with calls to chihaya.js.\n            output = await extract_logcounts(ghandle, navigator);\n            if (output == null) {\n                throw new Error(\"currently only supporting bakana-generated log-counts for delayed arrays\");\n            }\n        } finally {\n            stuff.flush();\n        }\n\n    } else {\n        throw new Error(\"array schema '\" + assmeta[\"$schema\"] + \"' is currently not supported\");\n    }\n\n    return output;\n}\n\nasync function extract_other_data(other_path, navigator) {\n    let othermeta = await navigator.metadata(other_path);\n    if (!othermeta[\"$schema\"].startsWith(\"json_simple_list/\")) {\n        throw new Error(\"currently only support JSON-formatted lists in the 'other_data'\");\n    }\n\n    let contents = await navigator.file(othermeta.path);\n    let ofile = new afile.SimpleFile(contents, { name: \"list.json\" });\n    let unpacked = eutils.unpackText(ofile.buffer(), { compression: (othermeta.json_simple_list.compression == \"gzip\" ? \"gz\" : \"none\") });\n    let parsed = JSON.parse(unpacked);\n    return extract_list_data_internal(parsed);\n}\n\nfunction extract_list_data_internal(obj) {\n    if (!(\"type\" in obj)) {\n        throw new Error(\"non-standard JSON object for 'json_simple_list' schema\");\n    }\n\n    if (obj.type == \"number\") {\n        if (obj.values instanceof Array) {\n            let output = new Float64Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? Number.NaN : x) \n            });\n            return output;\n        } else {\n            return (obj.values == null ? Number.NaN : obj.values);\n        }\n\n    } else if (obj.type == \"integer\") {\n        if (obj.values instanceof Array) {\n            let output = new Int32Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? -2147483648 : x) \n            });\n            return output;\n        } else {\n            return obj.values;\n        }\n\n    } else if (obj.type == \"boolean\" || obj.type == \"string\") {\n        return obj.values;\n\n    } else if (obj.type == \"list\") {\n        if (\"names\" in obj) {\n            let output = {};\n            for (var i = 0; i < obj.values.length; i++) {\n                output[obj.names[i]] = extract_list_data_internal(obj.values[i]);\n            }\n            return output;\n        } else {\n            let output = [];\n            for (var i = 0; i < obj.values.length; i++) {\n                output.push(extract_list_data_internal(obj.values[i]));\n            }\n            return output;\n        }\n\n    } else if (obj.type == \"nothing\") {\n        return null;\n\n    } else {\n        console.warn(\"JSON simple list containing type '\" + obj.type + \"' is not yet supported\");\n        return null;\n    }\n}\n\n/***********************\n ******* Cacher ********\n ***********************/\n\n// As we'll be using the metadata often, we cache it at this level. This\n// removes the burden of caching on the implementation of the navigator. \nclass MetadataCacheWrapper {\n    #navigator;\n    #metadata_cache;\n\n    constructor(nav) {\n        this.#navigator = nav;\n        this.#metadata_cache = {};\n    }\n\n    clear() {\n        this.#metadata_cache = {};\n        if (\"clear\" in this.#navigator) {\n            this.#navigator.clear();\n        }\n    }\n\n    async metadata(path) {\n        if (path in this.#metadata_cache) {\n            return this.#metadata_cache[path];\n        } else {\n            let content = await this.#navigator.metadata(path);\n            this.#metadata_cache[path] = content;\n            return content;\n        }\n    }\n\n    file(path) {\n        return this.#navigator.file(path);\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n * Subclasses should define `abbreviate()` and `serialize()` methods, as well as the static `format()` and `unserialize()` methods - \n * see the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md) for more details.\n */\nexport class AbstractArtifactdbDataset {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbDataset.defaults();\n\n        // Don't call this.clear() here. We don't want to clear the navigator's\n        // cache at this point, as the navigator might contain some cached\n        // values when passed to the constructor. We should respect any caches\n        // until we're specifically told to discard it with clear() or cache =\n        // false in load() or summary().\n        this.#reset_local_caches();\n        return;\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            rnaCountAssay: 0, \n            adtCountAssay: 0, \n            crisprCountAssay: 0,\n            rnaExperiment: \"\", \n            adtExperiment: \"Antibody Capture\", \n            crisprExperiment: \"CRISPR Guide Capture\",\n            primaryRnaFeatureIdColumn: null, \n            primaryAdtFeatureIdColumn: null,\n            primaryCrisprFeatureIdColumn: null \n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbDataset#load load} (but not {@linkcode AbstractArtifactdbDataset#summary summary}).\n     * @param {string|number} [options.rnaCountAssay] - Name or index of the assay containing the RNA count matrix.\n     * @param {string|number} [options.adtCountAssay] - Name or index of the assay containing the ADT count matrix.\n     * @param {string|number} [options.crisprCountAssay] - Name or index of the assay containing the CRISPR count matrix.\n     * @param {?(string|number)} [options.rnaExperiment] - Name or index of the alternative experiment containing gene expression data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     * @param {?(string|number)} [options.adtExperiment] - Name or index of the alternative experiment containing ADT data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     * @param {?(string|number)} [options.crisprExperiment] - Name or index of the alternative experiment containing CRISPR guide data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     * @param {?(string|number)} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbDataset#load load} or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator)\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode AbstractArtifactdbDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n\n        let fmapping = {\n            RNA: this.#options.rnaExperiment, \n            ADT: this.#options.adtExperiment, \n            CRISPR: this.#options.crisprExperiment \n        };\n\n        let altnames = [];\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta && \"alternative_experiments\" in full_meta.single_cell_experiment) {\n            altnames = full_meta.single_cell_experiment.alternative_experiments.map(x => x.name);\n        }\n\n        let preview = futils.extractRemappedPrimaryIds(this.#raw_features, altnames, fmapping, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode AbstractArtifactdbDataset#defaults defaults} or with {@linkcode AbstractArtifactdbDataset#setOptions setOptions}.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#options.rnaExperiment, assay: this.#options.rnaCountAssay },\n            ADT: { exp: this.#options.adtExperiment, assay: this.#options.adtCountAssay },\n            CRISPR: { exp: this.#options.crisprExperiment, assay: this.#options.crisprCountAssay }\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let altmap = {};\n        let alts = [];\n        if (\"single_cell_experiment\" in full_meta && \"alternative_experiments\" in full_meta.single_cell_experiment) {\n            alts = full_meta.single_cell_experiment.alternative_experiments;\n            for (const alt of alts) {\n                altmap[alt.name] = alt.resource.path;\n            }\n        }\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let meta = null;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        meta = full_meta;\n                    } else {\n                        if (!(v.exp in altmap)) {\n                            continue;\n                        }\n                        meta = await this.#navigator.metadata(altmap[v.exp]);\n                    }\n                } else {\n                    if (v.exp >= alts.length) {\n                        continue;\n                    }\n                    name = alts[v.exp].name;\n                    meta = await this.#navigator.metadata(alts[v.exp].resource.path);\n                }\n\n                let loaded = await extract_assay(meta, v.assay, this.#navigator, true);\n                output.matrix.add(k, loaded);\n                output.features[k] = this.#raw_features[name]; \n            }\n\n            output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentDatasetBase = AbstractArtifactdbDataset;\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n */\nexport class AbstractArtifactdbResult {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n    #raw_other;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbResult.defaults();\n\n        // Don't call clear() here, see comments above in the Dataset constructor.\n        this.#reset_local_caches();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbResults#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return { \n            primaryAssay: 0,\n            isPrimaryNormalized: true,\n            reducedDimensionNames: null\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbResult#load load} (but not {@linkcode AbstractArtifactdbResult#summary summary}.\n     * @param {object|string|number} [options.primaryAssay] - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     * @param {object|boolean} [options.isPrimaryNormalized] - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     * @param {?Array} [options.reducedDimensionNames] - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setOptions(options) {\n        // Cloning to avoid pass-by-reference links.\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = bioc.CLONE(v);\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#raw_other = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbResult#load load} or {@linkcode AbstractArtifactdbResult#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    async #other() {\n        if (this.#raw_other !== null) {\n            return;\n        }\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"other_data\" in full_meta.summarized_experiment) {\n            let other_path = full_meta.summarized_experiment.other_data.resource.path;\n            this.#raw_other = await extract_other_data(other_path, this.#navigator);\n        } else {\n            this.#raw_other = {};\n        }\n        return;\n    }\n\n    async #get_all_reddim_names(rd_meta, store) {\n        for (const red of rd_meta) {\n            let redmeta = await this.#navigator.metadata(red.resource.path);\n            if (redmeta[\"$schema\"].startsWith(\"hdf5_dense_array/\") && redmeta.array.dimensions.length == 2) {\n                store.push(red.name);\n            }\n        }\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async \n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator),\n            reduced_dimension_names: [],\n            other_metadata: this.#raw_other\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta) {\n            let reddim_meta = full_meta.single_cell_experiment.reduced_dimensions;\n            await this.#get_all_reddim_names(reddim_meta, output.reduced_dimension_names);\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {},\n            other_metadata: this.#raw_other\n        };\n\n        // Fetch the reduced dimensions first.\n        {\n            let reddims = this.#options.reducedDimensionNames;\n            let reddim_meta = full_meta.single_cell_experiment.reduced_dimensions;\n\n            if (reddims == null) {\n                reddims = [];\n                await this.#get_all_reddim_names(reddim_meta, reddims);\n            }\n\n            if (reddims.length > 0) {\n                let redmap = {};\n                for (const red of reddim_meta) {\n                    redmap[red.name] = red.resource.path;\n                }\n\n                for (const k of reddims) {\n                    let redmeta = await this.#navigator.metadata(redmap[k]); // this should be only HDF5 dense matrices.\n                    let dims = redmeta.array.dimensions;\n                    let redcontents = await this.#navigator.file(redmeta.path); \n\n                    let realized = scran.realizeFile(redcontents);\n                    let acquired = [];\n                    try {\n                        let fhandle = new scran.H5File(realized.path);\n                        let dhandle = fhandle.open(redmeta.hdf5_dense_array.dataset, { load: true });\n                        let contents = dhandle.values;\n                        for (var d = 0; d < dims[1]; d++) {\n                            acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n                        }\n                    } finally {\n                        realized.flush();\n                    }\n\n                    output.reduced_dimensions[k] = acquired;\n                }\n            }\n        }\n\n        // Now fetching the assay matrix.\n        {\n            let altmap = {};\n            if (\"single_cell_experiment\" in full_meta && \"alternative_experiments\" in full_meta.single_cell_experiment) {\n                for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n                    altmap[alt.name] = alt.resource.path;\n                }\n            }\n\n            try {\n                for (const [k, v] of Object.entries(this.#raw_features)) {\n                    let curassay = this.#options.primaryAssay;\n                    if (typeof curassay == \"object\") {\n                        if (k in curassay) {\n                            curassay = curassay[k];\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    let curnormalized = this.#options.isPrimaryNormalized;\n                    if (typeof curnormalized == \"object\") {\n                        if (k in curnormalized) {\n                            curnormalized = curnormalized[k];\n                        } else {\n                            curnormalized = true;\n                        }\n                    }\n\n                    let meta;\n                    if (k === \"\") {\n                        meta = full_meta;\n                    } else {\n                        meta = await this.#navigator.metadata(altmap[k]);\n                    }\n\n                    let loaded = await extract_assay(meta, curassay, this.#navigator, !curnormalized);\n                    output.matrix.add(k, loaded);\n\n                    if (!curnormalized) {\n                        let normed = scran.normalizeCounts(loaded, { allowZeros: true });\n                        output.matrix.add(k, normed);\n                    }\n\n                    output.features[k] = this.#raw_features[k];\n                }\n\n            } catch (e) {\n                scran.free(output.matrix);\n                throw e;\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentResultBase = AbstractArtifactdbResult;\n","import * as wasm from \"../wasm.js\";\nimport * as utils from \"../utils.js\"; \nimport * as wa from \"wasmarrays.js\";\n\nexport function computePerCellQcMetrics(x, subsets, run) {\n    var output;\n    var tmp_subsets = [];\n    var subset_offsets;\n\n    try {\n        let nsubsets = 0;\n        let offset_offset = 0;\n\n        if (subsets != null) {\n            nsubsets = subsets.length;\n            subset_offsets = utils.createBigUint64WasmArray(nsubsets);\n            offset_offset = subset_offsets.offset;\n            let offset_arr = subset_offsets.array();\n\n            for (var i = 0; i < nsubsets; i++) {\n                // This will either create a cheap view, or it'll clone\n                // 'subsets' into the appropriate memory space.\n                let current = utils.wasmifyArray(subsets[i], \"Uint8WasmArray\");\n                if (current.length != x.numberOfRows()) {\n                    throw new Error(\"length of each array in 'subsets' should be equal to the matrix rows\");\n                }\n                tmp_subsets.push(current);\n                offset_arr[i] = BigInt(current.offset);\n            }\n        }\n\n        output = run(x.matrix, nsubsets, offset_offset);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(subset_offsets);\n        for (const y of tmp_subsets) {\n            utils.free(y);\n        }\n    }\n\n    return output;\n}\n","/* @license\nPapa Parse\nv5.5.3\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n((e,t)=>{\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()})(this,function r(){var n=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==n?n:{};var d,s=!n.document&&!!n.postMessage,a=n.IS_PAPA_WORKER||!1,o={},h=0,v={};function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=b(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(t,e){var i=parseInt(this._config.skipFirstNLines)||0;if(this.isFirstChunk&&0<i){let e=this._config.newline;e||(r=this._config.quoteChar||'\"',e=this._handle.guessLineEndings(t,r)),t=[...t.split(e).slice(i)].join(e)}this.isFirstChunk&&U(this._config.beforeFirstChunk)&&void 0!==(r=this._config.beforeFirstChunk(t))&&(t=r),this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+t,r=(this._partialLine=\"\",this._handle.parse(i,this._baseIndex,!this._finished));if(!this._handle.paused()&&!this._handle.aborted()){t=r.meta.cursor,i=(this._finished||(this._partialLine=i.substring(t-this._baseIndex),this._baseIndex=t),r&&r.data&&(this._rowCount+=r.data.length),this._finished||this._config.preview&&this._rowCount>=this._config.preview);if(a)n.postMessage({results:r,workerId:v.WORKER_ID,finished:i});else if(U(this._config.chunk)&&!e){if(this._config.chunk(r,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);this._completeResults=r=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(r.data),this._completeResults.errors=this._completeResults.errors.concat(r.errors),this._completeResults.meta=r.meta),this._completed||!i||!U(this._config.complete)||r&&r.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),i||r&&r.meta.paused||this._nextChunk(),r}this._halted=!0},this._sendError=function(e){U(this._config.error)?this._config.error(e):a&&this._config.error&&n.postMessage({workerId:v.WORKER_ID,error:e,finished:!1})}}function f(e){var r;(e=e||{}).chunkSize||(e.chunkSize=v.RemoteChunkSize),u.call(this,e),this._nextChunk=s?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),s||(r.onload=y(this._chunkLoaded,this),r.onerror=y(this._chunkError,this)),r.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!s),this._config.downloadRequestHeaders){var e,t=this._config.downloadRequestHeaders;for(e in t)r.setRequestHeader(e,t[e])}var i;this._config.chunkSize&&(i=this._start+this._config.chunkSize-1,r.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+i));try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}s&&0===r.status&&this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize||r.responseText.length,this._finished=!this._config.chunkSize||this._start>=(e=>null!==(e=e.getResponseHeader(\"Content-Range\"))?parseInt(e.substring(e.lastIndexOf(\"/\")+1)):-1)(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){e=r.statusText||e;this._sendError(new Error(e))}}function l(e){(e=e||{}).chunkSize||(e.chunkSize=v.LocalChunkSize),u.call(this,e);var i,r,n=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,r=e.slice||e.webkitSlice||e.mozSlice,n?((i=new FileReader).onload=y(this._chunkLoaded,this),i.onerror=y(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input,t=(this._config.chunkSize&&(t=Math.min(this._start+this._config.chunkSize,this._input.size),e=r.call(e,this._start,t)),i.readAsText(e,this._config.encoding));n||this._chunkLoaded({target:{result:t}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function c(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){var e,t;if(!this._finished)return e=this._config.chunkSize,i=e?(t=i.substring(0,e),i.substring(e)):(t=i,\"\"),this._finished=!i,this.parseChunk(t)}}function p(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=y(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=y(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=y(function(){this._streamCleanUp(),r=!0,this._streamData(\"\")},this),this._streamCleanUp=y(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function i(m){var n,s,a,t,o=Math.pow(2,53),h=-o,u=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,d=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,i=this,r=0,f=0,l=!1,e=!1,c=[],p={data:[],errors:[],meta:{}};function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){if(p&&a&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+v.DefaultDelimiter+\"'\"),a=!1),m.skipEmptyLines&&(p.data=p.data.filter(function(e){return!y(e)})),_()){if(p)if(Array.isArray(p.data[0])){for(var e=0;_()&&e<p.data.length;e++)p.data[e].forEach(t);p.data.splice(0,1)}else p.data.forEach(t);function t(e,t){U(m.transformHeader)&&(e=m.transformHeader(e,t)),c.push(e)}}function i(e,t){for(var i=m.header?{}:[],r=0;r<e.length;r++){var n=r,s=e[r],s=((e,t)=>(e=>(m.dynamicTypingFunction&&void 0===m.dynamicTyping[e]&&(m.dynamicTyping[e]=m.dynamicTypingFunction(e)),!0===(m.dynamicTyping[e]||m.dynamicTyping)))(e)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&((e=>{if(u.test(e)){e=parseFloat(e);if(h<e&&e<o)return 1}})(t)?parseFloat(t):d.test(t)?new Date(t):\"\"===t?null:t):t)(n=m.header?r>=c.length?\"__parsed_extra\":c[r]:n,s=m.transform?m.transform(s,n):s);\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>c.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+c.length+\" fields but parsed \"+r,f+t):r<c.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+c.length+\" fields but parsed \"+r,f+t)),i}var r;p&&(m.header||m.dynamicTyping||m.transform)&&(r=1,!p.data.length||Array.isArray(p.data[0])?(p.data=p.data.map(i),r=p.data.length):p.data=i(p.data,0),m.header&&p.meta&&(p.meta.fields=c),f+=r)}function _(){return m.header&&0===c.length}function k(e,t,i,r){e={type:e,code:t,message:i};void 0!==r&&(e.row=r),p.errors.push(e)}U(m.step)&&(t=m.step,m.step=function(e){p=e,_()?g():(g(),0!==p.data.length&&(r+=e.data.length,m.preview&&r>m.preview?s.abort():(p.data=p.data[0],t(p,i))))}),this.parse=function(e,t,i){var r=m.quoteChar||'\"',r=(m.newline||(m.newline=this.guessLineEndings(e,r)),a=!1,m.delimiter?U(m.delimiter)&&(m.delimiter=m.delimiter(e),p.meta.delimiter=m.delimiter):((r=((e,t,i,r,n)=>{var s,a,o,h;n=n||[\",\",\"\\t\",\"|\",\";\",v.RECORD_SEP,v.UNIT_SEP];for(var u=0;u<n.length;u++){for(var d,f=n[u],l=0,c=0,p=0,g=(o=void 0,new E({comments:r,delimiter:f,newline:t,preview:10}).parse(e)),_=0;_<g.data.length;_++)i&&y(g.data[_])?p++:(d=g.data[_].length,c+=d,void 0===o?o=d:0<d&&(l+=Math.abs(d-o),o=d));0<g.data.length&&(c/=g.data.length-p),(void 0===a||l<=a)&&(void 0===h||h<c)&&1.99<c&&(a=l,s=f,h=c)}return{successful:!!(m.delimiter=s),bestDelimiter:s}})(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess)).successful?m.delimiter=r.bestDelimiter:(a=!0,m.delimiter=v.DefaultDelimiter),p.meta.delimiter=m.delimiter),b(m));return m.preview&&m.header&&r.preview++,n=e,s=new E(r),p=s.parse(n,t,i),g(),l?{meta:{paused:!0}}:p||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,s.abort(),n=U(m.chunk)?\"\":n.substring(s.getCharIndex())},this.resume=function(){i.streamer._halted?(l=!1,i.streamer.parseChunk(n,!0)):setTimeout(i.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,s.abort(),p.meta.aborted=!0,U(m.complete)&&m.complete(p),n=\"\"},this.guessLineEndings=function(e,t){e=e.substring(0,1048576);var t=new RegExp(P(t)+\"([^]*?)\"+P(t),\"gm\"),i=(e=e.replace(t,\"\")).split(\"\\r\"),t=e.split(\"\\n\"),e=1<t.length&&t[0].length<i[0].length;if(1===i.length||e)return\"\\n\";for(var r=0,n=0;n<i.length;n++)\"\\n\"===i[n][0]&&r++;return r>=i.length/2?\"\\r\\n\":\"\\r\"}}function P(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(C){var S=(C=C||{}).delimiter,O=C.newline,x=C.comments,I=C.step,A=C.preview,T=C.fastMode,D=null,L=!1,F=null==C.quoteChar?'\"':C.quoteChar,j=F;if(void 0!==C.escapeChar&&(j=C.escapeChar),(\"string\"!=typeof S||-1<v.BAD_DELIMITERS.indexOf(S))&&(S=\",\"),x===S)throw new Error(\"Comment character same as delimiter\");!0===x?x=\"#\":(\"string\"!=typeof x||-1<v.BAD_DELIMITERS.indexOf(x))&&(x=!1),\"\\n\"!==O&&\"\\r\"!==O&&\"\\r\\n\"!==O&&(O=\"\\n\");var z=0,M=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=S.length,s=O.length,a=x.length,o=U(I),h=[],u=[],d=[],f=z=0;if(!i)return w();if(T||!1!==T&&-1===i.indexOf(F)){for(var l=i.split(O),c=0;c<l.length;c++){if(d=l[c],z+=d.length,c!==l.length-1)z+=O.length;else if(r)return w();if(!x||d.substring(0,a)!==x){if(o){if(h=[],k(d.split(S)),R(),M)return w()}else k(d.split(S));if(A&&A<=c)return h=h.slice(0,A),w(!0)}}return w()}for(var p=i.indexOf(S,z),g=i.indexOf(O,z),_=new RegExp(P(j)+P(F),\"g\"),m=i.indexOf(F,z);;)if(i[z]===F)for(m=z,z++;;){if(-1===(m=i.indexOf(F,m+1)))return r||u.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:h.length,index:z}),E();if(m===n-1)return E(i.substring(z,m).replace(_,F));if(F===j&&i[m+1]===j)m++;else if(F===j||0===m||i[m-1]!==j){-1!==p&&p<m+1&&(p=i.indexOf(S,m+1));var y=v(-1===(g=-1!==g&&g<m+1?i.indexOf(O,m+1):g)?p:Math.min(p,g));if(i.substr(m+1+y,e)===S){d.push(i.substring(z,m).replace(_,F)),i[z=m+1+y+e]!==F&&(m=i.indexOf(F,z)),p=i.indexOf(S,z),g=i.indexOf(O,z);break}y=v(g);if(i.substring(m+1+y,m+1+y+s)===O){if(d.push(i.substring(z,m).replace(_,F)),b(m+1+y+s),p=i.indexOf(S,z),m=i.indexOf(F,z),o&&(R(),M))return w();if(A&&h.length>=A)return w(!0);break}u.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:h.length,index:z}),m++}}else if(x&&0===d.length&&i.substring(z,z+a)===x){if(-1===g)return w();z=g+s,g=i.indexOf(O,z),p=i.indexOf(S,z)}else if(-1!==p&&(p<g||-1===g))d.push(i.substring(z,p)),z=p+e,p=i.indexOf(S,z);else{if(-1===g)break;if(d.push(i.substring(z,g)),b(g+s),o&&(R(),M))return w();if(A&&h.length>=A)return w(!0)}return E();function k(e){h.push(e),f=z}function v(e){var t=0;return t=-1!==e&&(e=i.substring(m+1,e))&&\"\"===e.trim()?e.length:t}function E(e){return r||(void 0===e&&(e=i.substring(z)),d.push(e),z=n,k(d),o&&R()),w()}function b(e){z=e,k(d),d=[],g=i.indexOf(O,z)}function w(e){if(C.header&&!t&&h.length&&!L){var s=h[0],a=Object.create(null),o=new Set(s);let n=!1;for(let r=0;r<s.length;r++){let i=s[r];if(a[i=U(C.transformHeader)?C.transformHeader(i,r):i]){let e,t=a[i];for(;e=i+\"_\"+t,t++,o.has(e););o.add(e),s[r]=e,a[i]++,n=!0,(D=null===D?{}:D)[e]=i}else a[i]=1,s[r]=i;o.add(i)}n&&console.warn(\"Duplicate headers found and renamed.\"),L=!0}return{data:h,errors:u,meta:{delimiter:S,linebreak:O,aborted:M,truncated:!!e,cursor:f+(t||0),renamedHeaders:D}}}function R(){I(w()),h=[],u=[]}},this.abort=function(){M=!0},this.getCharIndex=function(){return z}}function g(e){var t=e.data,i=o[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){r=!0,_(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:m,resume:m};if(U(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else U(i.userChunk)&&(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!r&&_(t.workerId,t.results)}function _(e,t){var i=o[e];U(i.userComplete)&&i.userComplete(t),i.terminate(),delete o[e]}function m(){throw new Error(\"Not implemented.\")}function b(e){if(\"object\"!=typeof e||null===e)return e;var t,i=Array.isArray(e)?[]:{};for(t in e)i[t]=b(e[t]);return i}function y(e,t){return function(){e.apply(t,arguments)}}function U(e){return\"function\"==typeof e}return v.parse=function(e,t){var i=(t=t||{}).dynamicTyping||!1;U(i)&&(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!U(t.transform)&&t.transform,!t.worker||!v.WORKERS_SUPPORTED)return i=null,v.NODE_STREAM_INPUT,\"string\"==typeof e?(e=(e=>65279!==e.charCodeAt(0)?e:e.slice(1))(e),i=new(t.download?f:c)(t)):!0===e.readable&&U(e.read)&&U(e.on)?i=new p(t):(n.File&&e instanceof File||e instanceof Object)&&(i=new l(t)),i.stream(e);(i=(()=>{var e;return!!v.WORKERS_SUPPORTED&&(e=(()=>{var e=n.URL||n.webkitURL||null,t=r.toString();return v.BLOB_URL||(v.BLOB_URL=e.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",t,\")();\"],{type:\"text/javascript\"})))})(),(e=new n.Worker(e)).onmessage=g,e.id=h++,o[e.id]=e)})()).userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=U(t.step),t.chunk=U(t.chunk),t.complete=U(t.complete),t.error=U(t.error),delete t.worker,i.postMessage({input:e,config:t,workerId:i.id})},v.unparse=function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,i=!1,r=null,o=!1,h=((()=>{if(\"object\"==typeof t){if(\"string\"!=typeof t.delimiter||v.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter),\"boolean\"!=typeof t.quotes&&\"function\"!=typeof t.quotes&&!Array.isArray(t.quotes)||(n=t.quotes),\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines),\"string\"==typeof t.newline&&(y=t.newline),\"string\"==typeof t.quoteChar&&(s=t.quoteChar),\"boolean\"==typeof t.header&&(_=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");r=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s),t.escapeFormulae instanceof RegExp?o=t.escapeFormulae:\"boolean\"==typeof t.escapeFormulae&&t.escapeFormulae&&(o=/^[=+\\-@\\t\\r].*$/)}})(),new RegExp(P(s),\"g\"));\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if(\"object\"==typeof e[0])return u(r||Object.keys(e[0]),e,i)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||r),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error(\"Unable to serialize unrecognized input\");function u(e,t,i){var r=\"\",n=(\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t)),Array.isArray(e)&&0<e.length),s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(r+=m),r+=k(e[a],a);0<t.length&&(r+=y)}for(var o=0;o<t.length;o++){var h=(n?e:t[o]).length,u=!1,d=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&&!n&&(u=\"greedy\"===i?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===i&&n){for(var f=[],l=0;l<h;l++){var c=s?e[l]:l;f.push(t[o][c])}u=\"\"===f.join(\"\").trim()}if(!u){for(var p=0;p<h;p++){0<p&&!d&&(r+=m);var g=n&&s?e[p]:p;r+=k(t[o][g],p)}o<t.length-1&&(!i||0<h&&!d)&&(r+=y)}}return r}function k(e,t){var i,r;return null==e?\"\":e.constructor===Date?JSON.stringify(e).slice(1,25):(r=!1,o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0),i=e.toString().replace(h,a),(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||((e,t)=>{for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1})(i,v.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i)}},v.RECORD_SEP=String.fromCharCode(30),v.UNIT_SEP=String.fromCharCode(31),v.BYTE_ORDER_MARK=\"\\ufeff\",v.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',v.BYTE_ORDER_MARK],v.WORKERS_SUPPORTED=!s&&!!n.Worker,v.NODE_STREAM_INPUT=1,v.LocalChunkSize=10485760,v.RemoteChunkSize=5242880,v.DefaultDelimiter=\",\",v.Parser=E,v.ParserHandle=i,v.NetworkStreamer=f,v.FileStreamer=l,v.StringStreamer=c,v.ReadableStreamStreamer=p,n.jQuery&&((d=n.jQuery).fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&n.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0===h.length)U(o.complete)&&o.complete();else{var e,t,i,r,n=h[0];if(U(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,i=n.inputElem,r=s.reason,void(U(o.error)&&o.error({name:e},t,i,r));if(\"skip\"===s.action)return void u();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){U(a)&&a(e,n.file,n.inputElem),u()},v.parse(n.file,n.instanceConfig)}}function u(){h.splice(0,1),e()}}),a&&(n.onmessage=function(e){e=e.data;void 0===v.WORKER_ID&&e&&(v.WORKER_ID=e.workerId);\"string\"==typeof e.input?n.postMessage({workerId:v.WORKER_ID,results:v.parse(e.input,e.config),finished:!0}):(n.File&&e.input instanceof File||e.input instanceof Object)&&(e=v.parse(e.input,e.config))&&n.postMessage({workerId:v.WORKER_ID,results:e,finished:!0})}),(f.prototype=Object.create(u.prototype)).constructor=f,(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(c.prototype)).constructor=c,(p.prototype=Object.create(u.prototype)).constructor=p,v});","import * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as gc from \"./gc.js\";\nimport * as subset from \"./subset.js\";\n\nfunction harvest_matrices(x) {\n    let output = utils.createBigUint64WasmArray(x.length);\n    let arr = output.array();\n    for (var i = 0; i < x.length; i++) {\n        arr[i] = BigInt(x[i].matrix.$$.ptr);\n    }\n    return output;\n}\n\n/**\n * Combine matrices by column, where all matrices contain data for the same features, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of features.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by column.\n */\nexport function cbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.cbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by row, where all matrices contain data for the same cells, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of cells.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by row.\n */\nexport function rbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.rbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n\n/**\n * Combine matrices by column, after subsetting each matrix to the intersection of common features.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * @param {Array} names - Array of length equal to `inputs`.\n * Each entry should be an Array containing the row names of the corresponding entry of `inputs`.\n * Names should correspond to the rows of that entry of `inputs`.\n * Any `null` names are ignored.\n * If names are duplicated within each array, only the first occurrence is considered in the intersection.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the combined matrices.\n * - `indices`, an Int32Array of length equal to the number of rows in `matrix`.\n *    This contains the index of the row in the first entry of `inputs` corresponding to each row of `matrix`,\n *    i.e., the gene at the `i`-th row of `matrix` is the same as the gene at the `indices[i]`-th row of `inputs[0]`.\n *    This is guaranteed to be sorted.\n * - `names`, an array of names identifying the rows of `matrix`.\n *    This is constructed by indexing the first entry of `names` with `indices`.\n */\nexport function cbindWithNames(x, names) {\n    // Find the intersection of names, following the order of the first entry.\n    // We do so to try to improve the chance of getting an ordered subset for efficient extraction.\n    let ordered_intersection = [];\n    let remapping = new Map;\n\n    if (names.length > 0) {\n        let intersection = new Set;\n        for (var n = 0; n < names.length; ++n) {\n            let current = new Set();\n            for (const name of names[n]) {\n                if (name !== null) {\n                    if (n == 0 || intersection.has(name)) {\n                        current.add(name);\n                    }\n                }\n            }\n            intersection = current;\n        }\n\n        for (const name of names[0]) {\n            if (name !== null && intersection.has(name)) {\n                let candidate = remapping.get(name);\n                if (candidate == undefined) { // only consider the first occurence.\n                    remapping.set(name, ordered_intersection.length);\n                    ordered_intersection.push(name);\n                }\n            }\n        }\n    }\n\n    // Actually generating the combined matrix.\n    let output = {};\n    let tmp_subset = []\n    let tmp_sliced = []\n    \n    try {\n        for (var n = 0; n < names.length; ++n) {\n            let survivors = utils.createInt32WasmArray(ordered_intersection.length);\n            survivors.fill(-1);\n            let sarray = survivors.array();\n            names[n].forEach((x, i) => {\n                let candidate = remapping.get(x);\n                if (candidate !== undefined) {\n                    if (sarray[candidate] < 0) { // only consider the first occurrence.\n                        sarray[candidate] = i;\n                    }\n                }\n            });\n\n            tmp_subset.push(survivors);\n            tmp_sliced.push(subset.subsetRows(x[n], survivors));\n        }\n\n        output.matrix = cbind(tmp_sliced);\n        output.indices = tmp_subset[0].slice();\n        output.names = ordered_intersection;\n\n    } catch (e) {\n        utils.free(output.matrix);\n        throw e;\n\n    } finally {\n        for (const x of tmp_subset) {\n            utils.free(x);\n        }\n        for (const x of tmp_sliced) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * Results of computing per-cell ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellAdtQcMetricsResults.html) for details.\n *\n * @external PerCellAdtQcMetricsResults\n */\n\n/**\n * Suggested filters for the ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestAdtQcFiltersResults.html) for details.\n *\n * @external SuggestAdtQcFiltersResults\n */\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellAdtQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellAdtQcMetrics)\n * and [`suggestAdtQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestAdtQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.keep_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"ADT\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestAdtQcFiltersResults} Result of filtering on the ADT-derived QC metrics.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing a vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be retained after filtering.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchKeep() {\n        return this.#cache.keep_buffer;\n    }\n\n    /**\n     * @return {external:PerCellAdtQcMetricsResults} ADT-derived QC metrics,\n     * available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode AdtQualityControlState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            guess_ids: true,\n            tag_id_column: null,\n            igg_prefix: \"IgG\",\n\n            filter_strategy: \"automatic\", \n            nmads: 3,\n            min_detected_drop: 0.1,\n\n            detected_threshold: 0,\n            igg_threshold: 1\n        };\n    }\n\n    static #configureFeatureParameters(lower_igg, annotations) {\n        let counter = val => {\n            let n = 0;\n            val.forEach(x => {\n                if (x.toLowerCase().startsWith(lower_igg)) {\n                    n++;\n                }\n            });\n            return n;\n        };\n\n        let best_key = null;\n        let best = 0;\n\n        let rn = annotations.rowNames();\n        if (rn !== null) {\n            best = counter(rn);\n        }\n\n        for (const key of annotations.columnNames()) {\n            let latest = counter(annotations.column(key));\n            if (latest > best) {\n                best_key = key;\n                best = latest;\n            }\n        }\n\n        return best_key;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * \n     * @param {object} parameters - Parameter object, equivalent to the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} [parameters.guess_ids] - Automatically choose feature-based parameters based on the feature annotations. \n     * Specifically, `tag_id_column` is set to the column with the most matches to `igg_prefix`.\n     * @param {?(string|number)} [parameters.tag_id_column] - Name or index of the column of the feature annotations that contains the tag identifiers.\n     * If `null`, the row names are used.\n     * Ignored if `guess_ids = true`.\n     * @param {?string} [parameters.igg_prefix]  - Prefix of the identifiers for isotype controls.\n     * If `null`, no prefix-based identification is performed.\n     * @param {string} [parameters.filter_strategy] - Strategy for defining a filter threshold for the QC metrics.\n     * This can be `\"automatic\"` or `\"manual\"`.\n     * @param {number} [parameters.nmads] - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * Only used when `filter_strategy = \"automatic\"`.\n     * @param {number} [parameters.min_detected_drop] - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     * Only used when `filter_strategy = \"automatic\"`.\n     * @param {number} [parameters.detected_threshold] - Manual threshold on the detected number of features for each cell.\n     * Cells are only retained if the detected number is equal to or greater than this threshold.\n     * Only used when `filter_strategy = \"manual\"`.\n     * @param {number} [parameters.igg_threshold] - Manual threshold on the isotype control totals for each cell.\n     * Cells are only retained if their totals are less than or equal to this threshold.\n     * Only used when `filter_strategy = \"manual\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, AdtQualityControlState.defaults(), [ \"automatic\" ]);\n        this.changed = false;\n\n        // Some back-compatibility here.\n        if (typeof parameters.guess_ids === \"undefined\") {\n            if (\"automatic\" in parameters) {\n                parameters.guess_ids = parameters.automatic;\n            } else {\n                parameters.guess_ids = true;\n            }\n        }\n\n        if (\n            this.#inputs.changed || \n            parameters.guess_ids !== this.#parameters.guess_ids ||\n            parameters.igg_prefix !== this.#parameters.igg_prefix ||\n            (!parameters.guess_ids && parameters.tag_id_column !== this.#parameters.tag_id_column)\n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var tag_info = this.#inputs.fetchFeatureAnnotations()[\"ADT\"];\n                var subsets = utils.allocateCachedArray(tag_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (parameters.igg_prefix !== null) {\n                    var lower_igg = parameters.igg_prefix.toLowerCase();\n                    let key = parameters.tag_id_column;\n                    if (parameters.guess_ids) {\n                        key = AdtQualityControlState.#configureFeatureParameters(lower_igg, tag_info);\n                    }\n\n                    let val = (key == null ? tag_info.rowNames() : tag_info.column(key));\n                    if (val !== null) {\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => { \n                            if (x.toLowerCase().startsWith(lower_igg)) {\n                                sub_arr[i] = 1;                        \n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"ADT\");\n                this.#cache.metrics = scran.perCellAdtQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || \n            parameters.filter_strategy !== this.#parameters.filter_strategy ||\n            parameters.nmads !== this.#parameters.nmads || \n            parameters.min_detected_drop !== this.#parameters.min_detected_drop ||\n            parameters.detected_threshold !== this.#parameters.detected_threshold ||\n            parameters.igg_threshold !== this.#parameters.igg_threshold\n        ) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n\n                if (parameters.filter_strategy === \"automatic\") {\n                    this.#cache.filters = scran.suggestAdtQcFilters(this.#cache.metrics, { numberOfMADs: parameters.nmads, block: block });\n                } else if (parameters.filter_strategy === \"manual\") {\n                    let block_levels = this.#inputs.fetchBlockLevels();\n                    this.#cache.filters = scran.emptySuggestAdtQcFiltersResults(1, block_levels === null ? 1 : block_levels.length);\n                    this.#cache.filters.detected({ copy: false }).fill(parameters.detected_threshold);\n                    this.#cache.filters.subsetSum(0, { copy: false }).fill(parameters.igg_threshold);\n                } else {\n                    throw new Error(\"unknown ADT QC filtering strategy '\" + filter_strategy + \"'\");\n                }\n\n                var keep = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"keep_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: keep });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the [`buildNeighborSearchIndex`](https://kanaverse.github.io/scran.js/global.html#buildNeighborSearchIndex) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {BuildNeighborSearchIndexResults} Index for a nearest-neighbor search,\n     * available after running {@linkcode NeighborIndexState#compute compute}.\n     */\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode NeighborIndexState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        this.#cache.raw = scran.buildNeighborSearchIndex(this.#correct.fetchCorrected(), { \n            approximate: approximate, \n            numberOfDims: this.#correct.fetchNumberOfDimensions(),\n            numberOfCells: this.#correct.fetchNumberOfCells()\n        });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} [parameters.approximate] - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, NeighborIndexState.defaults());\n        this.changed = false;\n\n        if (this.#correct.changed || parameters.approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(parameters.approximate);\n            this.changed = true;\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper for the variance modelling results, produced by {@linkcode modelGeneVar}.\n * @hideconstructor\n */\nexport class ModelGeneVariancesResults {\n    #id;\n    #results;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVariancesResults#numberOfBlocks numberOfBlocks}.\n     * Ignored if {@linkcode ModelGeneVariancesResults#isBlocked isBlocked} returns false.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block = null`).\n     */\n    means(options = {}) {\n        const { block = null, copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.means(block == null ? -1 : block), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVariancesResults#numberOfBlocks numberOfBlocks}.\n     * Ignored if {@linkcode ModelGeneVariancesResults#isBlocked isBlocked} returns false.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the variance of log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block = null`).\n     */\n    variances(options = {}) {\n        const { block = null, copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.variances(block == null ? -1 : block), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVariancesResults#numberOfBlocks numberOfBlocks}.\n     * Ignored if {@linkcode ModelGeneVariancesResults#isBlocked isBlocked} returns false.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the fitted value of the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block = null`).\n     */\n    fitted(options = {}) {\n        const { block = null, copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.fitted(block == null ? -1 : block), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVariancesResults#numberOfBlocks numberOfBlocks}.\n     * Ignored if {@linkcode ModelGeneVariancesResults#isBlocked isBlocked} returns false.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the residuals from the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block = null`).\n     */\n    residuals(options = {}) {\n        const { block = null, copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.residuals(block == null ? -1 : block), copy);\n    }\n\n    /**\n     * @return {number} Number of blocks used.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {boolean} Whether blocking was used during trend fitting.\n     */\n    isBlocked() {\n        return this.#results.isBlocked();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Model the mean-variance trend across genes.\n *\n * @param {ScranMatrix} x - The normalized log-expression matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to fit the mean-variance trend within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {number} [options.span=0.3] - Span to use for the LOWESS trend fitting.\n * @param {string} [options.blockWeightPolicy=\"variable\"] The policy for weighting each block so that it has the same contribution to the average statistics.\n *\n * - `\"variable\"` ensures that, past a certain size (default 1000 cells), larger blocks do not dominate the definition of the PC space.\n *   Below the threshold size, blocks are weighted in proportion to their size to reduce the influence of very small blocks. \n * - `\"equal\"` uses the same weight for each block, regardless of size.\n * - `\"none\"` does not apply any extra weighting, i.e., the contribution of each block is proportional to its size.\n *\n * This option is only used if `block` is not `null`.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ModelGeneVariancesResults} Object containing the variance modelling results.\n */\nexport function modelGeneVariances(x, options = {}) {\n    const { block = null, span = 0.3, blockWeightPolicy = \"variable\", numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var block_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.model_gene_variances(x.matrix, use_blocks, bptr, span, blockWeightPolicy, nthreads),\n            ModelGeneVariancesResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n","import * as wa from \"wasmarrays.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Convert an arbitrary array into a R-style factor, with integer indices into an array of levels.\n * This is useful for formatting grouping or blocking vectors for {@linkcode scoreMarkers}, {@linkcode modelGeneVar}, etc.\n *\n * @param {Array|TypedArray} x - Array of values to be converted into a factor.\n * \n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asWasmArray=true] - Whether to return an Int32WasmArray instance for the indices.\n * If `false`, an Int32Array is returned instead.\n * Only used if `buffer` is not supplied.\n * @param {?(Int32WasmArray|Int32Array)} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to that of `x`.\n * @param {?Array} [options.levels=null] - An existing array of known levels to be matched against `x`.\n * Values in `x` that are not in `levels` are considered to be invalid.\n * If `null`, the levels are automatically inferred from `x`; these will be sorted if all-numeric or all-string.\n * @param {string} [options.action=\"error\"] - Action to take when invalid values (i.e., null, NaNs) are detected in `x`.\n *\n * - `\"none\"`: the index is silently set to `placeholder`.\n * - `\"warn\"`: a warning is raised on the first occurrence of an invalid value, and the index is set to `placeholder`.\n * - `\"error\"`: an error is raised.\n * \n * @param {number} [options.placeholder=-1] - Placeholder index to use upon detecting invalid values in `x`.\n *\n * @return {object} Object containing:\n *\n * - `ids`: an Int32WasmArray or Int32Array of length equal to `x`, containing the index into `levels` for each cell.\n * - `levels`: an array of unique levels, such that `Array.from(ids).map(i => levels[i])` returns the same contents as `x` (aside from invalid values).\n *   If an input `levels` is supplied, this is returned directly.\n *\n * If `buffer` was supplied, it is used as the value of the `ids` property.\n */\nexport function convertToFactor(x, options = {}) {\n    let { asWasmArray = true, buffer = null, levels = null, action = \"error\", placeholder = -1, ...others } = options;\n    utils.checkOtherOptions(others);\n    let local_buffer;\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (!warned) {\n                console.warn (\"replacing invalid values with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected invalid value (e.g., null, NaN) in 'x'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling invalid entries\");\n    }\n\n    try {\n        if (buffer == null) {\n            local_buffer = (asWasmArray ? utils.createInt32WasmArray(x.length) : new Int32Array(x.length));\n            buffer = local_buffer;\n        } else {\n            if (buffer.length !== x.length) {\n                throw new Error(\"'buffer' should have length equal to that of 'x'\");\n            }\n            asWasmArray = buffer instanceof wa.Int32WasmArray;\n        }\n\n        let barr = (asWasmArray ? buffer.array() : buffer); // no allocations from this point onwards!\n        let mapping = new Map;\n\n        if (levels == null) {\n            levels = [];\n            for (var i = 0; i < x.length; i++) {\n                let y = x[i];\n                if (y == null || (typeof y == \"number\" && !Number.isFinite(y))) {\n                    failure();\n                    barr[i] = placeholder;\n                    continue;\n                }\n\n                let existing = mapping.get(y);\n                if (typeof existing == \"undefined\") {\n                    let n = levels.length;\n                    mapping.set(y, n);\n                    levels.push(y);\n                    barr[i] = n;\n                } else {\n                    barr[i] = existing;\n                }\n            }\n\n            // Sorting them by default, to make life nicer.\n            if (levels.every(x => typeof x == \"string\")) {\n                let oldlevels = levels.slice();\n                levels.sort();\n                resetLevels({ ids: buffer, levels: oldlevels }, levels);\n            } else if (levels.every(x => typeof x == \"number\")) {\n                let oldlevels = levels.slice();\n                levels.sort((a, b) => a - b);\n                resetLevels({ ids: buffer, levels: oldlevels }, levels);\n            }\n\n        } else {\n            for (var l = 0; l < levels.length; l++) {\n                mapping.set(levels[l], l);\n            }\n\n            for (var i = 0; i < x.length; i++) {\n                let y = x[i];\n                let existing = mapping.get(y);\n                if (typeof existing == \"undefined\") {\n                    failure();\n                    barr[i] = placeholder;\n                } else {\n                    barr[i] = existing;\n                }\n            }\n        }\n\n    } catch (e) {\n        if (local_buffer instanceof wa.WasmArray) {\n            utils.free(local_buffer);\n        }\n        throw e;\n    }\n\n    return {\n        ids: buffer,\n        levels: levels\n    };\n}\n\n/**\n * Reindex the factor indices to remove unused levels.\n * This is done by adjusting the indices such that every index from `[0, N)` is represented at least once, where `N` is the number of (used) levels.\n *\n * @param {Int32WasmArray|TypedArray|Array} x - Array of factor indices such as that produced by {@linkcode convertToFactor}. \n *\n * @return {Array} `x` is modified in place to remove unused levels.\n *\n * An array (denoted here as `y`) is returned that represents the mapping between the original and modified IDs,\n * i.e., running `x.map(i => y[i])` will recover the input `x`.\n * This is most commonly used to create a new array of levels, i.e., `y.map(i => old_levels[i])` will drop the unused levels. \n */\nexport function dropUnusedLevels(x) {\n    if (x instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        x = x.array();\n    }\n\n    let uniq = new Set(x);\n    let uniq_arr = Array.from(uniq).sort();\n    let mapping = {};\n    uniq_arr.forEach((y, i) => { mapping[y] = i; });\n\n    x.forEach((y, i) => {\n        x[i] = mapping[y];\n    });\n\n    return uniq_arr;\n}\n\n/**\n * Change the levels of a factor, updating the indices appropriately.\n *\n * @param {object} x - Factor object produced by {@linkcode convertToFactor}.\n * @param {Array} newLevels - Array of new levels.\n * This should be a superset of `x.levels`.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.action=\"error\"] - Action to take when `newLevels` is not a superset of `x.levels`.\n * This can be `\"error\"`, `\"warn\"` or `\"none\"`.\n * @param {number} [options.placeholder=-1] - Placeholder index corresponding to invalid values of `x.ids`.\n * Any placeholders in `x.ids` will be preserved on function return.\n * Additionally, if entries of `x.ids` refer to entries of `x.levels` that are missing in `newLevels`, they will be set to the placeholder value on function return;\n * this is only relevant if `action = \"warn\"` or `\"none\"`.\n *\n * @return `x` is modified by reference such that `x.levels` is set to `newLevels`.\n * `x.ids` is updated so that the indices now refer to the appropriate value in `newLevels`.\n */\nexport function resetLevels(x, newLevels, options = {}) {\n    const { action = \"error\", placeholder = -1, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let mapping = new Map;\n    for (var i = 0; i < newLevels.length; i++) {\n        mapping.set(newLevels[i], i);\n    }\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (!warned) {\n                console.warn (\"replacing missing levels with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected level in 'x.levels' that is missing from 'newLevels'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling missing levels\");\n    }\n\n    let oldLevels = x.levels;\n    let conversion = new Array(oldLevels.length);\n    let warned = false;\n    for (var i = 0; i < oldLevels.length; i++) {\n        let found = mapping.get(oldLevels[i]);\n        if (typeof found == \"undefined\") {\n            failure();\n            conversion[i] = placeholder;\n        } else {\n            conversion[i] = found;\n        }\n    }\n    x.levels = newLevels;\n\n    let target = x.ids;\n    if (target instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        target = target.array();\n    }\n    target.forEach((y, i) => {\n        if (y !== placeholder) {\n            target[i] = conversion[y];\n        }\n    });\n}\n\n/**\n * Subset a factor, possibly also dropping its unused levels.\n * This is typically based on the same filtering vector as {@linkcode filterCells}.\n *\n * @param {object} x - An object representing a factor, containing the following properties:\n *\n * - `ids`: An Int32Array or Int32WasmArray of integer indices.\n * - `levels`: An array of levels that can be indexed by entries of `ids`.\n *\n * This is typically produced by {@linkcode convertToFactor}. \n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n *\n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.drop=true] - Whether to drop unused levels in the output, see {@linkcode dropUnusedLevels}.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?(Int32Array|Int32WasmArray)} [options.buffer=null] - Array in which the output is to be stored, of the same type as `x.ids`.\n * If provided, this should be of length equal to `subset`, if `filter = null`;\n * the number of truthy elements in `subset`, if `filter = false`;\n * or the number of falsey elements in `subset`, if `filter = true`.\n *\n * @return {object} An object like `x`, containing:\n *\n * - `ids`: An Int32Array or Int32WasmArray of integer indices, subsetted from those in `x.ids`.\n * - `levels`: Array of levels that can be indexed by entries of the output `ids`.\n *   If `drop = true`, this may be a subset of `x.levels` where every entry is represented at least once in the output `ids`.\n *\n * If `buffer` is supplied, the returned `ids` will be set to `buffer`.\n */\nexport function subsetFactor(x, subset, options = {}) {\n    let { drop = true, filter = null, buffer = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let output = { ids: null, levels: x.levels };\n\n    if (x.ids instanceof wa.WasmArray) {\n        output.ids = wa.subsetWasmArray(x.ids, subset, { filter, buffer });\n    } else {\n        let n = wa.checkSubsetLength(subset, filter, x.length, \"x\");\n        if (buffer == null) {\n            buffer = new x.ids.constructor(n);\n        }\n        wa.fillSubset(subset, filter, x.ids, buffer);\n        output.ids = buffer;\n    }\n\n    if (drop) {\n        let remapping = dropUnusedLevels(output.ids);\n        output.levels = remapping.map(i => x.levels[i]);\n    }\n    return output;\n}\n","/*!\n\nJSZip v3.10.1 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/main/LICENSE\n*/\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).JSZip=e()}}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t=\"function\"==typeof require&&require;if(!e&&t)return t(r,!0);if(l)return l(r,!0);var n=new Error(\"Cannot find module '\"+r+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h)}return o[r].exports}for(var l=\"function\"==typeof require&&require,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){\"use strict\";var d=e(\"./utils\"),c=e(\"./support\"),p=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c=\"string\"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join(\"\")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u=\"data:\";if(e.substr(0,u.length)===u)throw new Error(\"Invalid base64 input, it looks like a data url.\");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,\"\")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error(\"Invalid base64 input, bad content length.\");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l}},{\"./support\":30,\"./utils\":32}],2:[function(e,t,r){\"use strict\";var n=e(\"./external\"),i=e(\"./stream/DataWorker\"),s=e(\"./stream/Crc32Probe\"),a=e(\"./stream/DataLengthProbe\");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")),t=this;return e.on(\"end\",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a(\"uncompressedSize\")).pipe(t.compressWorker(r)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\",t)},t.exports=o},{\"./external\":6,\"./stream/Crc32Probe\":25,\"./stream/DataLengthProbe\":26,\"./stream/DataWorker\":27}],3:[function(e,t,r){\"use strict\";var n=e(\"./stream/GenericWorker\");r.STORE={magic:\"\\0\\0\",compressWorker:function(){return new n(\"STORE compression\")},uncompressWorker:function(){return new n(\"STORE decompression\")}},r.DEFLATE=e(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":28}],4:[function(e,t,r){\"use strict\";var n=e(\"./utils\");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?\"string\"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length,0):0}},{\"./utils\":32}],5:[function(e,t,r){\"use strict\";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){\"use strict\";var n=null;n=\"undefined\"!=typeof Promise?Promise:e(\"lie\"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,i=e(\"pako\"),s=e(\"./utils\"),a=e(\"./stream/GenericWorker\"),o=n?\"uint8array\":\"array\";function h(e,t){a.call(this,\"FlateWorker/\"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic=\"\\b\\0\",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new h(\"Deflate\",e)},r.uncompressWorker=function(){return new h(\"Inflate\",{})}},{\"./stream/GenericWorker\":28,\"./utils\":32,pako:38}],8:[function(e,t,r){\"use strict\";function A(e,t){var r,n=\"\";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo(\"string\",s(h.name)),c=I.transformTo(\"string\",O.utf8encode(h.name)),d=h.comment,p=I.transformTo(\"string\",s(d)),m=I.transformTo(\"string\",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b=\"\",v=\"\",y=\"\",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),\"UNIX\"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+=\"up\"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+=\"uc\"+A(y.length,2)+y);var E=\"\";return E+=\"\\n\\0\",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+\"\\0\\0\\0\\0\"+A(z,4)+A(n,4)+f+b+p}}var I=e(\"../utils\"),i=e(\"../stream/GenericWorker\"),O=e(\"../utf8\"),B=e(\"../crc32\"),R=e(\"../signature\");function s(e,t,r,n){i.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo(\"string\",i(n));return R.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on(\"error\",function(e){t.error(e)}),this},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=s},{\"../crc32\":4,\"../signature\":23,\"../stream/GenericWorker\":28,\"../utf8\":31,\"../utils\":32}],9:[function(e,t,r){\"use strict\";var u=e(\"../compressions\"),n=e(\"./ZipFileWorker\");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+\" is not a valid compression method !\");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo(\"file\",{name:e,dir:i,date:s,comment:t.comment||\"\",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(e){o.error(e)}return o}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(e,t,r){\"use strict\";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files=Object.create(null),this.comment=null,this.root=\"\",this.clone=function(){var e=new n;for(var t in this)\"function\"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e(\"./object\")).loadAsync=e(\"./load\"),n.support=e(\"./support\"),n.defaults=e(\"./defaults\"),n.version=\"3.10.1\",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e(\"./external\"),t.exports=n},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":15,\"./support\":30}],11:[function(e,t,r){\"use strict\";var u=e(\"./utils\"),i=e(\"./external\"),n=e(\"./utf8\"),s=e(\"./zipEntries\"),a=e(\"./stream/Crc32Probe\"),l=e(\"./nodejsUtils\");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on(\"error\",function(e){t(e)}).on(\"end\",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error(\"Corrupted zip : CRC32 mismatch\")):e()}).resume()})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):u.prepareContent(\"the loaded zip file\",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s)}return t.zipComment.length&&(h.comment=t.zipComment),h})}},{\"./external\":6,\"./nodejsUtils\":14,\"./stream/Crc32Probe\":25,\"./utf8\":31,\"./utils\":32,\"./zipEntries\":33}],12:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../stream/GenericWorker\");function s(e,t){i.call(this,\"Nodejs stream input adapter for \"+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on(\"data\",function(e){t.push({data:e,meta:{percent:0}})}).on(\"error\",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on(\"end\",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{\"../stream/GenericWorker\":28,\"../utils\":32}],13:[function(e,t,r){\"use strict\";var i=e(\"readable-stream\").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on(\"data\",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on(\"error\",function(e){n.emit(\"error\",e)}).on(\"end\",function(){n.push(null)})}e(\"../utils\").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{\"../utils\":32,\"readable-stream\":16}],14:[function(e,t,r){\"use strict\";t.exports={isNode:\"undefined\"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if(\"number\"==typeof e)throw new Error('The \"data\" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&\"function\"==typeof e.on&&\"function\"==typeof e.pause&&\"function\"==typeof e.resume}}},{}],15:[function(e,t,r){\"use strict\";function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),\"string\"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a=\"string\"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t=\"\",s.compression=\"STORE\",i=\"string\");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h}var i=e(\"./utf8\"),u=e(\"./utils\"),l=e(\"./stream/GenericWorker\"),a=e(\"./stream/StreamHelper\"),f=e(\"./defaults\"),c=e(\"./compressedObject\"),d=e(\"./zipObject\"),o=e(\"./generate\"),p=e(\"./nodejsUtils\"),m=e(\"./nodejs/NodejsStreamInputAdapter\"),_=function(e){\"/\"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf(\"/\");return 0<t?e.substring(0,t):\"\"},g=function(e){return\"/\"!==e.slice(-1)&&(e+=\"/\"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return\"[object RegExp]\"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||(\"/\"!==r.slice(-1)&&(r+=\"/\"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),\"binarystring\"===r.type&&(r.type=\"string\"),!r.type)throw new Error(\"No output type specified.\");u.checkSupport(r.type),\"darwin\"!==r.platform&&\"freebsd\"!==r.platform&&\"linux\"!==r.platform&&\"sunos\"!==r.platform||(r.platform=\"UNIX\"),\"win32\"===r.platform&&(r.platform=\"DOS\");var n=r.comment||this.comment||\"\";t=o.generateWorker(this,r,n)}catch(e){(t=new l(\"error\")).error(e)}return new a(t,r.type||\"string\",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type=\"nodebuffer\"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":12,\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31,\"./utils\":32,\"./zipObject\":35}],16:[function(e,t,r){\"use strict\";t.exports=e(\"stream\")},{stream:void 0}],17:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],18:[function(e,t,r){\"use strict\";var n=e(\"../utils\");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+e+\"). Corrupted zip ?\")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo(\"string\",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{\"../utils\":32}],19:[function(e,t,r){\"use strict\";var n=e(\"./Uint8ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./Uint8ArrayReader\":21}],20:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],21:[function(e,t,r){\"use strict\";var n=e(\"./ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./ArrayReader\":17}],22:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../support\"),s=e(\"./ArrayReader\"),a=e(\"./StringReader\"),o=e(\"./NodeBufferReader\"),h=e(\"./Uint8ArrayReader\");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),\"string\"!==t||i.uint8array?\"nodebuffer\"===t?new o(e):i.uint8array?new h(n.transformTo(\"uint8array\",e)):new s(n.transformTo(\"array\",e)):new a(e)}},{\"../support\":30,\"../utils\":32,\"./ArrayReader\":17,\"./NodeBufferReader\":19,\"./StringReader\":20,\"./Uint8ArrayReader\":21}],23:[function(e,t,r){\"use strict\";r.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",r.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",r.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",r.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",r.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],24:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../utils\");function s(e){n.call(this,\"ConvertWorker to \"+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],25:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../crc32\");function s(){n.call(this,\"Crc32Probe\"),this.withStreamInfo(\"crc32\",0)}e(\"../utils\").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{\"../crc32\":4,\"../utils\":32,\"./GenericWorker\":28}],26:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataLengthProbe for \"+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],27:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataWorker\");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":e=this.data.substring(this.index,t);break;case\"uint8array\":e=this.data.subarray(this.index,t);break;case\"array\":case\"nodebuffer\":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],28:[function(e,t,r){\"use strict\";function n(e){this.name=e||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit(\"data\",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit(\"error\",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit(\"error\",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.end()}),e.on(\"error\",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+e:e}},t.exports=n},{}],29:[function(e,t,r){\"use strict\";var h=e(\"../utils\"),i=e(\"./ConvertWorker\"),s=e(\"./GenericWorker\"),u=e(\"../base64\"),n=e(\"../support\"),a=e(\"../external\"),o=null;if(n.nodestream)try{o=e(\"../nodejs/NodejsStreamOutputAdapter\")}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on(\"data\",function(e,t){n.push(e),o&&o(t)}).on(\"error\",function(e){n=[],r(e)}).on(\"end\",function(){try{var e=function(e,t,r){switch(e){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",t),r);case\"base64\":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case\"string\":return t.join(\"\");case\"array\":return Array.prototype.concat.apply([],t);case\"uint8array\":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case\"nodebuffer\":return Buffer.concat(t);default:throw new Error(\"concat : unsupported type '\"+e+\"'\")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()})}function f(e,t,r){var n=t;switch(t){case\"blob\":case\"arraybuffer\":n=\"uint8array\";break;case\"base64\":n=\"string\"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s(\"error\"),this._worker.error(e)}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return\"data\"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new o(this,{objectMode:\"nodebuffer\"!==this._outputType},e)}},t.exports=f},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":13,\"../support\":30,\"../utils\":32,\"./ConvertWorker\":24,\"./GenericWorker\":28}],30:[function(e,t,r){\"use strict\";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,r.nodebuffer=\"undefined\"!=typeof Buffer,r.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:\"application/zip\"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob(\"application/zip\").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e(\"readable-stream\").Readable}catch(e){r.nodestream=!1}},{\"readable-stream\":16}],31:[function(e,t,s){\"use strict\";for(var o=e(\"./utils\"),h=e(\"./support\"),r=e(\"./nodejsUtils\"),n=e(\"./stream/GenericWorker\"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,\"utf-8 decode\"),this.leftOver=null}function l(){n.call(this,\"utf-8 encode\")}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,\"utf-8\"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo(\"nodebuffer\",e).toString(\"utf-8\"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?\"uint8array\":\"array\",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?\"uint8array\":\"array\",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=l},{\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./support\":30,\"./utils\":32}],32:[function(e,t,a){\"use strict\";var o=e(\"./support\"),h=e(\"./base64\"),r=e(\"./nodejsUtils\"),u=e(\"./external\");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e(\"setimmediate\"),a.newBlob=function(t,r){a.checkSupport(\"blob\");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error(\"Bug : can't construct the Blob.\")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)\"array\"===t||\"nodebuffer\"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join(\"\")},stringifyByChar:function(e){for(var t=\"\",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if(\"uint8array\"===r?n=i.applyCanBeUsed.uint8array:\"nodebuffer\"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||\"\",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split(\"/\"),r=[],n=0;n<t.length;n++){var i=t[n];\".\"===i||\"\"===i&&0!==n&&n!==t.length-1||(\"..\"===i?r.pop():r.push(i))}return r.join(\"/\")},a.getTypeOf=function(e){return\"string\"==typeof e?\"string\":\"[object Array]\"===Object.prototype.toString.call(e)?\"array\":o.nodebuffer&&r.isBuffer(e)?\"nodebuffer\":o.uint8array&&e instanceof Uint8Array?\"uint8array\":o.arraybuffer&&e instanceof ArrayBuffer?\"arraybuffer\":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+\" is not supported by this platform\")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n=\"\";for(r=0;r<(e||\"\").length;r++)n+=\"\\\\x\"+((t=e.charCodeAt(r))<16?\"0\":\"\")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[])})},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==[\"[object File]\",\"[object Blob]\"].indexOf(Object.prototype.toString.call(n)))&&\"undefined\"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t=a.getTypeOf(e);return t?(\"arraybuffer\"===t?e=a.transformTo(\"uint8array\",e):\"string\"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error(\"Can't read the data of '\"+r+\"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":14,\"./support\":30,setimmediate:54}],33:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),i=e(\"./utils\"),s=e(\"./signature\"),a=e(\"./zipEntry\"),o=e(\"./support\");function h(e){this.files=[],this.loadOptions=e}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error(\"Corrupted zip or bug: unexpected signature (\"+i.pretty(t)+\", expected \"+i.pretty(e)+\")\")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?\"uint8array\":\"array\",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip: can't find end of central directory\");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(n)+\" bytes.\")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=h},{\"./reader/readerFor\":22,\"./signature\":23,\"./support\":30,\"./utils\":32,\"./zipEntry\":34}],34:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),s=e(\"./utils\"),i=e(\"./compressedObject\"),a=e(\"./crc32\"),o=e(\"./utf8\"),h=e(\"./compressions\"),u=e(\"./support\");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error(\"Corrupted zip : compression \"+s.pretty(this.compressionMethod)+\" unknown (inner file : \"+s.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=u.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":22,\"./support\":30,\"./utf8\":31,\"./utils\":32}],35:[function(e,t,r){\"use strict\";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e(\"./stream/StreamHelper\"),i=e(\"./stream/DataWorker\"),a=e(\"./utf8\"),o=e(\"./compressedObject\"),h=e(\"./stream/GenericWorker\");n.prototype={internalStream:function(e){var t=null,r=\"string\";try{if(!e)throw new Error(\"No output type specified.\");var n=\"string\"===(r=e.toLowerCase())||\"text\"===r;\"binarystring\"!==r&&\"text\"!==r||(r=\"string\"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new h(\"error\")).error(e)}return new s(t,r,\"\")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||\"nodebuffer\").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],l=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n},{\"./compressedObject\":2,\"./stream/DataWorker\":27,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31}],36:[function(e,l,t){(function(t){\"use strict\";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode(\"\");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r=\"document\"in t&&\"onreadystatechange\"in t.document.createElement(\"script\")?function(){var e=t.document.createElement(\"script\");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(u,0)};else{var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length}n=!1}l.exports=function(e){1!==h.push(e)||n||r()}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],37:[function(e,t,r){\"use strict\";var i=e(\"immediate\");function u(){}var l={},s=[\"REJECTED\"],a=[\"FULFILLED\"],n=[\"PENDING\"];function o(e){if(\"function\"!=typeof e)throw new TypeError(\"resolver must be a function\");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e)}function h(e,t,r){this.promise=e,\"function\"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError(\"Cannot resolve promise with itself\")):l.resolve(t,e)})}function c(e){var t=e&&e.then;if(e&&(\"object\"==typeof e||\"function\"==typeof e)&&\"function\"==typeof t)return function(){t.apply(e,arguments)}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e))}function i(e){r||(r=!0,l.resolve(t,e))}var s=p(function(){e(i,n)});\"error\"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status=\"success\"}catch(e){r.status=\"error\",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if(\"function\"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if(\"function\"!=typeof e&&this.state===a||\"function\"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e)},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},h.prototype.callRejected=function(e){l.reject(this.promise,e)},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},l.resolve=function(e,t){var r=p(c,t);if(\"error\"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s))},function(e){i||(i=!0,l.reject(o,e))})}},o.race=function(e){var t=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e))},function(e){n||(n=!0,l.reject(s,e))});var a;return s}},{immediate:36}],38:[function(e,t,r){\"use strict\";var n={};(0,e(\"./lib/utils/common\").assign)(n,e(\"./lib/deflate\"),e(\"./lib/inflate\"),e(\"./lib/zlib/constants\")),t.exports=n},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(e,t,r){\"use strict\";var a=e(\"./zlib/deflate\"),o=e(\"./utils/common\"),h=e(\"./utils/strings\"),i=e(\"./zlib/messages\"),s=e(\"./zlib/zstream\"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:\"\"},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n=\"string\"==typeof t.dictionary?h.string2buf(t.dictionary):\"[object ArrayBuffer]\"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,\"string\"==typeof e?i.input=h.string2buf(e):\"[object ArrayBuffer]\"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||(\"string\"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===l&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(e,t,r){\"use strict\";var c=e(\"./zlib/inflate\"),d=e(\"./utils/common\"),p=e(\"./utils/strings\"),m=e(\"./zlib/constants\"),n=e(\"./zlib/messages\"),i=e(\"./zlib/zstream\"),s=e(\"./zlib/gzheader\"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:\"\"},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,\"string\"==typeof e?h.input=p.binstring2buf(e):\"[object ArrayBuffer]\"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o=\"string\"==typeof l?p.string2buf(l):\"[object ArrayBuffer]\"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if(\"object\"!=typeof r)throw new TypeError(r+\"must be non-object\");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){\"use strict\";var h=e(\"./common\"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r=\"\",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}},{\"./common\":41}],43:[function(e,t,r){\"use strict\";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){\"use strict\";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){\"use strict\";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){\"use strict\";var h,c=e(\"../utils/common\"),u=e(\"./trees\"),d=e(\"./adler32\"),p=e(\"./crc32\"),n=e(\"./messages\"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return(e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm)}function U(e,t){e.pending_buf[e.pending++]=t}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a]}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else{var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(e,t,r){\"use strict\";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){\"use strict\";t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg=\"invalid literal/length code\",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg=\"invalid distance code\",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p}},{}],49:[function(e,t,r){\"use strict\";var I=e(\"../utils/common\"),O=e(\"./adler32\"),B=e(\"./crc32\"),R=e(\"./inffast\"),T=e(\"./inftrees\"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg=\"incorrect header check\",r.mode=30;break}if(8!=(15&u)){e.msg=\"unknown compression method\",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){e.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){e.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(65535&r.check)){e.msg=\"header crc mismatch\",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg=\"invalid block type\",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){e.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){e.msg=\"invalid bit length repeat\",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+d>r.nlen+r.ndist){e.msg=\"invalid bit length repeat\",r.mode=30;break}for(;d--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg=\"invalid distance code\",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg=\"incorrect data check\",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(4294967295&r.total)){e.msg=\"incorrect length check\",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(e,t,r){\"use strict\";var D=e(\"../utils/common\"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===e||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0}},{\"../utils/common\":41}],51:[function(e,t,r){\"use strict\";t.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(e,t,r){\"use strict\";var i=e(\"../utils/common\"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function L(e,t,r){P(e,r[2*t],r[2*t+1])}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o))}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t)}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--)}}(e,t),Z(s,u,e.bl_count)}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4))}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4)}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),n&&(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p)}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e)},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{\"../utils/common\":41}],53:[function(e,t,r){\"use strict\";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(r,n){\"use strict\";if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i=\"[object process]\"==={}.toString.call(r.process)?function(e){process.nextTick(function(){c(e)})}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1},r.postMessage(\"\",\"*\"),r.onmessage=t,e}}()?(a=\"setImmediate$\"+Math.random()+\"$\",r.addEventListener?r.addEventListener(\"message\",d,!1):r.attachEvent(\"onmessage\",d),function(e){r.postMessage(a+e,\"*\")}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data)},function(e){t.port2.postMessage(e)}):l&&\"onreadystatechange\"in l.createElement(\"script\")?(s=l.documentElement,function(e){var t=l.createElement(\"script\");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null},s.appendChild(t)}):function(e){setTimeout(c,0,e)},e.setImmediate=function(e){\"function\"!=typeof e&&(e=new Function(\"\"+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f}function f(e){delete h[e]}function c(e){if(u)setTimeout(c,0,e);else{var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),u=!1}}}}function d(e){e.source===r&&\"string\"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length))}}(\"undefined\"==typeof self?void 0===e?this:e:self)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[10])(10)});","export class SimpleFile {\n    #mode;\n    #buffer;\n    #file;\n    #name;\n\n    constructor(x, { name = null } = {}) {\n        if (x instanceof File) {\n            this.#mode = \"file\";\n            this.#file = x;\n            if (name === null) {\n                name = x.name;\n            }\n            this.#name = name;\n        } else if (x instanceof Uint8Array) {\n            this.#mode = \"buffer\";\n            this.#buffer = x; \n            if (name === null) {\n                throw new Error(\"'name' must be provided for Uint8Array inputs in SimpleFile constructor\");\n            }\n            this.#name = name;\n        } else {\n            throw new Error(\"unknown type '\" + typeof(x) + \"' for SimpleFile constructor\");\n        }\n    }\n\n    buffer({ copy = false } = {}) {\n        if (this.#mode == \"file\") {\n            let reader = new FileReaderSync();\n            let b = reader.readAsArrayBuffer(this.#file);\n            return new Uint8Array(b);\n        } else {\n            if (copy) {\n                return this.#buffer.slice();\n            } else {\n                return this.#buffer;\n            }\n        }\n    }\n\n    size() {\n        if (this.#mode == \"file\") {\n            return this.#file.size;\n        } else {\n            return this.#buffer.length;\n        }\n    }\n\n    name() {\n        return this.#name;\n    }\n\n    content({ copy = false } = {}) {\n        return this.buffer({ copy: copy });\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellRnaQcMetricsResults } from \"./perCellRnaQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestRnaQcFilters}.\n * @hideconstructor\n */\nexport class SuggestRnaQcFiltersResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * This should be set to `false` or `\"view\"` to modify entries, e.g., after calling creating an instance with {@linkcode emptySuggestRnaQcFiltersResults}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the sums for each batch.\n     */\n    sum(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.sum(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * This should be set to `false` or `\"view\"` to modify entries, e.g., after calling creating an instance with {@linkcode emptySuggestRnaQcFiltersResults}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the number of detected genes for each batch.\n     */\n    detected(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * This should be set to `false` or `\"view\"` to modify entries, e.g., after calling creating an instance with {@linkcode emptySuggestRnaQcFiltersResults}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the proportions for subset `i` in each batch.\n     */\n    subsetProportion(i, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.subset_proportion(i), copy);\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {boolean} Whether blocking was used to compute the thresholds.\n     */\n    isBlocked() {\n        return this.#results.isBlocked();\n    }\n\n    /**\n     * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestRnaQcFilters#numberOfBlocks numberOfBlocks}.\n     * `block` must be supplied if {@linkcode SuggestRnaQcFilters#isBlocked isBlocked} returns true, otherwise it is ignored.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Uint8Array.\n     * If `false`, a Uint8WasmArray is returned instead.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the high-quality calls.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of high-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    filter(metrics, options = {}) {\n        const { block = null, asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, asTypedArray, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics computed from an RNA count matrix.\n *\n * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestRnaQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestRnaQcFilters(metrics, options = {}) {\n    const { numberOfMADs = 3, block = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n    }\n\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_rna_qc_filters(x.results, use_blocks, bptr, numberOfMADs),\n            SuggestRnaQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestRnaQcFiltersResults} object, to be filled with custom results.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestRnaQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestRnaQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestRnaQcFiltersResults(numberOfSubsets, numberOfBlocks),\n        SuggestRnaQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the RNA-based metrics allocated on the Wasm heap, produced by {@linkcode perCellRnaQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellRnaQcMetricsResults {\n    #id;\n    #results;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64WasmArray} Array containing the total count across genes for each cell.\n     */\n    sum(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.sum(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Int32Array|Int32WasmArray} Array containing the total number of detected genes for each cell.\n     */\n    detected(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64WasmArray} Array containing the proportion of counts in the subset `i` for each cell.\n     */\n    subsetProportion(i, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.subset_proportion(i), copy);\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the RNA count matrix.\n *\n * @param {ScranMatrix} x - The RNA count matrix for genes.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellRnaQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellRnaQcMetrics(x, subsets, options = {}) {\n    const { numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.compute_rna_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellRnaQcMetricsResults\n        )\n    );\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./rna_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"rna_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the [`normalizeCounts`](https://kanaverse.github.io/scran.js/global.html#normalizeCounts) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaNormalizationState {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc' should be a RnaQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"RNA\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing normalized expression values,\n     * available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the RNA-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        return this.#cache.sf_buffer;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"RNA\");\n        let raw_sf = nutils.subsetSums(this.#qc, this.#filter, mat);\n\n        let block = this.#filter.fetchFilteredBlock();\n        let buffer = utils.allocateCachedArray(raw_sf.length, \"Float64Array\", this.#cache, \"sf_buffer\");\n        scran.centerSizeFactors(raw_sf, { block: block, buffer: buffer });\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.normalizeCounts(mat, { sizeFactors: buffer, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, RnaNormalizationState.defaults());\n        this.changed = false;\n\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode RnaNormalizationState#compute compute} for details.\n     */\n    static defaults() {\n        return {};\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\nexport const step_name = \"choose_clustering\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings from {@linkplain KmeansClusterState} and {@linkplain SnnGraphClusterState}, respectively.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode ChooseClusteringState#compute compute}.\n     */\n    fetchClusters() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClusters();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClusters();\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode ChooseClusteringState#compute compute} for details.\n     */\n    static defaults() {\n        return { method: \"snn_graph\" };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} [parameters.method] - Clustering method to use, either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, ChooseClusteringState.defaults());\n        this.changed = true;\n        \n        if (parameters.method == this.#parameters.method) {\n            if (parameters.method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (parameters.method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n}\n","import { subsetColumns } from \"./subset.js\";\n\n/**\n * Filter out low-quality cells.\n *\n * @param {ScranMatrix} x The count matrix.\n * @param {(Uint8WasmArray|Array|TypedArray)} filters \n * An array of length equal to the number of columns in `x`, where truthy elements specify the cells to keep.\n *\n * @return {ScranMatrix} A matrix of the same type as `x`, filtered by column to only retain cells in `filters`. \n */\nexport function filterCells(x, filters) {\n    var indices = [];\n    filters.forEach((x, i) => {\n        if (x != 0) {\n            indices.push(i);\n        }\n    });\n    return subsetColumns(x, indices);\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as ggr from \"./GroupedGRanges.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\n\n/**\n * A RangedSummarizedExperiment is a {@linkplain SummarizedExperiment} subclass where each row represents a genomic interval.\n * As such, it stores an additional {@linkplain GRanges} or {@linkplain GroupedGRanges} of length equal to the number of rows,\n * where each element represents the genomic range(s) for the corresponding row of the SummarizedExperiment.\n *\n * The RangedSummarizedExperiment supports the same set of generics as the {@linkplain SummarizedExperiment}.\n * Each method will call the base method, with the following extensions:\n *\n * - {@linkcode SLICE_2D} will additionally slice the supplied genomic ranges by the desired `rows`.\n * - {@linkcode COMBINE_ROWS} will combine genomic ranges across objects.\n *   If some objects contain a GroupedGRanges and other objects contain GRanges, the latter will be coerced to a GroupedGRanges (where each group contains one range) before combining.\n *   If any object is a base SummarizedExperiment, a GroupedGRanges containing zero-length groups will be automatically constructed to attempt combining.\n * - {@linkcode COMBINE_COLUMNS} will use the genomic ranges from the first object.\n *\n * Constructors of RangedSummarizedExperiment subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE`, `_bioconductor_COMBINE_ROWS`, `_bioconductor_COMBINE_COLUMNS` and `_bioconductor_SLICE_2D` methods to return an instance of the subclass.\n *\n * @extends SummarizedExperiment\n */\nexport class RangedSummarizedExperiment extends se.SummarizedExperiment {\n    #check_rowRanges(x) {\n        if (!(x instanceof gr.GRanges) && !(x instanceof ggr.GroupedGRanges)) {\n            throw new Error(\"'rowRanges' should be a 'GRanges' or 'GroupedGRanges' instance\");\n        }\n        if (generics.LENGTH(x) !== this._rowData.numberOfRows()) {\n            throw utils.formatLengthError(\"'rowRanges'\", \"the number of rows\");\n        }\n    }\n\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {?(GRanges|GroupedGRanges)} rowRanges - Genomic ranges corresponding to each row.\n     *\n     * Alternatively, each row may correspond to a group of genomic ranges.\n     *\n     * If `null`, a {@linkplain GroupedGRanges} is constructed where each row corresponds to one group of ranges of zero length.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain SummarizedExperiment} constructor.\n     */\n    constructor(assays, rowRanges, options = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(assays, options);\n\n        if (rowRanges === null) {\n            rowRanges = ggr.GroupedGRanges.empty(this.numberOfRows());\n        } else {\n            this.#check_rowRanges(rowRanges);\n        }\n        this._rowRanges = rowRanges;\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} Genomic ranges corresponding to each row.\n     */\n    rowRanges() {\n        return this._rowRanges;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {RangedSummarizedExperiment} The RangedSummarizedExperiment after modifying its `rowRanges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowRanges(value, { inPlace = false } = {}) {\n        this.#check_rowRanges(value);\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowRanges = value;\n        return target;\n    }\n\n    $setRowRanges(value) {\n        return this.setRowRanges(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(rows, columns, { allowView = false }) {\n        let output = super._bioconductor_SLICE_2D(rows, columns, { allowView });\n        if (rows !== null) {\n            output._rowRanges = generics.SLICE(this._rowRanges, rows);\n        } else {\n            output._rowRanges = this._rowRanges;\n        }\n        return output;\n    }\n\n    _bioconductor_COMBINE_ROWS(objects) {\n        let output = super._bioconductor_COMBINE_ROWS(objects);\n\n        let collected = [this._rowRanges];\n        let has_empty = false;\n        let has_ggr = (this.rowRanges instanceof ggr.GroupedGRanges);\n        for (const x of objects) {\n            if (x instanceof RangedSummarizedExperiment) {\n                let y = x._rowRanges;\n                if (y instanceof ggr.GroupedGRanges) {\n                    has_ggr = true;\n                }\n                collected.push(y);\n            } else if (x instanceof se.SummarizedExperiment) {\n                has_empty = true;\n                collected.push(null);\n            } else {\n                throw new Error(\"objects to be combined must be SummarizedExperiments (failing for object \" + String(i) + \")\");\n            }\n        }\n\n        // Promoting nulls and GRanges to GroupedGRanges, if necessary.\n        if (has_empty || has_ggr) {\n            for (var i = 0; i < collected.length; i++) {\n                let current = collected[i];\n\n                if (current instanceof gr.GRanges) {\n                    let widths = new Int32Array(generics.LENGTH(current));\n                    widths.fill(1);\n\n                    let options = { \n                        rangeLengths: widths,\n                        names: current.names(),\n                        elementMetadata: current.elementMetadata(),\n                        metadata: current.metadata()\n                    };\n\n                    if (options.names !== null) {\n                        current = current.setNames(null);\n                    } \n\n                    if (options.elementMetadata.metadata().size > 0 || options.elementMetadata.numberOfColumns() > 0) {\n                        current = current.setElementMetadata(null);\n                    }\n\n                    if (options.metadata.size > 0) {\n                        current = current.setMetadata(new Map);\n                    }\n\n                    collected[i] = new ggr.GroupedGRanges(current, options);\n\n                } else if (current === null){\n                    const x = (i == 0 ? this : objects[i - 1]);\n                    collected[i] = ggr.GroupedGRanges.empty(x.numberOfRows());\n                }\n            }\n        }\n\n        output._rowRanges = generics.COMBINE(collected);\n        return output;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(objects) {\n        let output = super._bioconductor_COMBINE_COLUMNS(objects);\n        output._rowRanges = this._rowRanges;\n        return output;\n    }\n\n    _bioconductor_CLONE({ deepCopy }) {\n        let output = super._bioconductor_CLONE({ deepCopy });\n        output._rowRanges = cutils.cloneField(this._rowRanges, deepCopy);\n        return output;\n    }\n}\n","import loadScran from \"./wasm/scran.js\";\nimport { register } from \"wasmarrays.js\";\nimport * as afile from \"./abstract/file.js\";\n\nconst cache = {};\n\n/**\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfThreads=4] - Number of threads to use for calculations.\n * This will spin up the requested number of Web Workers during module initialization.\n * @param {boolean} [options.localFile=false] - Whether or not to look for the Wasm and worker scripts locally.\n * This should only be `true` when using old versions of Node.js where file URLs are not supported, \n * and is ignored completely outside of Node.js contexts.\n *\n * @return {boolean}\n * The Wasm bindings are initialized and `true` is returned.\n * If the bindings were already initialized (e.g., by a previous call), nothing is done and `false` is returned.\n */\nexport async function initialize({ numberOfThreads = 4, localFile = false } = {}) {\n    if (\"module\" in cache) {\n        return false;\n    }\n\n    let options = {\n        scran_custom_nthreads: numberOfThreads\n    };\n\n    if (localFile) {                                                                /** NODE ONLY **/  \n        options.locateFile = (x) => import.meta.url.substring(7) + \"/../wasm/\" + x; /** NODE ONLY **/\n    }                                                                               /** NODE ONLY **/\n\n    cache.module = await loadScran(options);\n    cache.space = register(cache.module);\n\n    return true;\n}\n\n/**\n * Maximum number of threads available for computation.\n * This depends on the value specified during module initialization in {@linkcode initialize}. \n *\n * @return {number} Maximum number of available threads.\n */\nexport function maximumThreads() {\n    return cache.module.scran_custom_nthreads;\n}\n\nexport function call(func) {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n\n    var output;\n    try {\n        output = func(cache.module);    \n    } catch (e) {\n        if (typeof e == \"number\") {\n            throw new Error(cache.module.get_error_message(e));\n        } else {\n            throw e;\n        }\n    }\n    return output;\n}\n\nexport function buffer() {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n    return cache.module.wasmMemory.buffer;\n}\n\n/**\n * @return {number} Integer containing the **wasmarrays.js** identifier for **scran.js**'s memory space.\n * This can be used with `createWasmArray()` and related functions from **wasmarrays.js**.\n */\nexport function wasmArraySpace() {\n    return cache.space;\n}\n\n/**\n * @return All worker threads are terminated and the module is deleted from the cache.\n * This is useful for releasing thread resources at the end of the analysis when **scran.js** functions are no longer required.\n * Of course, workers will automatically shut down on program exit anyway, so calling this function is not essential.\n */\nexport function terminate() {\n    cache.module.PThread.terminateAllThreads();\n    delete cache.module;\n    return;\n}\n\n/**\n * @return {number} The current size of the Wasm heap, typically used for diagnostic reporting.\n */\nexport function heapSize() {\n    return buffer().byteLength;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the ADT-based metrics allocated on the Wasm heap, typically produced by {@linkcode computePerCellAdtQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellAdtQcMetricsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64WasmArray} Array containing the total ADT count for each cell.\n     */\n    sum(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.sum(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Int32Array|Int32WasmArray} Array containing the total number of detected ADT features for each cell.\n     */\n    detected(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64WasmArray} Array containing the total count in the ADT subset `i` for each cell.\n     */\n    subsetSum(i, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.subset_sum(i), copy);\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute the per-cell QC metrics from an ADT count matrix.\n *\n * @param {ScranMatrix} x - The ADT count matrix.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellAdtQcMetricsResults} Object containing the ADT-based QC metrics.\n */\nexport function perCellAdtQcMetrics(x, subsets, options = {}) {\n    const { numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_adt_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellAdtQcMetricsResults\n        )\n    );\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the [`mnnCorrect`](https://kanaverse.github.io/scran.js/global.html#mnnCorrect) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the batch-corrected embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode BatchCorrectionState#compute compute}.\n     */\n    fetchCorrected() {\n        return this.#cache.corrected;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfCells() {\n        return this.#combined.fetchNumberOfCells();\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#combined.fetchNumberOfDimensions();\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode BatchCorrectionState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `batch_correction` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} [parameters.method] - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * If `\"mnn\"`, it is recommended that upstream PCA steps (i.e., {@linkplain RnaPcaState} and {@linkplain AdtPcaState}) use `block_method = \"project\"`.\n     * @param {number} [parameters.num_neighbors] - Number of neighbors to use during MNN correction.\n     * @param {boolean} [parameters.approximate] - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, BatchCorrectionState.defaults());\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (parameters.method == \"mnn\" && block !== null);\n\n        if (this.changed || \n            parameters.method !== this.#parameters.method || \n            parameters.num_neighbors !== this.#parameters.num_neighbors || \n            parameters.approximate !== this.#parameters.approximate)\n        { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchCombined();\n                let corrected = utils.allocateCachedArray(pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs, block, { \n                    k: parameters.num_neighbors, \n                    buffer: corrected, \n                    numberOfCells: this.#combined.fetchNumberOfCells(), \n                    numberOfDims: this.#combined.fetchNumberOfDimensions(), \n                    approximate: parameters.approximate \n                });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                this.#cache.corrected = this.#combined.fetchCombined().view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters = parameters;\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as misc from \"./miscellaneous.js\";\n\n/**\n * Compute the length of a vector-like object.\n *\n * For Array and TypedArrays, this just returns the `length` property directly.\n *\n * Custom classes should implement a `_bioconductor_LENGTH` method to return their length via this generic.\n * This method should accept no arguments. \n *\n * @param {*} x - Some vector-like object.\n * @return {number} Length of the object.\n */\nexport function LENGTH(x) {\n    if (\"_bioconductor_LENGTH\" in x) {\n        return x._bioconductor_LENGTH();\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'LENGTH' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    return x.length;\n}\n\n/**\n * Slice a vector-like object.\n *\n * For Array and TypedArrays, this just uses `slice()` or `subarray()`.\n *\n * Custom classes should implement a `_bioconductor_SLICE` method to create a slice via this generic.\n * This method should accept `i` and `options`, and return a appropriately sliced instance of the same class as `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object|Array|TypedArray} i - An Array or TypedArray of integer indices specifying the slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A vector-like object of the same class as `x`, containing data for the specified slice.\n *\n * If `allowInPlace = true`, `x` _may_ be modified in place, and the return value _may_ be a reference to `x`. \n */\nexport function SLICE(x, i, { allowView = false } = {}) {\n    if (\"_bioconductor_SLICE\" in x) {\n        return x._bioconductor_SLICE(i, { allowView });\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'SLICE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    if (i.constructor == Object) {\n        if (allowView && ArrayBuffer.isView(x)) {\n            return x.subarray(i.start, i.end);\n        } else {\n            return x.slice(i.start, i.end);\n        }\n    } else {\n        let output = new x.constructor(i.length);\n        i.forEach((y, j) => {\n            output[j] = x[y];\n        });\n        return output;\n    }\n}\n\n/**\n * Combine multiple vector-like objects.\n *\n * For Array and TypedArrays, the combined array is of a class that avoids information loss.\n *\n * Custom classes should implement a `_bioconductor_COMBINE` method to combine objects via this generic. \n * This method will be invoked from the first instance of `objects` and should accept an array of remaining objects (i.e., `objects.slice(1)`) to be combined to the first instance. \n * It return an appropriately-combined instance of the same class as the first instance.\n *\n * @param {Array} objects - Array of vector-like objects to be combined.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE` method of the first element of `objects`.\n *\n * @return {*} A vector-like object containing the concatenated data from the input objects.\n * - If the first entry of `objects` is an instance of a custom class, the return value should be of the same class.\n * - If all `objects` are TypedArrays of the same class, the return value will be a TypedArray of that class.\n * - If any of the `objects` are Arrays, the return value will be an Array.\n * - If any of the `objects` are 64-bit TypedArrays of different classes, the return value will be an Array.\n * - Otherwise, for any other classes of TypedArrays in `objects`, the return value will be a Float64Array.\n */\nexport function COMBINE(objects) {\n    let x = objects[0];\n    if (\"_bioconductor_COMBINE\" in x) {\n        return x._bioconductor_COMBINE(objects.slice(1));\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'COMBINE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    // It is assumed that every 'y' is of some compatible Array-like type as well.\n    let total_LENGTH = 0;\n    let constructor = x.constructor;\n\n    for (const obj of objects) {\n        total_LENGTH += obj.length;\n        constructor = utils.chooseArrayConstructors(constructor, obj.constructor);\n    }\n\n    let output = new constructor(total_LENGTH);\n    let position = 0;\n    for (const obj of objects) {\n        if (\"set\" in output) {\n            output.set(obj, position);\n            position += obj.length;\n        } else {\n            obj.forEach(x => {\n                output[position] = x;\n                position++;\n            });\n        }\n    }\n\n    return output;\n}\n\n/**\n * Clone a vector-like object.\n *\n * This function supports built-in types like TypedArrays, Arrays, objects and Maps, as well as the various primitive types (e.g., number, string) that are returned by value.\n * If a deep copy is requested, this function will recursively clone all elements of the Array, values of the object, or key/value pairs of the Map.\n *\n * Custom classes should provide a `_bioconductor_CLONE` method to define the cloning operation.\n * This method should accept `options` and should return an appropriately cloned instance of the same class as `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.deepCopy=true] - Whether to create a deep copy.\n * The exact interpretation of `deepCopy = false` is left to each method.\n *\n * @return {*} A clone of `x`, i.e., the return value and `x` should not compare equal.\n * If `deepCopy = true`, all internal components are also cloned.\n * Otherwise, data members of `x` and its clone may still refer to the same object.\n */\nexport function CLONE(x, { deepCopy = true } = {}) {\n    if (x instanceof Object) {\n        let options = { deepCopy };\n        if (\"_bioconductor_CLONE\" in x) {\n            return x._bioconductor_CLONE(options);\n        }\n\n        if (utils.isArrayLike(x)) {\n            if (x.constructor == Array) {\n                return x.map(y => CLONE(y, options));\n            } else if (deepCopy) {\n                return x.slice();\n            } else {\n                return x.subarray();\n            }\n        }\n\n        if (x.constructor == Object) {\n            if (deepCopy) {\n                let output = {};\n                for (const [k, v] of Object.entries(x)) {\n                    output[k] = CLONE(v);\n                }\n                return output;\n            } else {\n                return { ...x };\n            }\n        }\n\n        if (x.constructor == Map) {\n            let output = new Map;\n            for (const [k, v] of x) {\n                output.set(deepCopy ? CLONE(k) : k, deepCopy ? CLONE(v) : v);\n            }\n            return output;\n        }\n\n        if (x.constructor == Set) {\n            let output = new Set;\n            for (const k of x) {\n                output.add(deepCopy ? CLONE(k) : k);\n            }\n            return output;\n        }\n\n\n        throw new Error(\"unknown CLONE operation for instance of class '\" + x.constructor.name + \"'\");\n    }\n\n    // Immutable atomics should be all that's left.\n    return x;\n}\n\n/**\n * Split a vector-like object along its length according to the levels of a factor of the same length.\n * This works automatically for all classes for which there is a {@linkcode SLICE} method.\n * Custom classes may also choose to define their own `_bioconductor_SPLIT` method,\n * which should accept `factor` and return an array of sliced instances of the same class as `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Array|TypedArray} factor - Array containing the factor to use for splitting.\n * This should have the same length as `x`.\n *\n * Alternatively, the output of {@linkcode presplitFactor} can be supplied.\n *\n * @return {Object} An object containing one key per level of `factor`,\n * where the value is the slice of `x` corresponding to the indices of that level in `factor`.\n */\nexport function SPLIT(x, factor) {\n    if (factor.constructor != Object) {\n        factor = misc.presplitFactor(factor);\n    }\n\n    if (\"_bioconductor_SPLIT\" in x) {\n        return x._bioconductor_SPLIT(factor);\n    }\n\n    let output = {};\n    for (const [k, v] of Object.entries(factor)) {\n        output[k] = SLICE(x, v);\n    }\n\n    return output;\n}\n\n/**\n * Return the number of rows for a two-dimensional object.\n * Custom classes should implement a `_bioconductor_NUMBER_OF_ROWS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of rows.\n */\nexport function NUMBER_OF_ROWS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_ROWS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_ROWS();\n}\n\n/**\n * Return the number of columns for a two-dimensional object.\n * Custom classes should implement a `_bioconductor_NUMBER_OF_COLUMNS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of columns.\n */\nexport function NUMBER_OF_COLUMNS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_COLUMNS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_COLUMNS();\n}\n\n/**\n * Slice a two-dimensional object by its rows and/or columns.\n *\n * Custom classes should implement a `_bioconductor_SLICE_2D` method to slice rows/columns via this generic.\n * This method should accept `rows`, `columns` and `options`, and should return a sliced instance of the same class as `x`.\n *\n * @param {*} x - Some two-dimensional object.\n * @param {?(Object|Array|TypedArray)} rows - An Array or TypedArray of integer indices specifying the row-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * \n * Alternatively `null`, to indicate that no slicing is to be performed on the rows.\n * @param {?(Object|Array|TypedArray)} columns - An Array or TypedArray of integer indices specifying the column-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n *\n * Alternatively `null`, to indicate that no slicing is to be performed on the columns.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A two-dimensional object, typically of the same class as `x`, containing data for the specified slice.\n */\nexport function SLICE_2D(x, rows, columns, { allowView = false } = {}) {\n    if (!(\"_bioconductor_SLICE_2D\" in x)) {\n        throw new Error(\"no 'SLICE_2D' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_SLICE_2D(rows, columns, { allowView });\n}\n\n/**\n * Combine multiple two-dimensional objects by row.\n *\n * Custom classes should implement a `_bioconductor_COMBINE_ROWS` method to combine objects via this generic.\n * This method will be invoked from the first instance of `objects` and should accept an array of remaining objects (i.e., `objects.slice(1)`) to be combined to the first instance. \n * It return an appropriately-combined instance of the same class as the first instance.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by row.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_ROWS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object of the same class as the first entry of `objects`, ontaining the row-wise concatenated data from all `objects`.\n */\nexport function COMBINE_ROWS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_ROWS\" in x)) {\n        throw new Error(\"no 'COMBINE_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_COMBINE_ROWS(objects.slice(1));\n}\n\n/**\n * Combine multiple two-dimensional objects by column.\n *\n * Custom classes should implement a `_bioconductor_COMBINE_COLUMNS` method to combine objects via this generic.\n * This method will be invoked from the first instance of `objects` and should accept an array of remaining objects (i.e., `objects.slice(1)`) to be combined to the first instance. \n * It return an appropriately-combined instance of the same class as the first instance.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by column.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_COLUMNS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object of the same class as the first entry of `objects`, ontaining the column-wise concatenated data from all `objects`.\n */\nexport function COMBINE_COLUMNS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_COLUMNS\" in x)) {\n        throw new Error(\"no 'COMBINE_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_COMBINE_COLUMNS(objects.slice(1));\n}\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\nimport * as astream from \"./abstract/stream.js\";\nimport * as afile from \"../abstract/file.js\";\nimport * as scran from \"scran.js\";\n\nexport function extractHdf5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (!(content.type instanceof scran.H5StringType)) {\n        return null;\n    }\n\n    return content.load();\n}\n\n/**\n * Summarize an array, typically corresponding to a single column of per-cell annotation.\n * This can be used as part of a preflight response in a Reader.\n *\n * @param {Array|TypedArray} array - Per-cell annotation array of length equal to the number of cells for a given matrix.\n * An Array is treated as categorical data and should contain strings, while TypedArrays are treated as continuous data.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.limit=50] - Maximum number of unique values to report for categorical `x`.\n *\n * @return {object} Object containing `type`, a string indicating whether `array` was categorical or continuous.\n *\n * If `\"categorical\"`, the object will contain `values`, an array of unique values up to the length specified by `limit`.\n * It will also contain `truncated`, a boolean indicating whether the actual number of unique values exceeds `limit`.\n *\n * If `\"continuous\"`, the object will contain the numbers `min` and `max` specifying the minimum and maximum value in `x`, respectively.\n * `min` or `max` may be negative or positive infinity, respectively, if there is no bound on one or both ends.\n * If `min > max`, all values in `array` are `NaN`s such that no bound can be found.\n */\nexport function summarizeArray(array, { limit = 50 } = {}) {\n    if (array instanceof Array) {\n        let chosen = Array.from(new Set(array));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        array.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\nfunction guess_compression(x, compression) {\n    if (compression !== null) {\n        return compression;\n    }\n\n    let buffer;\n    if (x instanceof Uint8Array) {\n        buffer = x;\n    } else {\n        buffer = astream.peek(x, 3);\n    }\n\n    // Compare against magic words for auto-detection.\n    if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n        return 'gz';\n    }\n\n    return 'none';\n}\n\nexport function unpackText(buffer, { compression = null } = {}) {\n    compression = guess_compression(buffer, compression);\n    let txt = (compression === \"gz\" ? pako.ungzip(buffer) : buffer);\n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\nfunction merge_bytes(leftovers, decoder) {\n    let total = 0;\n    for (const x of leftovers) {\n        total += x.length;\n    }\n\n    let combined = new Uint8Array(total);\n    total = 0;\n    for (const x of leftovers) {\n        combined.set(x, total);\n        total += x.length;\n    }\n\n    return decoder.decode(combined);\n}\n\nasync function stream_callback(x, compression, chunkSize, callback) {\n    // Force the input to be either a Uint8Array or a file path string.\n    if (typeof x == \"string\") {\n        ;\n    } else if (x instanceof Uint8Array) {\n        ;\n    } else if (x instanceof afile.SimpleFile) {\n        x = x.content();\n    } else {\n        x = (new afile.SimpleFile(x, { name: \"dummy\" })).content();\n    }\n\n    if (guess_compression(x, compression) == \"gz\") {\n        await (new Promise((resolve, reject) => {\n            let gz = new pako.Inflate({ chunkSize: chunkSize });\n            gz.onData = callback;\n            gz.onEnd = status => {\n                if (status) {\n                    reject(\"gzip decompression failed; \" + gz.msg);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            if (typeof x == \"string\") {\n                astream.stream(x, chunkSize, chunk => gz.push(chunk), null, reject);\n            } else {\n                gz.push(x);\n            }\n        }));\n        return;\n    }\n\n    // Remaining possibilities are uncompressed.\n    if (typeof x == \"string\") {\n        await (new Promise((resolve, reject) => astream.stream(x, chunkSize, callback, resolve, reject)));\n        return;\n    }\n\n    callback(x);\n    return;\n}\n\n/**\n * Read lines of text from a file, possibly with decompression.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {number} [options.chunkSize=65536] - Chunk size in bytes to use for file reading (if `x` is a file path) and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string.\n * @async \n */\nexport async function readLines2(x, { compression = null, chunkSize = 65536 } = {}) {\n    const dec = new TextDecoder;\n    let leftovers = [];\n    let lines = [];\n\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk[i] == 10) { // i.e., ASCII newline.\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    lines.push(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    lines.push(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        lines.push(merge_bytes(leftovers, dec));\n    }\n\n    return lines;    \n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readTable(buffer, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n * This assumes that newlines represent the end of each row of the table, i.e., there cannot be newlines inside quoted strings.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {string} [options.delim=\"\\t\"] - Delimiter between fields.\n * @param {number} [options.chunkSize=1048576] - Chunk size in bytes to use for file reading (if `x` is a path), parsing of rows, and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of length equal to the number of lines in `buffer`.\n * Each entry is an array of strings, containing the `delim`-separated fields for its corresponding line.\n *\n * @async\n */\nexport async function readTable2(x, { compression = null, delim = \"\\t\", chunkSize = 1048576 } = {}) {\n    const dec = new TextDecoder;\n\n    let rows = [];\n    let parse = (str) => {\n        let out = ppp.parse(str, { delimiter: delim });\n        if (out.meta.aborted) {\n            let msg = \"failed to parse delimited file\";\n            for (const e of out.errors) {\n                msg += \"; \" + e.message;\n            }\n            throw new Error(msg);\n        }\n        for (const x of out.data) {\n            rows.push(x);\n        }\n    };\n\n    let leftovers = [];\n    let size_left = 0;\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            // We assume that all newlines are end-of-rows, i.e., there are no\n            // newlines inside quoted strings. Under this assumption, we can\n            // safely chunk the input stream based on newlines, parse each\n            // chunk, and then combine the parsing results together. To avoid\n            // too many parsing calls, we accumulate buffers until we hit \n            // the chunkSize and then we decode + parse them altogether.\n            if (chunk[i] == 10 && (i - last) + size_left >= chunkSize) {\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    parse(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    parse(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n                size_left = 0;\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n            size_left += chunk.length - last;\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        let combined = merge_bytes(leftovers, dec);\n        parse(combined);\n        if (combined[combined.length - 1] == \"\\n\") { // guaranteed to have non-zero length, by virtue of how 'leftovers' is filled.\n            rows.pop();            \n        }\n    }\n\n    return rows;    \n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPcaResults } from \"./runPca.js\";\n\n/**\n * Wrapper around the k-means clustering results on the Wasm heap, produced by {@linkcode clusterKmeans}.\n * @hideconstructor\n */\nexport class ClusterKmeansResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#results = raw;\n        this.#id = id;\n    }\n\n    /**\n     * @return {number} Number of cells in the results.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    /**\n     * @return {number} Number of clusters in the results.\n     */\n    numberOfClusters() {\n        return this.#results.num_clusters();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Int32Array|Int32WasmArray} Array containing the cluster assignment for each cell.\n     */\n    clusters(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.clusters(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Int32Array|Int32WasmArray} Array containing the number of cells in each cluster.\n     */\n    sizes(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.cluster_sizes(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64WasmArray} Array containing the cluster centers in column-major format,\n     * where rows are dimensions and columns are the clusters.\n     */\n    centers(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.centers(), copy);\n    }\n\n    /**\n     * @return {number} Number of refinement iterations performed by the algorithm.\n     */\n    iterations() {\n        return this.#results.iterations();\n    }\n\n    /**\n     * @return {number} Status of the algorithm - anything other than zero usually indicates a problem with convergence.\n     */\n    status() {\n        return this.#results.status();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using k-means.\n * A variety of initialization and refinement algorithms can be used here, see the [**kmeans** documentation](https://github.com/LTLA/CppKmeans) for more details.\n *\n * @param {(RunPcaResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPcaResults} input, we extract the principal components.\n * @param {number} clusters Number of clusters to create.\n * This should not be greater than the number of cells.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {string} [options.initMethod=\"pca-part\"] - Initialization method.\n * Setting `\"random\"` will randomly select `clusters` cells as centers.\n * Setting `\"kmeans++\"` will use the weighted sampling approach of Arthur and Vassilvitskii (2007).\n * Setting `\"var-part\"` will use variance partitioning from Su and Dy (2007).\n * @param {number} [options.initSeed=5768] - Seed to use for random number generation during initialization.\n * @param {number} [options.initVarPartSizeAdjust=1] - Adjustment factor for the cluster sizes, used when `initMethod = \"var-part\"`.\n * Larger values (up to 1) will prioritize partitioning of clusters with more cells.\n * @param {boolean} [options.initVarPartOptimize=true] - Whether to optimize the partition at each step to minimize the sum of squares, when `initMethod = \"var-part\"`.\n * @param {string} [options.refineMethod=\"hartigan-wong\"] - Refinement method.\n * This can be either `\"hartigan-wong\"` or `\"lloyd\"`.\n * @param {number} [options.refineLloydIterations=10] - Number of iterations for the Lloyd refinement algorithm.\n * @param {number} [options.refineHartiganWong=10] - Number of iterations for the Hartigan-Wong refinement algorithm.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ClusterKmeansResults} Object containing the clustering results.\n */\nexport function clusterKmeans(x, clusters, options = {}) {\n    let { \n        numberOfDims = null, \n        numberOfCells = null, \n        initMethod = \"var-part\", \n        initSeed = 5768, \n        initVarPartSizeAdjust = 1, \n        initVarPartOptimize = true, \n        refineMethod = \"hartigan-wong\",\n        refineLloydIterations = 100,\n        refineHartiganWongIterations = 10,\n        numberOfThreads = null,\n        ...others\n    } = options;\n    utils.checkOtherOptions(others);\n\n    var buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPcaResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.cluster_kmeans(\n                pptr,\n                numberOfDims,\n                numberOfCells,\n                clusters,\n                initMethod,\n                initSeed,\n                initVarPartSizeAdjust,\n                initVarPartOptimize,\n                refineMethod,\n                refineLloydIterations,\n                refineHartiganWongIterations,\n                nthreads\n            ),\n            ClusterKmeansResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Apply delayed arithmetic to a {@linkplain ScranMatrix} object.\n *\n * @param {ScranMatrix} x - A ScranMatrix object.\n * @param {string} operation - The operation to perform, one of `\"+\"`, `\"*\"`, `\"/\"` or `\"-\"`.\n * @param {number|Array|WasmArray|TypedArray} value - The other operand in the arithmetic operation.\n * If a scalar, this is applied element-wise to each entry of `x`.\n * If a vector, it is assumed to map to either the rows or columns of `x` (see `along`) and each entry is applied to all values of the corresponding row/column.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.right=true] - Whether `value` is applied to the right of `x`.\n * Only relevant for subtraction or division.\n * @param {string} [options.along=\"row\"] - Whether an array-like `value` maps to the rows (`\"row\"`) or columns (`\"column\"`).\n * If rows, `value` should have length equal to `x.numberOfRows()`.\n * If columns, `value` should have length equal to `x.numberOfColumns()`.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix} A ScranMatrix containing the delayed arithmetic operation on `x`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function delayedArithmetic(x, operation, value, options = {}) {\n    const { right = true, along = \"row\", inPlace = false, ...others } = options;\n    utils.checkOtherOptions(others);\n    let xcopy;\n    let vbuffer;\n    let target;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        let margin = (along == \"row\" ? 0 : 1);\n\n        if (typeof value == \"number\") {\n            wasm.call(module => module.delayed_arithmetic_scalar(target.matrix, operation, right, value));\n        } else {\n            vbuffer = utils.wasmifyArray(value, \"Float64WasmArray\")\n            wasm.call(module => module.delayed_arithmetic_vector(target.matrix, operation, right, margin, vbuffer.offset, vbuffer.length));\n        }\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(vbuffer);\n    }\n\n    return target;\n}\n\n/**\n * Apply delayed math to a {@linkplain ScranMatrix} object.\n *\n * @param {ScranMatrix} x - A ScranMatrix object.\n * @param {string} operation - The operation to perform, one of `\"log\"`, `\"sqrt\"`, `\"abs\"`, `\"log1p\"`, `\"round\"` or `\"exp\"`.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.logBase=null] - Base of the logarithm to use when `operation = \"log\"`.\n * Defaults to the natural base.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix} A ScranMatrix containing the delayed math operation on `x`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function delayedMath(x, operation, options = {}) {\n    let { logBase = null, inPlace = false, ...others } = options;\n    utils.checkOtherOptions(others);\n    let xcopy;\n    let target;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        if (logBase === null) {\n            logBase = -1;\n        }\n\n        wasm.call(module => module.delayed_math(target.matrix, operation, logBase));\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n    }\n\n    return target;\n}\n\n/**\n * Transpose a {@linkplain ScranMatrix} object.\n *\n * @param {ScranMatrix} x - A ScranMatrix object.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix} A ScranMatrix containing the transposition of `x`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function transpose(x, options = {}) {\n    const { inPlace = false, ...others } = options;\n    utils.checkOtherOptions(others);\n    let xcopy;\n    let target;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n        wasm.call(module => module.transpose(target.matrix));\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n    }\n\n    return target;\n}\n","import { buffer, wasmArraySpace, maximumThreads } from \"./wasm.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Helper function to create a Uint8WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Uint8WasmArray} Uint8WasmArray on the **scran.js** Wasm heap.\n */\nexport function createUint8WasmArray(length) {\n    return wa.createUint8WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Int32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Int32WasmArray} Int32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createInt32WasmArray(length) {\n    return wa.createInt32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a BigUint64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {BigUint64WasmArray} BigUint64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createBigUint64WasmArray (length) {\n    return wa.createBigUint64WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float32WasmArray} Float32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat32WasmArray(length) {\n    return wa.createFloat32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float64WasmArray} Float64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat64WasmArray(length) {\n    return wa.createFloat64WasmArray(wasmArraySpace(), length);\n}\n\nexport function wasmifyArray(x, expected) {\n    if (x instanceof wa.WasmArray) {\n        if (expected !== null && expected != x.constructor.className) {\n            throw new Error(\"expected '\" + expected + \"', got '\" + x.constructor.className + \"'\");\n        }\n\n        if (x.space === wasmArraySpace()) {\n            // Creating a view. This ensures that callers can always call\n            // free() on the output of this function without worrying about\n            // whether they are breaking something else that was using 'x'.\n            if (x.owner === null) {\n                return x.view();\n            } else {\n                return x; // it's already a view, so we just pass it along.\n            }\n        } else {\n            // If it's a different space, then we have to make a copy.\n            return x.clone(wasmArraySpace());\n        }\n    }\n\n    let y = null;\n    if (expected !== null) {\n        y = wa.convertToWasmArray(wasmArraySpace(), x, wa.stringToClass(expected));\n    } else {\n        y = wa.convertToWasmArray(wasmArraySpace(), x);\n    }\n\n    return y;\n}\n\nexport function chooseNumberOfThreads(threads) {\n    if (threads == null) {\n        return maximumThreads();\n    } else {\n        return threads;\n    }\n}\n\n/**\n * Try to free a **scran.js** object's memory (typically involving some memory allocated on the Wasm heap) by calling its `free` method.\n *\n * @param {?object} x - Instance of a **scran.js** or **wasmarrays.js** class to be freed.\n * May also be `null` or undefined.\n * \n * @return The output of `x.free()` - unless `x` is undefined or `null`, in which case nothing is performed.\n */\nexport function free(x) {\n    if (typeof x == \"undefined\" || x == null) {\n        return;\n    }\n    return x.free();\n}\n\nexport function extractXY(ncells, coordinates) {\n    let x = new Float64Array(ncells);\n    let y = new Float64Array(ncells);\n\n    for (var i = 0; i < ncells; i++) {\n        x[i] = coordinates[2 * i];\n        y[i] = coordinates[2 * i + 1];\n    }\n\n    return { \"x\": x, \"y\": y };\n}\n\n/**\n * Possibly copy an array out of the Wasm heap, avoiding potential invalidation at the cost of some efficiency.\n *\n * @param {TypedArray} x - Array of data, possibly on the **scran.js** Wasm heap.\n * @param {(string|boolean)} copy - Copying mode to use.\n *\n * @return {TypedArray|WasmArray} The return value depends on the value of `copy`:\n * - If `copy = true`, a TypedArray copy of `x` is created with `x.slice()` and returned.\n *   This is a good default to avoid invalidation of TypedArray views on the heap upon reallocation, by creating a Javascript-owned copy for downstream use.\n * - If `copy = false`, `x` is returned directly.\n *   This avoids making any copy but runs the risk of invalidation when the Wasm heap is resized;\n *   it should only be used when no further Wasm allocations are performed within the lifetime of `x`.\n * - If `copy = \"view\"`, a WasmArray view is created from `x` and returned.\n *   This avoids any copy and is robust to invalidation but requires an extra `WasmArray.array()` call to create a TypedArray.\n */\nexport function possibleCopy(x, copy) {\n    if (copy === \"view\") {\n        if (x.buffer !== buffer()) {\n            throw new Error(\"cannot use copy = \\\"view\\\" for non-Wasm TypedArrays\");\n        }\n\n        let view_class = x.constructor.name.replace(\"Array\", \"WasmArray\");\n\n        // This function should only be used for objects generated in the\n        // buffer owned by scran.js, so we can assume that x's space is the\n        // same as that of the wasmArraySpace().\n        return wa.createWasmArrayView(wasmArraySpace(), x.length, x.byteOffset, wa.stringToClass(view_class));\n\n    } else if (copy) {\n        return x.slice();\n\n    } else {\n        return x;\n    }\n}\n\nexport function matchOptions(name, value, choices) {\n    if (choices.indexOf(value) == -1) {\n        throw new Error(\"'\" + name + \"=' should be one of '\" + choices.join(\"', '\") + \"'\");\n    }\n}\n\nexport function toTypedArray(buffer, wasSupplied, asTypedArray) {\n    if (asTypedArray) {\n        if (!wasSupplied) {\n            const output = buffer.slice();\n            buffer.free();\n            return output;\n        } else {\n            return buffer.array();\n        }\n    } else {\n        return buffer;\n    }\n}\n\nexport function checkOtherOptions(options) {\n    for (const key of Object.keys(options)) {\n        throw new Error(\"unknown option '\" + key + \"'\");\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\n\n/**\n * Base class for RDS objects.\n * @hideconstructor\n */\nexport class RdsObject {\n    constructor(id, raw, par) {\n        this.id = id;\n        this.object = raw;\n        this.parent = par;\n    }\n\n    /**\n     * @return {string} Type of the object.\n     */\n    type() {\n        return this.object.type();\n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     */\n    free() {\n        if (this.object !== null) {\n            gc.release(this.id);\n            this.object = null;\n        }\n    }\n}\n\n/**\n * Vector-like R object.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsVector extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return{number} Length of the vector.\n     */\n    length() {\n        return this.object.size();\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => this.object.attribute_names());\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * Integer vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsIntegerVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the integer vector.\n     */\n    values(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Boolean (i.e., boolean) vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsBooleanVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the logical vector.\n     * Zero values are falsey and values of 1 are truthy.\n     */\n    values(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Double-precision vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsDoubleVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Values of the double vector.\n     */\n    values(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * String vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsStringVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return {Array} Values of the string vector.\n     */\n    values() {\n        return wasm.call(mod => this.object.string_vector());\n    }\n}\n\n/**\n * Generic vector from R, typically known as a \"list\".\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsGenericVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {number} index - Index of the list element of interest.\n     * @return {RdsObject} Value of the list element.\n     */\n    load(index) {\n        return dispatch(mod => this.object.load_list_element(index), this.parent);\n    }\n}\n\n/**\n * S4 object from R, containing slot data in its attributes.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsS4Object extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * Name of the R class.\n     */\n    className() {\n        return wasm.call(mod => this.object.class_name());\n    }\n\n    /**\n     * Name of the package that defines the class.\n     */\n    packageName() {\n        return wasm.call(mod => this.object.package_name());\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => this.object.attribute_names());\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * NULL type in R.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsNull extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n};\n\nfunction dispatch(fun, par) {\n    let obj = wasm.call(fun);\n\n    let tt = null;\n    try {\n        tt = obj.type();\n    } catch (e) {\n        obj.delete();\n        throw e;\n    }\n\n    // Remaining steps until gc.call() should be no-throw!\n    let cons;\n    if (tt == \"integer\") {\n        cons = RdsIntegerVector;\n    } else if (tt == \"double\") {\n        cons = RdsDoubleVector;\n    } else if (tt == \"boolean\") {\n        cons = RdsBooleanVector;\n    } else if (tt == \"string\") {\n        cons = RdsStringVector;\n    } else if (tt == \"vector\") {\n        cons = RdsGenericVector;\n    } else if (tt == \"S4\") {\n        cons = RdsS4Object;\n    } else if (tt == \"null\") {\n        cons = RdsNull;\n    } else {\n        cons = RdsObject;\n    }\n\n    return gc.call(mod => obj, cons, par);\n}\n\n/**\n * Details of the RDS file.\n * @hideconstructor\n */\nexport class RdsDetails {\n    #id;\n    #obj;\n\n    constructor(id, obj) {\n        this.#id = id;\n        this.#obj = obj;\n    }\n\n    /**\n     * @return {number} Version of the RDS format. This should be 3.\n     */\n    formatVersion() {\n        return this.#obj.format_version();\n    }\n\n    /**\n     * @return {string} The R version used to create the file.\n     */\n    writerVersion() {\n        let info = this.#obj.writer_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {string} The minimum R version that can read the file.\n     */\n    readerVersion() {\n        let info = this.#obj.reader_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {RdsObject} Interface into the underlying R object.\n     */\n    value() {\n        return dispatch(mod => this.#obj.load(), this); \n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     * Doing so will invalidate all {@linkplain RdsObject} instances derived from this object, \n     * directly via {@linkcode RdsDetails#load} or indirectly \n     * (e.g., from further {@linkcode RdsVector#attribute RdsVector.attribute} or {@linkcode RdsGenericVector#load RdsGenericVector.load} calls).\n     */\n    free() {\n        if (this.#obj !== null) {\n            gc.release(this.#id);\n            this.#obj = null;\n        }\n    }\n}\n\n/**\n * Read the contents of an RDS file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of an RDS file.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n *\n * @return {RdsDetails} Details of the file.\n */\nexport function readRds(x) {\n    let tmp;\n    let output;\n\n    try {\n        if (typeof x == \"string\") {\n            output = gc.call(module => module.parse_rds_from_file(x), RdsDetails)\n        } else {\n            tmp = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(module => module.parse_rds_from_buffer(tmp.offset, tmp.length), RdsDetails);\n        }\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * Results of marker detection,\n * see [here](https://www.kanaverse.github.io/scran.js/ScoreMarkersResults.html) for details.\n *\n * @external ScoreMarkersResults\n */\n\n/*********************\n ***** Internals *****\n *********************/\n\nfunction _free_results(cache) {\n    for (const v of Object.values(cache.raw)) {\n        utils.freeCache(v);\n    }\n    cache.raw = {};\n    markers.freeVersusResults(cache.versus);\n    delete cache.versus;\n}\n\nfunction _computeVersus(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n    let cache_info = markers.locateVersusCache(left, right, cache);\n    let left_index = (cache_info.left_small ? 0 : 1);\n    let right_index = (cache_info.left_small ? 1 : 0);\n\n    if (cache_info.run) {\n        let new_clusters = [];\n        let keep = [];\n        let leftfound = false, rightfound = false;\n        clusters.forEach((x, i) => {\n            if (x == left) {\n                new_clusters.push(left_index);\n                keep.push(i);\n                leftfound = true;\n            } else if (x == right) {\n                new_clusters.push(right_index);\n                keep.push(i);\n                rightfound = true;\n            }\n        });\n\n        if (!leftfound || !rightfound) {\n            throw new Error(\"non-zero entries should be present for both requested clusters in versus mode\");\n        }\n\n        markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n    }\n\n    return { \n        results: cache_info.cached,\n        left: left_index,\n        right: right_index\n    };\n}\n\n/*****************\n ***** State *****\n *****************/\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * The clustering is obtained from the upstream {@linkplain ChooseClusteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        _free_results(this.#cache);\n    }\n\n    /**\n     * Obtain the marker detection results for all modalities.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object where each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all clusters.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * Parameters used to compute the results.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `marker_detection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.lfc_threshold] - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} [parameters.compute_auc] - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated with new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, MarkerDetectionState.defaults());\n        this.changed = false;\n\n        let changed_params = (parameters.lfc_threshold !== this.#parameters.lfc_threshold || parameters.compute_auc !== this.#parameters.compute_auc);\n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (this.#choice.changed || v.changed || changed_params) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClusters();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block, threshold: parameters.lfc_threshold, computeAuc: parameters.compute_auc });\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters = parameters;\n        if (this.changed) {\n            markers.freeVersusResults(this.#cache.versus);\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode MarkerDetectionState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    // Soft-deprecated.\n    static computeVersusCustom(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n        return computeVersus(left, right, matrices, clusters, { cache, block, lfc_threshold, compute_auc });\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two clusters for more detailed examination of the differences between them.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @param {number} left - Index of one cluster in which to find upregulated markers.\n     * @param {number} right - Index of another cluster to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` cluster in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohensD(output.left)`.\n     * - `right`: index of the group corresponding to the `right` cluster in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohensD(output.right)`.\n     */\n    computeVersus(left, right) {\n        var clusters = this.#choice.fetchClusters();\n        var block = this.#filter.fetchFilteredBlock();\n\n        // No need to free this afterwards; we don't own the normalized matrices anyway.\n        let matrices = new scran.MultiMatrix;\n        for (const [modality, state] of Object.entries(this.#norm_states)) {\n            if (!state.valid()) {\n                continue;\n            }\n            matrices.add(modality, state.fetchNormalizedMatrix());\n        }\n\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n\n        return _computeVersus(left, right, matrices, clusters, { \n            cache: this.#cache.versus, \n            block: block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**********************\n ***** Standalone *****\n **********************/\n\n/**\n * Standalone version of {@linkplain MarkerDetectionState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices, groups and blocking factor to compute the various marker statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed MarkerDetectionStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class MarkerDetectionStandalone {\n    #matrices;\n\n    #groups;\n    #group_levels;\n    #block;\n    #block_levels;\n\n    #cache;\n    #parameters;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {Array|TypedArray} groups - Array of length equal to the number of columns in any value of `normalized`, containing the group assignments for each column. \n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, groups, { block = null } = {}) {\n        // Checking dimensions.\n        let N = groups.length;\n\n        for (const k of normalized.available()) {\n            let v = normalized.get(k);\n            if (v.numberOfColumns() != N) {\n                throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n            }\n        }\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as 'groups' if not null\");\n            }\n        }\n\n        let arrays = [ groups ];\n        if (block !== null) {\n            arrays.push(block);\n        }\n        let dump = utils.subsetInvalidFactors(arrays);\n\n        // Maybe taking a subset to eliminate invalid entries.\n        let new_matrices;\n        if (dump.retain !== null) {\n            new_matrices = new scran.MultiMatrix;\n            let temp = scran.createInt32WasmArray(dump.retain.length);\n            try {\n                temp.set(dump.retain);\n                for (const k of normalized.available()) {\n                    new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                }\n            } catch (e) {\n                new_matrices.free();\n                throw e;\n            } finally {\n                scran.free(temp);\n            }\n        } else {\n            new_matrices = normalized.clone();\n        }\n\n        this.#matrices = new_matrices;\n        this.#groups = dump.arrays[0].ids;\n        this.#group_levels = dump.arrays[0].levels;\n\n        if (block !== null) {\n            this.#block = dump.arrays[1].ids;\n            this.#block_levels = dump.arrays[1].levels;\n        } else {\n            this.#block = null;\n            this.#block_levels = null;\n        }\n\n        this.#cache = { raw: {}, init: true };\n        this.#parameters = MarkerDetectionState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#groups);\n        scran.free(this.#block);\n        scran.free(this.#matrices);\n        _free_results(this.#cache);\n    }\n\n    /**\n     * @return {object} Marker detection results for the all modalities.\n     * Each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all groups.\n     * This is available after running {@linkcode MarkerDetectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the grouping factor.\n     * Group indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchGroupLevels({ copy = true } = {}) {\n        let ret = this.#group_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#matrices;\n    }\n\n    _peekGroups() {\n        return this.#groups;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode MarkerDetectionStandalone#compute compute} for details.\n     */\n    static defaults() {\n        return MarkerDetectionState.defaults();\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode MarkerDetectionStandalone.defaults defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode MarkerDetectionState#compute MarkerDetectionState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     */\n    setParameters(parameters) {\n        parameters = utils.defaultizeParameters(parameters, MarkerDetectionStandalone.defaults());\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            // Removing existing results, as they are now invalid.\n            _free_results(this.#cache);\n        }\n        this.#parameters = parameters;\n        return;\n    }\n\n    /**\n     * Compute markers for all groups.\n     *\n     * @return The state is updated with new results.\n     */\n    computeAll() {\n        let { lfc_threshold, compute_auc } = this.#parameters;\n        for (const k of this.#matrices.available()) {\n            var mat = this.#matrices.get(k);\n            utils.freeCache(this.#cache.raw[k]);\n            this.#cache.raw[k] = scran.scoreMarkers(mat, this.#groups, { block: this.#block, threshold: lfc_threshold, computeAuc: compute_auc });\n        }\n        return;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two groups, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {number} left - Index of one group in which to find upregulated markers.\n     * @param {number} right - Index of another group to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two groups.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` group in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohensD(output.left)`.\n     * - `right`: index of the group corresponding to the `right` group in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohensD(output.right)`.\n     */\n    computeVersus(left, right) {\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n        return _computeVersus(left, right, this.#matrices, this.#groups, { \n            cache: this.#cache.versus, \n            block: this.#block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Initialize a dense matrix from a dense array. \n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray|Array|TypedArray} values Values of all elements in the matrix.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.columnMajor=true] - Whether `values` contains the matrix in a column-major order.\n * @param {boolean} [options.forceInteger=false] - Whether to coerce `values` to integers via truncation.\n *\n * @return {ScranMatrix} Matrix containing dense data.\n */\nexport function initializeDenseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, options = {}) {\n    const { columnMajor = true, forceInteger = false, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var val_data; \n    var output;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        if (val_data.length !== numberOfRows * numberOfColumns) {\n            throw new Error(\"length of 'values' is not consistent with supplied dimensions\");\n        }\n\n        output = gc.call(\n            module => module.initialize_dense_matrix_from_dense_array(\n                numberOfRows, \n                numberOfColumns, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"),\n                columnMajor,\n                forceInteger\n            ),\n            ScranMatrix\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a sparse matrix from a dense array in column-major format.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray|Array|TypedArray} values Values of all elements in the matrix.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {boolean} columnMajor - Whether `values` contains the matrix in a column-major order.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.columnMajor=true] - Whether `values` contains the matrix in a column-major order.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, see [**tatami_layered**](https://github.com/tatami-inc/tatami_layered) for more details.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting `layered = true` assumes that `values` contains only non-negative integers.\n *\n * @return {ScranMatrix} Matrix containing sparse data.\n */\nexport function initializeSparseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, options = {}) {\n    const { columnMajor = true, forceInteger = true, layered = true, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var val_data; \n    var output;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        if (val_data.length !== numberOfRows * numberOfColumns) {\n            throw new Error(\"length of 'values' is not consistent with supplied dimensions\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_dense_array(\n                numberOfRows, \n                numberOfColumns, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"),\n                columnMajor,\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a sparse matrix from the usual compressed sparse arrays.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray} values Values of the non-zero elements.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {WasmArray} indices Row indices of the non-zero elements.\n * This should be of the same length as `values`.\n * @param {WasmArray} pointers Pointers specifying the start of each column in `indices`.\n * This should have length equal to `numberOfColumns + 1`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.byRow=true] - Whether the input arrays are supplied in the compressed sparse row format.\n * If `true`, `indices` should contain column indices and `pointers` should specify the start of each row in `indices`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, see [**tatami_layered**](https://github.com/tatami-inc/tatami_layered) for more details.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {ScranMatrix} Matrix containing sparse data.\n */ \nexport function initializeSparseMatrixFromSparseArrays(numberOfRows, numberOfColumns, values, indices, pointers, options = {}) {\n    const { byRow = true, forceInteger = true, layered = true, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var val_data;\n    var ind_data;\n    var indp_data;\n    var output;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        ind_data = utils.wasmifyArray(indices, null);\n        indp_data = utils.wasmifyArray(pointers, null);\n        if (val_data.length != ind_data.length) {\n            throw new Error(\"'values' and 'indices' should have the same length\");\n        }\n        if (indp_data.length != (byRow ? numberOfRows : numberOfColumns) + 1) {\n            throw new Error(\"'pointers' does not have an appropriate length\");\n        }\n\n        output = gc.call(\n            module => module.initialize_from_sparse_arrays(\n                numberOfRows, \n                numberOfColumns, \n                val_data.length, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"), \n                ind_data.offset, \n                ind_data.constructor.className.replace(\"Wasm\", \"\"), \n                indp_data.offset, \n                indp_data.constructor.className.replace(\"Wasm\", \"\"), \n                byRow,\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n        utils.free(ind_data);\n        utils.free(indp_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\n/** \n * Perform a hypergeometric test, typically for over-enrichment of markers across gene sets.\n * This can be computed for multiple gene sets by providing arrays as some or all of the arguments.\n * If multiple arrays are supplied, they must be of the same length.\n *\n * @param {number|Array|TypedArray|WasmArray} markersInSet - Number of detected markers that are also in the gene set.\n * @param {number|Array|TypedArray|WasmArray} numberOfMarkers - Total number of detected markers.\n * @param {number|Array|TypedArray|WasmArray} geneSetSize - Size of the gene set.\n * @param {number|Array|TypedArray|WasmArray} numberOfGenes - Total number of genes.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n * If `false`, a Float64WasmArray is returned instead.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n * If not `null`, this should have the same length as any of the array-like arguments.\n * @param {boolean} [options.log=false] - Whether to compute log-probabilities.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64Array|Float64WasmArray} An array of length equal to that of the supplied arrays (or 1, if no arrays are supplied).\n * The i-th entry contains the p-value for enrichment computed using the i-th entry of each supplied array. \n * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n */\nexport function hypergeometricTest(markersInSet, numberOfMarkers, geneSetSize, numberOfGenes, options = {}) {\n    let { asTypedArray = true, buffer = null, log = false, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let markersInSet_data;\n    let numberOfMarkers_data;\n    let geneSetSize_data;\n    let numberOfGenes_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let ntests = null;\n    let check_length = (candidate, name, sofar) => {\n        if (sofar !== null && candidate.length !== sofar) {\n            throw new Error(\"array inputs must have the same length (failing for '\" + name + \"')\");\n        }\n        return candidate.length;\n    }\n\n    if (typeof markersInSet == \"number\") {\n        markersInSet = [markersInSet];\n    } else { \n        ntests = check_length(markersInSet, \"markersInSet\", ntests);\n    }\n\n    if (typeof numberOfMarkers == \"number\") {\n        numberOfMarkers = [numberOfMarkers];\n    } else {\n        ntests = check_length(numberOfMarkers, \"numberOfMarkers\", ntests);\n    }\n\n    if (typeof geneSetSize == \"number\") {\n        geneSetSize = [geneSetSize];\n    } else {\n        ntests = check_length(geneSetSize, \"geneSetSize\", ntests);\n    }\n\n    if (typeof numberOfGenes == \"number\") {\n        numberOfGenes = [numberOfGenes];\n    } else {\n        ntests = check_length(numberOfGenes, \"numberOfGenes\", ntests);\n    }\n\n    if (ntests == null) {\n        ntests = 1;\n    }\n\n    let tmp = null;\n    try {\n        markersInSet_data = utils.wasmifyArray(markersInSet, \"Int32WasmArray\");\n        numberOfMarkers_data = utils.wasmifyArray(numberOfMarkers, \"Int32WasmArray\");\n        geneSetSize_data = utils.wasmifyArray(geneSetSize, \"Int32WasmArray\");\n        numberOfGenes_data = utils.wasmifyArray(numberOfGenes, \"Int32WasmArray\");\n\n        if (buffer == null) {\n            buffer = utils.createFloat64WasmArray(ntests);\n            tmp = buffer;\n        }\n\n        wasm.call(module => module.hypergeometric_test(\n            ntests, \n            markersInSet_data.length != 1,\n            markersInSet_data.offset,\n            geneSetSize_data.length != 1,\n            geneSetSize_data.offset,\n            numberOfMarkers_data.length != 1,\n            numberOfMarkers_data.offset,\n            numberOfGenes_data.length != 1,\n            numberOfGenes_data.offset,\n            buffer.offset,\n            log,\n            nthreads\n        ));\n\n    } finally {\n        utils.free(markersInSet_data);\n        utils.free(numberOfMarkers_data);\n        utils.free(geneSetSize_data);\n        utils.free(numberOfGenes_data);\n    }\n\n    return utils.toTypedArray(buffer, tmp == null, asTypedArray);\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Helper class for handling matrix data from multiple modalities.\n * In particular, it simplifies memory management of the assorted {@linkplain ScranMatrix} instances containing data for different features in the same set of cells.\n */\nexport class MultiMatrix {\n    #store;\n    #ncols;\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object} [options.store={}] - Existing store of {@linkplain ScranMatrix} objects.\n     * Each matrix should correspond to a different modality, named according to its key.\n     * All matrices should have data for the same set of cells, i.e., same number of columns.\n     */\n    constructor(options = {}) {\n        const { store = {}, ...others } = options;\n        utils.checkOtherOptions(others);\n\n        this.#store = store;\n        this.#ncols = null;\n\n        let keys = Object.keys(store);\n        for (var k = 0; k < keys.length; k++) {\n            let current = store[keys[k]];\n            if (k == 0) {\n                this.#ncols = current.numberOfColumns();\n            } else if (current.numberOfColumns() != this.#ncols) {\n                throw new Error(\"all matrices should have the same number of columns\");\n            }\n        }\n    }\n\n    /**\n     * @return {?number} Number of columns in the matrices.\n     * If no matrices are available, `null` is returned.\n     */\n    numberOfColumns() {\n        return this.#ncols;\n    }\n\n    /**\n     * @return {Array} Names of the available modalities.\n     */\n    available() {\n        return Object.keys(this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {boolean} Whether modality `i` is available.\n     */\n    has(i) {\n        return (i in this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {ScranMatrix} The matrix data for modality `i`.\n     */\n    get(i) {\n        return this.#store[i];\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @param {ScranMatrix} matrix - The matrix data for modality `i`.\n     *\n     * @return `matrix` is added to the MultiMatrix with name `i`.\n     */\n    add(i, matrix) {\n        if (this.#ncols === null) {\n            this.#ncols = matrix.numberOfColumns();\n        } else if (matrix.numberOfColumns() != this.#ncols) {\n            throw new Error(\"all matrices should have the same number of columns\");\n        }\n\n        if (i in this.#store) {\n            let old = this.#store[i];\n            utils.free(old);\n        }\n\n        this.#store[i] = matrix;\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return Modality `i` is removed from the MultiMatrix.\n     */\n    remove(i) {\n        utils.free(this.#store[i]);\n        delete this.#store[i];\n        if (Object.keys(this.#store).length == 0) {\n            this.#ncols = null;\n        }\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {MultiMatrix} A deep copy of the current object. \n     */\n    clone() {\n        let new_matrix = new MultiMatrix;\n        try {\n            for (const [k, v] of Object.entries(this.#store)) {\n                new_matrix.add(k, v.clone());\n            }\n        } catch (e) {\n            new_matrix.free();\n            throw e;\n        }\n        return new_matrix;\n    }\n\n    /**\n     * @param {string} from - Old name of the modality.\n     * @param {string} to - New name for the modality.\n     *\n     * @return The modality `from` is renamed to `to`, possibly replacing any existing modality at `to`.\n     */\n    rename(from, to) {\n        if (from !== to) {\n            if (to in this.#store) {\n                utils.free(this.#store[to]);\n            }\n            this.#store[to] = this.#store[from];\n            delete this.#store[from];\n        }\n    }\n\n    /**\n     * @return Frees memory for all modalities in this MultiMatrix.\n     */\n    free() {\n        for (const [x, v] of Object.entries(this.#store)) {\n            utils.free(v);\n        }\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as ann from \"./Annotated.js\";\n\nfunction verifyElementMetadata(elementMetadata, numExpected, className) {\n    if (elementMetadata !== null) {\n        if (!(elementMetadata instanceof df.DataFrame)) {\n            throw new Error(\"'elementMetadata' should be a DataFrame\");\n        }\n        if (generics.LENGTH(elementMetadata) !== numExpected) {\n            throw new Error(\"'elementMetadata' should have the same number of rows as 'LENGTH(<\" + className + \">)'\");\n        }\n    } else {\n        elementMetadata = new df.DataFrame({}, { numberOfRows: numExpected });\n    }\n    return elementMetadata;\n}\n\n/**\n * The Vector class implements a store for arbitrary per-element metadata and per-element names.\n * It is intended as a base class for other structures that have a concept of \"vector-ness\" and should not be constructed directly.\n *\n * Constructors of Vector subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE`, `_bioconductor_COMBINE` and `_bioconductor_SLICE` methods to return an instance of the subclass.\n *\n * @augments Annotated\n */\nexport class Vector extends ann.Annotated {\n    /**\n     * @param {number} length - Number of elements in this vector-like object.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-element annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object|Array|Map|List} [options.metadata={}] - Arbitrary metadata, see the {@link Annotated} constructor. \n     */\n    constructor(length, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        this._elementMetadata = verifyElementMetadata(elementMetadata, length, this.constructor.className);\n\n        if (names !== null) {\n            utils.checkNamesArray(names, \"'names'\", length, \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        }\n        this._names = names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {DataFrame} A {@linkplain DataFrame} with one row corresponding to each vector element, containing arbitrary per-element metadata.\n     */\n    elementMetadata() {\n        return this._elementMetadata;\n    }\n\n    /**\n     * @return {?Array} Array of strings containing the name of each range, or `null` if no names are available.\n     */\n    names() {\n        return this._names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the element metadata to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setElementMetadata(elementMetadata, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._elementMetadata = verifyElementMetadata(elementMetadata, generics.LENGTH(target), target.constructor.className);\n        return target;\n    }\n\n    $setElementMetadata(elementMetadata) {\n        return this.setElementMetadata(elementMetadata, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the names to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", generics.LENGTH(this), \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        } \n        let target = cutils.setterTarget(this, inPlace);\n        target._names = names;\n        return target;\n    }\n\n    $setNames(names) {\n        return this.setNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE(i, { allowView = false }) {\n        let output = new this.constructor;\n        output._elementMetadata = generics.SLICE(this._elementMetadata, i, { allowView });\n        output._names = (this._names === null ? null : generics.SLICE(this._names, i, { allowView }));\n        output._metadata = this._metadata;\n        return output;\n    }\n\n    _bioconductor_COMBINE(objects) {\n        let all_em = [this._elementMetadata];\n        let all_n = [this._names];\n        let all_l = [generics.LENGTH(this)];\n\n        for (const x of objects) {\n            all_em.push(x._elementMetadata);\n            all_n.push(x._names);\n            all_l.push(generics.LENGTH(x));\n        }\n\n        let output = new this.constructor;\n        output._elementMetadata = generics.COMBINE(all_em);\n        output._names = utils.combineNames(all_n, all_l);\n        output._metadata = this._metadata;\n        return output;\n    }\n\n    _bioconductor_CLONE({ deepCopy = true }) {\n        let output = super._bioconductor_CLONE({ deepCopy });\n        output._elementMetadata = cutils.cloneField(this._elementMetadata, deepCopy);\n        output._names = cutils.cloneField(this._names, deepCopy);\n        return output;\n    }\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the gene-to-set mappings if they are not already available.\n * If `false`, `null` is returned if the gene-to-set mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of genes for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllGenes} and is an array of integers containing the IDs for all sets containing that gene.\n * Set IDs refer to indices in {@linkcode fetchAllSets}.\n *\n * If the gene-to-set mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchSetsForAllGenes(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_gene2set.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full gene-to-set information for species '\" + species + \"'\");\n    }\n\n    var gene_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = gene_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/** \n * Wrapper for the PCA results on the Wasm heap, typically created by {@linkcode runPca}.\n * @hideconstructor\n */\nexport class RunPcaResults {\n    #id;\n    #results;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64Wasmarray} Array containing the principal components for all cells.\n     * This should be treated as a column-major array where the rows are the PCs and columns are the cells.\n     */\n    principalComponents(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.components(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64Wasmarray} Array containing the rotation matrix for all cells.\n     * This should be treated as a column-major array where the rows are the genes and the columns are the PCs.\n     */\n    rotation(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.rotation(), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @return {Float64Array|Float64WasmArray} Array containing the variance explained for each requested PC.\n     */\n    varianceExplained(options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.variance_explained(), copy);\n    }\n\n    /**\n     * @return {number} The total variance in the dataset,\n     * typically used with {@linkcode PCAResults#varianceExplained varianceExplained} to compute the proportion of variance explained.\n     */\n    totalVariance() {\n        return this.#results.total_variance();\n    }\n\n    /**\n     * @return {number} Number of PCs available in these results.\n     */\n    numberOfPCs() {\n        return this.#results.num_pcs();\n    }\n\n    /**\n     * @return {number} Number of cells used to compute these results.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Run a principal components analysis on the log-expression matrix.\n * This is usually done on a subset of features, and possibly with some kind of blocking on a per-cell batch factor.\n *\n * @param {ScranMatrix} x - The log-normalized expression matrix.\n * @param {object} [options={}] - Optional parameters. \n * @param {?(Uint8WasmArray|Array|TypedArray)} [options.features=null] - Array specifying which features should be retained (e.g., HVGs).\n * This should be of length equal to the number of rows in `x`; elements should be `true` to retain each row.\n * If `null`, all features are retained.\n * @param {number} [options.numberOfPCs=25] - Number of top principal components to compute.\n * @param {boolean} [options.scale=false] - Whether to scale each feature to unit variance.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {string} [options.blockMethod=\"regress\"] - How to adjust the PCA for the blocking factor.\n *\n * - `\"regress\"` will regress out the factor, effectively performing a PCA on the residuals.\n *   This only makes sense in limited cases, e.g., inter-block differences are linear and the composition of each block is the same.\n * - `\"project\"` will compute the rotation vectors from the residuals but will project the cells onto the PC space.\n *   This focuses the PCA on within-block variance while avoiding any assumptions about the nature of the inter-block differences.\n * - `\"none\"` will ignore any blocking factor, i.e., as if `block = null`.\n *   Any inter-block differences will both contribute to the determination of the rotation vectors and also be preserved in the PC space.\n *\n * This option is only used if `block` is not `null`.\n * @param {string} [options.blockWeightPolicy=\"variable\"] The policy for weighting each block so that it contributes the same number of effective observations to the covariance matrix.\n *\n * - `\"variable\"` ensures that, past a certain size (default 1000 cells), larger blocks do not dominate the definition of the PC space.\n *   Below the threshold size, blocks are weighted in proportion to their size to reduce the influence of very small blocks. \n * - `\"equal\"` uses the same weight for each block, regardless of size.\n * - `\"none\"` does not apply any extra weighting, i.e., the contribution of each block is proportional to its size.\n *\n * This option is only used if `block` is not `null`.\n * @param {?boolean} [options.realizeMatrix=null] - Whether to realize the submatrix into its own memory.\n * This is more efficient but consumes more memory.\n * Defaults to true if `subset` is supplied, otherwise it is false.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {RunPcaResults} Object containing the computed PCs.\n */\nexport function runPca(x, options = {}) {\n    let { \n        features = null,\n        numberOfPCs = 25,\n        scale = false,\n        block = null,\n        blockMethod = \"regress\",\n        blockWeightPolicy = \"variable\",\n        realizeMatrix = null,\n        numberOfThreads = null,\n        ...others\n    } = options;\n    utils.checkOtherOptions(others);\n\n    var feat_data;\n    var block_data;\n    var output;\n\n    utils.matchOptions(\"blockMethod\", blockMethod, [\"none\", \"regress\", \"project\"]);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var use_feat = false;\n        var fptr = 0;\n\n        if (features !== null) {\n            feat_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n            if (feat_data.length != x.numberOfRows()) {\n                throw new Error(\"length of 'features' should be equal to number of rows in 'x'\");\n            }\n            use_feat = true;\n            fptr = feat_data.offset;\n        }\n\n        if (realizeMatrix === null) {\n            realizeMatrix = use_feat;\n        }\n\n        // Avoid asking for more PCs than is possible.\n        // Remember that centering removes one df, so we subtract 1 from the dimensions.\n        numberOfPCs = Math.min(numberOfPCs, x.numberOfRows() - 1, x.numberOfColumns() - 1);\n\n        var use_block = false;\n        var bptr = 0;\n        var comp_as_resid = false;\n        if (block !== null && blockMethod !== 'none') {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'block' should be equal to the number of columns in 'x'\");\n            }\n            use_block = true;\n            bptr = block_data.offset;\n            comp_as_resid = (blockMethod == \"regress\");\n        }\n\n        output = gc.call(\n            module => module.run_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, use_block, bptr, blockWeightPolicy, comp_as_resid, realizeMatrix, nthreads),\n            RunPcaResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(feat_data);\n        utils.free(block_data);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"rna_pca\";\n\n/**\n * Results of running PCA on some input matrix,\n * see [here](https://kanaverse.github.io/scran.js/RunPCAResults.html) for details.\n *\n * @external RunPCAResults\n */\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPca`](https://kanaverse.github.io/scran.js/global.html#runPca) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaPcaState { \n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a FeatureSelectionState object\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized gene expression values.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.num_pcs] - Number of PCs to return.\n     * @param {number} [parameters.num_hvgs] - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} [parameters.block_method] - Blocking method to use when dealing with multiple samples.\n     * This can be one of:\n     *\n     * - `\"none\"`, in which case nothing is done using the sample information. \n     * - `\"regress\"`, where linear regression is applied to remove mean differences between samples.\n     * - `\"project\"`, where samples are weighted so that they contribute equally regardless of the number of cells.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, RnaPcaState.defaults());\n        this.changed = false;\n\n        // For back-compatibility.\n        if (parameters.block_method == \"weight\") {\n            parameters.block_method = \"project\";\n        }\n\n        if (this.#feat.changed || parameters.num_hvgs !== this.#parameters.num_hvgs) {\n            if (this.valid()) {\n                choose_hvgs(parameters.num_hvgs, this.#feat, this.#cache);\n                this.changed = true;\n            }\n        }\n\n        if (this.changed || this.#norm.changed || parameters.num_pcs !== this.#parameters.num_pcs || parameters.block_method !== this.#parameters.block_method) { \n            utils.freeCache(this.#cache.pcs);\n\n            if (this.valid()) {\n                let sub = this.#cache.hvg_buffer;\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                this.#cache.pcs = scran.runPca(mat, { features: sub, numberOfPCs: parameters.num_pcs, block: block, blockMethod: parameters.block_method });\n                this.changed = true;\n            }\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode RnaPcaState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResults().residuals({ copy: false });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n","\nvar loadScran = (() => {\n  var _scriptName = import.meta.url;\n  \n  return (\nfunction(moduleArg = {}) {\n  var moduleRtn;\n\nfunction GROWABLE_HEAP_I8(){if(wasmMemory.buffer!=HEAP8.buffer){updateMemoryViews()}return HEAP8}function GROWABLE_HEAP_U8(){if(wasmMemory.buffer!=HEAP8.buffer){updateMemoryViews()}return HEAPU8}function GROWABLE_HEAP_I16(){if(wasmMemory.buffer!=HEAP8.buffer){updateMemoryViews()}return HEAP16}function GROWABLE_HEAP_U16(){if(wasmMemory.buffer!=HEAP8.buffer){updateMemoryViews()}return HEAPU16}function GROWABLE_HEAP_I32(){if(wasmMemory.buffer!=HEAP8.buffer){updateMemoryViews()}return HEAP32}function GROWABLE_HEAP_U32(){if(wasmMemory.buffer!=HEAP8.buffer){updateMemoryViews()}return HEAPU32}function GROWABLE_HEAP_F32(){if(wasmMemory.buffer!=HEAP8.buffer){updateMemoryViews()}return HEAPF32}function GROWABLE_HEAP_F64(){if(wasmMemory.buffer!=HEAP8.buffer){updateMemoryViews()}return HEAPF64}var Module=moduleArg;var readyPromiseResolve,readyPromiseReject;var readyPromise=new Promise((resolve,reject)=>{readyPromiseResolve=resolve;readyPromiseReject=reject});var ENVIRONMENT_IS_WEB=typeof window==\"object\";var ENVIRONMENT_IS_WORKER=typeof importScripts==\"function\";var ENVIRONMENT_IS_NODE=typeof process==\"object\"&&typeof process.versions==\"object\"&&typeof process.versions.node==\"string\"&&process.type!=\"renderer\";var ENVIRONMENT_IS_PTHREAD=ENVIRONMENT_IS_WORKER&&self.name==\"em-pthread\";var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram=\"./this.program\";var quit_=(status,toThrow)=>{throw toThrow};var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var readAsync,readBinary;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptName){scriptDirectory=_scriptName}if(scriptDirectory.startsWith(\"blob:\")){scriptDirectory=\"\"}else{scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}{if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=url=>fetch(url,{credentials:\"same-origin\"}).then(response=>{if(response.ok){return response.arrayBuffer()}return Promise.reject(new Error(response.status+\" : \"+response.url))})}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.error.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];var wasmBinary=Module[\"wasmBinary\"];var wasmMemory;var wasmModule;var ABORT=false;var EXITSTATUS;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateMemoryViews(){var b=wasmMemory.buffer;Module[\"HEAP8\"]=HEAP8=new Int8Array(b);Module[\"HEAP16\"]=HEAP16=new Int16Array(b);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(b);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(b);Module[\"HEAP32\"]=HEAP32=new Int32Array(b);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(b);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(b);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(b)}if(ENVIRONMENT_IS_PTHREAD){var wasmPromiseResolve;var wasmPromiseReject;var initializedJS=false;function threadPrintErr(...args){var text=args.join(\" \");console.error(text)}if(!Module[\"printErr\"])err=threadPrintErr;function threadAlert(...args){var text=args.join(\" \");postMessage({cmd:\"alert\",text,threadId:_pthread_self()})}self.alert=threadAlert;Module[\"instantiateWasm\"]=(info,receiveInstance)=>new Promise((resolve,reject)=>{wasmPromiseResolve=module=>{var instance=new WebAssembly.Instance(module,getWasmImports());receiveInstance(instance);resolve()};wasmPromiseReject=reject});self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{var msgData=e[\"data\"];var cmd=msgData.cmd;if(cmd===\"load\"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{postMessage({cmd:\"loaded\"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};for(const handler of msgData.handlers){if(!Module[handler]||Module[handler].proxy){Module[handler]=(...args)=>{postMessage({cmd:\"callHandler\",handler,args})};if(handler==\"print\")out=Module[handler];if(handler==\"printErr\")err=Module[handler]}}wasmMemory=msgData.wasmMemory;updateMemoryViews();wasmPromiseResolve(msgData.wasmModule)}else if(cmd===\"run\"){establishStackSpace(msgData.pthread_ptr);__emscripten_thread_init(msgData.pthread_ptr,0,0,1,0,0);PThread.receiveObjectTransfer(msgData);PThread.threadInitTLS();__emscripten_thread_mailbox_await(msgData.pthread_ptr);if(!initializedJS){__embind_initialize_bindings();initializedJS=true}try{invokeEntryPoint(msgData.start_routine,msgData.arg)}catch(ex){if(ex!=\"unwind\"){throw ex}}}else if(msgData.target===\"setimmediate\"){}else if(cmd===\"checkMailbox\"){if(initializedJS){checkMailbox()}}else if(cmd){err(`worker: received unknown command ${cmd}`);err(msgData)}}catch(ex){__emscripten_thread_crashed();throw ex}}self.onmessage=handleMessage}if(!ENVIRONMENT_IS_PTHREAD){if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;wasmMemory=new WebAssembly.Memory({initial:INITIAL_MEMORY/65536,maximum:65536,shared:true});if(!(wasmMemory.buffer instanceof SharedArrayBuffer)){err(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\");if(ENVIRONMENT_IS_NODE){err(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\")}throw Error(\"bad memory\")}}updateMemoryViews()}var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(ENVIRONMENT_IS_PTHREAD)return;if(!Module[\"noFSInit\"]&&!FS.initialized)FS.init();FS.ignorePermissions=false;TTY.init();callRuntimeCallbacks(__ATINIT__)}function postRun(){if(ENVIRONMENT_IS_PTHREAD)return;if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;Module[\"monitorRunDependencies\"]?.(runDependencies)}function removeRunDependency(id){runDependencies--;Module[\"monitorRunDependencies\"]?.(runDependencies);if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){Module[\"onAbort\"]?.(what);what=\"Aborted(\"+what+\")\";err(what);ABORT=true;what+=\". Build with -sASSERTIONS for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";var isDataURI=filename=>filename.startsWith(dataURIPrefix);function findWasmBinary(){if(Module[\"locateFile\"]){var f=\"scran.wasm\";if(!isDataURI(f)){return locateFile(f)}return f}return new URL(\"scran.wasm\",import.meta.url).href}var wasmBinaryFile;function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw\"both async and sync fetching of the wasm failed\"}function getBinaryPromise(binaryFile){if(!wasmBinary){return readAsync(binaryFile).then(response=>new Uint8Array(response),()=>getBinarySync(binaryFile))}return Promise.resolve().then(()=>getBinarySync(binaryFile))}function instantiateArrayBuffer(binaryFile,imports,receiver){return getBinaryPromise(binaryFile).then(binary=>WebAssembly.instantiate(binary,imports)).then(receiver,reason=>{err(`failed to asynchronously prepare wasm: ${reason}`);abort(reason)})}function instantiateAsync(binary,binaryFile,imports,callback){if(!binary&&typeof WebAssembly.instantiateStreaming==\"function\"&&!isDataURI(binaryFile)&&typeof fetch==\"function\"){return fetch(binaryFile,{credentials:\"same-origin\"}).then(response=>{var result=WebAssembly.instantiateStreaming(response,imports);return result.then(callback,function(reason){err(`wasm streaming compile failed: ${reason}`);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(binaryFile,imports,callback)})})}return instantiateArrayBuffer(binaryFile,imports,callback)}function getWasmImports(){assignWasmImports();return{a:wasmImports}}function createWasm(){var info=getWasmImports();function receiveInstance(instance,module){wasmExports=instance.exports;wasmExports=applySignatureConversions(wasmExports);registerTLSInit(wasmExports[\"Ba\"]);wasmTable=wasmExports[\"xa\"];addOnInit(wasmExports[\"ua\"]);wasmModule=module;removeRunDependency(\"wasm-instantiate\");return wasmExports}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"],result[\"module\"])}if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(`Module.instantiateWasm callback failed with error: ${e}`);readyPromiseReject(e)}}wasmBinaryFile??=findWasmBinary();instantiateAsync(wasmBinary,wasmBinaryFile,info,receiveInstantiationResult).catch(readyPromiseReject);return{}}var tempDouble;var tempI64;function ExitStatus(status){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${status})`;this.status=status}var terminateWorker=worker=>{worker.terminate();worker.onmessage=e=>{}};var cleanupThread=pthread_ptr=>{var worker=PThread.pthreads[pthread_ptr];PThread.returnWorkerToPool(worker)};var spawnThread=threadParams=>{var worker=PThread.getNewWorker();if(!worker){return 6}PThread.runningWorkers.push(worker);PThread.pthreads[threadParams.pthread_ptr]=worker;worker.pthread_ptr=threadParams.pthread_ptr;var msg={cmd:\"run\",start_routine:threadParams.startRoutine,arg:threadParams.arg,pthread_ptr:threadParams.pthread_ptr};worker.postMessage(msg,threadParams.transferList);return 0};var runtimeKeepaliveCounter=0;var keepRuntimeAlive=()=>noExitRuntime||runtimeKeepaliveCounter>0;var stackSave=()=>_emscripten_stack_get_current();var stackRestore=val=>__emscripten_stack_restore(val);var stackAlloc=sz=>__emscripten_stack_alloc(sz);var convertI32PairToI53Checked=(lo,hi)=>hi+2097152>>>0<4194305-!!lo?(lo>>>0)+hi*4294967296:NaN;var proxyToMainThread=(funcIndex,emAsmAddr,sync,...callArgs)=>{var serializedNumCallArgs=callArgs.length;var sp=stackSave();var args=stackAlloc(serializedNumCallArgs*8);var b=args>>>3;for(var i=0;i<callArgs.length;i++){var arg=callArgs[i];GROWABLE_HEAP_F64()[b+i>>>0]=arg}var rtn=__emscripten_run_on_main_thread_js(funcIndex,emAsmAddr,serializedNumCallArgs,args,sync);stackRestore(sp);return rtn};function _proc_exit(code){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(0,0,1,code);EXITSTATUS=code;if(!keepRuntimeAlive()){PThread.terminateAllThreads();Module[\"onExit\"]?.(code);ABORT=true}quit_(code,new ExitStatus(code))}var handleException=e=>{if(e instanceof ExitStatus||e==\"unwind\"){return EXITSTATUS}quit_(1,e)};function exitOnMainThread(returnCode){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(1,0,0,returnCode);_exit(returnCode)}var exitJS=(status,implicit)=>{EXITSTATUS=status;if(ENVIRONMENT_IS_PTHREAD){exitOnMainThread(status);throw\"unwind\"}_proc_exit(status)};var _exit=exitJS;var PThread={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init(){if(!ENVIRONMENT_IS_PTHREAD){PThread.initMainThread()}},initMainThread(){var pthreadPoolSize=Module.scran_custom_nthreads;while(pthreadPoolSize--){PThread.allocateUnusedWorker()}addOnPreRun(()=>{addRunDependency(\"loading-workers\");PThread.loadWasmModuleToAllWorkers(()=>removeRunDependency(\"loading-workers\"))})},terminateAllThreads:()=>{for(var worker of PThread.runningWorkers){terminateWorker(worker)}for(var worker of PThread.unusedWorkers){terminateWorker(worker)}PThread.unusedWorkers=[];PThread.runningWorkers=[];PThread.pthreads=[]},returnWorkerToPool:worker=>{var pthread_ptr=worker.pthread_ptr;delete PThread.pthreads[pthread_ptr];PThread.unusedWorkers.push(worker);PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker),1);worker.pthread_ptr=0;__emscripten_thread_free_data(pthread_ptr)},receiveObjectTransfer(data){},threadInitTLS(){PThread.tlsInitFunctions.forEach(f=>f())},loadWasmModuleToWorker:worker=>new Promise(onFinishedLoading=>{worker.onmessage=e=>{var d=e[\"data\"];var cmd=d.cmd;if(d.targetThread&&d.targetThread!=_pthread_self()){var targetWorker=PThread.pthreads[d.targetThread];if(targetWorker){targetWorker.postMessage(d,d.transferList)}else{err(`Internal error! Worker sent a message \"${cmd}\" to target pthread ${d.targetThread}, but that thread no longer exists!`)}return}if(cmd===\"checkMailbox\"){checkMailbox()}else if(cmd===\"spawnThread\"){spawnThread(d)}else if(cmd===\"cleanupThread\"){cleanupThread(d.thread)}else if(cmd===\"loaded\"){worker.loaded=true;onFinishedLoading(worker)}else if(cmd===\"alert\"){alert(`Thread ${d.threadId}: ${d.text}`)}else if(d.target===\"setimmediate\"){worker.postMessage(d)}else if(cmd===\"callHandler\"){Module[d.handler](...d.args)}else if(cmd){err(`worker sent an unknown command ${cmd}`)}};worker.onerror=e=>{var message=\"worker sent an error!\";err(`${message} ${e.filename}:${e.lineno}: ${e.message}`);throw e};var handlers=[];var knownHandlers=[\"onExit\",\"onAbort\",\"print\",\"printErr\"];for(var handler of knownHandlers){if(Module.propertyIsEnumerable(handler)){handlers.push(handler)}}worker.postMessage({cmd:\"load\",handlers,wasmMemory,wasmModule})}),loadWasmModuleToAllWorkers(onMaybeReady){if(ENVIRONMENT_IS_PTHREAD){return onMaybeReady()}let pthreadPoolReady=Promise.all(PThread.unusedWorkers.map(PThread.loadWasmModuleToWorker));pthreadPoolReady.then(onMaybeReady)},allocateUnusedWorker(){var worker;var workerOptions={type:\"module\",name:\"em-pthread\"};worker=new Worker(new URL(\"scran.js\",import.meta.url),workerOptions);PThread.unusedWorkers.push(worker)},getNewWorker(){if(PThread.unusedWorkers.length==0){PThread.allocateUnusedWorker();PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0])}return PThread.unusedWorkers.pop()}};var callRuntimeCallbacks=callbacks=>{while(callbacks.length>0){callbacks.shift()(Module)}};var establishStackSpace=pthread_ptr=>{updateMemoryViews();var stackHigh=GROWABLE_HEAP_U32()[pthread_ptr+52>>>2>>>0];var stackSize=GROWABLE_HEAP_U32()[pthread_ptr+56>>>2>>>0];var stackLow=stackHigh-stackSize;_emscripten_stack_set_limits(stackHigh,stackLow);stackRestore(stackHigh)};var wasmTableMirror=[];var wasmTable;var getWasmTableEntry=funcPtr=>{var func=wasmTableMirror[funcPtr];if(!func){if(funcPtr>=wasmTableMirror.length)wasmTableMirror.length=funcPtr+1;wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)}return func};var invokeEntryPoint=(ptr,arg)=>{runtimeKeepaliveCounter=0;noExitRuntime=0;var result=getWasmTableEntry(ptr)(arg);function finish(result){if(keepRuntimeAlive()){EXITSTATUS=result}else{__emscripten_thread_exit(result)}}finish(result)};var noExitRuntime=Module[\"noExitRuntime\"]||true;var registerTLSInit=tlsInitFunc=>PThread.tlsInitFunctions.push(tlsInitFunc);class ExceptionInfo{constructor(excPtr){this.excPtr=excPtr;this.ptr=excPtr-24}set_type(type){GROWABLE_HEAP_U32()[this.ptr+4>>>2>>>0]=type}get_type(){return GROWABLE_HEAP_U32()[this.ptr+4>>>2>>>0]}set_destructor(destructor){GROWABLE_HEAP_U32()[this.ptr+8>>>2>>>0]=destructor}get_destructor(){return GROWABLE_HEAP_U32()[this.ptr+8>>>2>>>0]}set_caught(caught){caught=caught?1:0;GROWABLE_HEAP_I8()[this.ptr+12>>>0]=caught}get_caught(){return GROWABLE_HEAP_I8()[this.ptr+12>>>0]!=0}set_rethrown(rethrown){rethrown=rethrown?1:0;GROWABLE_HEAP_I8()[this.ptr+13>>>0]=rethrown}get_rethrown(){return GROWABLE_HEAP_I8()[this.ptr+13>>>0]!=0}init(type,destructor){this.set_adjusted_ptr(0);this.set_type(type);this.set_destructor(destructor)}set_adjusted_ptr(adjustedPtr){GROWABLE_HEAP_U32()[this.ptr+16>>>2>>>0]=adjustedPtr}get_adjusted_ptr(){return GROWABLE_HEAP_U32()[this.ptr+16>>>2>>>0]}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){ptr>>>=0;type>>>=0;destructor>>>=0;var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw exceptionLast}function pthreadCreateProxied(pthread_ptr,attr,startRoutine,arg){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(2,0,1,pthread_ptr,attr,startRoutine,arg);return ___pthread_create_js(pthread_ptr,attr,startRoutine,arg)}function ___pthread_create_js(pthread_ptr,attr,startRoutine,arg){pthread_ptr>>>=0;attr>>>=0;startRoutine>>>=0;arg>>>=0;if(typeof SharedArrayBuffer==\"undefined\"){err(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\");return 6}var transferList=[];var error=0;if(ENVIRONMENT_IS_PTHREAD&&(transferList.length===0||error)){return pthreadCreateProxied(pthread_ptr,attr,startRoutine,arg)}if(error)return error;var threadParams={startRoutine,pthread_ptr,arg,transferList};if(ENVIRONMENT_IS_PTHREAD){threadParams.cmd=\"spawnThread\";postMessage(threadParams,transferList);return 0}return spawnThread(threadParams)}var PATH={isAbs:path=>path.charAt(0)===\"/\",splitPath:filename=>{var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:(parts,allowAboveRoot)=>{var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last===\".\"){parts.splice(i,1)}else if(last===\"..\"){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift(\"..\")}}return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash=path.substr(-1)===\"/\";path=PATH.normalizeArray(path.split(\"/\").filter(p=>!!p),!isAbsolute).join(\"/\");if(!path&&!isAbsolute){path=\".\"}if(path&&trailingSlash){path+=\"/\"}return(isAbsolute?\"/\":\"\")+path},dirname:path=>{var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return\".\"}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:path=>{if(path===\"/\")return\"/\";path=PATH.normalize(path);path=path.replace(/\\/$/,\"\");var lastSlash=path.lastIndexOf(\"/\");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},join:(...paths)=>PATH.normalize(paths.join(\"/\")),join2:(l,r)=>PATH.normalize(l+\"/\"+r)};var initRandomFill=()=>{if(typeof crypto==\"object\"&&typeof crypto[\"getRandomValues\"]==\"function\"){return view=>(view.set(crypto.getRandomValues(new Uint8Array(view.byteLength))),view)}else abort(\"initRandomDevice\")};var randomFill=view=>(randomFill=initRandomFill())(view);var PATH_FS={resolve:(...args)=>{var resolvedPath=\"\",resolvedAbsolute=false;for(var i=args.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?args[i]:FS.cwd();if(typeof path!=\"string\"){throw new TypeError(\"Arguments to path.resolve must be strings\")}else if(!path){return\"\"}resolvedPath=path+\"/\"+resolvedPath;resolvedAbsolute=PATH.isAbs(path)}resolvedPath=PATH.normalizeArray(resolvedPath.split(\"/\").filter(p=>!!p),!resolvedAbsolute).join(\"/\");return(resolvedAbsolute?\"/\":\"\")+resolvedPath||\".\"},relative:(from,to)=>{from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!==\"\")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!==\"\")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split(\"/\"));var toParts=trim(to.split(\"/\"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push(\"..\")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join(\"/\")}};var UTF8Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder:undefined;var UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{idx>>>=0;var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.buffer instanceof SharedArrayBuffer?heapOrArray.slice(idx,endPtr):heapOrArray.subarray(idx,endPtr))}var str=\"\";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str};var FS_stdin_getChar_buffer=[];var lengthBytesUTF8=str=>{var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len};var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{outIdx>>>=0;if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++>>>0]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++>>>0]=192|u>>6;heap[outIdx++>>>0]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++>>>0]=224|u>>12;heap[outIdx++>>>0]=128|u>>6&63;heap[outIdx++>>>0]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++>>>0]=240|u>>18;heap[outIdx++>>>0]=128|u>>12&63;heap[outIdx++>>>0]=128|u>>6&63;heap[outIdx++>>>0]=128|u&63}}heap[outIdx>>>0]=0;return outIdx-startIdx};function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(typeof window!=\"undefined\"&&typeof window.prompt==\"function\"){result=window.prompt(\"Input: \");if(result!==null){result+=\"\\n\"}}else{}if(!result){return null}FS_stdin_getChar_buffer=intArrayFromString(result,true)}return FS_stdin_getChar_buffer.shift()};var TTY={ttys:[],init(){},shutdown(){},register(dev,ops){TTY.ttys[dev]={input:[],output:[],ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close(stream){stream.tty.ops.fsync(stream.tty)},fsync(stream){stream.tty.ops.fsync(stream.tty)},read(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char(tty){return FS_stdin_getChar()},put_char(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}},ioctl_tcgets(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets(tty,optional_actions,data){return 0},ioctl_tiocgwinsz(tty){return[24,80]}},default_tty1_ops:{put_char(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};var zeroMemory=(address,size)=>{GROWABLE_HEAP_U8().fill(0,address,address+size);return address};var alignMemory=(size,alignment)=>Math.ceil(size/alignment)*alignment;var mmapAlloc=size=>{size=alignMemory(size,65536);var ptr=_emscripten_builtin_memalign(65536,size);if(!ptr)return 0;return zeroMemory(ptr,size)};var MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,\"/\",16384|511,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}MEMFS.ops_table||={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup(parent,name){throw FS.genericErrors[44]},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp},unlink(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir(node){var entries=[\".\",\"..\"];for(var key of Object.keys(node.contents)){entries.push(key)}return entries},symlink(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===GROWABLE_HEAP_I8().buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents&&contents.buffer===GROWABLE_HEAP_I8().buffer){allocated=false;ptr=contents.byteOffset}else{allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}if(contents){if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}GROWABLE_HEAP_I8().set(contents,ptr>>>0)}}return{ptr,allocated}},msync(stream,buffer,offset,length,mmapFlags){MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=!noRunDep?getUniqueRunDependency(`al ${url}`):\"\";readAsync(url).then(arrayBuffer=>{onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},err=>{if(onerror){onerror()}else{throw`Loading data file \"${url}\" failed.`}});if(dep)addRunDependency(dep)};var FS_createDataFile=(parent,name,fileData,canRead,canWrite,canOwn)=>{FS.createDataFile(parent,name,fileData,canRead,canWrite,canOwn)};var preloadPlugins=Module[\"preloadPlugins\"]||[];var FS_handledByPreloadPlugin=(byteArray,fullname,finish,onerror)=>{if(typeof Browser!=\"undefined\")Browser.init();var handled=false;preloadPlugins.forEach(plugin=>{if(handled)return;if(plugin[\"canHandle\"](fullname)){plugin[\"handle\"](byteArray,fullname,finish,onerror);handled=true}});return handled};var FS_createPreloadedFile=(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency(`cp ${fullname}`);function processData(byteArray){function finish(byteArray){preFinish?.();if(!dontCreateFile){FS_createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}onload?.();removeRunDependency(dep)}if(FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{onerror?.();removeRunDependency(dep)})){return}finish(byteArray)}addRunDependency(dep);if(typeof url==\"string\"){asyncLoad(url,processData,onerror)}else{processData(url)}};var FS_modeStringToFlags=str=>{var flagModes={r:0,\"r+\":2,w:512|64|1,\"w+\":512|64|2,a:1024|64|1,\"a+\":1024|64|2};var flags=flagModes[str];if(typeof flags==\"undefined\"){throw new Error(`Unknown file open mode: ${str}`)}return flags};var FS_getMode=(canRead,canWrite)=>{var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:\"/\",initialized:false,ignorePermissions:true,ErrnoError:class{constructor(errno){this.name=\"ErrnoError\";this.errno=errno}},genericErrors:{},filesystems:null,syncFSRequests:0,readFiles:{},FSStream:class{constructor(){this.shared={}}get object(){return this.node}set object(val){this.node=val}get isRead(){return(this.flags&2097155)!==1}get isWrite(){return(this.flags&2097155)!==0}get isAppend(){return this.flags&1024}get flags(){return this.shared.flags}set flags(val){this.shared.flags=val}get position(){return this.shared.position}set position(val){this.shared.position=val}},FSNode:class{constructor(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev;this.readMode=292|73;this.writeMode=146}get read(){return(this.mode&this.readMode)===this.readMode}set read(val){val?this.mode|=this.readMode:this.mode&=~this.readMode}get write(){return(this.mode&this.writeMode)===this.writeMode}set write(val){val?this.mode|=this.writeMode:this.mode&=~this.writeMode}get isFolder(){return FS.isDir(this.mode)}get isDevice(){return FS.isChrdev(this.mode)}},lookupPath(path,opts={}){path=PATH_FS.resolve(path);if(!path)return{path:\"\",node:null};var defaults={follow_mount:true,recurse_count:0};opts=Object.assign(defaults,opts);if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=path.split(\"/\").filter(p=>!!p);var current=FS.root;var current_path=\"/\";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!==\"/\"?`${mount}/${path}`:mount+path}path=path?`${node.name}/${path}`:node.name;node=node.parent}},hashName(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode(node){FS.hashRemoveNode(node)},isRoot(node){return node===node.parent},isMountpoint(node){return!!node.mounted},isFile(mode){return(mode&61440)===32768},isDir(mode){return(mode&61440)===16384},isLink(mode){return(mode&61440)===40960},isChrdev(mode){return(mode&61440)===8192},isBlkdev(mode){return(mode&61440)===24576},isFIFO(mode){return(mode&61440)===4096},isSocket(mode){return(mode&49152)===49152},flagsToPermissionString(flag){var perms=[\"r\",\"w\",\"rw\"][flag&3];if(flag&512){perms+=\"w\"}return perms},nodePermissions(node,perms){if(FS.ignorePermissions){return 0}if(perms.includes(\"r\")&&!(node.mode&292)){return 2}else if(perms.includes(\"w\")&&!(node.mode&146)){return 2}else if(perms.includes(\"x\")&&!(node.mode&73)){return 2}return 0},mayLookup(dir){if(!FS.isDir(dir.mode))return 54;var errCode=FS.nodePermissions(dir,\"x\");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,\"wx\")},mayDelete(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,\"wx\");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!==\"r\"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd(){for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStreamChecked(fd){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}return stream},getStream:fd=>FS.streams[fd],createStream(stream,fd=-1){stream=Object.assign(new FS.FSStream,stream);if(fd==-1){fd=FS.nextfd()}stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream(fd){FS.streams[fd]=null},dupStream(origStream,fd=-1){var stream=FS.createStream(origStream,fd);stream.stream_ops?.dup?.(stream);return stream},chrdev_stream_ops:{open(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;stream.stream_ops.open?.(stream)},llseek(){throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>dev&255,makedev:(ma,mi)=>ma<<8|mi,registerDevice(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push(...m.mounts)}return mounts},syncfs(populate,callback){if(typeof populate==\"function\"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`)}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(mount=>{if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount(type,opts,mountpoint){var root=mountpoint===\"/\";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type,opts,mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(hash=>{var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup(parent,name){return parent.node_ops.lookup(parent,name)},mknod(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name===\".\"||name===\"..\"){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree(path,mode){var dirs=path.split(\"/\");var d=\"\";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+=\"/\"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev(path,mode,dev){if(typeof dev==\"undefined\"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!==\".\"){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!==\".\"){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,\"w\");if(errCode){throw new FS.ErrnoError(errCode)}}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);old_node.parent=new_dir}catch(e){throw e}finally{FS.hashAddNode(old_node)}},rmdir(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node)},readdir(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.unlink(parent,name);FS.destroyNode(node)},readlink(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat(path){return FS.stat(path,true)},chmod(path,mode,dontFollow){var node;if(typeof path==\"string\"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod(path,mode){FS.chmod(path,mode,true)},fchmod(fd,mode){var stream=FS.getStreamChecked(fd);FS.chmod(stream.node,mode)},chown(path,uid,gid,dontFollow){var node;if(typeof path==\"string\"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown(path,uid,gid){FS.chown(path,uid,gid,true)},fchown(fd,uid,gid){var stream=FS.getStreamChecked(fd);FS.chown(stream.node,uid,gid)},truncate(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==\"string\"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,\"w\");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate(fd,len){var stream=FS.getStreamChecked(fd);if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open(path,flags,mode){if(path===\"\"){throw new FS.ErrnoError(44)}flags=typeof flags==\"string\"?FS_modeStringToFlags(flags):flags;if(flags&64){mode=typeof mode==\"undefined\"?438:mode;mode=mode&4095|32768}else{mode=0}var node;if(typeof path==\"object\"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512&&!created){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node,path:FS.getPath(node),flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false});if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module[\"logReadFiles\"]&&!(flags&1)){if(!(path in FS.readFiles)){FS.readFiles[path]=1}}return stream},close(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed(stream){return stream.fd===null},llseek(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=\"undefined\";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=\"undefined\";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;return bytesWritten},allocate(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap(stream,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}if(!length){throw new FS.ErrnoError(28)}return stream.stream_ops.mmap(stream,length,position,prot,flags)},msync(stream,buffer,offset,length,mmapFlags){if(!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},ioctl(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile(path,opts={}){opts.flags=opts.flags||0;opts.encoding=opts.encoding||\"binary\";if(opts.encoding!==\"utf8\"&&opts.encoding!==\"binary\"){throw new Error(`Invalid encoding type \"${opts.encoding}\"`)}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding===\"utf8\"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding===\"binary\"){ret=buf}FS.close(stream);return ret},writeFile(path,data,opts={}){opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==\"string\"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error(\"Unsupported data type\")}FS.close(stream)},cwd:()=>FS.currentPath,chdir(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,\"x\");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories(){FS.mkdir(\"/tmp\");FS.mkdir(\"/home\");FS.mkdir(\"/home/web_user\")},createDefaultDevices(){FS.mkdir(\"/dev\");FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length});FS.mkdev(\"/dev/null\",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev(\"/dev/tty\",FS.makedev(5,0));FS.mkdev(\"/dev/tty1\",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0;var randomByte=()=>{if(randomLeft===0){randomLeft=randomFill(randomBuffer).byteLength}return randomBuffer[--randomLeft]};FS.createDevice(\"/dev\",\"random\",randomByte);FS.createDevice(\"/dev\",\"urandom\",randomByte);FS.mkdir(\"/dev/shm\");FS.mkdir(\"/dev/shm/tmp\")},createSpecialDirectories(){FS.mkdir(\"/proc\");var proc_self=FS.mkdir(\"/proc/self\");FS.mkdir(\"/proc/self/fd\");FS.mount({mount(){var node=FS.createNode(proc_self,\"fd\",16384|511,73);node.node_ops={lookup(parent,name){var fd=+name;var stream=FS.getStreamChecked(fd);var ret={parent:null,mount:{mountpoint:\"fake\"},node_ops:{readlink:()=>stream.path}};ret.parent=ret;return ret}};return node}},{},\"/proc/self/fd\")},createStandardStreams(input,output,error){if(input){FS.createDevice(\"/dev\",\"stdin\",input)}else{FS.symlink(\"/dev/tty\",\"/dev/stdin\")}if(output){FS.createDevice(\"/dev\",\"stdout\",null,output)}else{FS.symlink(\"/dev/tty\",\"/dev/stdout\")}if(error){FS.createDevice(\"/dev\",\"stderr\",null,error)}else{FS.symlink(\"/dev/tty1\",\"/dev/stderr\")}var stdin=FS.open(\"/dev/stdin\",0);var stdout=FS.open(\"/dev/stdout\",1);var stderr=FS.open(\"/dev/stderr\",1)},staticInit(){[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack=\"<generic error, no stack>\"});FS.nameTable=new Array(4096);FS.mount(MEMFS,{},\"/\");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={MEMFS}},init(input,output,error){FS.initialized=true;input??=Module[\"stdin\"];output??=Module[\"stdout\"];error??=Module[\"stderr\"];FS.createStandardStreams(input,output,error)},quit(){FS.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},findObject(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(!ret.exists){return null}return ret.object},analyzePath(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path===\"/\"}catch(e){ret.error=e.errno}return ret},createPath(parent,path,canRead,canWrite){parent=typeof parent==\"string\"?parent:FS.getPath(parent);var parts=path.split(\"/\").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==\"string\"?parent:FS.getPath(parent),name);var mode=FS_getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile(parent,name,data,canRead,canWrite,canOwn){var path=name;if(parent){parent=typeof parent==\"string\"?parent:FS.getPath(parent);path=name?PATH.join2(parent,name):parent}var mode=FS_getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==\"string\"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}},createDevice(parent,name,input,output){var path=PATH.join2(typeof parent==\"string\"?parent:FS.getPath(parent),name);var mode=FS_getMode(!!input,!!output);FS.createDevice.major??=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open(stream){stream.seekable=false},close(stream){if(output?.buffer?.length){output(10)}},read(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!=\"undefined\"){throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\")}else{try{obj.contents=readBinary(obj.url);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}},createLazyFile(parent,name,url,canRead,canWrite){class LazyUint8Array{constructor(){this.lengthKnown=false;this.chunks=[]}get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]}setDataGetter(getter){this.getter=getter}cacheLength(){var xhr=new XMLHttpRequest;xhr.open(\"HEAD\",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error(\"Couldn't load \"+url+\". Status: \"+xhr.status);var datalength=Number(xhr.getResponseHeader(\"Content-length\"));var header;var hasByteServing=(header=xhr.getResponseHeader(\"Accept-Ranges\"))&&header===\"bytes\";var usesGzip=(header=xhr.getResponseHeader(\"Content-Encoding\"))&&header===\"gzip\";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(from,to)=>{if(from>to)throw new Error(\"invalid range (\"+from+\", \"+to+\") or no bytes requested!\");if(to>datalength-1)throw new Error(\"only \"+datalength+\" bytes available! programmer error!\");var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);if(datalength!==chunkSize)xhr.setRequestHeader(\"Range\",\"bytes=\"+from+\"-\"+to);xhr.responseType=\"arraybuffer\";if(xhr.overrideMimeType){xhr.overrideMimeType(\"text/plain; charset=x-user-defined\")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error(\"Couldn't load \"+url+\". Status: \"+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}return intArrayFromString(xhr.responseText||\"\",true)};var lazyArray=this;lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==\"undefined\"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==\"undefined\")throw new Error(\"doXHR failed!\");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out(\"LazyFiles on gzip forces download of the whole file when length is accessed\")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true}get length(){if(!this.lengthKnown){this.cacheLength()}return this._length}get chunkSize(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}if(typeof XMLHttpRequest!=\"undefined\"){if(!ENVIRONMENT_IS_WORKER)throw\"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";var lazyArray=new LazyUint8Array;var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=(...args)=>{FS.forceLoadFile(node);return fn(...args)}});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size}stream_ops.read=(stream,buffer,offset,length,position)=>{FS.forceLoadFile(node);return writeChunks(stream,buffer,offset,length,position)};stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}writeChunks(stream,GROWABLE_HEAP_I8(),ptr,length,position);return{ptr,allocated:true}};node.stream_ops=stream_ops;return node}};var UTF8ToString=(ptr,maxBytesToRead)=>{ptr>>>=0;return ptr?UTF8ArrayToString(GROWABLE_HEAP_U8(),ptr,maxBytesToRead):\"\"};var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt(dirfd,path,allowEmpty){if(PATH.isAbs(path)){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=SYSCALLS.getStreamFromFD(dirfd);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat(func,path,buf){var stat=func(path);GROWABLE_HEAP_I32()[buf>>>2>>>0]=stat.dev;GROWABLE_HEAP_I32()[buf+4>>>2>>>0]=stat.mode;GROWABLE_HEAP_U32()[buf+8>>>2>>>0]=stat.nlink;GROWABLE_HEAP_I32()[buf+12>>>2>>>0]=stat.uid;GROWABLE_HEAP_I32()[buf+16>>>2>>>0]=stat.gid;GROWABLE_HEAP_I32()[buf+20>>>2>>>0]=stat.rdev;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[buf+24>>>2>>>0]=tempI64[0],GROWABLE_HEAP_I32()[buf+28>>>2>>>0]=tempI64[1];GROWABLE_HEAP_I32()[buf+32>>>2>>>0]=4096;GROWABLE_HEAP_I32()[buf+36>>>2>>>0]=stat.blocks;var atime=stat.atime.getTime();var mtime=stat.mtime.getTime();var ctime=stat.ctime.getTime();tempI64=[Math.floor(atime/1e3)>>>0,(tempDouble=Math.floor(atime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[buf+40>>>2>>>0]=tempI64[0],GROWABLE_HEAP_I32()[buf+44>>>2>>>0]=tempI64[1];GROWABLE_HEAP_U32()[buf+48>>>2>>>0]=atime%1e3*1e3*1e3;tempI64=[Math.floor(mtime/1e3)>>>0,(tempDouble=Math.floor(mtime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[buf+56>>>2>>>0]=tempI64[0],GROWABLE_HEAP_I32()[buf+60>>>2>>>0]=tempI64[1];GROWABLE_HEAP_U32()[buf+64>>>2>>>0]=mtime%1e3*1e3*1e3;tempI64=[Math.floor(ctime/1e3)>>>0,(tempDouble=Math.floor(ctime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[buf+72>>>2>>>0]=tempI64[0],GROWABLE_HEAP_I32()[buf+76>>>2>>>0]=tempI64[1];GROWABLE_HEAP_U32()[buf+80>>>2>>>0]=ctime%1e3*1e3*1e3;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[buf+88>>>2>>>0]=tempI64[0],GROWABLE_HEAP_I32()[buf+92>>>2>>>0]=tempI64[1];return 0},doMsync(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(flags&2){return 0}var buffer=GROWABLE_HEAP_U8().slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},getStreamFromFD(fd){var stream=FS.getStreamChecked(fd);return stream},varargs:undefined,getStr(ptr){var ret=UTF8ToString(ptr);return ret}};function ___syscall_dup3(fd,newfd,flags){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(3,0,1,fd,newfd,flags);try{var old=SYSCALLS.getStreamFromFD(fd);if(old.fd===newfd)return-28;if(newfd<0||newfd>=FS.MAX_OPEN_FDS)return-8;var existing=FS.getStream(newfd);if(existing)FS.close(existing);return FS.dupStream(old,newfd).fd}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_faccessat(dirfd,path,amode,flags){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(4,0,1,dirfd,path,amode,flags);path>>>=0;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);if(amode&~7){return-28}var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node){return-44}var perms=\"\";if(amode&4)perms+=\"r\";if(amode&2)perms+=\"w\";if(amode&1)perms+=\"x\";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function syscallGetVarargI(){var ret=GROWABLE_HEAP_I32()[+SYSCALLS.varargs>>>2>>>0];SYSCALLS.varargs+=4;return ret}var syscallGetVarargP=syscallGetVarargI;function ___syscall_fcntl64(fd,cmd,varargs){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(5,0,1,fd,cmd,varargs);varargs>>>=0;SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=syscallGetVarargI();if(arg<0){return-28}while(FS.streams[arg]){arg++}var newStream;newStream=FS.dupStream(stream,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=syscallGetVarargI();stream.flags|=arg;return 0}case 12:{var arg=syscallGetVarargP();var offset=0;GROWABLE_HEAP_I16()[arg+offset>>>1>>>0]=2;return 0}case 13:case 14:return 0}return-28}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_fstat64(fd,buf){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(6,0,1,fd,buf);buf>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd);return SYSCALLS.doStat(FS.stat,stream.path,buf)}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_ftruncate64(fd,length_low,length_high){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(7,0,1,fd,length_low,length_high);var length=convertI32PairToI53Checked(length_low,length_high);try{if(isNaN(length))return 61;FS.ftruncate(fd,length);return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}var stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,GROWABLE_HEAP_U8(),outPtr,maxBytesToWrite);function ___syscall_getcwd(buf,size){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(8,0,1,buf,size);buf>>>=0;size>>>=0;try{if(size===0)return-28;var cwd=FS.cwd();var cwdLengthInBytes=lengthBytesUTF8(cwd)+1;if(size<cwdLengthInBytes)return-68;stringToUTF8(cwd,buf,size);return cwdLengthInBytes}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_getdents64(fd,dirp,count){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(9,0,1,fd,dirp,count);dirp>>>=0;count>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd);stream.getdents||=FS.readdir(stream.path);var struct_size=280;var pos=0;var off=FS.llseek(stream,0,1);var idx=Math.floor(off/struct_size);while(idx<stream.getdents.length&&pos+struct_size<=count){var id;var type;var name=stream.getdents[idx];if(name===\".\"){id=stream.node.id;type=4}else if(name===\"..\"){var lookup=FS.lookupPath(stream.path,{parent:true});id=lookup.node.id;type=4}else{var child=FS.lookupNode(stream.node,name);id=child.id;type=FS.isChrdev(child.mode)?2:FS.isDir(child.mode)?4:FS.isLink(child.mode)?10:8}tempI64=[id>>>0,(tempDouble=id,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[dirp+pos>>>2>>>0]=tempI64[0],GROWABLE_HEAP_I32()[dirp+pos+4>>>2>>>0]=tempI64[1];tempI64=[(idx+1)*struct_size>>>0,(tempDouble=(idx+1)*struct_size,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[dirp+pos+8>>>2>>>0]=tempI64[0],GROWABLE_HEAP_I32()[dirp+pos+12>>>2>>>0]=tempI64[1];GROWABLE_HEAP_I16()[dirp+pos+16>>>1>>>0]=280;GROWABLE_HEAP_I8()[dirp+pos+18>>>0]=type;stringToUTF8(name,dirp+pos+19,256);pos+=struct_size;idx+=1}FS.llseek(stream,idx*struct_size,0);return pos}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_ioctl(fd,op,varargs){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(10,0,1,fd,op,varargs);varargs>>>=0;SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:{if(!stream.tty)return-59;return 0}case 21505:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tcgets){var termios=stream.tty.ops.ioctl_tcgets(stream);var argp=syscallGetVarargP();GROWABLE_HEAP_I32()[argp>>>2>>>0]=termios.c_iflag||0;GROWABLE_HEAP_I32()[argp+4>>>2>>>0]=termios.c_oflag||0;GROWABLE_HEAP_I32()[argp+8>>>2>>>0]=termios.c_cflag||0;GROWABLE_HEAP_I32()[argp+12>>>2>>>0]=termios.c_lflag||0;for(var i=0;i<32;i++){GROWABLE_HEAP_I8()[argp+i+17>>>0]=termios.c_cc[i]||0}return 0}return 0}case 21510:case 21511:case 21512:{if(!stream.tty)return-59;return 0}case 21506:case 21507:case 21508:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tcsets){var argp=syscallGetVarargP();var c_iflag=GROWABLE_HEAP_I32()[argp>>>2>>>0];var c_oflag=GROWABLE_HEAP_I32()[argp+4>>>2>>>0];var c_cflag=GROWABLE_HEAP_I32()[argp+8>>>2>>>0];var c_lflag=GROWABLE_HEAP_I32()[argp+12>>>2>>>0];var c_cc=[];for(var i=0;i<32;i++){c_cc.push(GROWABLE_HEAP_I8()[argp+i+17>>>0])}return stream.tty.ops.ioctl_tcsets(stream.tty,op,{c_iflag,c_oflag,c_cflag,c_lflag,c_cc})}return 0}case 21519:{if(!stream.tty)return-59;var argp=syscallGetVarargP();GROWABLE_HEAP_I32()[argp>>>2>>>0]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=syscallGetVarargP();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tiocgwinsz){var winsize=stream.tty.ops.ioctl_tiocgwinsz(stream.tty);var argp=syscallGetVarargP();GROWABLE_HEAP_I16()[argp>>>1>>>0]=winsize[0];GROWABLE_HEAP_I16()[argp+2>>>1>>>0]=winsize[1]}return 0}case 21524:{if(!stream.tty)return-59;return 0}case 21515:{if(!stream.tty)return-59;return 0}default:return-28}}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_lstat64(path,buf){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(11,0,1,path,buf);path>>>=0;buf>>>=0;try{path=SYSCALLS.getStr(path);return SYSCALLS.doStat(FS.lstat,path,buf)}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_newfstatat(dirfd,path,buf,flags){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(12,0,1,dirfd,path,buf,flags);path>>>=0;buf>>>=0;try{path=SYSCALLS.getStr(path);var nofollow=flags&256;var allowEmpty=flags&4096;flags=flags&~6400;path=SYSCALLS.calculateAt(dirfd,path,allowEmpty);return SYSCALLS.doStat(nofollow?FS.lstat:FS.stat,path,buf)}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_openat(dirfd,path,flags,varargs){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(13,0,1,dirfd,path,flags,varargs);path>>>=0;varargs>>>=0;SYSCALLS.varargs=varargs;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);var mode=varargs?syscallGetVarargI():0;return FS.open(path,flags,mode).fd}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_readlinkat(dirfd,path,buf,bufsize){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(14,0,1,dirfd,path,buf,bufsize);path>>>=0;buf>>>=0;bufsize>>>=0;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=GROWABLE_HEAP_I8()[buf+len>>>0];stringToUTF8(ret,buf,bufsize+1);GROWABLE_HEAP_I8()[buf+len>>>0]=endChar;return len}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_rmdir(path){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(15,0,1,path);path>>>=0;try{path=SYSCALLS.getStr(path);FS.rmdir(path);return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_stat64(path,buf){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(16,0,1,path,buf);path>>>=0;buf>>>=0;try{path=SYSCALLS.getStr(path);return SYSCALLS.doStat(FS.stat,path,buf)}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function ___syscall_unlinkat(dirfd,path,flags){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(17,0,1,dirfd,path,flags);path>>>=0;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);if(flags===0){FS.unlink(path)}else if(flags===512){FS.rmdir(path)}else{abort(\"Invalid flags passed to unlinkat\")}return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}var __abort_js=()=>{abort(\"\")};function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){primitiveType>>>=0;name>>>=0;size>>>=0}var embind_init_charCodes=()=>{var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes};var embind_charCodes;var readLatin1String=ptr=>{var ret=\"\";var c=ptr;while(GROWABLE_HEAP_U8()[c>>>0]){ret+=embind_charCodes[GROWABLE_HEAP_U8()[c++>>>0]]}return ret};var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var BindingError;var throwBindingError=message=>{throw new BindingError(message)};var InternalError;var throwInternalError=message=>{throw new InternalError(message)};var whenDependentTypesAreResolved=(myTypes,dependentTypes,getTypeConverters)=>{myTypes.forEach(type=>typeDependencies[type]=dependentTypes);function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError(\"Mismatched type converter count\")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((dt,i)=>{if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}};function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(!rawType){throwBindingError(`type \"${name}\" must have a positive integer typeid pointer`)}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(`Cannot register type '${name}' twice`)}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(cb=>cb())}}function registerType(rawType,registeredInstance,options={}){return sharedRegisterType(rawType,registeredInstance,options)}var GenericWireTypeSize=8;function __embind_register_bool(rawType,name,trueValue,falseValue){rawType>>>=0;name>>>=0;name=readLatin1String(name);registerType(rawType,{name,fromWireType:function(wt){return!!wt},toWireType:function(destructors,o){return o?trueValue:falseValue},argPackAdvance:GenericWireTypeSize,readValueFromPointer:function(pointer){return this[\"fromWireType\"](GROWABLE_HEAP_U8()[pointer>>>0])},destructorFunction:null})}var shallowCopyInternalPointer=o=>({count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType});var throwInstanceAlreadyDeleted=obj=>{function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+\" instance already deleted\")};var finalizationRegistry=false;var detachFinalizer=handle=>{};var runDestructor=$$=>{if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}};var releaseClassHandle=$$=>{$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}};var downcastPointer=(ptr,ptrClass,desiredClass)=>{if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)};var registeredPointers={};var getInheritedInstanceCount=()=>Object.keys(registeredInstances).length;var getLiveInheritedInstances=()=>{var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv};var deletionQueue=[];var flushPendingDeletes=()=>{while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj[\"delete\"]()}};var delayFunction;var setDelayFunction=fn=>{delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}};var init_embind=()=>{Module[\"getInheritedInstanceCount\"]=getInheritedInstanceCount;Module[\"getLiveInheritedInstances\"]=getLiveInheritedInstances;Module[\"flushPendingDeletes\"]=flushPendingDeletes;Module[\"setDelayFunction\"]=setDelayFunction};var registeredInstances={};var getBasestPointer=(class_,ptr)=>{if(ptr===undefined){throwBindingError(\"ptr should not be undefined\")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr};var getInheritedInstance=(class_,ptr)=>{ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]};var makeClassHandle=(prototype,record)=>{if(!record.ptrType||!record.ptr){throwInternalError(\"makeClassHandle requires ptr and ptrType\")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError(\"Both smartPtrType and smartPtr must be specified\")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record,writable:true}}))};function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance[\"clone\"]()}else{var rv=registeredInstance[\"clone\"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}var attachFinalizer=handle=>{if(\"undefined\"===typeof FinalizationRegistry){attachFinalizer=handle=>handle;return handle}finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)});attachFinalizer=handle=>{var $$=handle.$$;var hasSmartPtr=!!$$.smartPtr;if(hasSmartPtr){var info={$$};finalizationRegistry.register(handle,info,handle)}return handle};detachFinalizer=handle=>finalizationRegistry.unregister(handle);return attachFinalizer(handle)};var init_ClassHandle=()=>{Object.assign(ClassHandle.prototype,{isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;other.$$=other.$$;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right},clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}},delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError(\"Object already scheduled for deletion\")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}},isDeleted(){return!this.$$.ptr},deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError(\"Object already scheduled for deletion\")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}})};function ClassHandle(){}var createNamedFunction=(name,body)=>Object.defineProperty(body,\"name\",{value:name});var ensureOverloadTable=(proto,methodName,humanName)=>{if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(...args){if(!proto[methodName].overloadTable.hasOwnProperty(args.length)){throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${args.length}) - expects one of (${proto[methodName].overloadTable})!`)}return proto[methodName].overloadTable[args.length].apply(this,args)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}};var exposePublicSymbol=(name,value,numArguments)=>{if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(`Cannot register public name '${name}' twice`)}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`)}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}};var char_0=48;var char_9=57;var makeLegalFunctionName=name=>{if(undefined===name){return\"_unknown\"}name=name.replace(/[^a-zA-Z0-9_]/g,\"$\");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return`_${name}`}return name};function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}var upcastPointer=(ptr,ptrClass,desiredClass)=>{while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr};function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}return 0}if(!handle.$$){throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle||!handle.$$){throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name} to parameter type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError(\"Passing raw pointer to smart pointer is illegal\")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name} to parameter type ${this.name}`)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle[\"clone\"]();ptr=this.rawShare(ptr,Emval.toHandle(()=>clonedHandle[\"delete\"]()));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError(\"Unsupporting sharing policy\")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}return 0}if(!handle.$$){throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}if(handle.$$.ptrType.isConst){throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function readPointer(pointer){return this[\"fromWireType\"](GROWABLE_HEAP_U32()[pointer>>>2>>>0])}var init_RegisteredPointer=()=>{Object.assign(RegisteredPointer.prototype,{getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr},destructor(ptr){this.rawDestructor?.(ptr)},argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,fromWireType:RegisteredPointer_fromWireType})};function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this[\"toWireType\"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this[\"toWireType\"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this[\"toWireType\"]=genericPointerToWireType}}var replacePublicSymbol=(name,value,numArguments)=>{if(!Module.hasOwnProperty(name)){throwInternalError(\"Replacing nonexistent public symbol\")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}};var dynCallLegacy=(sig,ptr,args)=>{sig=sig.replace(/p/g,\"i\");var f=Module[\"dynCall_\"+sig];return f(ptr,...args)};var dynCall=(sig,ptr,args=[])=>{if(sig.includes(\"j\")){return dynCallLegacy(sig,ptr,args)}var rtn=getWasmTableEntry(ptr)(...args);return sig[0]==\"p\"?rtn>>>0:rtn};var getDynCaller=(sig,ptr)=>(...args)=>dynCall(sig,ptr,args);var embind__requireFunction=(signature,rawFunction)=>{signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes(\"j\")){return getDynCaller(signature,rawFunction)}if(signature.includes(\"p\")){return getDynCaller(signature,rawFunction)}return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!=\"function\"){throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`)}return fp};var extendError=(baseErrorType,errorName)=>{var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+\"\\n\"+stack.replace(/^Error(:[^\\n]*)?\\n/,\"\")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return`${this.name}: ${this.message}`}};return errorClass};var UnboundTypeError;var getTypeName=type=>{var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv};var throwUnboundTypeError=(message,types)=>{var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(`${message}: `+unboundTypes.map(getTypeName).join([\", \"]))};function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){rawType>>>=0;rawPointerType>>>=0;rawConstPointerType>>>=0;baseClassRawType>>>=0;getActualTypeSignature>>>=0;getActualType>>>=0;upcastSignature>>>=0;upcast>>>=0;downcastSignature>>>=0;downcast>>>=0;name>>>=0;destructorSignature>>>=0;rawDestructor>>>=0;name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);upcast&&=embind__requireFunction(upcastSignature,upcast);downcast&&=embind__requireFunction(downcastSignature,downcast);rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError(`Cannot construct ${name} due to unbound types`,[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],base=>{base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(name,function(...args){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError(\"Use 'new' to construct \"+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+\" has no accessible constructor\")}var body=registeredClass.constructor_body[args.length];if(undefined===body){throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${args.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`)}return body.apply(this,args)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);if(registeredClass.baseClass){registeredClass.baseClass.__derivedClasses??=[];registeredClass.baseClass.__derivedClasses.push(registeredClass)}var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+\"*\",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+\" const*\",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})}var heap32VectorToArray=(count,firstElement)=>{var array=[];for(var i=0;i<count;i++){array.push(GROWABLE_HEAP_U32()[firstElement+i*4>>>2>>>0])}return array};var runDestructors=destructors=>{while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}};function usesDestructorStack(argTypes){for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){return true}}return false}function newFunc(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError(`new_ called with constructor type ${typeof constructor} which is not a function`)}var dummy=createNamedFunction(constructor.name||\"unknownFunctionName\",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function createJsInvoker(argTypes,isClassMethodFunc,returns,isAsync){var needsDestructorStack=usesDestructorStack(argTypes);var argCount=argTypes.length-2;var argsList=[];var argsListWired=[\"fn\"];if(isClassMethodFunc){argsListWired.push(\"thisWired\")}for(var i=0;i<argCount;++i){argsList.push(`arg${i}`);argsListWired.push(`arg${i}Wired`)}argsList=argsList.join(\",\");argsListWired=argsListWired.join(\",\");var invokerFnBody=`return function (${argsList}) {\\n`;if(needsDestructorStack){invokerFnBody+=\"var destructors = [];\\n\"}var dtorStack=needsDestructorStack?\"destructors\":\"null\";var args1=[\"humanName\",\"throwBindingError\",\"invoker\",\"fn\",\"runDestructors\",\"retType\",\"classParam\"];if(isClassMethodFunc){invokerFnBody+=`var thisWired = classParam['toWireType'](${dtorStack}, this);\\n`}for(var i=0;i<argCount;++i){invokerFnBody+=`var arg${i}Wired = argType${i}['toWireType'](${dtorStack}, arg${i});\\n`;args1.push(`argType${i}`)}invokerFnBody+=(returns||isAsync?\"var rv = \":\"\")+`invoker(${argsListWired});\\n`;if(needsDestructorStack){invokerFnBody+=\"runDestructors(destructors);\\n\"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?\"thisWired\":\"arg\"+(i-2)+\"Wired\";if(argTypes[i].destructorFunction!==null){invokerFnBody+=`${paramName}_dtor(${paramName});\\n`;args1.push(`${paramName}_dtor`)}}}if(returns){invokerFnBody+=\"var ret = retType['fromWireType'](rv);\\n\"+\"return ret;\\n\"}else{}invokerFnBody+=\"}\\n\";return[args1,invokerFnBody]}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc,isAsync){var argCount=argTypes.length;if(argCount<2){throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=usesDestructorStack(argTypes);var returns=argTypes[0].name!==\"void\";var closureArgs=[humanName,throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];for(var i=0;i<argCount-2;++i){closureArgs.push(argTypes[i+2])}if(!needsDestructorStack){for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){if(argTypes[i].destructorFunction!==null){closureArgs.push(argTypes[i].destructorFunction)}}}let[args,invokerFnBody]=createJsInvoker(argTypes,isClassMethodFunc,returns,isAsync);args.push(invokerFnBody);var invokerFn=newFunc(Function,args)(...closureArgs);return createNamedFunction(humanName,invokerFn)}var __embind_register_class_constructor=function(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){rawClassType>>>=0;rawArgTypesAddr>>>=0;invokerSignature>>>=0;invoker>>>=0;rawConstructor>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],classType=>{classType=classType[0];var humanName=`constructor ${classType.name}`;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`)}classType.registeredClass.constructor_body[argCount-1]=()=>{throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`,rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,argTypes=>{argTypes.splice(1,0,null);classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor);return[]});return[]})};var getFunctionName=signature=>{signature=signature.trim();const argsIndex=signature.indexOf(\"(\");if(argsIndex!==-1){return signature.substr(0,argsIndex)}else{return signature}};var __embind_register_class_function=function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual,isAsync,isNonnullReturn){rawClassType>>>=0;methodName>>>=0;rawArgTypesAddr>>>=0;invokerSignature>>>=0;rawInvoker>>>=0;context>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);methodName=getFunctionName(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],classType=>{classType=classType[0];var humanName=`${classType.name}.${methodName}`;if(methodName.startsWith(\"@@\")){methodName=Symbol[methodName.substring(2)]}if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`,rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,argTypes=>{var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context,isAsync);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})};var emval_freelist=[];var emval_handles=[];function __emval_decref(handle){handle>>>=0;if(handle>9&&0===--emval_handles[handle+1]){emval_handles[handle]=undefined;emval_freelist.push(handle)}}var count_emval_handles=()=>emval_handles.length/2-5-emval_freelist.length;var init_emval=()=>{emval_handles.push(0,1,undefined,1,null,1,true,1,false,1);Module[\"count_emval_handles\"]=count_emval_handles};var Emval={toValue:handle=>{if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handles[handle]},toHandle:value=>{switch(value){case undefined:return 2;case null:return 4;case true:return 6;case false:return 8;default:{const handle=emval_freelist.pop()||emval_handles.length;emval_handles[handle]=value;emval_handles[handle+1]=1;return handle}}}};var EmValType={name:\"emscripten::val\",fromWireType:handle=>{var rv=Emval.toValue(handle);__emval_decref(handle);return rv},toWireType:(destructors,value)=>Emval.toHandle(value),argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,destructorFunction:null};function __embind_register_emval(rawType){rawType>>>=0;return registerType(rawType,EmValType)}var embindRepr=v=>{if(v===null){return\"null\"}var t=typeof v;if(t===\"object\"||t===\"array\"||t===\"function\"){return v.toString()}else{return\"\"+v}};var floatReadValueFromPointer=(name,width)=>{switch(width){case 4:return function(pointer){return this[\"fromWireType\"](GROWABLE_HEAP_F32()[pointer>>>2>>>0])};case 8:return function(pointer){return this[\"fromWireType\"](GROWABLE_HEAP_F64()[pointer>>>3>>>0])};default:throw new TypeError(`invalid float width (${width}): ${name}`)}};var __embind_register_float=function(rawType,name,size){rawType>>>=0;name>>>=0;size>>>=0;name=readLatin1String(name);registerType(rawType,{name,fromWireType:value=>value,toWireType:(destructors,value)=>value,argPackAdvance:GenericWireTypeSize,readValueFromPointer:floatReadValueFromPointer(name,size),destructorFunction:null})};function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn,isAsync,isNonnullReturn){name>>>=0;rawArgTypesAddr>>>=0;signature>>>=0;rawInvoker>>>=0;fn>>>=0;var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);name=getFunctionName(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError(`Cannot call ${name} due to unbound types`,argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,argTypes=>{var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn,isAsync),argCount-1);return[]})}var integerReadValueFromPointer=(name,width,signed)=>{switch(width){case 1:return signed?pointer=>GROWABLE_HEAP_I8()[pointer>>>0]:pointer=>GROWABLE_HEAP_U8()[pointer>>>0];case 2:return signed?pointer=>GROWABLE_HEAP_I16()[pointer>>>1>>>0]:pointer=>GROWABLE_HEAP_U16()[pointer>>>1>>>0];case 4:return signed?pointer=>GROWABLE_HEAP_I32()[pointer>>>2>>>0]:pointer=>GROWABLE_HEAP_U32()[pointer>>>2>>>0];default:throw new TypeError(`invalid integer width (${width}): ${name}`)}};function __embind_register_integer(primitiveType,name,size,minRange,maxRange){primitiveType>>>=0;name>>>=0;size>>>=0;name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=value=>value<<bitshift>>>bitshift}var isUnsignedType=name.includes(\"unsigned\");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name,fromWireType,toWireType,argPackAdvance:GenericWireTypeSize,readValueFromPointer:integerReadValueFromPointer(name,size,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){rawType>>>=0;name>>>=0;var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){var size=GROWABLE_HEAP_U32()[handle>>>2>>>0];var data=GROWABLE_HEAP_U32()[handle+4>>>2>>>0];return new TA(GROWABLE_HEAP_I8().buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name,fromWireType:decodeMemoryView,argPackAdvance:GenericWireTypeSize,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){rawType>>>=0;name>>>=0;name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name,fromWireType(value){var length=GROWABLE_HEAP_U32()[value>>>2>>>0];var payload=value+4;var str;if(stdStringIsUTF8){var decodeStartPtr=payload;for(var i=0;i<=length;++i){var currentBytePtr=payload+i;if(i==length||GROWABLE_HEAP_U8()[currentBytePtr>>>0]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(GROWABLE_HEAP_U8()[payload+i>>>0])}str=a.join(\"\")}_free(value);return str},toWireType(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var length;var valueIsOfTypeString=typeof value==\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\")}if(stdStringIsUTF8&&valueIsOfTypeString){length=lengthBytesUTF8(value)}else{length=value.length}var base=_malloc(4+length+1);var ptr=base+4;GROWABLE_HEAP_U32()[base>>>2>>>0]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}GROWABLE_HEAP_U8()[ptr+i>>>0]=charCode}}else{for(var i=0;i<length;++i){GROWABLE_HEAP_U8()[ptr+i>>>0]=value[i]}}}if(destructors!==null){destructors.push(_free,base)}return base},argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,destructorFunction(ptr){_free(ptr)}})}var UTF16Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;var UTF16ToString=(ptr,maxBytesToRead)=>{var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&GROWABLE_HEAP_U16()[idx>>>0])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(GROWABLE_HEAP_U8().slice(ptr,endPtr));var str=\"\";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=GROWABLE_HEAP_I16()[ptr+i*2>>>1>>>0];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str};var stringToUTF16=(str,outPtr,maxBytesToWrite)=>{maxBytesToWrite??=2147483647;if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);GROWABLE_HEAP_I16()[outPtr>>>1>>>0]=codeUnit;outPtr+=2}GROWABLE_HEAP_I16()[outPtr>>>1>>>0]=0;return outPtr-startPtr};var lengthBytesUTF16=str=>str.length*2;var UTF32ToString=(ptr,maxBytesToRead)=>{var i=0;var str=\"\";while(!(i>=maxBytesToRead/4)){var utf32=GROWABLE_HEAP_I32()[ptr+i*4>>>2>>>0];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str};var stringToUTF32=(str,outPtr,maxBytesToWrite)=>{outPtr>>>=0;maxBytesToWrite??=2147483647;if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}GROWABLE_HEAP_I32()[outPtr>>>2>>>0]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}GROWABLE_HEAP_I32()[outPtr>>>2>>>0]=0;return outPtr-startPtr};var lengthBytesUTF32=str=>{var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len};var __embind_register_std_wstring=function(rawType,charSize,name){rawType>>>=0;charSize>>>=0;name>>>=0;name=readLatin1String(name);var decodeString,encodeString,readCharAt,lengthBytesUTF;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;readCharAt=pointer=>GROWABLE_HEAP_U16()[pointer>>>1>>>0]}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;readCharAt=pointer=>GROWABLE_HEAP_U32()[pointer>>>2>>>0]}registerType(rawType,{name,fromWireType:value=>{var length=GROWABLE_HEAP_U32()[value>>>2>>>0];var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||readCharAt(currentBytePtr)==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},toWireType:(destructors,value)=>{if(!(typeof value==\"string\")){throwBindingError(`Cannot pass non-string to C++ string type ${name}`)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);GROWABLE_HEAP_U32()[ptr>>>2>>>0]=length/charSize;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,destructorFunction(ptr){_free(ptr)}})};var __embind_register_void=function(rawType,name){rawType>>>=0;name>>>=0;name=readLatin1String(name);registerType(rawType,{isVoid:true,name,argPackAdvance:0,fromWireType:()=>undefined,toWireType:(destructors,o)=>undefined})};var nowIsMonotonic=1;var __emscripten_get_now_is_monotonic=()=>nowIsMonotonic;function __emscripten_init_main_thread_js(tb){tb>>>=0;__emscripten_thread_init(tb,!ENVIRONMENT_IS_WORKER,1,!ENVIRONMENT_IS_WEB,2097152,false);PThread.threadInitTLS()}var maybeExit=()=>{if(!keepRuntimeAlive()){try{if(ENVIRONMENT_IS_PTHREAD)__emscripten_thread_exit(EXITSTATUS);else _exit(EXITSTATUS)}catch(e){handleException(e)}}};var callUserCallback=func=>{if(ABORT){return}try{func();maybeExit()}catch(e){handleException(e)}};function __emscripten_thread_mailbox_await(pthread_ptr){pthread_ptr>>>=0;if(typeof Atomics.waitAsync===\"function\"){var wait=Atomics.waitAsync(GROWABLE_HEAP_I32(),pthread_ptr>>>2,pthread_ptr);wait.value.then(checkMailbox);var waitingAsync=pthread_ptr+128;Atomics.store(GROWABLE_HEAP_I32(),waitingAsync>>>2,1)}}var checkMailbox=()=>{var pthread_ptr=_pthread_self();if(pthread_ptr){__emscripten_thread_mailbox_await(pthread_ptr);callUserCallback(__emscripten_check_mailbox)}};function __emscripten_notify_mailbox_postmessage(targetThread,currThreadId){targetThread>>>=0;currThreadId>>>=0;if(targetThread==currThreadId){setTimeout(checkMailbox)}else if(ENVIRONMENT_IS_PTHREAD){postMessage({targetThread,cmd:\"checkMailbox\"})}else{var worker=PThread.pthreads[targetThread];if(!worker){return}worker.postMessage({cmd:\"checkMailbox\"})}}var proxiedJSCallArgs=[];function __emscripten_receive_on_main_thread_js(funcIndex,emAsmAddr,callingThread,numCallArgs,args){emAsmAddr>>>=0;callingThread>>>=0;args>>>=0;proxiedJSCallArgs.length=numCallArgs;var b=args>>>3;for(var i=0;i<numCallArgs;i++){proxiedJSCallArgs[i]=GROWABLE_HEAP_F64()[b+i>>>0]}var func=proxiedFunctionTable[funcIndex];PThread.currentProxiedOperationCallerThread=callingThread;var rtn=func(...proxiedJSCallArgs);PThread.currentProxiedOperationCallerThread=0;return rtn}function __emscripten_thread_cleanup(thread){thread>>>=0;if(!ENVIRONMENT_IS_PTHREAD)cleanupThread(thread);else postMessage({cmd:\"cleanupThread\",thread})}function __emscripten_thread_set_strongref(thread){thread>>>=0}var requireRegisteredType=(rawType,humanName)=>{var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(`${humanName} has unknown type ${getTypeName(rawType)}`)}return impl};var emval_returnValue=(returnType,destructorsRef,handle)=>{var destructors=[];var result=returnType[\"toWireType\"](destructors,handle);if(destructors.length){GROWABLE_HEAP_U32()[destructorsRef>>>2>>>0]=Emval.toHandle(destructors)}return result};function __emval_as(handle,returnType,destructorsRef){handle>>>=0;returnType>>>=0;destructorsRef>>>=0;handle=Emval.toValue(handle);returnType=requireRegisteredType(returnType,\"emval::as\");return emval_returnValue(returnType,destructorsRef,handle)}var emval_symbols={};var getStringOrSymbol=address=>{var symbol=emval_symbols[address];if(symbol===undefined){return readLatin1String(address)}return symbol};var emval_methodCallers=[];function __emval_call_method(caller,objHandle,methodName,destructorsRef,args){caller>>>=0;objHandle>>>=0;methodName>>>=0;destructorsRef>>>=0;args>>>=0;caller=emval_methodCallers[caller];objHandle=Emval.toValue(objHandle);methodName=getStringOrSymbol(methodName);return caller(objHandle,objHandle[methodName],destructorsRef,args)}var emval_addMethodCaller=caller=>{var id=emval_methodCallers.length;emval_methodCallers.push(caller);return id};var emval_lookupTypes=(argCount,argTypes)=>{var a=new Array(argCount);for(var i=0;i<argCount;++i){a[i]=requireRegisteredType(GROWABLE_HEAP_U32()[argTypes+i*4>>>2>>>0],\"parameter \"+i)}return a};var reflectConstruct=Reflect.construct;function __emval_get_method_caller(argCount,argTypes,kind){argTypes>>>=0;var types=emval_lookupTypes(argCount,argTypes);var retType=types.shift();argCount--;var functionBody=`return function (obj, func, destructorsRef, args) {\\n`;var offset=0;var argsList=[];if(kind===0){argsList.push(\"obj\")}var params=[\"retType\"];var args=[retType];for(var i=0;i<argCount;++i){argsList.push(\"arg\"+i);params.push(\"argType\"+i);args.push(types[i]);functionBody+=`  var arg${i} = argType${i}.readValueFromPointer(args${offset?\"+\"+offset:\"\"});\\n`;offset+=types[i].argPackAdvance}var invoker=kind===1?\"new func\":\"func.call\";functionBody+=`  var rv = ${invoker}(${argsList.join(\", \")});\\n`;if(!retType.isVoid){params.push(\"emval_returnValue\");args.push(emval_returnValue);functionBody+=\"  return emval_returnValue(retType, destructorsRef, rv);\\n\"}functionBody+=\"};\\n\";params.push(functionBody);var invokerFunction=newFunc(Function,params)(...args);var functionName=`methodCaller<(${types.map(t=>t.name).join(\", \")}) => ${retType.name}>`;return emval_addMethodCaller(createNamedFunction(functionName,invokerFunction))}function __emval_get_property(handle,key){handle>>>=0;key>>>=0;handle=Emval.toValue(handle);key=Emval.toValue(key);return Emval.toHandle(handle[key])}function __emval_incref(handle){handle>>>=0;if(handle>9){emval_handles[handle+1]+=1}}function __emval_is_string(handle){handle>>>=0;handle=Emval.toValue(handle);return typeof handle==\"string\"}function __emval_iter_begin(iterable){iterable>>>=0;iterable=Emval.toValue(iterable);return Emval.toHandle(iterable[Symbol.iterator]())}function __emval_iter_next(iterator){iterator>>>=0;iterator=Emval.toValue(iterator);var result=iterator.next();return result.done?0:Emval.toHandle(result.value)}function __emval_new_array(){return Emval.toHandle([])}function __emval_new_cstring(v){v>>>=0;return Emval.toHandle(getStringOrSymbol(v))}function __emval_new_object(){return Emval.toHandle({})}function __emval_run_destructors(handle){handle>>>=0;var destructors=Emval.toValue(handle);runDestructors(destructors);__emval_decref(handle)}function __emval_set_property(handle,key,value){handle>>>=0;key>>>=0;value>>>=0;handle=Emval.toValue(handle);key=Emval.toValue(key);value=Emval.toValue(value);handle[key]=value}function __emval_take_value(type,arg){type>>>=0;arg>>>=0;type=requireRegisteredType(type,\"_emval_take_value\");var v=type[\"readValueFromPointer\"](arg);return Emval.toHandle(v)}function __gmtime_js(time_low,time_high,tmPtr){var time=convertI32PairToI53Checked(time_low,time_high);tmPtr>>>=0;var date=new Date(time*1e3);GROWABLE_HEAP_I32()[tmPtr>>>2>>>0]=date.getUTCSeconds();GROWABLE_HEAP_I32()[tmPtr+4>>>2>>>0]=date.getUTCMinutes();GROWABLE_HEAP_I32()[tmPtr+8>>>2>>>0]=date.getUTCHours();GROWABLE_HEAP_I32()[tmPtr+12>>>2>>>0]=date.getUTCDate();GROWABLE_HEAP_I32()[tmPtr+16>>>2>>>0]=date.getUTCMonth();GROWABLE_HEAP_I32()[tmPtr+20>>>2>>>0]=date.getUTCFullYear()-1900;GROWABLE_HEAP_I32()[tmPtr+24>>>2>>>0]=date.getUTCDay();var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;GROWABLE_HEAP_I32()[tmPtr+28>>>2>>>0]=yday}var isLeapYear=year=>year%4===0&&(year%100!==0||year%400===0);var MONTH_DAYS_LEAP_CUMULATIVE=[0,31,60,91,121,152,182,213,244,274,305,335];var MONTH_DAYS_REGULAR_CUMULATIVE=[0,31,59,90,120,151,181,212,243,273,304,334];var ydayFromDate=date=>{var leap=isLeapYear(date.getFullYear());var monthDaysCumulative=leap?MONTH_DAYS_LEAP_CUMULATIVE:MONTH_DAYS_REGULAR_CUMULATIVE;var yday=monthDaysCumulative[date.getMonth()]+date.getDate()-1;return yday};function __localtime_js(time_low,time_high,tmPtr){var time=convertI32PairToI53Checked(time_low,time_high);tmPtr>>>=0;var date=new Date(time*1e3);GROWABLE_HEAP_I32()[tmPtr>>>2>>>0]=date.getSeconds();GROWABLE_HEAP_I32()[tmPtr+4>>>2>>>0]=date.getMinutes();GROWABLE_HEAP_I32()[tmPtr+8>>>2>>>0]=date.getHours();GROWABLE_HEAP_I32()[tmPtr+12>>>2>>>0]=date.getDate();GROWABLE_HEAP_I32()[tmPtr+16>>>2>>>0]=date.getMonth();GROWABLE_HEAP_I32()[tmPtr+20>>>2>>>0]=date.getFullYear()-1900;GROWABLE_HEAP_I32()[tmPtr+24>>>2>>>0]=date.getDay();var yday=ydayFromDate(date)|0;GROWABLE_HEAP_I32()[tmPtr+28>>>2>>>0]=yday;GROWABLE_HEAP_I32()[tmPtr+36>>>2>>>0]=-(date.getTimezoneOffset()*60);var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;GROWABLE_HEAP_I32()[tmPtr+32>>>2>>>0]=dst}var setTempRet0=val=>__emscripten_tempret_set(val);var __mktime_js=function(tmPtr){tmPtr>>>=0;var ret=(()=>{var date=new Date(GROWABLE_HEAP_I32()[tmPtr+20>>>2>>>0]+1900,GROWABLE_HEAP_I32()[tmPtr+16>>>2>>>0],GROWABLE_HEAP_I32()[tmPtr+12>>>2>>>0],GROWABLE_HEAP_I32()[tmPtr+8>>>2>>>0],GROWABLE_HEAP_I32()[tmPtr+4>>>2>>>0],GROWABLE_HEAP_I32()[tmPtr>>>2>>>0],0);var dst=GROWABLE_HEAP_I32()[tmPtr+32>>>2>>>0];var guessedOffset=date.getTimezoneOffset();var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dstOffset=Math.min(winterOffset,summerOffset);if(dst<0){GROWABLE_HEAP_I32()[tmPtr+32>>>2>>>0]=Number(summerOffset!=winterOffset&&dstOffset==guessedOffset)}else if(dst>0!=(dstOffset==guessedOffset)){var nonDstOffset=Math.max(winterOffset,summerOffset);var trueOffset=dst>0?dstOffset:nonDstOffset;date.setTime(date.getTime()+(trueOffset-guessedOffset)*6e4)}GROWABLE_HEAP_I32()[tmPtr+24>>>2>>>0]=date.getDay();var yday=ydayFromDate(date)|0;GROWABLE_HEAP_I32()[tmPtr+28>>>2>>>0]=yday;GROWABLE_HEAP_I32()[tmPtr>>>2>>>0]=date.getSeconds();GROWABLE_HEAP_I32()[tmPtr+4>>>2>>>0]=date.getMinutes();GROWABLE_HEAP_I32()[tmPtr+8>>>2>>>0]=date.getHours();GROWABLE_HEAP_I32()[tmPtr+12>>>2>>>0]=date.getDate();GROWABLE_HEAP_I32()[tmPtr+16>>>2>>>0]=date.getMonth();GROWABLE_HEAP_I32()[tmPtr+20>>>2>>>0]=date.getYear();var timeMs=date.getTime();if(isNaN(timeMs)){return-1}return timeMs/1e3})();return setTempRet0((tempDouble=ret,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)),ret>>>0};function __mmap_js(len,prot,flags,fd,offset_low,offset_high,allocated,addr){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(18,0,1,len,prot,flags,fd,offset_low,offset_high,allocated,addr);len>>>=0;var offset=convertI32PairToI53Checked(offset_low,offset_high);allocated>>>=0;addr>>>=0;try{if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);var res=FS.mmap(stream,len,offset,prot,flags);var ptr=res.ptr;GROWABLE_HEAP_I32()[allocated>>>2>>>0]=res.allocated;GROWABLE_HEAP_U32()[addr>>>2>>>0]=ptr;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}function __munmap_js(addr,len,prot,flags,fd,offset_low,offset_high){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(19,0,1,addr,len,prot,flags,fd,offset_low,offset_high);addr>>>=0;len>>>=0;var offset=convertI32PairToI53Checked(offset_low,offset_high);try{var stream=SYSCALLS.getStreamFromFD(fd);if(prot&2){SYSCALLS.doMsync(addr,stream,len,flags,offset)}}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return-e.errno}}var __tzset_js=function(timezone,daylight,std_name,dst_name){timezone>>>=0;daylight>>>=0;std_name>>>=0;dst_name>>>=0;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);GROWABLE_HEAP_U32()[timezone>>>2>>>0]=stdTimezoneOffset*60;GROWABLE_HEAP_I32()[daylight>>>2>>>0]=Number(winterOffset!=summerOffset);var extractZone=timezoneOffset=>{var sign=timezoneOffset>=0?\"-\":\"+\";var absOffset=Math.abs(timezoneOffset);var hours=String(Math.floor(absOffset/60)).padStart(2,\"0\");var minutes=String(absOffset%60).padStart(2,\"0\");return`UTC${sign}${hours}${minutes}`};var winterName=extractZone(winterOffset);var summerName=extractZone(summerOffset);if(summerOffset<winterOffset){stringToUTF8(winterName,std_name,17);stringToUTF8(summerName,dst_name,17)}else{stringToUTF8(winterName,dst_name,17);stringToUTF8(summerName,std_name,17)}};var warnOnce=text=>{warnOnce.shown||={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}};var _emscripten_check_blocking_allowed=()=>{};var _emscripten_date_now=()=>Date.now();var runtimeKeepalivePush=()=>{runtimeKeepaliveCounter+=1};var _emscripten_exit_with_live_runtime=()=>{runtimeKeepalivePush();throw\"unwind\"};var _emscripten_get_now=()=>performance.timeOrigin+performance.now();var getHeapMax=()=>4294901760;var growMemory=size=>{var b=wasmMemory.buffer;var pages=(size-b.byteLength+65535)/65536;try{wasmMemory.grow(pages);updateMemoryViews();return 1}catch(e){}};function _emscripten_resize_heap(requestedSize){requestedSize>>>=0;var oldSize=GROWABLE_HEAP_U8().length;if(requestedSize<=oldSize){return false}var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignMemory(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=growMemory(newSize);if(replacement){return true}}return false}var ENV={};var getExecutableName=()=>thisProgram||\"./this.program\";var getEnvStrings=()=>{if(!getEnvStrings.strings){var lang=(typeof navigator==\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:lang,_:getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(`${x}=${env[x]}`)}getEnvStrings.strings=strings}return getEnvStrings.strings};var stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i){GROWABLE_HEAP_I8()[buffer++>>>0]=str.charCodeAt(i)}GROWABLE_HEAP_I8()[buffer>>>0]=0};var _environ_get=function(__environ,environ_buf){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(20,0,1,__environ,environ_buf);__environ>>>=0;environ_buf>>>=0;var bufSize=0;getEnvStrings().forEach((string,i)=>{var ptr=environ_buf+bufSize;GROWABLE_HEAP_U32()[__environ+i*4>>>2>>>0]=ptr;stringToAscii(string,ptr);bufSize+=string.length+1});return 0};var _environ_sizes_get=function(penviron_count,penviron_buf_size){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(21,0,1,penviron_count,penviron_buf_size);penviron_count>>>=0;penviron_buf_size>>>=0;var strings=getEnvStrings();GROWABLE_HEAP_U32()[penviron_count>>>2>>>0]=strings.length;var bufSize=0;strings.forEach(string=>bufSize+=string.length+1);GROWABLE_HEAP_U32()[penviron_buf_size>>>2>>>0]=bufSize;return 0};function _fd_close(fd){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(22,0,1,fd);try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=GROWABLE_HEAP_U32()[iov>>>2>>>0];var len=GROWABLE_HEAP_U32()[iov+4>>>2>>>0];iov+=8;var curr=FS.read(stream,GROWABLE_HEAP_I8(),ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break;if(typeof offset!=\"undefined\"){offset+=curr}}return ret};function _fd_pread(fd,iov,iovcnt,offset_low,offset_high,pnum){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(23,0,1,fd,iov,iovcnt,offset_low,offset_high,pnum);iov>>>=0;iovcnt>>>=0;var offset=convertI32PairToI53Checked(offset_low,offset_high);pnum>>>=0;try{if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);var num=doReadv(stream,iov,iovcnt,offset);GROWABLE_HEAP_U32()[pnum>>>2>>>0]=num;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=GROWABLE_HEAP_U32()[iov>>>2>>>0];var len=GROWABLE_HEAP_U32()[iov+4>>>2>>>0];iov+=8;var curr=FS.write(stream,GROWABLE_HEAP_I8(),ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len){break}if(typeof offset!=\"undefined\"){offset+=curr}}return ret};function _fd_pwrite(fd,iov,iovcnt,offset_low,offset_high,pnum){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(24,0,1,fd,iov,iovcnt,offset_low,offset_high,pnum);iov>>>=0;iovcnt>>>=0;var offset=convertI32PairToI53Checked(offset_low,offset_high);pnum>>>=0;try{if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);var num=doWritev(stream,iov,iovcnt,offset);GROWABLE_HEAP_U32()[pnum>>>2>>>0]=num;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(25,0,1,fd,iov,iovcnt,pnum);iov>>>=0;iovcnt>>>=0;pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doReadv(stream,iov,iovcnt);GROWABLE_HEAP_U32()[pnum>>>2>>>0]=num;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(26,0,1,fd,offset_low,offset_high,whence,newOffset);var offset=convertI32PairToI53Checked(offset_low,offset_high);newOffset>>>=0;try{if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[newOffset>>>2>>>0]=tempI64[0],GROWABLE_HEAP_I32()[newOffset+4>>>2>>>0]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(27,0,1,fd,iov,iovcnt,pnum);iov>>>=0;iovcnt>>>=0;pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doWritev(stream,iov,iovcnt);GROWABLE_HEAP_U32()[pnum>>>2>>>0]=num;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}var FS_createPath=FS.createPath;var FS_unlink=path=>FS.unlink(path);var FS_createLazyFile=FS.createLazyFile;var FS_createDevice=FS.createDevice;PThread.init();FS.createPreloadedFile=FS_createPreloadedFile;FS.staticInit();Module[\"FS_createPath\"]=FS.createPath;Module[\"FS_createDataFile\"]=FS.createDataFile;Module[\"FS_createPreloadedFile\"]=FS.createPreloadedFile;Module[\"FS_unlink\"]=FS.unlink;Module[\"FS_createLazyFile\"]=FS.createLazyFile;Module[\"FS_createDevice\"]=FS.createDevice;embind_init_charCodes();BindingError=Module[\"BindingError\"]=class BindingError extends Error{constructor(message){super(message);this.name=\"BindingError\"}};InternalError=Module[\"InternalError\"]=class InternalError extends Error{constructor(message){super(message);this.name=\"InternalError\"}};init_ClassHandle();init_embind();init_RegisteredPointer();UnboundTypeError=Module[\"UnboundTypeError\"]=extendError(Error,\"UnboundTypeError\");init_emval();var proxiedFunctionTable=[_proc_exit,exitOnMainThread,pthreadCreateProxied,___syscall_dup3,___syscall_faccessat,___syscall_fcntl64,___syscall_fstat64,___syscall_ftruncate64,___syscall_getcwd,___syscall_getdents64,___syscall_ioctl,___syscall_lstat64,___syscall_newfstatat,___syscall_openat,___syscall_readlinkat,___syscall_rmdir,___syscall_stat64,___syscall_unlinkat,__mmap_js,__munmap_js,_environ_get,_environ_sizes_get,_fd_close,_fd_pread,_fd_pwrite,_fd_read,_fd_seek,_fd_write];var wasmImports;function assignWasmImports(){wasmImports={b:___cxa_throw,_:___pthread_create_js,ja:___syscall_dup3,oa:___syscall_faccessat,A:___syscall_fcntl64,ia:___syscall_fstat64,T:___syscall_ftruncate64,ea:___syscall_getcwd,Z:___syscall_getdents64,ra:___syscall_ioctl,fa:___syscall_lstat64,ga:___syscall_newfstatat,G:___syscall_openat,Y:___syscall_readlinkat,X:___syscall_rmdir,ha:___syscall_stat64,D:___syscall_unlinkat,pa:__abort_js,U:__embind_register_bigint,ma:__embind_register_bool,j:__embind_register_class,v:__embind_register_class_constructor,d:__embind_register_class_function,K:__embind_register_emval,C:__embind_register_float,e:__embind_register_function,t:__embind_register_integer,q:__embind_register_memory_view,B:__embind_register_std_string,y:__embind_register_std_wstring,sa:__embind_register_void,na:__emscripten_get_now_is_monotonic,ba:__emscripten_init_main_thread_js,W:__emscripten_notify_mailbox_postmessage,$:__emscripten_receive_on_main_thread_js,E:__emscripten_thread_cleanup,aa:__emscripten_thread_mailbox_await,la:__emscripten_thread_set_strongref,n:__emval_as,l:__emval_call_method,c:__emval_decref,m:__emval_get_method_caller,s:__emval_get_property,w:__emval_incref,J:__emval_is_string,r:__emval_iter_begin,k:__emval_iter_next,p:__emval_new_array,g:__emval_new_cstring,o:__emval_new_object,i:__emval_run_destructors,h:__emval_set_property,f:__emval_take_value,P:__gmtime_js,Q:__localtime_js,R:__mktime_js,N:__mmap_js,O:__munmap_js,qa:__tzset_js,F:_emscripten_check_blocking_allowed,H:_emscripten_date_now,ka:_emscripten_exit_with_live_runtime,u:_emscripten_get_now,V:_emscripten_resize_heap,ca:_environ_get,da:_environ_sizes_get,ta:_exit,x:_fd_close,M:_fd_pread,L:_fd_pwrite,I:_fd_read,S:_fd_seek,z:_fd_write,a:wasmMemory}}var wasmExports=createWasm();var ___wasm_call_ctors=()=>(___wasm_call_ctors=wasmExports[\"ua\"])();var ___getTypeName=a0=>(___getTypeName=wasmExports[\"va\"])(a0);var __embind_initialize_bindings=()=>(__embind_initialize_bindings=wasmExports[\"wa\"])();var _pthread_self=()=>(_pthread_self=wasmExports[\"ya\"])();var _malloc=Module[\"_malloc\"]=a0=>(_malloc=Module[\"_malloc\"]=wasmExports[\"za\"])(a0);var _free=Module[\"_free\"]=a0=>(_free=Module[\"_free\"]=wasmExports[\"Aa\"])(a0);var __emscripten_tls_init=()=>(__emscripten_tls_init=wasmExports[\"Ba\"])();var _emscripten_builtin_memalign=(a0,a1)=>(_emscripten_builtin_memalign=wasmExports[\"Ca\"])(a0,a1);var __emscripten_thread_init=(a0,a1,a2,a3,a4,a5)=>(__emscripten_thread_init=wasmExports[\"Da\"])(a0,a1,a2,a3,a4,a5);var __emscripten_thread_crashed=()=>(__emscripten_thread_crashed=wasmExports[\"Ea\"])();var __emscripten_run_on_main_thread_js=(a0,a1,a2,a3,a4)=>(__emscripten_run_on_main_thread_js=wasmExports[\"Fa\"])(a0,a1,a2,a3,a4);var __emscripten_thread_free_data=a0=>(__emscripten_thread_free_data=wasmExports[\"Ga\"])(a0);var __emscripten_thread_exit=a0=>(__emscripten_thread_exit=wasmExports[\"Ha\"])(a0);var __emscripten_check_mailbox=()=>(__emscripten_check_mailbox=wasmExports[\"Ia\"])();var __emscripten_tempret_set=a0=>(__emscripten_tempret_set=wasmExports[\"Ja\"])(a0);var _emscripten_stack_set_limits=(a0,a1)=>(_emscripten_stack_set_limits=wasmExports[\"Ka\"])(a0,a1);var __emscripten_stack_restore=a0=>(__emscripten_stack_restore=wasmExports[\"La\"])(a0);var __emscripten_stack_alloc=a0=>(__emscripten_stack_alloc=wasmExports[\"Ma\"])(a0);var _emscripten_stack_get_current=()=>(_emscripten_stack_get_current=wasmExports[\"Na\"])();var dynCall_vij=Module[\"dynCall_vij\"]=(a0,a1,a2,a3)=>(dynCall_vij=Module[\"dynCall_vij\"]=wasmExports[\"Oa\"])(a0,a1,a2,a3);var dynCall_iiijiiii=Module[\"dynCall_iiijiiii\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8)=>(dynCall_iiijiiii=Module[\"dynCall_iiijiiii\"]=wasmExports[\"Pa\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8);var dynCall_iijii=Module[\"dynCall_iijii\"]=(a0,a1,a2,a3,a4,a5)=>(dynCall_iijii=Module[\"dynCall_iijii\"]=wasmExports[\"Qa\"])(a0,a1,a2,a3,a4,a5);var dynCall_iijiiii=Module[\"dynCall_iijiiii\"]=(a0,a1,a2,a3,a4,a5,a6,a7)=>(dynCall_iijiiii=Module[\"dynCall_iijiiii\"]=wasmExports[\"Ra\"])(a0,a1,a2,a3,a4,a5,a6,a7);var dynCall_iijjii=Module[\"dynCall_iijjii\"]=(a0,a1,a2,a3,a4,a5,a6,a7)=>(dynCall_iijjii=Module[\"dynCall_iijjii\"]=wasmExports[\"Sa\"])(a0,a1,a2,a3,a4,a5,a6,a7);var dynCall_iijiii=Module[\"dynCall_iijiii\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_iijiii=Module[\"dynCall_iijiii\"]=wasmExports[\"Ta\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiij=Module[\"dynCall_iiij\"]=(a0,a1,a2,a3,a4)=>(dynCall_iiij=Module[\"dynCall_iiij\"]=wasmExports[\"Ua\"])(a0,a1,a2,a3,a4);var dynCall_ijjii=Module[\"dynCall_ijjii\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_ijjii=Module[\"dynCall_ijjii\"]=wasmExports[\"Va\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiijii=Module[\"dynCall_iiijii\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_iiijii=Module[\"dynCall_iiijii\"]=wasmExports[\"Wa\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iijiiiiiii=Module[\"dynCall_iijiiiiiii\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)=>(dynCall_iijiiiiiii=Module[\"dynCall_iijiiiiiii\"]=wasmExports[\"Xa\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);var dynCall_iijiiiii=Module[\"dynCall_iijiiiii\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8)=>(dynCall_iijiiiii=Module[\"dynCall_iijiiiii\"]=wasmExports[\"Ya\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8);var dynCall_iiji=Module[\"dynCall_iiji\"]=(a0,a1,a2,a3,a4)=>(dynCall_iiji=Module[\"dynCall_iiji\"]=wasmExports[\"Za\"])(a0,a1,a2,a3,a4);var dynCall_ijii=Module[\"dynCall_ijii\"]=(a0,a1,a2,a3,a4)=>(dynCall_ijii=Module[\"dynCall_ijii\"]=wasmExports[\"_a\"])(a0,a1,a2,a3,a4);var dynCall_iiiiji=Module[\"dynCall_iiiiji\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_iiiiji=Module[\"dynCall_iiiiji\"]=wasmExports[\"$a\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iij=Module[\"dynCall_iij\"]=(a0,a1,a2,a3)=>(dynCall_iij=Module[\"dynCall_iij\"]=wasmExports[\"ab\"])(a0,a1,a2,a3);var dynCall_iji=Module[\"dynCall_iji\"]=(a0,a1,a2,a3)=>(dynCall_iji=Module[\"dynCall_iji\"]=wasmExports[\"bb\"])(a0,a1,a2,a3);var dynCall_j=Module[\"dynCall_j\"]=a0=>(dynCall_j=Module[\"dynCall_j\"]=wasmExports[\"cb\"])(a0);var dynCall_iiijj=Module[\"dynCall_iiijj\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_iiijj=Module[\"dynCall_iiijj\"]=wasmExports[\"db\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_jii=Module[\"dynCall_jii\"]=(a0,a1,a2)=>(dynCall_jii=Module[\"dynCall_jii\"]=wasmExports[\"eb\"])(a0,a1,a2);var dynCall_iiijjii=Module[\"dynCall_iiijjii\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8)=>(dynCall_iiijjii=Module[\"dynCall_iiijjii\"]=wasmExports[\"fb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8);var dynCall_ijiii=Module[\"dynCall_ijiii\"]=(a0,a1,a2,a3,a4,a5)=>(dynCall_ijiii=Module[\"dynCall_ijiii\"]=wasmExports[\"gb\"])(a0,a1,a2,a3,a4,a5);var dynCall_iiijji=Module[\"dynCall_iiijji\"]=(a0,a1,a2,a3,a4,a5,a6,a7)=>(dynCall_iiijji=Module[\"dynCall_iiijji\"]=wasmExports[\"hb\"])(a0,a1,a2,a3,a4,a5,a6,a7);var dynCall_jijiijj=Module[\"dynCall_jijiijj\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)=>(dynCall_jijiijj=Module[\"dynCall_jijiijj\"]=wasmExports[\"ib\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9);var dynCall_ij=Module[\"dynCall_ij\"]=(a0,a1,a2)=>(dynCall_ij=Module[\"dynCall_ij\"]=wasmExports[\"jb\"])(a0,a1,a2);var dynCall_jiijj=Module[\"dynCall_jiijj\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_jiijj=Module[\"dynCall_jiijj\"]=wasmExports[\"kb\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiijjj=Module[\"dynCall_iiijjj\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8)=>(dynCall_iiijjj=Module[\"dynCall_iiijjj\"]=wasmExports[\"lb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8);var dynCall_ji=Module[\"dynCall_ji\"]=(a0,a1)=>(dynCall_ji=Module[\"dynCall_ji\"]=wasmExports[\"mb\"])(a0,a1);var dynCall_iiiijjjjji=Module[\"dynCall_iiiijjjjji\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)=>(dynCall_iiiijjjjji=Module[\"dynCall_iiiijjjjji\"]=wasmExports[\"nb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);var dynCall_iiiijji=Module[\"dynCall_iiiijji\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8)=>(dynCall_iiiijji=Module[\"dynCall_iiiijji\"]=wasmExports[\"ob\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8);var dynCall_iijiji=Module[\"dynCall_iijiji\"]=(a0,a1,a2,a3,a4,a5,a6,a7)=>(dynCall_iijiji=Module[\"dynCall_iijiji\"]=wasmExports[\"pb\"])(a0,a1,a2,a3,a4,a5,a6,a7);var dynCall_iiiji=Module[\"dynCall_iiiji\"]=(a0,a1,a2,a3,a4,a5)=>(dynCall_iiiji=Module[\"dynCall_iiiji\"]=wasmExports[\"qb\"])(a0,a1,a2,a3,a4,a5);var dynCall_iiiijjjjjji=Module[\"dynCall_iiiijjjjjji\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)=>(dynCall_iiiijjjjjji=Module[\"dynCall_iiiijjjjjji\"]=wasmExports[\"rb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16);var dynCall_iiiiiijii=Module[\"dynCall_iiiiiijii\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)=>(dynCall_iiiiiijii=Module[\"dynCall_iiiiiijii\"]=wasmExports[\"sb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9);var dynCall_iiijjji=Module[\"dynCall_iiijjji\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)=>(dynCall_iiijjji=Module[\"dynCall_iiijjji\"]=wasmExports[\"tb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9);var dynCall_iiiijjjji=Module[\"dynCall_iiiijjjji\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)=>(dynCall_iiiijjjji=Module[\"dynCall_iiiijjjji\"]=wasmExports[\"ub\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);var dynCall_iiiijjji=Module[\"dynCall_iiiijjji\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)=>(dynCall_iiiijjji=Module[\"dynCall_iiiijjji\"]=wasmExports[\"vb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);var dynCall_iiiiijjji=Module[\"dynCall_iiiiijjji\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)=>(dynCall_iiiiijjji=Module[\"dynCall_iiiiijjji\"]=wasmExports[\"wb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);var dynCall_iiiiiiijjji=Module[\"dynCall_iiiiiiijjji\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)=>(dynCall_iiiiiiijjji=Module[\"dynCall_iiiiiiijjji\"]=wasmExports[\"xb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13);var dynCall_ijjj=Module[\"dynCall_ijjj\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_ijjj=Module[\"dynCall_ijjj\"]=wasmExports[\"yb\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_jiji=Module[\"dynCall_jiji\"]=(a0,a1,a2,a3,a4)=>(dynCall_jiji=Module[\"dynCall_jiji\"]=wasmExports[\"zb\"])(a0,a1,a2,a3,a4);var dynCall_viijii=Module[\"dynCall_viijii\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_viijii=Module[\"dynCall_viijii\"]=wasmExports[\"Ab\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=wasmExports[\"Bb\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8)=>(dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=wasmExports[\"Cb\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8);var dynCall_iiiiiijj=Module[\"dynCall_iiiiiijj\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)=>(dynCall_iiiiiijj=Module[\"dynCall_iiiiiijj\"]=wasmExports[\"Db\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9);function applySignatureConversions(wasmExports){wasmExports=Object.assign({},wasmExports);var makeWrapper_pp=f=>a0=>f(a0)>>>0;var makeWrapper_p=f=>()=>f()>>>0;var makeWrapper_ppp=f=>(a0,a1)=>f(a0,a1)>>>0;wasmExports[\"va\"]=makeWrapper_pp(wasmExports[\"va\"]);wasmExports[\"ya\"]=makeWrapper_p(wasmExports[\"ya\"]);wasmExports[\"za\"]=makeWrapper_pp(wasmExports[\"za\"]);wasmExports[\"Ca\"]=makeWrapper_ppp(wasmExports[\"Ca\"]);wasmExports[\"emscripten_main_runtime_thread_id\"]=makeWrapper_p(wasmExports[\"emscripten_main_runtime_thread_id\"]);wasmExports[\"Ma\"]=makeWrapper_pp(wasmExports[\"Ma\"]);wasmExports[\"Na\"]=makeWrapper_p(wasmExports[\"Na\"]);return wasmExports}Module[\"addRunDependency\"]=addRunDependency;Module[\"removeRunDependency\"]=removeRunDependency;Module[\"wasmMemory\"]=wasmMemory;Module[\"FS_createPreloadedFile\"]=FS_createPreloadedFile;Module[\"FS_unlink\"]=FS_unlink;Module[\"FS_createPath\"]=FS_createPath;Module[\"FS_createDevice\"]=FS_createDevice;Module[\"FS\"]=FS;Module[\"FS_createDataFile\"]=FS_createDataFile;Module[\"FS_createLazyFile\"]=FS_createLazyFile;Module[\"PThread\"]=PThread;var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(){if(runDependencies>0){return}if(ENVIRONMENT_IS_PTHREAD){readyPromiseResolve(Module);initRuntime();startWorker(Module);return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);Module[\"onRuntimeInitialized\"]?.();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(()=>{setTimeout(()=>Module[\"setStatus\"](\"\"),1);doRun()},1)}else{doRun()}}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();moduleRtn=readyPromise;\n\n\n  return moduleRtn;\n}\n);\n})();\nexport default loadScran;\nvar isPthread = globalThis.self?.name === 'em-pthread';\n// When running as a pthread, construct a new instance on startup\nisPthread && loadScran();\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X HDF5 feature-barcode matrix format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices) for details.\n */\nexport class TenxHdf5Dataset { \n    #h5_file;\n    #h5_path;\n    #h5_flush;\n\n    #raw_features;\n    #raw_cells;\n    #raw_shape;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"h5\", file: fun(this.#h5_file) }];\n        let options = this.options();\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} h5File - Contents of a HDF5 file in the 10X feature-barcode format.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     */\n    constructor(h5File) {\n        if (h5File instanceof afile.SimpleFile) {\n            this.#h5_file = h5File;\n        } else {\n            this.#h5_file = new afile.SimpleFile(h5File);\n        }\n\n        this.#options = TenxHdf5Dataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxHdf5Dataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxHdf5Dataset#load load} (but not {@linkcode TenxHdf5Dataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * If `null` or the string is not present among the feature types, no RNA features are to be loaded.\n     *\n     * If no feature type information is available in the dataset, all features are considered to be genes by default.\n     * This behavior can also be explicitly requested by setting this argument to the only non-`null` value among all `featureType*Name` parameters.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * If `null` or the string is not present among the feature types, no ADT features are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be ADTs.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * If `null` or the string is not present among the feature types, no guides are to be loaded.\n     * \n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be guides.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #instantiate() {\n        if (this.#h5_path !== null) {\n            return;\n        }\n\n        let info = scran.realizeFile(this.#h5_file.content());\n        this.#h5_path = info.path;\n        this.#h5_flush = info.flush;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxHdf5Dataset#load load} or {@linkcodeTenxHdf5Dataset#summary summary}. \n     */\n    clear() {\n        if (typeof this.#h5_flush == \"function\") {\n            this.#h5_flush();\n        }\n        this.#h5_flush = null;\n        this.#h5_path = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"10X\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let handle = new scran.H5File(this.#h5_path);\n        if (!(\"matrix\" in handle.children) || handle.children[\"matrix\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix' group at the top level of the file\");\n        }\n        let mhandle = handle.open(\"matrix\");\n\n        if (!(\"features\" in mhandle.children) || mhandle.children[\"features\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix/features' group containing the feature annotation\");\n        }\n        let fhandle = mhandle.open(\"features\");\n\n        let ids = eutils.extractHdf5Strings(fhandle, \"id\");\n        if (ids == null) {\n            throw new Error(\"expected a 'matrix/features/id' string dataset containing the feature IDs\");\n        }\n        let feats = new bioc.DataFrame({ id: ids }); // build it piece-by-piece for a well-defined ordering.\n\n        let names = eutils.extractHdf5Strings(fhandle, \"name\");\n        if (names !== null) {\n            feats.$setColumn(\"name\", names);\n        }\n\n        let ftype = eutils.extractHdf5Strings(fhandle, \"feature_type\");\n        if (ftype !== null) {\n            feats.$setColumn(\"type\", ftype);\n        }\n\n        this.#raw_features = feats;\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#instantiate();\n\n        let fhandle = new scran.H5File(this.#h5_path);\n        let dhandle = fhandle.open(\"matrix\");\n        let shandle = dhandle.open(\"shape\");\n        let shape = shandle.values;\n        if (shape.length != 2 || !shape.every(x => (typeof x === \"number\" && x >= 0 && Number.isInteger(x)))) {\n            throw new Error(\"expected 'shape' to contain 2 non-negative integers\");\n        }\n        this.#raw_shape = shandle.values;\n\n        this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: this.#raw_shape[1] });\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    summary({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxHdf5Dataset#load load} but the order of values may be different.\n     */\n    previewPrimaryIds({ cache = false } = {}) {\n        this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxHdf5Dataset#defaults defaults} or with {@linkcode TenxHdf5Dataset#setOptions setOptions}.\n     *\n     * If the feature annotation lacks information about the feature types, it is assumed that all features are genes, i.e., only the RNA modality is present.\n     */\n    load({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let loaded = scran.initializeSparseMatrixFromHdf5Group(\n            this.#h5_path,\n            \"matrix\",\n            this.#raw_shape[0],\n            this.#raw_shape[1],\n            /* byRow = */ false,\n            { forceInteger: true, layered: true }\n        ); // collection gets handled inside splitScranMatrixAndFeatures.\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\");\n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxHdf5Dataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxHdf5Dataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"h5\") {\n            throw new Error(\"expected exactly one file of type 'h5' for 10X HDF5 unserialization\");\n        }\n        let output = new TenxHdf5Dataset(files[0].file);\n        output.setOptions(output);\n        return output;\n    }\n}\n","import * as utils from \"./../utils.js\";\nimport * as wasm from \"../wasm.js\";\n\nexport function computePerCellQcFilters(metrics, block, run) {\n    var block_data;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = run(metrics, use_blocks, bptr);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\nexport function applyFilter(thresholds, metrics, block, asTypedArray, buffer) {\n    var block_data;\n    var tmp;\n\n    try {\n        var bptr = 0;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            bptr = block_data.offset;\n        } else if (thresholds.is_blocked()) {\n            throw new Error(\"'block' must be supplied if blocking was used to compute the thresholds\")\n        }\n\n        if (buffer == null) {\n            tmp = utils.createUint8WasmArray(metrics.numberOfCells());\n            buffer = tmp;\n        } else if (buffer.length != metrics.numberOfCells()) {\n            throw new Error(\"'buffer' must be of length equal to the number of cells in 'metrics'\");\n        }\n\n        wasm.call(module => thresholds.filter(metrics.results, bptr, buffer.offset));\n\n    } catch (e) {\n        utils.free(tmp);\n        throw e;\n    } finally {\n        utils.free(block_data);\n    }\n\n    return utils.toTypedArray(buffer, tmp == null, asTypedArray);\n}\n","import { allocate } from \"./globals.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return {WasmArray} Instance of a {@linkplain WasmArray} subclass.\n */\nexport function createWasmArray(space, length, arrayClass) {\n    return allocate(space, length, arrayClass);\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint8WasmArray} Instance of a {@linkplain Uint8WasmArray}.\n */\nexport function createUint8WasmArray(space, length) { \n    return createWasmArray(space, length, Uint8WasmArray); \n}\n\n/**\n * Create a {@linkplain Int8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int8WasmArray} Instance of a {@linkplain Int8WasmArray}.\n */\nexport function createInt8WasmArray(space, length) { \n    return createWasmArray(space, length, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint16WasmArray} Instance of a {@linkplain Uint16WasmArray}.\n */\nexport function createUint16WasmArray(space, length) { \n    return createWasmArray(space, length, Uint16WasmArray); \n}\n\n/**\n * Create a {@linkplain Int16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int16WasmArray} Instance of a {@linkplain Int16WasmArray}.\n */\nexport function createInt16WasmArray(space, length) { \n    return createWasmArray(space, length, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Uint32WasmArray} Instance of a {@linkplain Uint32WasmArray}.\n */\nexport function createUint32WasmArray(space, length) { \n    return createWasmArray(space, length, Uint32WasmArray); \n}\n\n/**\n * Create a {@linkplain Int32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Int32WasmArray} Instance of a {@linkplain Int32WasmArray}.\n */\nexport function createInt32WasmArray(space, length) { \n    return createWasmArray(space, length, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {BigUint64WasmArray} Instance of a {@linkplain BigUint64WasmArray}.\n */\nexport function createBigUint64WasmArray(space, length) { \n    return createWasmArray(space, length, BigUint64WasmArray); \n}\n\n/**\n * Create a {@linkplain BigInt64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {BigInt64WasmArray} Instance of a {@linkplain BigInt64WasmArray}.\n */\nexport function createBigInt64WasmArray(space, length) { \n    return createWasmArray(space, length, BigInt64WasmArray); \n}\n\n/**\n * Create a {@linkplain Float32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Float32WasmArray} Instance of a {@linkplain Float32WasmArray}.\n */\nexport function createFloat32WasmArray(space, length) { \n    return createWasmArray(space, length, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return {Float64WasmArray} Instance of a {@linkplain Float64WasmArray}.\n */\nexport function createFloat64WasmArray(space, length) { \n    return createWasmArray(space, length, Float64WasmArray); \n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SummarizedExperiment contains zero or more assays, consisting of multi-dimensional arrays (usually matrices) of experimental data,\n * as well as {@linkplain DataFrame}s containing further annotations on the rows or columns of those arrays.\n * The SummarizedExperiment class defines methods for the following generics:\n * \n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * Assays are expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * Constructors of SummarizedExperiment subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE`, `_bioconductor_COMBINE_ROWS`, `_bioconductor_COMBINE_COLUMNS` and `_bioconductor_SLICE_2D` methods to return an instance of the subclass.\n *\n * @extends Annotated\n */\nexport class SummarizedExperiment extends ann.Annotated {\n    /**\n     * @param {Object|Map} assays - Object or Map where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.assayOrder=null] - Array of strings specifying the ordering of the assays.\n     * If non-`null`, this should have the same values as the keys of `assays`.\n     * If `null`, an arbitrary ordering is obtained from `assays`.\n     * @param {?DataFrame} [options.rowData=null] - Data frame of row annotations.\n     * If non-`null`, this should have a number of rows equal to the number of rows in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?DataFrame} [options.columnData=null] - Data frame of column annotations.\n     * If non-`null`, this should have a number of columns equal to the number of columns in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?Array} [options.rowNames=null] - Array of strings of length equal to the number of rows in the `assays`, containing row names.\n     * Alternatively `null`, if no row names are present.\n     * @param {?Array} [options.columnNames=null] - Array of strings of length equal to the number of columns in the `assays`, containing column names.\n     * Alternatively `null`, if no column names are present.\n     * @param {Object|Array|Map|List} [options.metadata={}] - Arbitrary metadata, see the {@link Annotated} constructor. \n     */\n    constructor(assays, { assayOrder = null, rowData = null, columnData = null, rowNames = null, columnNames = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        // Check the assays.\n        try {\n            this._assays = new il.InternalList(assays, assayOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize assay list for this SummarizedExperiment; \" + e.message, { cause: e });\n        }\n\n        let nrows = null;\n        let ncols = null;\n        for (const k of this._assays.names()) {\n            let current = this._assays.entry(k);\n            let nr = generics.NUMBER_OF_ROWS(current);\n            let nc = generics.NUMBER_OF_COLUMNS(current);\n            if (nrows == null) {\n                nrows = nr;\n                ncols = nc;\n            } else if (nrows !== nr || ncols !== nc) {\n                throw new Error(\"expected all assays in 'assays' to have the same number of rows and columns\");\n            }\n        }\n\n        // Check the rowData.\n        if (rowData === null) {\n            if (nrows == null){\n                throw new Error(\"'rowData' must be specified if 'assays' is empty\");\n            }\n            rowData = new df.DataFrame({}, { numberOfRows: nrows });\n        } else {\n            if (nrows !== null && nrows !== generics.LENGTH(rowData)) {\n                throw new Error(\"'rowData' should be equal to the number of rows in each 'assays'\");\n            }\n        }\n        this._rowData = rowData;\n\n        // Check the columnData.\n        if (columnData === null) {\n            if (ncols == null){\n                throw new Error(\"'columnData' must be specified if 'assays' is empty\");\n            }\n            columnData = new df.DataFrame({}, { numberOfRows: ncols });\n        } else {\n            if (ncols !== null && ncols !== generics.LENGTH(columnData)) {\n                throw new Error(\"'columnData' should be equal to the number of columns in each 'assays'\");\n            }\n        }\n        this._columnData = columnData;\n\n        // Checking the names.\n        if (rowNames != null) {\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._rowData.numberOfRows(), \"the number of rows in each 'assays'\");\n        }\n        this._rowNames = rowNames;\n\n        if (columnNames != null) {\n            utils.checkNamesArray(columnNames, \"'columnNames'\", this._columnData.numberOfRows(), \"the number of columns in each 'assays'\");\n        }\n        this._columnNames = columnNames;\n    }\n\n    static className = \"SummarizedExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of assay names.\n     */\n    assayNames() {\n        return this._assays.names();\n    }\n\n    /**\n     * @return {number} Number of assays.\n     */\n    numberOfAssays() {\n        return this._assays.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Assay to retrieve, either by name or index.\n     * @return {*} The contents of assay `i` as an multi-dimensional array-like object.\n     */\n    assay(i) {\n        let output;\n        try {\n            output = this._assays.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified assay from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {Map} Map where keys are the assay names and values are the assays.\n     */\n    assays() {\n        return this._assays.entries();\n    }\n\n    /**\n     * @return {DataFrame} Data frame of row data, with one row per row in this SummarizedExperiment.\n     */\n    rowData() {\n        return this._rowData;\n    }\n\n    /**\n     * @return {number} Number of rows in this SummarizedExperiment.\n     */\n    numberOfRows() {\n        return this._rowData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of column data, with one row per column in this SummarizedExperiment.\n     */\n    columnData() {\n        return this._columnData;\n    }\n\n    /**\n     * @return {number} Number of columns in this SummarizedExperiment.\n     */\n    numberOfColumns() {\n        return this._columnData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing column names, or `null` if no column names are available.\n     */\n    columnNames() {\n        return this._columnNames;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAssay(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove assay \" + (typeof i == \"string\" ? \"'\" + i + \"'\" : String(i)) + \" from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    $removeAssay(i) {\n        return this.removeAssay(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} A SummarizedExperiment with modified assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssay(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) !== this.numberOfRows() || generics.NUMBER_OF_COLUMNS(value) !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same dimensions as this 'SummarizedExperiment'\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._assays = target._assays.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Object|Map} value - Object containing zero, one or more multi-dimensional array-like objects in the values.\n     * All arrays should have the same number of rows and columns.\n     * Keys are assay names, each of which should be present in `order`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     * @param {Array|boolean} [options.newOrder=false] - Whether to replace the order of assays with the order of keys in `value`.\n     * If `false`, the existing order in {@linkcode SummarizedExperiment#assayNames assayNames} is used.\n     * If an array is provided, this is used as the order.\n     * If `null`, this has the same effect as `true`.\n     *\n     * @return {SummarizedExperiment} A SummarizedExperiment with modified assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssays(value, { inPlace = false, newOrder = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n\n        if (newOrder === false) {\n            newOrder = target._assays.names();\n        } else if (newOrder == true) {\n            newOrder = null;\n        }\n        try {\n            target._assays = new il.InternalList(value, newOrder);\n        } catch (e) {\n            throw new Error(\"failed to replace assay list for this SummarizedExperiment; \" + e.message, { cause: e });\n        }\n\n        let se_nr = target.numberOfRows();\n        let se_nc = target.numberOfColumns();\n        for (const k of target._assays.names()) {\n            let current = target._assays.entry(k);\n            let nr = generics.NUMBER_OF_ROWS(current);\n            let nc = generics.NUMBER_OF_COLUMNS(current);\n            if (nr !== se_nr || nc !== se_nc) {\n                throw new Error(\"mismatch in the dimensions of assay '\" + k + \"' compared to the SummarizedExperiment\");\n            }\n        }\n\n        return target;\n    }\n\n    $setAssays(value, { newOrder = false } = {}) {\n        return this.setAssays(value, { inPlace: true, newOrder });\n    }\n\n    $setAssay(i, value) {\n        return this.setAssay(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified assay names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssayNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the assay names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    $setAssayNames(names) {\n        return this.setAssayNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAssays(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = this._assays.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the assays for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    $sliceAssays(i) {\n        return this.sliceAssays(i, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfRows()) {\n            throw new Error(\"expected 'value' to have the same number of rows as this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowData = value;\n        return target;\n    }\n\n    $setRowData(value) {\n        return this.setRowData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same number of rows as the number of columns of this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnData = value;\n        return target;\n    }\n\n    $setColumnData(value) {\n        return this.setColumnData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfRows(), \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfColumns(), \"'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnNames = names;\n        return target;\n    }\n\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(rows, columns, { allowView = false }) {\n        let output = new this.constructor;\n        output._assays = this._assays.apply(v => generics.SLICE_2D(v, rows, columns, { allowView }));\n\n        if (rows !== null) {\n            output._rowData = generics.SLICE(this._rowData, rows, { allowView });\n            output._rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, rows, { allowView }));\n        } else {\n            output._rowData = this._rowData;\n            output._rowNames = this._rowNames;\n        }\n\n        if (columns !== null) {\n            output._columnData = generics.SLICE(this._columnData, columns, { allowView });\n            output._columnNames = (this._columnNames == null ? null : generics.SLICE(this._columnNames, columns, { allowView }));\n        } else {\n            output._columnData = this._columnData;\n            output._columnNames = this._columnNames;\n        }\n\n        output._metadata = this._metadata;\n        return output;\n    }\n\n    _bioconductor_COMBINE_ROWS(objects) {\n        let all_assays = [this._assays];\n        let all_dfs = [this._rowData];\n        let all_n = [this._rowNames];\n        let all_l = [this.numberOfRows()];\n        for (const x of objects) {\n            all_assays.push(x._assays);\n            all_dfs.push(x._rowData);\n            all_n.push(x._rowNames);\n            all_l.push(x.numberOfRows());\n        }\n\n        let output = new this.constructor;\n        output._assays = il.InternalList.parallelCombine(all_assays, generics.COMBINE_ROWS);\n        output._rowData = generics.COMBINE(all_dfs);\n        output._rowNames = utils.combineNames(all_n, all_l);\n\n        output._columnData = this._columnData;\n        output._columnNames = this._columnNames;\n        output._metadata = this._metadata;\n        return output;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(objects) {\n        let all_assays = [this._assays];\n        let all_dfs = [this._columnData];\n        let all_n = [this._columnNames];\n        let all_l = [this.numberOfColumns()];\n        for (const x of objects) {\n            all_assays.push(x._assays);\n            all_dfs.push(x._columnData);\n            all_n.push(x._columnNames);\n            all_l.push(x.numberOfColumns());\n        }\n\n        let output = new this.constructor;\n        output._assays = il.InternalList.parallelCombine(all_assays, generics.COMBINE_COLUMNS);\n        output._columnData = generics.COMBINE(all_dfs);\n        output._columnNames = utils.combineNames(all_n, all_l);\n\n        output._rowData = this._rowData;\n        output._rowNames = this._rowNames;\n        output._metadata = this._metadata;\n        return output;\n    }\n\n    _bioconductor_CLONE({ deepCopy = true }) {\n        let output = super._bioconductor_CLONE({ deepCopy });\n\n        output._assays = cutils.cloneField(this._assays, deepCopy);\n        output._rowData = cutils.cloneField(this._rowData, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n\n        output._columnData = cutils.cloneField(this._columnData, deepCopy);\n        output._columnNames = cutils.cloneField(this._columnNames, deepCopy);\n        return output;\n    }\n}\n","import * as vec from \"./Vector.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\n/**\n * A GroupedGRanges object is a collection of groups of genomic ranges, inspired by the `GRangesList` class from the Bioconductor ecosystem.\n * Each group consists of a {@linkplain GRanges} object of arbitrary length, which is most often used to represent a multi-exon gene.\n * The GroupedGRanges can be considered a vector of groups, and defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Our implementation re-uses Bioconductor's strategy of storing the groups in a single concatenated GRanges.\n * This improves efficiency for large numbers of small GRanges, especially in placeholder objects where all the GRanges are zero-length.\n *\n * Constructors of GroupedGRanges subclasses should be callable with no arguments, possibly creating an empty object with no properties.\n * This will be used by the `_bioconductor_CLONE`, `_bioconductor_SLICE` and `_bioconductor_COMBINE` methods to return an instance of the subclass.\n * \n * @extends Vector\n */\nexport class GroupedGRanges extends vec.Vector {\n    static #computeStarts(lengths) {\n        let starts = new Int32Array(lengths.length);\n        let last = 0;\n        for (var i = 0; i < lengths.length; i++) {\n            starts[i] = last;\n            last += lengths[i];\n        }\n        return { starts: starts, total: last };\n    }\n\n    #staged_setGroup = null;\n\n    /**\n     * @param {Array|GRanges} ranges - An array of {@linkplain GRanges} objects, where each element represents a group of genomic ranges.\n     * All objects should have compatible columns in their {@linkplain Vector#elementMetadata elementMetadata}.\n     * \n     * Alternatively, a single GRanges containing a concatenation of ranges from all groups.\n     * In this case, `rangeLengths` must be supplied.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(TypedArray|Array)} [options.rangeLengths=null] - Length of the ranges within each group.\n     * This should be coercible to an Int32Array, contain non-negative values, and have a sum equal to the length of `ranges`.\n     * Only used if `ranges` is a single {@linkplain GRanges} object, where each group's ranges are assumed to form contiguous intervals along `ranges`.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object|Array|Map|List} [options.metadata={}] - Arbitrary metadata, see the {@link Annotated} constructor. \n     */\n    constructor(ranges, { rangeLengths = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        if (ranges.constructor == Array) {\n            super(ranges.length, { names, elementMetadata, metadata });\n            rangeLengths = new Int32Array(ranges.length);\n            for (var i = 0; i < rangeLengths.length; i++) {\n                if (!(ranges[i] instanceof gr.GRanges)) {\n                    throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n                }\n                rangeLengths[i] = generics.LENGTH(ranges[i]);\n            }\n            ranges = generics.COMBINE(ranges);\n\n        } else {\n            if (!(ranges instanceof gr.GRanges)) {\n                throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n            }\n            if (rangeLengths == null) {\n                throw new Error(\"'rangeLengths' must be specified when 'ranges' is a 'GRanges'\");\n            }\n            super(rangeLengths.length, { names, elementMetadata, metadata });\n            rangeLengths = utils.convertToInt32Array(rangeLengths);\n            utils.checkNonNegative(rangeLengths);\n        }\n\n        this._ranges = ranges;\n        this._rangeLengths = rangeLengths;\n\n        let accumulated = GroupedGRanges.#computeStarts(rangeLengths);\n        this._rangeStarts = accumulated.starts;\n\n        if (accumulated.total !== generics.LENGTH(ranges)) {\n            throw new Error(\"sum of 'rangeLengths' must be equal to the length of 'ranges'\");\n        }\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} The concatenated set of ranges across all groups. \n     */\n    ranges() {\n        this.#flush_staged_setGroup();\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int32Array} The start indices for each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeStarts() {\n        this.#flush_staged_setGroup();\n        return this._rangeStarts;\n    }\n\n    /**\n     * @return {Int32Array} The length of each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeLengths() {\n        this.#flush_staged_setGroup();\n        return this._rangeLengths;\n    }\n\n    /**\n     * @param {number} i - Index of the group of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether a view can be created in any internal slicing operations.\n     *\n     * @return {GRanges} The genomic ranges for group `i`.\n     */\n    group(i, { allowView = false } = {}) {\n        this.#flush_staged_setGroup();\n        let s = this._rangeStarts[i];\n        return generics.SLICE(this._ranges, { start: s, end: s + this._rangeLengths[i] }, { allowView });\n    }\n\n    /**\n     * @return {number} Number of groups in this object.\n     */\n    numberOfGroups() {\n        return this._rangeStarts.length;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after modifying the internal ranges.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof gr.GRanges)) {\n            throw new Error(\"'ranges' must be a 'GRanges'\");\n        }\n\n        this.#flush_staged_setGroup();\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"number of ranges\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._ranges = ranges;\n        return target;\n    }\n\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    #flush_staged_setGroup() {\n        let staged = this.#staged_setGroup;\n        if (staged === null) {\n            return;\n        }\n\n        staged.sort((a, b) => {\n            let diff = a[0] - b[0];\n            return (diff === 0 ? a[1] - b[1] : diff);\n        });\n\n        let counter = 0;\n        let accumulated = 0;\n        let last_start = 0;\n        let more_ranges = [];\n\n        let ngroups = this.numberOfGroups();\n        for (var g = 0; g < ngroups; g++) {\n            if (counter < staged.length && g == staged[counter][0]) { \n                let current_start = this._rangeStarts[g];\n                if (last_start < current_start) {\n                    more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: current_start }));\n                }\n                last_start = current_start + this._rangeLengths[g];\n\n                let replacement;\n                do {\n                    replacement = staged[counter][2];\n                    counter++;\n                } while (counter < staged.length && g == staged[counter][0]);\n\n                more_ranges.push(replacement);\n                this._rangeLengths[g] = generics.LENGTH(replacement);\n            }\n\n            this._rangeStarts[g] = accumulated;\n            accumulated += this._rangeLengths[g];\n        }\n\n        let nranges = generics.LENGTH(this._ranges);\n        if (last_start < nranges) {\n            more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: nranges }));\n        }\n\n        try {\n            this._ranges = generics.COMBINE(more_ranges);\n        } catch (e) {\n            throw new Error(\"failed to combine staged '$setGroup' operations; \" + e.message);\n        }\n\n        this.#staged_setGroup = null;\n        return;\n    }\n\n    /**\n     * Multiple consecutive calls to `$setGroup` are not executed immediately.\n     * Rather, the operations are staged and executed in batch once the modified GroupedGRanges is used in other methods.\n     * This enables efficient setting of individual groups inside a single concatenated {@linkplain GRanges}. \n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after setting group `i`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setGroup(i, ranges, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (target.#staged_setGroup === null) {\n            target.#staged_setGroup = [];\n        } else if (!inPlace) {\n            target.#staged_setGroup = target.#staged_setGroup.slice();\n        }\n\n        if (!inPlace) {\n            target._rangeStarts = target._rangeStarts.slice();\n            target._rangeLengths = target._rangeLengths.slice();\n        }\n\n        let nops = target.#staged_setGroup.length;\n        target.#staged_setGroup.push([i, nops, ranges]);\n        return target;\n    }\n\n    $setGroup(i, ranges) {\n        return this.setGroup(i, ranges, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GroupedGRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        this.#flush_staged_setGroup();\n        return new GroupedGRangesOverlapIndex(\n            this._ranges.buildOverlapIndex({ restrictToSeqnames, restrictToStrand }),\n            generics.LENGTH(this._ranges),\n            this._rangeStarts,\n            this._rangeLengths\n        );\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._rangeStarts.length;\n    }\n\n    _bioconductor_SLICE(i, { allowView = false } = {}) {\n        let output = super._bioconductor_SLICE(i, { allowView });\n        this.#flush_staged_setGroup();\n\n        output._rangeLengths = generics.SLICE(this._rangeLengths, i, { allowView });\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n\n        if (i.constructor == Object) {\n            // Handle this specially for optimizing allowView = true.\n            let s = this._rangeStarts[i.start];\n            output._ranges = generics.SLICE(this._ranges, { start: s, end: s + accumulated.total }, { allowView });\n        } else {\n            let keep = new Int32Array(accumulated.total);\n\n            let counter = 0;\n            for (const j of i) {\n                let start = this._rangeStarts[j];\n                let end = start + this._rangeLengths[j];\n                for (var k = start; k < end; k++) {\n                    keep[counter] = k;\n                    counter++;\n                }\n            }\n\n            output._ranges = generics.SLICE(this._ranges, keep, { allowView });\n        }\n\n        return output;\n    }\n\n    _bioconductor_COMBINE(objects) {\n        // We need to flush the staged operations in each object.\n        this.#flush_staged_setGroup();\n        for (const x of objects) {\n            x.#flush_staged_setGroup();\n        }\n\n        let all_rl = [this._rangeLengths];\n        let all_ranges = [this._ranges];\n        for (const x of objects) {\n            all_rl.push(x._rangeLengths);\n            all_ranges.push(x._ranges);\n        }\n\n        let output = super._bioconductor_COMBINE(objects);\n        output._rangeLengths = generics.COMBINE(all_rl);\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n        output._ranges = generics.COMBINE(all_ranges);\n\n        return output;\n    }\n\n    _bioconductor_CLONE({ deepCopy = true }) {\n        let output = super._bioconductor_CLONE({ deepCopy });\n\n        output.#staged_setGroup = cutils.cloneField(this.#staged_setGroup, deepCopy);\n        output._rangeLengths = cutils.cloneField(this._rangeLengths, deepCopy);\n        output._rangeStarts = cutils.cloneField(this._rangeStarts, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {number} [numberOfGroups=0] - Numbe of empty groups to create.\n     * @return {GroupedGRanges} A GroupedGRanges object of length equal to `numberOfGroups`,\n     * where each group is of zero length.\n     */\n    static empty(numberOfGroups) {\n        let runs = new Int32Array(numberOfGroups);\n        runs.fill(0);\n        return new GroupedGRanges(gr.GRanges.empty(), { rangeLengths: runs });\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GroupedGRanges} objects.\n * This is typically constructed using the {@linkcode GroupedGRanges#buildOverlapIndex GroupedGRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GroupedGRanges or {@linkplain GRanges} to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GroupedGRangesOverlapIndex {\n    constructor(index, fullLength, rangeStarts, rangeLengths) {\n        this._index = index;\n        this._rangeStarts = rangeStarts;\n        this._rangeLengths = rangeLengths;\n\n        let rev_map = new Int32Array(fullLength);\n        for (var i = 0; i < rangeStarts.length; i++) {\n            let start = rangeStarts[i];\n            let end = start + rangeLengths[i];\n            for (var s = start; s < end; s++) {\n                rev_map[s] = i;\n            }\n        }\n        this._reverseMapping = rev_map;\n    }\n\n    /**\n     * @param {GroupedGRanges|GRanges} query - The query object, containing ranges to be overlapped with those in the reference GroupedGRanges (that was used to construct this GroupedGRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges or groups in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let output = new Array(this._rangeStarts.length);\n        let rev_map = this._reverseMapping;\n\n        if (query instanceof GroupedGRanges) {\n            let overlaps = this._index.overlap(query._ranges);\n            for (var i = 0; i < query._rangeStarts.length; i++) {\n                let start = query._rangeStarts[i];\n                let end = start + query._rangeLengths[i];\n\n                let results = new Set;\n                for (var s = start; s < end; s++) {\n                    overlaps[s].forEach(x => results.add(rev_map[x]));\n                }\n                output[i] = Array.from(results);\n            }\n\n        } else {\n            let overlaps = this._index.overlap(query);\n            for (var i = 0; i < overlaps.length; i++) {\n                let results = new Set;\n                overlaps[i].forEach(x => results.add(rev_map[x]));\n                output[i] = Array.from(results);\n            }\n        }\n\n        return output;\n    }\n\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./crispr_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"crispr_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered CRISPR count matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`normalizeCounts`](https://kanaverse.github.io/scran.js/global.html#normalizeCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc' should be a CrisprQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized CRISPR abundances,\n     * available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the CRISPR-derived size factor for each cell.\n     * This is available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        return this.#cache.sf_buffer;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"CRISPR\");\n        let raw_sf = nutils.subsetSums(this.#qc, this.#filter, mat);\n\n        let block = this.#filter.fetchFilteredBlock();\n        let buffer = utils.allocateCachedArray(raw_sf.length, \"Float64Array\", this.#cache, \"sf_buffer\");\n        scran.centerSizeFactors(raw_sf, { block: block, buffer: buffer });\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.normalizeCounts(mat, { sizeFactors: buffer, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, CrisprNormalizationState.defaults());\n        this.changed = false;\n\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n                this.changed = true;\n            }\n        } \n\n        this.#parameters = parameters;\n        return;\n    }\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode CrisprNormalizationState#compute compute} for details.\n     */\n    static defaults() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        let rhandle = ghandle.createGroup(\"results\"); \n    }\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the embeddings if they are not already available.\n * If `false`, `null` is returned if the embeddings have not already been loaded into memory.\n *\n * @return {?Object} Object with the `x` and `y`-coordinates for the t-SNE embedding.\n * \n * Each value is a Float64Array of length equal to the total number of sets for this `species`.\n * Each entry of the Float64Array corresponds to a gene set in {@linkcode fetchAllSets} and that set's x/y-coordinates on the embedding.\n * \n * If the embedding mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchEmbeddings(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_tsne.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch embeddings for species '\" + species + \"'\");\n    }\n\n    let embed_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = convertToCoordinates(embed_data);\n\n    _cache.set(species, loaded);\n    return loaded;\n}\n\n// Provided for back-compatibility.\nexport function fetchEmbeddingsForSpecies(species, { download = true } = {}) {\n    return fetchEmbeddings(species, { download });\n}\n\nfunction convertToCoordinates(lines) {\n    var x = [], y = [];\n\n    for (let i = 0; i < lines.length; i++) {\n        let split = lines[i].split(\"\\t\");\n        x.push(Number(split[0]));\n        y.push(Number(split[1]));\n    }\n\n    return {\n        \"x\": new Float64Array(x), \n        \"y\": new Float64Array(y)\n    }\n};\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/** \n * Initialize a sparse matrix from a buffer containing a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.compression=\"unknown\"] - Whether the buffer is Gzip-compressed (`\"gzip\"`) or uncompressed (`\"none\"`).\n * If `\"unknown\"`, we detect this automatically from the magic number in the header.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, see [**tatami_layered**](https://github.com/tatami-inc/tatami_layered) for more details.\n *\n * @return {ScranMatrix} Matrix containing sparse data.\n */\nexport function initializeSparseMatrixFromMatrixMarket(x, options = {}) {\n    const { compression = \"unknown\", layered = true, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var buf_data;\n    var output;\n\n    try {\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(\n                module => module.initialize_from_mtx_buffer(buf_data.offset, buf_data.length, compression, layered),\n                ScranMatrix\n            );\n        } else {\n            output = gc.call(\n                module => module.initialize_from_mtx_file(x, compression, layered),\n                ScranMatrix\n            );\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buf_data);\n    }\n\n    return output;\n}\n\n/** \n * Extract dimensions and other details from a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.compression=\"unknown\"] - Whether the buffer is Gzip-compressed (`\"gzip\"`) or uncompressed (`\"none\"`).\n * If `\"unknown\"`, we detect this automatically from the magic number in the header.\n *\n * @return {object} An object containing the number of `rows`, `columns` and `lines` in the matrix.\n */\nexport function extractMatrixMarketDimensions(x, options = {}) {\n    const { compression = \"unknown\", ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var buf_data;\n    var stats = utils.createFloat64WasmArray(3);\n    let output = {};\n\n    try {\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            wasm.call(module => module.read_header_from_mtx_buffer(buf_data.offset, buf_data.length, compression, stats.offset));\n        } else {\n            wasm.call(module => module.read_header_from_mtx_file(x, compression, stats.offset));\n        }\n\n        let sarr = stats.array();\n        output.rows = sarr[0];\n        output.columns = sarr[1];\n        output.lines = sarr[2];\n\n    } finally {\n        utils.free(buf_data);\n        utils.free(stats);\n    }\n\n    return output;\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\n\nvar _collections = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the collection details if they are not already available.\n * If `false`, `null` is returned if the collection details have not already been loaded into memory.\n *\n * @return {?Array} Array of objects where each entry corresponds to a set collection and contains details about that collection.\n * Each object can be expected to contain:\n * \n * - `title`, the title for the collection.\n * - `description`, the description for the collection.\n * - `species`, the species for all gene identifiers in the collection.\n *   This should contain the full scientific name, e.g., `\"Homo sapiens\"`, `\"Mus musculus\"`.\n * - `maintainer`, the maintainer of this collection.\n * - `source`, the source of this set, usually a link to some external resource.\n * - `start`, the index for the first set in the collection in the output of {@linkcode sets}.\n *   All sets from the same collection are stored contiguously.\n * - `size`, the number of sets in the collection.\n *\n * In a **gesel** context, the identifier for a collection (i.e., the \"collection ID\") is defined as the index of the collection in this array.\n *\n * If the collection details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllCollections(species, { download = true } = {}) {\n    let target = _collections.get(species);\n    if (typeof target !== \"undefined\") {\n        return target;\n    } else if (!download) {\n        return null;\n    }\n\n    target = [];\n    _collections.set(species, target);\n\n    var cres = await reference_download(species + \"_collections.tsv.gz\");\n    if (!cres.ok) {\n        throw new Error(\"failed to fetch collection information for species '\" + species + \"'\");\n    }\n    var coll_data = decompressLines(await cres.arrayBuffer());\n\n    var start = 0;\n    for (var i = 0; i < coll_data.length; i++) {\n        let x = coll_data[i];\n        var details = x.split(\"\\t\");\n        var len = Number(details[5]);\n        target.push({\n            \"title\": details[0],\n            \"description\": details[1],\n            \"species\": details[2],\n            \"maintainer\": details[3],\n            \"source\": details[4],\n            \"start\": start,\n            \"size\": len\n        });\n        start += len;\n    }\n\n    return target;\n}\n","export function areArraysEqual(x, y) {\n    if (x.length !== y.length) {\n        return false;\n    }\n\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] != y[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isArrayLike(x) {\n    return x.constructor == Array || ArrayBuffer.isView(x);\n}\n\nexport function chooseArrayConstructors(con1, con2) {\n    if (con1 == con2) {\n        return con1;\n    }\n\n    if (con1 == Array || con2 == Array) {\n        return Array;\n    }\n\n    if (con1 == BigInt64Array || con2 == BigInt64Array || con1 == BigUint64Array || con2 == BigUint64Array) {\n        return Array;\n    }\n\n    return Float64Array;\n}\n\nexport function formatLengthError(left, right) {\n    return new Error(left + \" should have length equal to \" + right);\n}\n\nexport function checkStringArray(names, typeMessage) {\n    for (const x of names) {\n        if (typeof x !== \"string\") {\n            throw new Error(typeMessage + \" array should only contain strings\");\n        }\n    }\n}\n\nexport function checkNamesArray(names, typeMessage, numExpected, lengthMessage) {\n    checkStringArray(names, typeMessage);\n    if (names.length != numExpected) {\n        throw formatLengthError(typeMessage + \" array\", lengthMessage);\n    }\n}\n\nexport function sum(y) {\n    let total = 0;\n    y.forEach(x => { total += x; });\n    return total;\n}\n\nexport function combineNames(all_names, all_lengths, total_n = null) {\n    let all_null = true;\n    for (var i = 0; i < all_names.length; i++) {\n        if (all_names[i] !== null) {\n            all_null = false;\n        }\n    }\n\n    if (all_null) {\n        return null;\n    }\n\n    if (total_n === null) {\n        total_n = sum(all_lengths);\n    }\n\n    let output = new Array(total_n);\n    let counter = 0;\n    for (var i = 0; i < all_names.length; i++) {\n        let n = all_names[i];\n        if (n === null) {\n            output.fill(\"\", counter, counter + all_lengths[i]);\n            counter += all_lengths[i];\n        } else {\n            n.forEach(x => {\n                output[counter] = x;\n                counter++;\n            });\n        }\n    }\n\n    return output;\n}\n\nexport function createSequence(n) {\n    let output = new Int32Array(n);\n    for (var i = 0; i < n; i++) {\n        output[i] = i;\n    }\n    return output;\n}\n\nexport function isSorted(n, cmp) {\n    for (var i = 1; i < n; ++i) {\n        if (cmp(i-1, i) > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function convertToInt32Array(x) {\n    if (x instanceof Int32Array) {\n        return x;\n    } else {\n        return new Int32Array(x);\n    }\n}\n\nexport function checkNonNegative(x, msg) {\n    for (const y of x) {\n        if (y < 0) {\n            throw new Error(\"detected a negative entry in '\" + msg + \"'\");\n        }\n    }\n}\n\nexport function object2map(x) {\n    if (x.constructor == Object) {\n        let replacement = new Map;\n        for (const [k, v] of Object.entries(x)) {\n            replacement.set(k, v);\n        }\n        return replacement;\n    } \n\n    if (!(x instanceof Map)) {\n        throw new Error(\"'x' should be either an object or Map\");\n    }\n    return x;\n}\n","import * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\nexport class InternalList {\n    constructor(entries, order) {\n        if (arguments.length == 0){\n            return;\n        }\n\n        entries = utils.object2map(entries);\n\n        let expected = Array.from(entries.keys());\n        if (order !== null) {\n            utils.checkNamesArray(order, \"'order'\", expected.length, \"the length of 'entries'\");\n            let observed = order.slice().sort();\n            expected.sort();\n\n            if (!utils.areArraysEqual(observed, expected)) {\n                throw new Error(\"values of 'order' should be the same as the keys of 'entries'\");\n            }\n        } else {\n            order = expected;\n        }\n\n        this._entries = entries;\n        this._order = order;\n    }\n\n    static className = \"InternalList\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    names() {\n        return this._order;\n    }\n\n    numberOfEntries() {\n        return this._order.length;\n    }\n\n    #check_entry_index(i) {\n        if (i < 0 || i >= this._order.length) {\n            throw new Error(\" index '\" + String(i) + \"' out of range for this \" + this.constructor.className);\n        }\n    }\n\n    entry(i) {\n        if (typeof i == \"string\") {\n            if (!this._entries.has(i)) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            return this._entries.get(i);\n        } else {\n            this.#check_entry_index(i);\n            return this._entries.get(this._order[i]);\n        }\n    }\n\n    entries() {\n        return this._entries;\n    }\n\n    has(name) {\n        return this._entries.has(name);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n    \n    delete(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copies so that we can do our setting.\n            target._order = target._order.slice();\n            target._entries = new Map(target._entries); \n        }\n\n        if (typeof i == \"string\") {\n            let ii = target._order.indexOf(i);\n            if (ii < 0) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            target._order.splice(ii, 1); \n            target._entries.delete(i);\n        } else {\n            this.#check_entry_index(i);\n            let n = target._order[i];\n            target._order.splice(i, 1);\n            target._entries.delete(n);\n        }\n\n        return target;\n    }\n\n    set(i, value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copy so that we can do our setting.\n            target._entries = new Map(target._entries);\n        }\n\n        if (typeof i == \"string\") {\n            if (!target._entries.has(i)) {\n                if (!inPlace) {\n                    target._order = target._order.slice();\n                }\n                target._order.push(i);\n            }\n            target._entries.set(i, value);\n        } else {\n            this.#check_entry_index(i);\n            target._entries.set(target._order[i], value);\n        }\n\n        return target;\n    }\n\n    setNames(names, { inPlace = false } = {}) {\n        utils.checkNamesArray(names, \"replacement 'names'\", this._order.length, \"length of 'names()'\");\n\n        let new_entries = new Map;\n        for (var i = 0; i < names.length; i++) {\n            if (new_entries.has(names[i])) {\n                throw new Error(\"detected duplicate value '\" + names[i] + \"' in replacement 'names'\");\n            }\n            new_entries.set(names[i], this._entries.get(this._order[i]));\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = names;\n        return target;\n    }\n\n    slice(indices, { inPlace = false } = {}) {\n        let new_entries = new Map;\n        let new_order = [];\n\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (new_entries.has(ii)) {\n                throw new Error(\"duplicate entries detected in slice request\");\n            } else if (!this._entries.has(ii)) {\n                throw new Error(\"slice contains missing entry '\" + ii + \"' \");\n            }\n\n            new_entries.set(ii, this._entries.get(ii));\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = new_order;\n        return target;\n    }\n\n    reorder(indices, { inPlace = false } = {}) {\n        // Reorder can be slightly more efficient than slice because we just\n        // need to change the ordering vector rather than creating a new Map.\n        if (indices.length !== this._order.length) {\n            throw utils.formatLengthError(\"reordered indices\", \"the number of existing entries\");\n        }\n\n        let new_order = [];\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (!this._entries.has(ii)) {\n                throw new Error(\"missing entry '\" + ii + \"' among the reordered indices\");\n            }\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._order = new_order;\n        return target;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE({ deepCopy = true } = {}) {\n        let output = new this.constructor;\n        output._entries = (deepCopy ? generics.CLONE(this._entries) : this._entries);\n        output._order = (deepCopy ? generics.CLONE(this._order) : this._order);\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    apply(FUN, { inPlace = false } = {}) {\n        let new_entries = (inPlace ? this._entries : new Map);\n        for (const [k, v] of this._entries) {\n            new_entries.set(k, FUN(v));\n        }\n        return (inPlace ? this : new InternalList(new_entries, this._order));\n    }\n\n    static parallelCombine(objects, combiner) {\n        let first_order = objects[0]._order;\n        for (var i = 1; i < objects.length; i++) {\n            if (!utils.areArraysEqual(first_order, objects[i]._order)) {\n                throw new Error(\"detected differences in names between first object and object \" + String(i) + \" to be combined\");\n            }\n        }\n\n        let new_entries = new Map;\n        for (const k of first_order) {\n            let found = objects.map(x => x._entries.get(k));\n            new_entries.set(k, combiner(found));\n        }\n\n        return new InternalList(new_entries, first_order);\n    }\n}\n","function _asyncIterator(r) {\n  var n,\n    t,\n    o,\n    e = 2;\n  for (\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) {\n    if (t && null != (n = r[t])) return n.call(r);\n    if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r));\n    t = \"@@asyncIterator\", o = \"@@iterator\";\n  }\n  throw new TypeError(\"Object is not async iterable\");\n}\nfunction AsyncFromSyncIterator(r) {\n  function AsyncFromSyncIteratorContinuation(r) {\n    if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\"));\n    var n = r.done;\n    return Promise.resolve(r.value).then(function (r) {\n      return {\n        value: r,\n        done: n\n      };\n    });\n  }\n  return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) {\n    this.s = r, this.n = r.next;\n  }, AsyncFromSyncIterator.prototype = {\n    s: null,\n    n: null,\n    next: function next() {\n      return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n    },\n    \"return\": function _return(r) {\n      var n = this.s[\"return\"];\n      return void 0 === n ? Promise.resolve({\n        value: r,\n        done: !0\n      }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n    },\n    \"throw\": function _throw(r) {\n      var n = this.s[\"return\"];\n      return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n    }\n  }, new AsyncFromSyncIterator(r);\n}\nexport { _asyncIterator as default };","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { FindNearestNeighborsResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the SNN graph object on the Wasm heap, produced by {@linkcode buildSnnGraph}.\n * @hideconstructor\n */\nexport class BuildSnnGraphResults {\n    #id;\n    #graph;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#graph = raw;\n        return;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#graph !== null) {\n            gc.release(this.#id);\n            this.#graph = null;\n        }\n        return;\n    }\n\n    // Not documented, internal use only.\n    get graph() {\n        return this.#graph;\n    }\n}\n\n/**\n * Build a shared nearest graph where each cell is a node.\n * Edges are formed between cells that share one or more nearest neighbors, weighted by the number or rank of those shared neighbors.\n *\n * @param {BuildNeighborSearchIndexResults|FindNearestNeighborsResults} x A pre-built neighbor search index from {@linkcode buildNeighborSearchIndex}.\n *\n * Alternatively, a pre-computed set of neighbor search results from {linkcode findNearestNeighbors}.\n * The number of neighbors should be equal to `neighbors`, otherwise a warning is raised.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.scheme=\"rank\"] - Weighting scheme for the edges between cells.\n * This can be based on the top ranks of the shared neighbors (`\"rank\"`),\n * the number of shared neighbors (`\"number\"`) \n * or the Jaccard index of the neighbor sets between cells (`\"jaccard\"`).\n * @param {number} [options.neighbors=10] - Number of nearest neighbors to use to construct the graph.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildSnnGraphResults} Object containing the graph.\n */\nexport function buildSnnGraph(x, options = {}) {\n    const { scheme = \"rank\", neighbors = 10, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n    var output;\n    var my_neighbors;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    utils.matchOptions(\"scheme\", scheme, [ \"rank\", \"number\", \"jaccard\" ]);\n\n    try {\n        let ref;\n        if (x instanceof FindNearestNeighborsResults) {\n            if (neighbors != x.numberOfNeighbors()) {\n                console.warn(\"number of neighbors in 'x' does not match 'neighbors'\");\n            }\n            ref = x;\n        } else {\n            my_neighbors = findNearestNeighbors(x, neighbors, { numberOfThreads: nthreads }); \n            ref = my_neighbors ; // separate assignment is necessary for only 'my_neighbors' but not 'x' to be freed.\n        }\n\n        output = gc.call(\n            module => module.build_snn_graph(ref.results, scheme, nthreads),\n            BuildSnnGraphResults\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Wrapper for the cell aggregation results, produced by {@linkcode aggregateAcrossCells}.\n * @hideconstructor\n */\nexport class AggregateAcrossCellsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of groups.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @return {number} Number of genes.\n     */\n    numberOfGenes() {\n        return this.#results.num_genes();\n    }\n\n    /**\n     * @param {number} group - Index of the group.\n     * This should be non-negative and less than {@linkcode AggregateAcrossCellsResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {(string|boolean)} [options.copy=true] - Copying mode to use, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes, containing the per-gene sum of values across across all cells in the specified `group`.\n     * If `average = true` in {@linkcode aggregateAcrossCells}, each element is the mean value instead.\n     */\n    groupSums(group, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.group_sums(group), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n     * If `false`, a Float64WasmArray is returned instead.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output.\n     * If not `null`, this should have the same length as the product of {@linkcode AggregateAcrossCellsResults#numberOfGenes numberOfGenes} \n     * and {@linkcode AggregateAcrossCellsResults#numberOfGroups numberOfGroups}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the product of the number of genes and groups.\n     * This can be treated as a column-major matrix where the rows are the genes and the columns are the groups,\n     * and each element is the sum of values for the corresponding gene in the corresponding group.\n     * If `average = true` in {@linkcode aggregateAcrossCells}, each element is the mean value instead.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    allSums(options = {}) {\n        let { asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        let tmp = null;\n\n        try {\n            if (buffer == null) {\n                tmp = utils.createFloat64WasmArray(this.numberOfGenes() * this.numberOfGroups());\n                buffer = tmp;\n            }\n            this.#results.all_sums(buffer.offset);\n        } catch (e) {\n            utils.free(tmp);\n            throw e;\n        }\n\n        return utils.toTypedArray(buffer, tmp == null, asTypedArray);\n    }\n\n    /**\n     * @param {number} group - Index of the group.\n     * This should be non-negative and less than {@linkcode AggregateAcrossCellsResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {(string|boolean)} [options.copy=true] - Copying mode to use, see {@linkcode possibleCopy} for details.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes, containing the number of cells with detected expression for each gene in the specified `group`.\n     * If `average = true` in {@linkcode aggregateAcrossCells}, each element is the proportion of detected cells instead.\n     */\n    groupDetected(group, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.group_detected(group), copy);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.asTypedArray=true] - Whether to return a Float64Array.\n     * If `false`, a Float64WasmArray is returned instead.\n     * If not `null`, this should have the same length as the product of {@linkcode AggregateAcrossCellsResults#numberOfGenes numberOfGenes} \n     * and {@linkcode AggregateAcrossCellsResults#numberOfGroups numberOfGroups}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the product of the number of genes and groups.\n     * This can be treated as a column-major matrix where the rows are the genes and the columns are the groups,\n     * and each element contains the number of detected cells for the corresponding gene in the corresponding group.\n     * If `average = true` in {@linkcode aggregateAcrossCells}, each element is the proportion of detected cells instead.\n     * If `buffer` is supplied, the function returns `buffer` if `asTypedArray = false`, or a view on `buffer` if `asTypedArray = true`.\n     */\n    allDetected(options = {}) {\n        let { asTypedArray = true, buffer = null, ...others } = options;\n        utils.checkOtherOptions(others);\n        let tmp = null;\n\n        try {\n            if (buffer == null) {\n                tmp = utils.createFloat64WasmArray(this.numberOfGenes() * this.numberOfGroups());\n                buffer = tmp;\n            }\n            this.#results.all_detected(buffer.offset);\n        } catch (e) {\n            utils.free(tmp);\n            throw e;\n        }\n\n        return utils.toTypedArray(buffer, tmp == null, asTypedArray);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Aggregate per-cell expression profiles for each group of cells.\n * This is typically used to summarize data into per-cluster expression profiles for easier inspection.\n *\n * @param {ScranMatrix} x - Some expression matrix, typically containing normalized log-expression values.\n * @param {Int32Array|Int32WasmArray} groups - Array containing group IDs for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.average=null] - Whether to compute the average within each group for each statistic.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {AggregateAcrossCellsResults} Object containing the aggregation results.\n */\nexport function aggregateAcrossCells(x, groups, options = {}) {\n    const { average = false, numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n    var group_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        output = gc.call(\n            module => module.aggregate_across_cells(x.matrix, group_data.offset, average, nthreads),\n            AggregateAcrossCellsResults \n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(group_data);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper around the marker scoring results on the Wasm heap, typically produced by {@linkcode scoreMarkers}.\n * @hideconstructor\n */\nexport class ScoreMarkersResults {\n    #id;\n    #results;\n    #has_median;\n    #has_max;\n\n    constructor(id, raw, has_median, has_max) {\n        this.#id = id;\n        this.#results = raw;\n        this.#has_median = has_median;\n        this.#has_max = has_max;\n    }\n\n    /**\n     * @return {number} Number of groups in the results.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean expression for the requested group in the requested block.\n     */\n    mean(group, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.mean(group), copy);\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the proportion of cells with detectable expression for the requested group in the requested block.\n     */\n    detected(group, options = {}) {\n        const { copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        return utils.possibleCopy(this.#results.detected(group), copy);\n    }\n\n    #check_forbidden(summary) {\n        if ((summary == \"maximum\" && !(this.#has_max)) || (summary == \"median\" && !(this.#has_median))) {\n            throw new Error(\"summary type '\" + summary + \"' not available\");\n        }\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the Cohen's d values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * If the relevant options are set in {@linkcode scoreMarkers}, `\"maximum\"` and `\"median\"` are also supported.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized Cohen's d for the comparisons between `group` and all other groups.\n     */\n    cohensD(group, options = {}) {\n        const { summary = \"mean\", copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        this.#check_forbidden(summary);\n        return utils.possibleCopy(wasm.call(_ => this.#results.cohens_d(group, summary)), copy);\n    }\n\n    /**\n     * AUCs are only computed if `computeAuc = true` in {@linkcode scoreMarkers}.\n     * If `false`, this method will throw an error.\n     *\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the AUCs of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * If the relevant options are set in {@linkcode scoreMarkers}, `\"maximum\"` and `\"median\"` are also supported.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized AUC for the comparisons between `group` and all other groups.\n     */\n    auc(group, options = {}) {\n        const { summary = \"mean\", copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        this.#check_forbidden(summary);\n        return utils.possibleCopy(wasm.call(_ => this.#results.auc(group, summary)), copy);\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the log-fold changes of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * If the relevant options are set in {@linkcode scoreMarkers}, `\"maximum\"` and `\"median\"` are also supported.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized delta-mean for the comparisons between `group` and all other groups.\n     * This can be interpreted as the log-fold change if log-expression values are used in {@linkcode scoreMarkers}.\n     */\n    deltaMean(group, options = {}) {\n        const { summary = \"mean\", copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        this.#check_forbidden(summary);\n        return utils.possibleCopy(wasm.call(_ => this.#results.delta_mean(group, summary)), copy);\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the delta-detected values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * If the relevant options are set in {@linkcode scoreMarkers}, `\"maximum\"` and `\"median\"` are also supported.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized delta-detected for the comparisons between `group` and all other groups.\n     */\n    deltaDetected(group, options = {}) {\n        const { summary = \"mean\", copy = true, ...others } = options;\n        utils.checkOtherOptions(others);\n        this.#check_forbidden(summary);\n        return utils.possibleCopy(wasm.call(_ => this.#results.delta_detected(group, summary)), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Score genes as potential markers for each group of cells.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform comparisons within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {number} [options.threshold=0] - Threshold on the magnitude of differences between groups, used when computing Cohen's d and AUC.\n * Large positive values favor markers with large differences over those with low variance.\n * For log-expression values in `x`, this can be interpreted as a minimum log-fold change.\n * @param {boolean} [options.computeAuc=true] - Whether to compute the AUCs as an effect size.\n * This can be set to `false` for greater speed and memory efficiency.\n * @param {boolean} [options.computeMedian=false] - Whether to compute the median effect sizes across all pairwise comparisons for each group.\n * This can be used as a more robust/less sensitive alternative to the mean.\n * @param {boolean} [options.computeMaximum=false] - Whether to compute the maximum effect size across all pairwise comparisons for each group.\n * This could be used to find uniquely downregulated genes.\n *\n * @return {ScoreMarkersResults} Object containing the marker scoring results.\n */\nexport function scoreMarkers(x, groups, options = {}) {\n    const { block = null, threshold = 0, computeAuc = true, computeMedian = false, computeMaximum = false , numberOfThreads = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    var output;\n    var block_data;\n    var group_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.score_markers(x.matrix, group_data.offset, use_blocks, bptr, threshold, computeAuc, computeMedian, computeMaximum, nthreads),\n            ScoreMarkersResults,\n            computeMedian,\n            computeMaximum\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(group_data);\n    }\n\n    return output;\n}\n\n/**\n * Choose the top marker genes, typically from the statistics from {@linkcode scoreMarkers}.\n *\n * @param {Float64Array} stats - Array of length equal to the number of genes, containing marker statistics from, e.g., {@linkcode scoreMarkers#cohensD ScoreMarkers.cohensD}.\n * @param {number} number - Number of top markers to report.\n * @param {object} [options={}] Further options.\n * @param {boolean} [options.useLargest=true] - Whether to choose the genes with the largest values in `stats`.\n * If `false`, the smallest values are chosen instead.\n * @param {?number} [options.threshold=null] - Threshold to apply to the statistics in `stats`.\n * If provided, genes with smaller (if `useLargest = true`) or larger values (otherwise) will not be chosen, even if they are among the top `number` genes.\n *\n * @return {Array} Array of indices specifying the top markers according to their `stats`.\n */\nexport function chooseTopMarkers(stats, number, options = {}) {\n    let { useLargest = true, threshold = null, ...others } = options;\n    utils.checkOtherOptions(others);\n\n    let output = [];\n    if (number == 0) {\n        return output;\n    } else if (number >= stats.length) {\n        for (var i = 0; i < stats.length; i++) {\n            output.push(i);\n        }\n        return output;\n    }\n\n    let copy = new Float64Array(stats);\n    copy.sort();\n\n    if (useLargest) {\n        let actual_threshold = copy[copy.length - number];\n        if (threshold !== null) {\n            actual_threshold = Math.max(actual_threshold, threshold);\n        }\n        stats.forEach((x, i) => {\n            if (x >= actual_threshold) {\n                output.push(i);\n            }\n        });\n\n    } else {\n        let actual_threshold = copy[number - 1];\n        if (threshold !== null) {\n            actual_threshold = Math.min(actual_threshold, threshold);\n        }\n        stats.forEach((x, i) => {\n            if (x <= actual_threshold) {\n                output.push(i);\n            }\n        });\n    }\n\n    return output;\n}\n","import * as methods from \"./file.js\";\nimport * as utils from \"./utils.js\";\nimport * as areal from \"./abstract/realize.js\";\n\n/**\n * Choose a temporary file path on the system's default temporary directory (Node.js) or on the virtual file system (browser).\n * This can be used to enable environment-agnostic creation of temporary files.\n *\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.extension=\"\"] - File extension to use for any temporary file that might be created.\n *\n * @return {string} Temporary file path.\n */\nexport function chooseTemporaryPath(options = {}) {\n    const { extension = \"\", ...others } = options;\n    utils.checkOtherOptions(others);\n    return areal.temp(\"temp_\", extension);    \n}\n\n/**\n * Realize a file so that it can be read by **scran.js** functions across both Node.js and browsers.\n *\n * @param {string|Uint8Array} file - In general, a Uint8Array buffer containing the file contents.\n * For Node.js, this may also be a string containing a path to a file.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.extension=\"\"] - File extension to use for any temporary file that might be created.\n *\n * @return {Object} Object with the following properties:\n *\n * - `path`: a string containing the path to the file on the local filesystem (Node.js) or virtual file system (browsers).\n *   For Node.js, `file` is returned directly if it is already a path;\n *   otherwise, a new file will be created in the system's default temporary directory.\n * - `flush`: a function to be called to remove any temporary file created by this function.\n *   For Node.js, this will be a no-op if `file` is already a path. \n */\nexport function realizeFile(file, options = {}) {\n    const { extension = \"\", ...others } = options;\n    utils.checkOtherOptions(others);\n\n    if (typeof file == \"string\") {\n        return areal.handleString(file);\n    }\n\n    let tmppath = chooseTemporaryPath({ extension: extension });\n    methods.writeFile(tmppath, file);\n    return { \n        path: tmppath, \n        flush: () => methods.removeFile(tmppath) \n    };\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPca`](https://kanaverse.github.io/scran.js/global.html#runPca) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized ADT matrix,\n     * available after running {@linkcode AdtPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing default parameters,\n     * see the `parameters` argument in {@linkcode AdtPcaState#compute compute} for details.\n     */\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} [parameters.num_pcs] - Number of PCs to return.\n     * @param {string} [parameters.block_method] - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"project\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        parameters = utils.defaultizeParameters(parameters, AdtPcaState.defaults());\n        this.changed = false;\n\n        // For back-compatibility:\n        if (parameters.block_method == \"weight\") {\n            parameters.block_method = \"project\";\n        }\n\n        if (this.#norm.changed || parameters.num_pcs !== this.#parameters.num_pcs || parameters.block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPca(mat, { numberOfPCs: parameters.num_pcs, block: block, blockMethod: parameters.block_method });\n\n                this.changed = true;\n            }\n\n        }\n\n        this.#parameters = parameters;\n        return;\n    }\n}\n"],"names":["writeFile","path","buffer","afile","readFile","removeFile","existsFile","check_shape","x","shape","length","full_length","reduce","a","b","Error","Array","ArrayBuffer","isView","guess_shape","Object","constructor","forbid_strings","isArray","x0","_encoding","WeakMap","_length","H5StringType","encoding","_classPrivateFieldInitSpec","_classPrivateFieldSet","this","_classPrivateFieldGet","findMaxStringLength","fields","wasm","module","get_max_str_len","get_max_str_len_compound","_defineProperty","_code","_levels","H5EnumType","code","levels","collected","i","_members","H5CompoundType","members","downcast_type","type","mode","key","val","entries","push","name","value","code_type","converted","upcast_type","upgrade_type","maxStringLength","variableLength","convert_enums","ulevels","Set","from","sort","mapping","forEach","l","map","y","_file","_name","_attributes","H5Base","file","attributes","set_attributes","readAttribute","attr","output","values","LoadedH5Attr","string_values","numeric_values","slice","compound_values","delete","writeAttribute","options","arguments","undefined","others","_objectWithoutProperties","_excluded","utils","conv","guessed","type2","create_string_hdf5_attribute","write_string_hdf5_attribute","create_enum_hdf5_attribute","write_enum_hdf5_attribute","offset","free","create_compound_hdf5_attribute","write_compound_hdf5_attribute","create_numeric_hdf5_attribute","write_numeric_hdf5_attribute","className","_children","_attributes2","_H5Group_brand","WeakSet","H5Group","newlyCreated","_excluded2","super","_classPrivateMethodInitSpec","H5GroupDetails","children","open","new_name","_assertClassBrand","_child_name","call","H5DataSet","createGroup","create_hdf5_group","createDataSet","compression","chunks","_excluded3","create_string_hdf5_dataset","create_enum_hdf5_dataset","create_compound_hdf5_dataset","create_numeric_hdf5_dataset","writeDataSet","handle","_objectSpread","write","child","H5File","createNewHdf5File","create_hdf5_file","_shape","_type","_values","_levels2","load","_excluded4","H5DataSetDetails","LoadedH5DataSet","loaded","cache","_excluded5","write_numeric_hdf5_dataset","write_string_hdf5_dataset","write_enum_hdf5_dataset","write_compound_hdf5_dataset","checkSubsetLength","subset","filter","targetLength","targetName","sum","fillSubset","input","s","j","subsetWasmArray","len","createWasmArray","space","barr","array","guessFeatures","features","forceTaxonomy","ntotal","early_threshold","Math","ceil","format","payload","confidence","unique_features","f","add","ensembl_human","ensembl_mouse","ensembl_6239","ensembl_10116","ensembl_9541","ensembl_7227","ensembl_7955","ensembl_9598","symbol_human","symbol_mouse","symbol_6239","symbol_7955","hsid","mmid","any_ens","match","startsWith","species","highest","async","defaultDownload","u","res","fetch","ok","String","resp","status","Uint8Array","arrayBuffer","_download","_url","_prefix","_path","_manifest","GypsumNavigator","prefix","url","download","get","asBuffer","full_path","encodeURIComponent","exists","manuri","raw_man","dec","TextDecoder","JSON","parse","decode","clean","localPath","_id","GypsumDataset","bakana","setDownloadFun","fun","previous","_downloadFun","_","project","asset","version","abbreviate","id","serialize","TextEncoder","encode","stringify","files","unserialize","args","setOptions","data","close","_results","ClusterMultilevelResults","raw","numberOfLevels","num_levels","bestLevel","best_level","modularity","level","membership","copy","gc","_id2","_results2","ClusterWalktrapResults","numberOfMergeSteps","num_merge_steps","at","_id3","_results3","ClusterLeidenResults","clusterGraph","method","multiLevelResolution","leidenResolution","leidenModularityObjective","walktrapSteps","_excluded6","cluster_multilevel","graph","cluster_walktrap","cluster_leiden","e","FS","unlink","analyzePath","GlobalsInterface","contents","to","mkdir","h5open","h5close","h5create","h5finish","failed","SuggestAdtQcFiltersResults","detected","subsetSum","subset_sum","numberOfSubsets","num_subsets","numberOfBlocks","num_blocks","isBlocked","metrics","block","asTypedArray","PerCellAdtQcMetricsResults","internal","suggestAdtQcFilters","numberOfMADs","minDetectedDrop","use_blocks","bptr","suggest_adt_qc_filters","results","emptySuggestAdtQcFiltersResults","initializeSparseMatrixFromHdf5","forceInteger","forceSparse","layered","subsetRow","subsetColumn","details","arr","extract_hdf5_matrix_details","vals","rows","columns","integer","extractHdf5MatrixDetails","initializeSparseMatrixFromHdf5Dataset","initializeSparseMatrixFromHdf5Group","processSubsets","FUN","wasm_row","wasm_column","row_offset","row_length","use_row_subset","col_offset","col_length","use_col_subset","ScranMatrix","initializeMatrixFromHdf5Dataset","transposed","initialize_from_hdf5_dense","numberOfRows","numberOfColumns","byRow","indices","indptr","initialize_from_hdf5_sparse","presplitFactor","factor","by","step_name","_index","_parameters","_reloaded","_worker_id","_ready","_run","_TsneState_brand","TsneState","index","parameters","reloaded","neighbor_module","changed","worker","aworkers","worker_id","ready","vizutils","fetchParameters","fetchResults","iterations","defaults","perplexity","animate","compute","same_neighbors","Promise","resolve","_core","then","reneighbor","nn_out","k","scran","zero$1","buf","LITERALS$1","L_CODES$1","D_CODES$1","MAX_BITS$1","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","_dist_code","_length_code","MAX_MATCH$1","base_length","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","static_l_desc","static_d_desc","static_bl_desc","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","w","pending_buf","pending","send_bits","bi_valid","bi_buf","send_code","c","tree","bi_reverse","gen_codes","bl_count","next_code","bits","n","init_block","dyn_ltree","dyn_dtree","bl_tree","END_BLOCK","opt_len","static_len","sym_next","matches","bi_windup","smaller","m","depth","_n2","_m2","pqdownheap","v","heap","heap_len","compress_block","ltree","dtree","lc","extra","sx","sym_buf","build_tree","desc","stree","node","heap_max","gen_bitlen","base","h","xbits","overflow","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","_tr_stored_block$1","stored_len","last","set","window","subarray","_tr_flush_block_1","_tr_flush_block$1","opt_lenb","static_lenb","max_blindex","strm","data_type","block_mask","detect_data_type","l_desc","d_desc","bl_desc","BL_CODES$1","build_bl_tree","strategy","send_all_trees","lcodes","dcodes","blcodes","rank","trees","_tr_init","tr_static_init","LENGTH_CODES$1","_tr_stored_block","_tr_flush_block","_tr_tally","_tr_tally$1","sym_end","_tr_align","STATIC_TREES","bi_flush","adler32_1","adler32","adler","pos","s1","s2","crcTable","Uint32Array","makeTable","table","crc32_1","crc32","crc","t","end","messages","constants$2","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","Z_NO_FLUSH$2","Z_FULL_FLUSH$1","Z_FINISH$3","Z_BLOCK$1","Z_OK$3","Z_STREAM_END$3","Z_STREAM_ERROR$2","Z_DATA_ERROR$2","Z_BUF_ERROR$1","Z_DEFAULT_COMPRESSION$1","Z_DEFAULT_STRATEGY$1","Z_DEFLATED$2","MAX_MATCH","MIN_LOOKAHEAD","INIT_STATE","BUSY_STATE","FINISH_STATE","err","errorCode","msg","zero","slide_hash","p","wsize","w_size","hash_size","head","prev","HASH","HASH_ZLIB","hash_shift","hash_mask","flush_pending","state","avail_out","pending_out","next_out","total_out","flush_block_only","block_start","strstart","put_byte","putShortMSB","read_buf","start","size","avail_in","next_in","wrap","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","_w_size","more","str","window_size","insert","ins_h","deflate_stored","flush","left","have","min_block","pending_buf_size","used","high_water","deflate_fast","hash_head","bflush","match_length","max_lazy_match","MIN_MATCH","deflate_slow","max_insert","prev_match","match_available","Config","good_length","max_lazy","nice_length","max_chain","func","configuration_table","DeflateState","gzhead","gzindex","last_flush","w_bits","hash_bits","Uint16Array","HEAP_SIZE","MAX_BITS","lit_bufsize","deflateStateCheck","deflateResetKeep","deflateReset","ret","deflateInit2","windowBits","memLevel","deflate_1$2","deflateInit","deflateSetHeader","deflate","deflate$2","old_flush","header","level_flags","text","hcrc","comment","time","os","beg","gzhead_extra","charCodeAt","bstate","deflate_huff","deflate_rle","deflateEnd","deflateSetDictionary","dictionary","dictLength","tmpDict","avail","next","deflateInfo","_has","obj","prototype","hasOwnProperty","common","sources","source","shift","TypeError","result","chunk","STR_APPLY_UIA_OK","fromCharCode","apply","__","_utf8len","q","strings","c2","m_pos","str_len","buf_len","buf2string","max","out","utf16buf","c_len","buf2binstring","utf8border","zstream","toString$1","toString","Z_NO_FLUSH$1","Z_FINISH$2","Z_OK$2","Z_STREAM_END$2","Z_DEFLATED$1","Deflate$1","chunkSize","opt","gzip","ended","dict","_dict_set","deflate$1","deflator","flush_mode","_flush_mode","onData","onEnd","deflate_1$1","Deflate","deflateRaw","constants","BAD$1","inffast","_in","_out","dmax","whave","wnext","s_window","hold","lcode","dcode","lmask","dmask","here","op","from_source","lencode","distcode","lenbits","distbits","top","dolen","dodist","sane","MAXBITS","lbase","lext","dbase","dext","inftrees","inflate_table","lens","lens_index","codes","table_index","work","opts","incr","fill","low","mask","sym","min","root","curr","drop","huff","offs","here_bits","here_op","here_val","Z_FINISH$1","Z_OK$1","Z_STREAM_END$1","Z_NEED_DICT$1","Z_STREAM_ERROR$1","Z_DATA_ERROR$1","Z_MEM_ERROR$1","HEAD","DICT","TYPE","TYPEDO","COPY_","LEN_","LEN","CHECK","BAD","zswap32","InflateState","havedict","flags","check","total","wbits","ncode","nlen","ndist","lendyn","distdyn","back","was","inflateStateCheck","inflateResetKeep","Int32Array","inflateReset","inflateReset2","inflateInit2","lenfix","distfix","virgin","fixedtables","updatewindow","src","inflate_1$2","inflateInit","inflate","inflate$2","put","last_bits","last_op","last_val","hbuf","order","inf_leave","done","xflags","extra_len","inflateEnd","inflateGetHeader","inflateSetDictionary","dictid","inflateInfo","gzheader","Inflate$1","inflate$1","inflator","last_avail_out","next_out_utf8","tail","utf8str","join","inflate_1$1","Inflate","inflateRaw","ungzip","Inflate_1","inflate_1","ungzip_1","_cache","_SnnGraphClusterState_brand","SnnGraphClusterState","neighbors","clusters","fetchClusters","_valid","scheme","algorithm","multilevel_resolution","leiden_resolution","walktrap_steps","run_me","_compute_neighbors","_compute_graph","_compute_clusters","fetchIndex","SuggestCrisprQcFiltersResults","maxValue","max_value","PerCellCrisprQcMetricsResults","suggestCrisprQcFilters","suggest_crispr_qc_filters","emptySuggestCrisprQcFiltersResults","_correct","_KmeansClusterState_brand","KmeansClusterState","correct","correct_module","pcs","fetchCorrected","numberOfDims","fetchNumberOfDimensions","numberOfCells","fetchNumberOfCells","initMethod","subsetSums","qc","mat","Float64Array","keep","fetchKeep","sums","fetchMetrics","freeCache","object","defaultizeParameters","indexOf","changedParametersIllegal","xskip","yskip","changedParameters","xnull","ynull","xarr","yarr","xkeys","keys","ykeys","allocateCachedArray","reallocate","candidate","owner","findValidUpstreamStates","states","to_use","valid","checkIndices","guessFeatureTypes","genes","rn","rowNames","row_names","columnNames","column","subsetInvalidFactors","arrays","N","retain","invalid","transformed","action","placeholder","ids","num_invalid","counter","new_x","setterTarget","inPlace","generics","deepCopy","cloneField","Map","_filter","_norm","CrisprPcaState","norm","filter_module","norm_module","fetchPCs","block_method","num_pcs","fetchFilteredBlock","fetchNormalizedMatrix","numberOfPCs","blockMethod","registerCallback","callback","onmessage","sendMessage","message","transfer","postMessage","terminateWorker","terminate","scaleByNeighbors","embeddings","embed_ptrs","index_ptrs","holding_weights","approximate","weights","numberOfThreads","local_buffer","nthreads","nembed","embed_arr","BigInt","ndims","total_ndim","ND","floor","buildNeighborSearchIndex","weight_offset","use_weights","index_arr","$$","ptr","total_len","scale_by_neighbors","reindexSetsForAllGenes","geneMapping","setsForGenes","remapped","gesel_gene","_inputs","_RnaQualityControlState_brand","RnaQualityControlState","inputs","inputs_module","filters","metrics_buffer","keep_buffer","fetchCountMatrix","has","bioc","fetchFilters","guess_ids","gene_id_column","use_reference_mito","gene_id_type","mito_prefix","filter_strategy","nmads","sum_threshold","detected_threshold","mito_threshold","configureFeatureParameters","guesses","best_key","best","toUpperCase","_mito_lists","setDownload","automatic","gene_id_column2","species2","gene_id_type2","guessRnaFeatureTypes","backcomp","gene_info","fetchFeatureAnnotations","subsets","lists","_acquire_reference","sub_arr","lower_mito","toLowerCase","fetchBlock","block_levels","fetchBlockLevels","subsetProportion","feature_type","mito_lists","target","baseUrl","lines","rutils","_RnaQualityControlState","Uint8WasmArray","WasmArray","Int8WasmArray","Int8Array","Uint16WasmArray","Int16WasmArray","Int16Array","Uint32WasmArray","Int32WasmArray","BigUint64WasmArray","BigUint64Array","BigInt64WasmArray","BigInt64Array","Float32WasmArray","Float32Array","Float64WasmArray","choices","stringToClass","Annotated","metadata","list","_metadata","setMetadata","cutils","$setMetadata","_bioconductor_CLONE","_ref","buildIntervalTree","rank2position","startRanks","endRanks","positions","fillIndex","new_starts","new_ends","idx","convertPositionToRank","create_node","recursive_build_tree","one_past_the_end","left_bound","right_bound","center","start_overlaps_sorted","overlaps","end_overlaps_sorted","left_node","right_node","current","queryIntervalTree","recursive_query_tree","overlap","DataFrame","ann","columnOrder","_numberOfRows","_rowNames","_columns","il","cause","names","entry","hasColumn","numberOfEntries","removeColumn","$removeColumn","setColumn","$setColumn","setColumnNames","setNames","$setColumnNames","setRowNames","$setRowNames","sliceColumns","$sliceColumns","_bioconductor_LENGTH","_bioconductor_SLICE","new_numberOfRows","allowView","new_columns","new_rowNames","_bioconductor_COMBINE","objects","all_c","all_n","all_l","yi","parallelCombine","_ref2","flexibleCombineRows","ckeys","corder","cnames","copies","dummy","reorder","initializeSparseMatrixFromRds","initialize_from_rds","_matrix_file","_feature_file","_barcode_file","_dimensions","_raw_features","_raw_cells","_options","_TenxMatrixMarketDataset_brand","TenxMatrixMarketDataset","matrixFile","featureFile","barcodeFile","clear","featureTypeRnaName","featureTypeAdtName","featureTypeCrisprName","primaryRnaFeatureIdColumn","primaryAdtFeatureIdColumn","primaryCrisprFeatureIdColumn","_dump_summary","summary","_features","_cells","futils","previewPrimaryIds","preview","_feature_type_mapping","_primary_mapping","is_gz","endsWith","content","cells","primary_ids","feat","barcode","annotations","mtx","_fetch_dimensions","headers","NR","fname","parsed","eutils","symb","types","bname","diff","RNA","ADT","CRISPR","_matrix","clone","matrix","nrow","ncol","row","tmp","isSparse","sparse","stream","reject","peek","maxProportion","denom","maxIndex","max_index","num_cells","perCellCrisprQcMetrics","per_cell_crispr_qc_metrics","perplexityToNeighbors","perplexity_to_k","matrix_sums","dim","columnSums","_UmapState_brand","UmapState","num_epochs","num_neighbors","min_dist","_reference","LoadedLabelCellsReference","reference","numberOfSamples","num_samples","numberOfFeatures","num_features","numberOfLabels","num_labels","loadLabelCellsReferenceFromBuffers","ranks","markers","labels","matbuf","markbuf","labbuf","load_singlepp_reference","_reference2","TrainedLabelCellsReference","expected_features","expectedNumberOfFeatures","intersectFeatures","testFeatures","referenceFeatures","registry","tkeep","rkeep","xid","trainLabelCellsReference","loadedReference","test_id_buffer","ref_id_buffer","intersection","test","train_singlepp_reference","LabelCellsResults","predicted","scoreForCell","score_for_sample","scoreForLabel","score_for_label","delta","labelCells","quantile","tempmat","wa","init","run_singlepp","_id4","_integrated","IntegratedLabelCellsReferences","integrated","numberOfReferences","num_references","integrateLabelCellsReferences","loadedReferences","trainedReferences","_excluded7","interlen_arr","test_id_ptr_arr","ref_id_ptr_arr","loaded_arr","trained_arr","test_id_arr","ref_id_arr","nrefs","la","ta","tia","ria","ia","integrate_singlepp_references","_id5","IntegrateLabelCellsResults","_excluded8","_excluded9","scoreForReference","_excluded0","score_for_reference","_excluded1","integrateLabelCells","assigned","_excluded10","assigned_ptrs","assigned_arrs","assigned_ptr_arr","integrate_singlepp","reindexGenesForAllSets","genesForSets","reverse_mapping","found","new_sets","gene","fetchGenesForAllSets","by_symbol","by_symbol_lower","mapGenesByIdentifier","lowerCase","host","sfound","tfound","_genes","fetchAllGenes","_qc","_AdtNormalizationState_brand","AdtNormalizationState","qc_module","sf_buffer","fetchFilteredMatrix","_raw_compute","fetchSizeFactors","remove_bias","raw_sf_buffer","nutils","raw_sf","sizeFactors","allowZeros","createBlock","ncells","other","sofar","old","GRanges","vec","seqnames","ranges","strand","elementMetadata","_seqnames","_ranges","_convertToInt8Array","_checkStrandedness","_strand","width","setSeqnames","$setSeqnames","setRanges","ir","$setRanges","setStrand","$setStrand","buildOverlapIndex","restrictToSeqnames","restrictToStrand","by_seqname","starts","ends","seqname_indices","seqname_strand","by_strand","Number","str_indices","olap","GRangesOverlapIndex","all_sn","all_rr","all_st","empty","query","ignoreStrand","my_results","allowed_strands","seq_index","sstr","locateVersusCache","right","left_small","bigg","biggversus","smal","rerun","cached","run","freeVersusResults","v2","computeVersusResults","matrices","lfc_threshold","compute_auc","new_block","modality","available","sub","modmat","threshold","computeAuc","computeClrm1Factors","priorCount","compute_clrm1_factors","randomColor","seed","colorDictionary","loadColorBounds","colorRanges","parseInt","stringToInteger","H","S","totalColors","colors","color","setFormat","pickHue","pickSaturation","pickBrightness","hue","randomWithin","hueRange","getRealHueRange","step","getHueRange","luminosity","saturationRange","getSaturationRange","sMin","sMax","bMin","getMinimumBrightness","bMax","hsv","HSVtoHSL","hsl","hslColor","alpha","random","HSVtoRGB","rgbColor","HSVtoHex","lowerBounds","getColorInfo","v1","colorInput","number","HexToHSB","colorName","range","golden_ratio","r","rnd","rgb","componentToHex","hex","defineColor","brightnessRange","h_i","g","replace","red","substr","green","blue","cMax","saturation","round","string","MAX_SAFE_INTEGER","colorHue","isNaN","factory","exports","promises","processing","gene_download","resolved","all","gene_data","decompressLines","processed","split","_qc_states","_CellFilteringState_brand","CellFilteringState","qc_states","rna_qc_module","adt_qc_module","crispr_qc_module","block_buffer","_raw_compute_matrix","_raw_compute_block","use_rna","use_adt","use_crispr","in_use","find_usable_upstream_states","first","keep_arr","view","applyFilter","undoFilter","filtered_ncols","bcache","_sets","fetchAllSets","sres","_collections","reference_download","fetchAllCollections","set_data","collection","_pca_states","CombineEmbeddingsState","pca_states","rna_pca_module","adt_pca_module","crispr_pca_module","combined_buffer","fetchCombined","total_dims","rna_weight","adt_weight","crispr_weight","find_nonzero_upstream_states","weight_arr","curpcs","principalComponents","upstream","createTsneWorker","Worker","URL","createUmapWorker","BuildNeighborSearchIndexResults","num_obs","num_dim","pptr","RunPcaResults","byteOffset","build_neighbor_index","FindNearestNeighborsResults","truncate","_numberToTruncate","numberOfNeighbors","runs","distances","nkeep","run_data","ind_data","dist_data","NeighborResults","findNearestNeighbors","find_nearest_neighbors","create_solo_default_object","reportFeatures","rawFeatures","typeField","by_type","renameByModality","indexToNames","featureTypeMapping","splitByModality","findUnnamedDefault","featureTypeDefault","multiple","extractSplitPrimaryIds","primary","col","extractPrimaryIdColumn","new_default","splitScranMatrixAndFeatures","current_features","type_keys","skip_subset","is_subset_noop","replacement","store","rename","modality_features","extractPrimaryIds","extractRemappedPrimaryIds","_DenseMatrix_brand","_extractor","nprimary","nsecondary","primaryMajor","_inserter","_primarySlicer","primarySlice","fullPrimary","isPrimaryRange","primaryDim","secondarySlice","fullSecondary","isSecondaryRange","inSecondaryDim","outSecondaryDim","outputValues","_secondarySlicer","pi","inPrimary","outPrimary","in_offset","out_offset","si","columnMajor","_numberOfColumns","_columnMajor","isColumnMajor","setValues","$setValues","setRow","$setRow","_bioconductor_NUMBER_OF_ROWS","_bioconductor_NUMBER_OF_COLUMNS","_bioconductor_SLICE_2D","full_rows","is_row_range","new_rows","full_columns","is_column_range","new_values","_combiner","primaryFun","secondaryFun","isPrimaryMajor","secondaryName","num_primary","num_secondary","primary_major","used_primary","cur_primary","out_offset2","view_offset","_bioconductor_COMBINE_ROWS","combined","_bioconductor_COMBINE_COLUMNS","CrisprQualityControlState","max_threshold","scoreGsdecon","scale","blockWeightPolicy","temp","feature_data","block_data","score_gsdecon","scores","normalizeCounts","log","allowNonFinite","sf_data","center_size_factors","normalize_counts","centerSizeFactors","toLowestBlock","subsetRows","xcopy","wasm_indices","row_subset","subsetColumns","column_subset","splitRows","singleNull","createMultiMatrix","stuff","tkeys","chosen","consec","MultiMatrix","FeatureSelectionState","fetchSortedResiduals","sorted_residuals","span","residuals","extension","tmppath","Date","methods","handleString","mnnCorrect","robustIterations","robustTrim","referencePolicy","x_data","mnn_correct","IRanges","_start","_width","setStart","$setStart","setWidth","$setWidth","IRangesOverlapIndex","all_s","all_w","_tree","load_data_frame","info","navigator","colnames","rownames","delim","data_frame","ghandle","hdf5_data_frame","group","chandle","dhandle","new_colnames","nest_meta","resource","console","warn","dimensions","extract_all_features","extract_features","se_meta","summarized_experiment","row_path","row_data","full_meta","single_cell_experiment","alt","alternative_experiments","alt_meta","extract_all_assay_names","extract_assay_names","ass","assays","extract_assay","meta","assay","extract_assay_raw","asspath","assmeta","schema","is_dense","is_sparse","hdf5_sparse_matrix","hdf5_dense_array","dataset","hdf5_delayed_array","abs","ghandle2","ghandle3","sf","ahandle","extract_logcounts","extract_other_data","other_path","othermeta","ofile","unpacked","json_simple_list","extract_list_data_internal","NaN","_navigator","_metadata_cache","MetadataCacheWrapper","nav","_navigator2","_AbstractArtifactdbDataset_brand","AbstractArtifactdbDataset","_reset_local_caches","rnaCountAssay","adtCountAssay","crisprCountAssay","rnaExperiment","adtExperiment","crisprExperiment","modality_assay_names","fmapping","altnames","exp","altmap","alts","col_path","column_data","_path2","_navigator3","_raw_features2","_raw_cells2","_raw_other","_options2","_AbstractArtifactdbResult_brand","AbstractArtifactdbResult","_reset_local_caches2","primaryAssay","isPrimaryNormalized","reducedDimensionNames","_features2","_cells2","_other","reduced_dimension_names","other_metadata","reddim_meta","reduced_dimensions","_get_all_reddim_names","reddims","redmap","redmeta","dims","redcontents","realized","acquired","d","curassay","curnormalized","normed","other_data","rd_meta","computePerCellQcMetrics","subset_offsets","tmp_subsets","nsubsets","offset_offset","offset_arr","define","self","document","IS_PAPA_WORKER","o","_handle","_finished","_completed","_halted","_input","_baseIndex","_partialLine","_rowCount","_nextChunk","isFirstChunk","_completeResults","errors","streamer","_config","parseChunk","skipFirstNLines","newline","quoteChar","guessLineEndings","U","beforeFirstChunk","paused","aborted","cursor","substring","workerId","WORKER_ID","finished","concat","complete","_sendError","error","RemoteChunkSize","_readChunk","_chunkLoaded","XMLHttpRequest","withCredentials","onload","onerror","_chunkError","downloadRequestBody","downloadRequestHeaders","setRequestHeader","send","readyState","responseText","getResponseHeader","lastIndexOf","statusText","LocalChunkSize","FileReader","webkitSlice","mozSlice","FileReaderSync","readAsText","pause","resume","on","_streamData","_streamEnd","_streamError","_checkIsFinished","_streamCleanUp","removeListener","pow","skipEmptyLines","trim","DefaultDelimiter","splice","transformHeader","dynamicTypingFunction","dynamicTyping","parseFloat","transform","abort","delimiter","RECORD_SEP","UNIT_SEP","E","comments","successful","bestDelimiter","delimitersToGuess","getCharIndex","setTimeout","RegExp","P","C","O","I","A","T","fastMode","D","L","F","escapeChar","BAD_DELIMITERS","z","M","R","create","linebreak","truncated","renamedHeaders","userError","userStep","userChunk","userComplete","WORKERS_SUPPORTED","NODE_STREAM_INPUT","readable","read","File","webkitURL","BLOB_URL","createObjectURL","Blob","config","unparse","quotes","escapeFormulae","charAt","BYTE_ORDER_MARK","Parser","ParserHandle","NetworkStreamer","FileStreamer","StringStreamer","ReadableStreamStreamer","jQuery","fn","each","prop","inputElem","instanceConfig","extend","before","reason","harvest_matrices","cbind","mat_ptrs","rbind","cbindWithNames","ordered_intersection","remapping","tmp_subset","tmp_sliced","survivors","sarray","AdtQualityControlState","tag_id_column","igg_prefix","min_detected_drop","igg_threshold","tag_info","lower_igg","_configureFeatureParameters","latest","_NeighborIndexState_brand","NeighborIndexState","ModelGeneVariancesResults","means","variances","fitted","modelGeneVariances","model_gene_variances","convertToFactor","failure","asWasmArray","warned","isFinite","existing","every","oldlevels","resetLevels","dropUnusedLevels","uniq","uniq_arr","newLevels","oldLevels","conversion","subsetFactor","getTypeOf","uint8array","compressedSize","uncompressedSize","compressedContent","getContentWorker","pipe","uncompressWorker","streamInfo","data_length","getCompressedWorker","withStreamInfo","createWorkerFrom","compressWorker","STORE","magic","DEFLATE","base64","binary","dir","createFolders","date","compressionOptions","unixPermissions","dosPermissions","lie","_pako","_pakoAction","_pakoOptions","inherits","processChunk","_createPako","transformTo","cleanUp","pako","utf8encode","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCFullYear","getUTCMonth","getUTCDate","B","fileRecord","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","bytesWritten","zipComment","zipPlatform","encodeFileName","streamFiles","accumulate","contentBuffer","dirRecords","currentSourceOffset","entriesCount","currentFile","_sources","percent","openedSource","closedSource","DATA_DESCRIPTOR","CENTRAL_DIRECTORY_END","prepareNextSource","isPaused","registerPrevious","generatedError","lock","generateWorker","platform","_compressWorker","loadAsync","support","external","decompressed","checkCRC32","optimizedBinaryString","decodeFileName","utf8decode","isNode","isStream","prepareContent","fileNameStr","fileCommentStr","unsafeOriginalName","_upstreamEnded","_bindStream","_stream","Readable","_helper","emit","_read","Buffer","newBufferFrom","allocBuffer","alloc","isBuffer","folder","remove","generate","generateInternalStream","mimeType","checkSupport","generateAsync","generateNodeStream","toNodejsStream","byteAt","lastIndexOfSignature","readAndCheckSignature","readData","checkOffset","checkIndex","setIndex","skip","readInt","readString","readDate","UTC","ZIP64_CENTRAL_DIRECTORY_LOCATOR","ZIP64_CENTRAL_DIRECTORY_END","destType","propName","dataIsReady","_tickScheduled","_tickAndRepeat","delay","isFinished","_tick","extraStreamInfo","isLocked","_listeners","mergeStreamInfo","nodestream","_internalType","_outputType","_mimeType","newBlob","_worker","objectMode","arraybuffer","nodebuffer","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","leftOver","applyFromCharCode","Utf8DecodeWorker","Utf8EncodeWorker","stringifyByChunk","stringifyByChar","applyCanBeUsed","byteLength","pop","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","setImmediate","readAsArrayBuffer","setimmediate","loadOptions","checkSignature","reader","isSignature","readBlockEndOfCentral","diskNumber","diskWithCentralDirStart","centralDirRecordsOnThisDisk","centralDirRecords","centralDirSize","centralDirOffset","zipCommentLength","readBlockZip64EndOfCentral","zip64EndOfCentralSize","zip64ExtensibleData","readBlockZip64EndOfCentralLocator","diskWithZip64CentralDirStart","relativeOffsetEndOfZip64CentralDir","disksCount","readLocalFiles","localHeaderOffset","readLocalPart","handleUTF8","processAttributes","readCentralDir","zip64","readCentralPart","readEndOfCentral","prepareReader","isEncrypted","bitFlag","useUTF8","fileNameLength","fileName","compressionMethod","versionMadeBy","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","readExtraFields","parseZIP64ExtraField","fileComment","extraFields","findExtraFieldUnicodePath","findExtraFieldUnicodeComment","_data","_dataBinary","internalStream","_decompressWorker","nodeStream","MutationObserver","WebKitMutationObserver","createTextNode","observe","characterData","MessageChannel","createElement","onreadystatechange","parentNode","removeChild","documentElement","appendChild","port1","port2","global","queue","outcome","promise","onFulfilled","callFulfilled","otherCallFulfilled","onRejected","callRejected","otherCallRejected","finally","catch","race","immediate","assign","string2buf","Buf8","shrinkBuf","flattenChunks","binstring2buf","arraySet","setTyped","Buf16","Buf32","Z","last_lit","W","l_buf","d_buf","G","K","Y","X","V","J","getPrototypeOf","process","nextTick","importScripts","addEventListener","attachEvent","Function","clearImmediate","SimpleFile","_mode","_buffer","SuggestRnaQcFiltersResults","subset_proportion","PerCellRnaQcMetricsResults","suggestRnaQcFilters","suggest_rna_qc_filters","emptySuggestRnaQcFiltersResults","perCellRnaQcMetrics","subset_offset","compute_rna_qc_metrics","_RnaNormalizationState_brand","RnaNormalizationState","_snn_cluster","_kmeans_cluster","ChooseClusteringState","snn","kmeans","snn_module","kmeans_module","filterCells","_RangedSummarizedExperiment_brand","RangedSummarizedExperiment","se","rowRanges","ggr","_check_rowRanges","_rowRanges","setRowRanges","$setRowRanges","has_empty","has_ggr","gr","widths","rangeLengths","setElementMetadata","_rowData","initialize","localFile","scran_custom_nthreads","locateFile","import","loadScran","register","maximumThreads","get_error_message","wasmMemory","wasmArraySpace","perCellAdtQcMetrics","per_cell_adt_qc_metrics","_combined","BatchCorrectionState","combine_module","corrected","needs_correction","LENGTH","SLICE","COMBINE","total_LENGTH","position","CLONE","SPLIT","misc","_bioconductor_SPLIT","NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","SLICE_2D","COMBINE_ROWS","COMBINE_COLUMNS","extractHdf5Strings","summarizeArray","POSITIVE_INFINITY","NEGATIVE_INFINITY","guess_compression","astream","unpackText","txt","merge_bytes","leftovers","decoder","stream_callback","gz","readLines2","readTable2","ppp","size_left","promoteToNumber","as_num","opt1","opt2","ClusterKmeansResults","numberOfClusters","num_clusters","sizes","cluster_sizes","centers","clusterKmeans","initSeed","initVarPartSizeAdjust","initVarPartOptimize","refineMethod","refineLloydIterations","refineHartiganWongIterations","cluster_kmeans","delayedArithmetic","operation","along","vbuffer","margin","delayed_arithmetic_scalar","delayed_arithmetic_vector","delayedMath","logBase","delayed_math","transpose","createUint8WasmArray","createInt32WasmArray","createBigUint64WasmArray","createFloat64WasmArray","wasmifyArray","expected","chooseNumberOfThreads","threads","possibleCopy","view_class","matchOptions","toTypedArray","wasSupplied","checkOtherOptions","RdsObject","par","parent","RdsVector","attributeNames","mod","attribute_names","findAttribute","find_attribute","attribute","dispatch","load_attribute_by_index","load_attribute_by_name","RdsIntegerVector","numeric_vector","RdsBooleanVector","RdsDoubleVector","RdsStringVector","string_vector","RdsGenericVector","load_list_element","RdsS4Object","class_name","packageName","package_name","RdsNull","cons","tt","_obj","RdsDetails","formatVersion","format_version","writerVersion","writer_version","readerVersion","reader_version","readRds","parse_rds_from_file","parse_rds_from_buffer","_free_results","versus","_computeVersus","cache_info","left_index","right_index","new_clusters","leftfound","rightfound","_norm_states","_choice","MarkerDetectionState","norm_states","choice","rna_norm_module","adt_norm_module","crispr_norm_module","choice_module","changed_params","computeVersusCustom","computeVersus","_matrices","_groups","_group_levels","_block","_block_levels","_cache2","_parameters2","MarkerDetectionStandalone","normalized","groups","new_matrices","dump","fetchGroupLevels","_peekMatrices","_peekGroups","_peekBlock","setParameters","computeAll","initializeDenseMatrixFromDenseArray","val_data","initialize_dense_matrix_from_dense_array","hypergeometricTest","markersInSet","numberOfMarkers","geneSetSize","numberOfGenes","markersInSet_data","numberOfMarkers_data","geneSetSize_data","numberOfGenes_data","ntests","check_length","hypergeometric_test","_store","_ncols","new_matrix","verifyElementMetadata","numExpected","df","Vector","_elementMetadata","_names","$setElementMetadata","$setNames","all_em","fetchSetsForAllGenes","components","rotation","varianceExplained","variance_explained","totalVariance","total_variance","runPca","realizeMatrix","feat_data","use_feat","fptr","use_block","comp_as_resid","run_pca","_feat","RnaPcaState","feat_module","hvg_buffer","num_hvgs","sorted_resids","threshold_at","unsorted_resids","element","choose_hvgs","_scriptName","GROWABLE_HEAP_I8","HEAP8","updateMemoryViews","GROWABLE_HEAP_U8","HEAPU8","GROWABLE_HEAP_I16","HEAP16","GROWABLE_HEAP_U16","HEAPU16","GROWABLE_HEAP_I32","HEAP32","GROWABLE_HEAP_U32","HEAPU32","GROWABLE_HEAP_F64","HEAPF64","readyPromiseResolve","readyPromiseReject","readAsync","readBinary","Module","readyPromise","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","versions","ENVIRONMENT_IS_PTHREAD","moduleOverrides","thisProgram","quit_","toThrow","scriptDirectory","location","href","currentScript","xhr","responseType","response","credentials","bind","wasmModule","EXITSTATUS","HEAPF32","wasmBinary","ABORT","wasmPromiseResolve","initializedJS","threadPrintErr","_len","_key","threadAlert","_len2","_key2","cmd","threadId","_pthread_self","handleMessage","msgData","messageQueue","startWorker","instance","handler","handlers","proxy","_len3","_key3","establishStackSpace","pthread_ptr","__emscripten_thread_init","PThread","receiveObjectTransfer","threadInitTLS","__emscripten_thread_mailbox_await","__embind_initialize_bindings","invokeEntryPoint","start_routine","arg","ex","checkMailbox","__emscripten_thread_crashed","alert","receiveInstance","WebAssembly","Instance","getWasmImports","onunhandledrejection","INITIAL_MEMORY","Memory","initial","maximum","shared","SharedArrayBuffer","__ATPRERUN__","__ATINIT__","__ATPOSTRUN__","initRuntime","initialized","ignorePermissions","TTY","callRuntimeCallbacks","addOnPreRun","cb","unshift","addOnPostRun","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","_Module$monitorRunDep","removeRunDependency","_Module$monitorRunDep2","clearInterval","what","_Module$onAbort","RuntimeError","wasmBinaryFile","tempDouble","tempI64","isDataURI","filename","findWasmBinary","getBinarySync","instantiateArrayBuffer","binaryFile","imports","receiver","getBinaryPromise","instantiate","___cxa_throw","___pthread_create_js","ja","___syscall_dup3","oa","___syscall_faccessat","___syscall_fcntl64","___syscall_fstat64","___syscall_ftruncate64","ea","___syscall_getcwd","___syscall_getdents64","ra","___syscall_ioctl","fa","___syscall_lstat64","ga","___syscall_newfstatat","___syscall_openat","___syscall_readlinkat","___syscall_rmdir","ha","___syscall_stat64","___syscall_unlinkat","pa","__abort_js","__embind_register_bigint","ma","__embind_register_bool","__embind_register_class","__embind_register_class_constructor","__embind_register_class_function","__embind_register_emval","__embind_register_float","__embind_register_function","__embind_register_integer","__embind_register_memory_view","__embind_register_std_string","__embind_register_std_wstring","sa","__embind_register_void","na","__emscripten_get_now_is_monotonic","ba","__emscripten_init_main_thread_js","__emscripten_notify_mailbox_postmessage","$","__emscripten_receive_on_main_thread_js","__emscripten_thread_cleanup","aa","__emscripten_thread_set_strongref","__emval_as","__emval_call_method","__emval_decref","__emval_get_method_caller","__emval_get_property","__emval_incref","__emval_is_string","__emval_iter_begin","__emval_iter_next","__emval_new_array","__emval_new_cstring","__emval_new_object","__emval_run_destructors","__emval_set_property","__emval_take_value","__gmtime_js","Q","__localtime_js","__mktime_js","__mmap_js","__munmap_js","qa","__tzset_js","_emscripten_check_blocking_allowed","_emscripten_date_now","ka","_emscripten_exit_with_live_runtime","_emscripten_get_now","_emscripten_resize_heap","ca","_environ_get","da","_environ_sizes_get","_exit","_fd_close","_fd_pread","_fd_pwrite","_fd_read","_fd_seek","_fd_write","ExitStatus","cleanupThread","pthreads","returnWorkerToPool","spawnThread","threadParams","getNewWorker","runningWorkers","startRoutine","transferList","runtimeKeepaliveCounter","keepRuntimeAlive","noExitRuntime","stackRestore","__emscripten_stack_restore","convertI32PairToI53Checked","lo","hi","proxyToMainThread","funcIndex","emAsmAddr","sync","serializedNumCallArgs","sp","_emscripten_stack_get_current","__emscripten_stack_alloc","rtn","__emscripten_run_on_main_thread_js","_proc_exit","_Module$onExit","terminateAllThreads","handleException","exitOnMainThread","returnCode","wasmTable","exitJS","implicit","unusedWorkers","tlsInitFunctions","initMainThread","pthreadPoolSize","allocateUnusedWorker","loadWasmModuleToAllWorkers","__emscripten_thread_free_data","loadWasmModuleToWorker","onFinishedLoading","targetThread","targetWorker","thread","lineno","propertyIsEnumerable","onMaybeReady","workerOptions","callbacks","stackHigh","stackSize","_emscripten_stack_set_limits","wasmTableMirror","getWasmTableEntry","funcPtr","__emscripten_thread_exit","finish","registerTLSInit","tlsInitFunc","ExceptionInfo","excPtr","set_type","get_type","set_destructor","destructor","get_destructor","set_caught","caught","get_caught","set_rethrown","rethrown","get_rethrown","set_adjusted_ptr","adjustedPtr","get_adjusted_ptr","pthreadCreateProxied","PATH","isAbs","splitPath","exec","normalizeArray","parts","allowAboveRoot","up","normalize","isAbsolute","trailingSlash","dirname","basename","lastSlash","_len4","paths","_key4","join2","randomFill","initRandomFill","crypto","getRandomValues","PATH_FS","resolvedPath","resolvedAbsolute","cwd","relative","fromParts","toParts","samePartsLength","outputParts","UTF8Decoder","UTF8ArrayToString","heapOrArray","maxBytesToRead","endIdx","endPtr","u0","u1","u2","ch","FS_stdin_getChar_buffer","lengthBytesUTF8","stringToUTF8Array","outIdx","maxBytesToWrite","startIdx","intArrayFromString","stringy","dontAddNull","u8array","numBytesWritten","ttys","shutdown","dev","ops","registerDevice","stream_ops","tty","rdev","ErrnoError","seekable","fsync","get_char","bytesRead","timestamp","now","put_char","default_tty_ops","FS_stdin_getChar","prompt","ioctl_tcgets","c_iflag","c_oflag","c_cflag","c_lflag","c_cc","ioctl_tcsets","optional_actions","ioctl_tiocgwinsz","default_tty1_ops","alignMemory","alignment","mmapAlloc","_emscripten_builtin_memalign","zeroMemory","address","MEMFS","ops_table","mount","createNode","isBlkdev","isFIFO","getattr","node_ops","setattr","lookup","mknod","rmdir","readdir","symlink","llseek","allocate","mmap","msync","link","readlink","chrdev","chrdev_stream_ops","isDir","isFile","usedBytes","isLink","isChrdev","getFileDataAsTypedArray","expandFileStorage","newCapacity","prevCapacity","oldContents","resizeFileStorage","newSize","ino","nlink","uid","gid","atime","mtime","ctime","blksize","blocks","genericErrors","old_node","new_dir","new_node","lookupNode","newname","oldpath","canOwn","whence","prot","allocated","mmapFlags","FS_createDataFile","fileData","canRead","canWrite","createDataFile","preloadPlugins","FS_createPreloadedFile","dontCreateFile","preFinish","fullname","processData","byteArray","FS_handledByPreloadPlugin","Browser","handled","plugin","asyncLoad","noRunDep","dep","FS_getMode","mounts","devices","streams","nextInode","nameTable","currentPath","errno","filesystems","syncFSRequests","readFiles","FSStream","isRead","isWrite","isAppend","FSNode","mounted","readMode","writeMode","isFolder","isDevice","lookupPath","follow_mount","recurse_count","current_path","islast","isMountpoint","follow","getPath","isRoot","mountpoint","hashName","parentid","hash","hashAddNode","name_next","hashRemoveNode","errCode","mayLookup","nodeName","destroyNode","isSocket","flagsToPermissionString","flag","perms","nodePermissions","includes","mayCreate","mayDelete","isdir","mayOpen","MAX_OPEN_FDS","nextfd","fd","getStreamChecked","getStream","createStream","closeStream","dupStream","origStream","_stream$stream_ops","_stream$stream_ops$du","dup","_stream$stream_ops$op","_stream$stream_ops2","device","getDevice","major","minor","makedev","mi","getMounts","syncfs","populate","completed","doCallback","errored","pseudo","mountRoot","unmount","mkdirTree","dirs","mkdev","newpath","old_path","new_path","old_dir","old_dirname","new_dirname","old_name","stat","dontFollow","lstat","chmod","lchmod","fchmod","chown","lchown","fchown","ftruncate","utime","FS_modeStringToFlags","created","ungotten","isClosed","getdents","seeking","ioctl","actualNumBytes","chdir","createDefaultDirectories","createDefaultDevices","randomBuffer","randomLeft","randomByte","createDevice","createSpecialDirectories","proc_self","createStandardStreams","staticInit","stack","quit","findObject","dontResolveLastLink","parentExists","parentPath","parentObject","createPath","reverse","part","createFile","properties","_FS$createDevice","_FS$createDevice$majo","_output$buffer","forceLoadFile","createLazyFile","LazyUint8Array","lengthKnown","chunkOffset","chunkNum","getter","setDataGetter","cacheLength","datalength","hasByteServing","usesGzip","lazyArray","doXHR","overrideMimeType","_chunkSize","defineProperties","writeChunks","UTF8ToString","SYSCALLS","DEFAULT_POLLMASK","calculateAt","dirfd","allowEmpty","getStreamFromFD","doStat","getTime","doMsync","addr","varargs","getStr","newfd","amode","syscallGetVarargI","syscallGetVarargP","length_low","length_high","stringToUTF8","outPtr","cwdLengthInBytes","dirp","struct_size","off","termios","argp","winsize","nofollow","bufsize","endChar","primitiveType","minRange","maxRange","embind_charCodes","BindingError","InternalError","readLatin1String","awaitingDependencies","registeredTypes","typeDependencies","throwBindingError","throwInternalError","whenDependentTypesAreResolved","myTypes","dependentTypes","getTypeConverters","onComplete","typeConverters","myTypeConverters","registerType","unregisteredTypes","registered","dt","rawType","registeredInstance","ignoreDuplicateRegistrations","sharedRegisterType","GenericWireTypeSize","trueValue","falseValue","fromWireType","wt","toWireType","destructors","argPackAdvance","readValueFromPointer","pointer","destructorFunction","delayFunction","throwInstanceAlreadyDeleted","ptrType","registeredClass","finalizationRegistry","detachFinalizer","releaseClassHandle","smartPtr","smartPtrType","rawDestructor","runDestructor","downcastPointer","ptrClass","desiredClass","baseClass","rv","downcast","registeredPointers","getInheritedInstanceCount","registeredInstances","getLiveInheritedInstances","deletionQueue","flushPendingDeletes","deleteScheduled","setDelayFunction","getInheritedInstance","class_","getBasestPointer","upcast","makeClassHandle","record","attachFinalizer","writable","RegisteredPointer_fromWireType","rawPointer","getPointee","makeDefaultHandle","isSmartPointer","instancePrototype","pointeeType","toType","actualType","getActualType","registeredPointerRecord","isConst","constPointerType","pointerType","dp","FinalizationRegistry","unregister","ClassHandle","createNamedFunction","body","defineProperty","ensureOverloadTable","proto","methodName","humanName","overloadTable","prevFunc","_len5","_key5","argCount","exposePublicSymbol","numArguments","makeLegalFunctionName","RegisteredClass","pureVirtualFunctions","upcastPointer","constNoSmartPtrRawPointerToWireType","isReference","embindRepr","handleClass","genericPointerToWireType","rawConstructor","sharingPolicy","clonedHandle","rawShare","Emval","toHandle","nonConstNoSmartPtrRawPointerToWireType","readPointer","RegisteredPointer","rawGetPointee","UnboundTypeError","replacePublicSymbol","dynCall","sig","dynCallLegacy","getDynCaller","_len6","_key6","embind__requireFunction","signature","rawFunction","fp","getTypeName","___getTypeName","_free","throwUnboundTypeError","unboundTypes","seen","visit","rawPointerType","rawConstPointerType","baseClassRawType","getActualTypeSignature","upcastSignature","downcastSignature","destructorSignature","legalFunctionName","basePrototype","constructor_body","_len7","_key7","_registeredClass$base","_registeredClass$base2","__derivedClasses","referenceConverter","pointerConverter","constPointerConverter","heap32VectorToArray","firstElement","runDestructors","del","usesDestructorStack","argTypes","newFunc","argumentList","craftInvokerFunction","classType","cppInvokerFunc","cppTargetFunc","isAsync","isClassMethodFunc","needsDestructorStack","returns","closureArgs","invokerFnBody","argsList","argsListWired","dtorStack","args1","paramName","createJsInvoker","invokerFn","rawClassType","rawArgTypesAddr","invokerSignature","invoker","rawArgTypes","getFunctionName","argsIndex","rawInvoker","context","isPureVirtual","isNonnullReturn","unboundTypesHandler","Symbol","memberFunction","emval_freelist","emval_handles","count_emval_handles","toValue","EmValType","floatReadValueFromPointer","invokerArgsArray","integerReadValueFromPointer","signed","bitshift","isUnsignedType","dataTypeIndex","TA","decodeMemoryView","stdStringIsUTF8","decodeStartPtr","currentBytePtr","stringSegment","valueIsOfTypeString","Uint8ClampedArray","_malloc","charCode","UTF16Decoder","UTF16ToString","maxIdx","codeUnit","stringToUTF16","startPtr","numCharsToWrite","lengthBytesUTF16","UTF32ToString","utf32","stringToUTF32","lengthBytesUTF32","charSize","decodeString","encodeString","readCharAt","lengthBytesUTF","isVoid","tb","callUserCallback","maybeExit","Atomics","waitAsync","waitingAsync","__emscripten_check_mailbox","currThreadId","proxiedJSCallArgs","callingThread","numCallArgs","proxiedFunctionTable","currentProxiedOperationCallerThread","requireRegisteredType","impl","emval_returnValue","returnType","destructorsRef","emval_symbols","getStringOrSymbol","symbol","emval_methodCallers","caller","objHandle","emval_addMethodCaller","emval_lookupTypes","Reflect","construct","kind","retType","functionBody","params","invokerFunction","functionName","iterable","iterator","time_low","time_high","tmPtr","getUTCDay","yday","MONTH_DAYS_LEAP_CUMULATIVE","MONTH_DAYS_REGULAR_CUMULATIVE","ydayFromDate","year","getFullYear","getMonth","getDate","getSeconds","getMinutes","getHours","getDay","getTimezoneOffset","summerOffset","winterOffset","dst","guessedOffset","dstOffset","nonDstOffset","trueOffset","setTime","getYear","timeMs","__emscripten_tempret_set","offset_low","offset_high","timezone","daylight","std_name","dst_name","currentYear","winter","summer","stdTimezoneOffset","extractZone","timezoneOffset","sign","absOffset","hours","padStart","minutes","winterName","summerName","performance","timeOrigin","getHeapMax","growMemory","pages","grow","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","ENV","getEnvStrings","env","USER","LOGNAME","PWD","HOME","LANG","languages","__environ","environ_buf","bufSize","stringToAscii","penviron_count","penviron_buf_size","doReadv","iov","iovcnt","pnum","num","doWritev","newOffset","FS_createPath","FS_createLazyFile","FS_createDevice","createPreloadedFile","embind_init_charCodes","isAliasOf","leftClass","rightClass","preservePointerOnDelete","isDeleted","deleteLater","_this$rawDestructor","extendError","baseErrorType","errorName","errorClass","calledRun","wasmExports","makeWrapper_pp","a0","makeWrapper_p","makeWrapper_ppp","a1","applySignatureConversions","instantiateStreaming","createWasm","a2","a3","a4","a5","a6","a7","a8","a9","a10","a11","a12","a13","a14","a15","a16","preRun","doRun","_Module$onRuntimeInit","postRun","runCaller","_globalThis$self","globalThis","_h5_file","_h5_path","_h5_flush","_raw_shape","_TenxHdf5Dataset_brand","TenxHdf5Dataset","h5File","_instantiate","mhandle","fhandle","feats","ftype","shandle","isInteger","computePerCellQcFilters","thresholds","is_blocked","arrayClass","SummarizedExperiment","assayOrder","rowData","columnData","_assays","nrows","ncols","nr","nc","_columnData","_columnNames","assayNames","numberOfAssays","removeAssay","$removeAssay","setAssay","setAssays","newOrder","se_nr","se_nc","$setAssays","$setAssay","setAssayNames","$setAssayNames","sliceAssays","$sliceAssays","setRowData","$setRowData","setColumnData","$setColumnData","all_assays","all_dfs","_staged_setGroup","_GroupedGRanges_brand","GroupedGRanges","_rangeLengths","accumulated","_computeStarts","_rangeStarts","_flush_staged_setGroup","rangeStarts","numberOfGroups","setGroup","nops","$setGroup","GroupedGRangesOverlapIndex","all_rl","all_ranges","lengths","staged","last_start","more_ranges","ngroups","current_start","nranges","fullLength","rev_map","_reverseMapping","_CrisprNormalizationState_brand","CrisprNormalizationState","initializeSparseMatrixFromMatrixMarket","buf_data","initialize_from_mtx_buffer","initialize_from_mtx_file","extractMatrixMarketDimensions","stats","read_header_from_mtx_buffer","read_header_from_mtx_file","sarr","cres","coll_data","areArraysEqual","isArrayLike","chooseArrayConstructors","con1","con2","formatLengthError","checkStringArray","typeMessage","checkNamesArray","lengthMessage","combineNames","all_names","all_lengths","total_n","all_null","createSequence","convertToInt32Array","checkNonNegative","object2map","_InternalList_brand","InternalList","observed","_entries","_order","_check_entry_index","ii","new_entries","new_order","combiner","first_order","_asyncIterator","asyncIterator","AsyncFromSyncIterator","AsyncFromSyncIteratorContinuation","_graph","BuildSnnGraphResults","buildSnnGraph","my_neighbors","ref","build_snn_graph","AggregateAcrossCellsResults","num_groups","num_genes","groupSums","group_sums","allSums","all_sums","groupDetected","group_detected","allDetected","all_detected","aggregateAcrossCells","average","group_data","aggregate_across_cells","_has_median","_has_max","_ScoreMarkersResults_brand","ScoreMarkersResults","has_median","has_max","mean","cohensD","_check_forbidden","cohens_d","auc","deltaMean","delta_mean","deltaDetected","delta_detected","scoreMarkers","computeMedian","computeMaximum","score_markers","chooseTopMarkers","useLargest","actual_threshold","chooseTemporaryPath","areal","realizeFile","AdtPcaState"],"sourceRoot":""}