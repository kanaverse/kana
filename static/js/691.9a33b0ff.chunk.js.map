{"version":3,"file":"static/js/691.9a33b0ff.chunk.js","mappings":"wHACA,SAASA,EAAyBC,EAAGC,GACnC,GAAI,MAAQD,EAAG,MAAO,CAAC,EACvB,IAAIE,EACFC,EACAC,GAAI,OAA6BJ,EAAGC,GACtC,GAAII,OAAOC,sBAAuB,CAChC,IAAIC,EAAIF,OAAOC,sBAAsBN,GACrC,IAAKG,EAAI,EAAGA,EAAII,EAAEC,OAAQL,IAAKD,EAAIK,EAAEJ,IAAK,IAAMF,EAAEQ,QAAQP,IAAM,CAAC,EAAEQ,qBAAqBC,KAAKX,EAAGE,KAAOE,EAAEF,GAAKF,EAAEE,GAClH,CACA,OAAOE,CACT,C,6ECTAQ,EAAA,IAAAC,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAG,EAAA,IAAAH,QAAAI,EAAA,IAAAJ,QAQO,MAAMK,EAQTC,WAAAA,CAAYC,EAAOC,EAAIb,EAAQc,EAAQC,IAPvCC,EAAAA,EAAAA,GAAA,KAAAZ,OAAM,IACNY,EAAAA,EAAAA,GAAA,KAAAV,OAAG,IACHU,EAAAA,EAAAA,GAAA,KAAAT,OAAO,IACPS,EAAAA,EAAAA,GAAA,KAAAR,OAAO,IACPQ,EAAAA,EAAAA,GAAA,KAAAP,OAAM,IAIFQ,EAAAA,EAAAA,GAAKb,EAALc,KAAcN,IACdK,EAAAA,EAAAA,GAAKX,EAALY,KAAWL,IACXI,EAAAA,EAAAA,GAAKV,EAALW,KAAelB,IACfiB,EAAAA,EAAAA,GAAKT,EAALU,KAAeJ,IACfG,EAAAA,EAAAA,GAAKR,EAALS,KAAcH,EAClB,CAMA,SAAIH,GACA,OAAOO,EAAAA,EAAAA,GAAKf,EAALc,KACX,CAOA,MAAIL,GACA,OAAOM,EAAAA,EAAAA,GAAKb,EAALY,KACX,CAMA,UAAIJ,GACA,OAAOK,EAAAA,EAAAA,GAAKX,EAALU,KACX,CAMA,cAAIE,GACA,OAAOD,EAAAA,EAAAA,GAAKX,EAALU,KACX,CAMA,UAAIG,GACA,OAAOA,EAAAA,EAAAA,IAAOF,EAAAA,EAAAA,GAAKf,EAALc,MAClB,CAMA,cAAII,GACA,OAAOJ,KAAKlB,OAASkB,KAAKP,YAAYY,SAC1C,CAMA,UAAIvB,GACA,OAAOmB,EAAAA,EAAAA,GAAKZ,EAALW,KACX,CAgBA,SAAIH,GACA,OAAOI,EAAAA,EAAAA,GAAKV,EAALS,KACX,CAeAM,IAAAA,CAAKC,EAAGC,EAAOC,GACX,IAAIC,EAAIV,KAAKW,QAEb,OADAD,EAAEJ,QAAQM,WACHF,CACX,CAWAG,GAAAA,CAAIN,EAAGX,GACHI,KAAKW,QAAQE,OAAOD,UAExB,CAcAE,KAAAA,CAAMN,EAAOC,GACT,OAAOT,KAAKW,QAAQG,SAASF,UACjC,CAWAG,KAAAA,CAAMrB,GACmB,qBAAVA,IACPA,GAAQO,EAAAA,EAAAA,GAAKf,EAALc,OAEZ,IAAIgB,GAASC,EAAAA,EAAAA,IAASvB,GAAOO,EAAAA,EAAAA,GAAKZ,EAALW,MAAcA,KAAKP,aAEhD,OADAuB,EAAOH,IAAIb,KAAKW,SACTK,CACX,CAkBAE,IAAAA,CAAKV,EAAOC,GACa,qBAAVD,IACPA,EAAQ,GAEO,qBAARC,IACPA,GAAMR,EAAAA,EAAAA,GAAKZ,EAALW,OAGV,IAAImB,EAAaV,EAAMD,EACnBY,GAAkBnB,EAAAA,EAAAA,GAAKV,EAALS,MACE,OAApBoB,IACAA,EAAkBpB,MAGtB,IAAIqB,EAASb,EAAQR,KAAKP,YAAYY,UACtC,OAAO,IAAIL,KAAKP,aAAYQ,EAAAA,EAAAA,GAAKf,EAALc,OAAc,EAAGmB,GAAYlB,EAAAA,EAAAA,GAAKX,EAALU,MAAeqB,EAAQD,EACpF,CAUAE,IAAAA,GACwB,QAAhBrB,EAAAA,EAAAA,GAAKV,EAALS,OAAyC,QAAjBC,EAAAA,EAAAA,GAAKX,EAALU,SACxBuB,EAAAA,EAAAA,KAAQtB,EAAAA,EAAAA,GAAKf,EAALc,OAAaC,EAAAA,EAAAA,GAAKb,EAALY,QACrBD,EAAAA,EAAAA,GAAKT,EAALU,KAAe,MAEvB,CAQA,CAACwB,OAAOC,YACJ,OAAOzB,KAAK0B,QAChB,CAQAA,MAAAA,GACI,OAAO1B,KAAKW,QAAQe,QACxB,CAQAC,IAAAA,GACI,OAAO3B,KAAKW,QAAQgB,MACxB,CAUAC,EAAAA,CAAGC,GACC,OAAO7B,KAAKW,QAAQiB,GAAGC,EAC3B,CAYAC,OAAAA,CAAQC,EAAYC,GAChBhC,KAAKW,QAAQmB,WAAWlB,UAE5B,CAaAqB,MAAAA,CAAOF,EAAYC,GACf,OAAOhC,KAAKW,QAAQsB,UAAUrB,UAClC,CAaAsB,GAAAA,CAAIH,EAAYC,GACZ,OAAOhC,KAAKW,QAAQuB,OAAOtB,UAC/B,CAWAuB,QAAAA,CAASC,EAAO3B,GACZ,OAAOT,KAAKW,QAAQwB,SAASC,EAAO3B,EACxC,CAYA4B,KAAAA,CAAMN,EAAYC,GACd,OAAOhC,KAAKW,QAAQ0B,SAASzB,UACjC,CAYA0B,IAAAA,CAAKP,EAAYC,GACb,OAAOhC,KAAKW,QAAQ2B,QAAQ1B,UAChC,CAYA2B,MAAAA,CAAOR,EAAYS,GACf,OAAOxC,KAAKW,QAAQ4B,UAAU3B,UAClC,CAYA6B,WAAAA,CAAYV,EAAYS,GACpB,OAAOxC,KAAKW,QAAQ8B,eAAe7B,UACvC,CAWA8B,IAAAA,CAAKC,GACD,OAAO3C,KAAKW,QAAQ+B,KAAKC,EAC7B,CAOAC,OAAAA,GACI,OAAO5C,KAAKW,QAAQiC,SACxB,E,oEChXG,SAASC,EAAmBnD,EAAOa,EAAGuC,GAAuD,IAc5FpC,GAdiD,OAAEqC,EAAS,OAAM,YAAEC,EAAc,GAAGpC,UAAA9B,OAAA,QAAAmE,IAAArC,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7F,GAA0B,qBAAfkC,EACP,GAAII,YAAYC,OAAO5C,GAAI,CACvB,IAAI6C,EAAQ7C,EAAEd,YAAY4D,KAC1B,IACIP,GAAaQ,EAAAA,EAAAA,IAAcF,EAAMG,QAAQ,QAAS,aACtD,CAAE,MAAOjF,GACL,MAAM,IAAIkF,MAAM,gCAAkCJ,EAAQ,IAC9D,CACJ,MACIN,EAAaW,EAAAA,GAKrB,IACI/C,GAAIO,EAAAA,EAAAA,IAASvB,EAAOa,EAAEzB,OAAQgE,IAC9BY,EAAAA,EAAAA,GAAQnD,EAAGG,EAAEC,QAAS,CAAEoC,SAAQC,eACpC,CAAE,MAAM1E,GAMJ,KAHiB,qBAANoC,GACPA,EAAEY,OAEAhD,CACV,CAEA,OAAOoC,CACX,C,2CC7BO,SAASiD,EAAoBjE,EAAOZ,EAAQc,EAAQkD,GACvD,OAAO,IAAIA,EAAWpD,GAAQ,EAAGZ,EAAQc,EAAQ,CAAC,EACtD,C,yCCxBA,SAASgE,EAAgBrD,GACrB,IAAIsD,EAAcC,OAAOC,kBACrBC,EAAcF,OAAOG,kBACrBC,GAAc,EACdC,GAAW,EACXC,GAAY,EAEhB,GAAI7D,EAAEd,aAAe4E,MACjBF,GAAW,MACR,CACH,IACIG,EADAC,EAAO,KAGPhE,EAAEd,YAAY4D,KAAKmB,WAAW,SAC9BD,EAAOT,OAAOvD,EAAEd,YAAY4D,KAAKE,QAAQ,QAAS,IAAIA,QAAQ,SAAU,KACxEe,GAAS,GACF/D,EAAEd,YAAY4D,KAAKmB,WAAW,QACrCD,EAAOT,OAAOvD,EAAEd,YAAY4D,KAAKE,QAAQ,OAAQ,IAAIA,QAAQ,SAAU,KACvEe,GAAS,GACF/D,EAAEd,YAAY4D,KAAKmB,WAAW,SACrCD,EAAO,GACPD,EAAS/D,EAAEd,YAAY4D,KAAKmB,WAAW,UACvCJ,GAAY,GAGJ,MAARG,EACKD,GAIDT,IAAiB,IAAMU,EAAO,IAC9BP,EAAc,IAAMO,EAAO,GAAK,IAJhCV,EAAc,EACdG,EAAc,GAAKO,EAAO,GAM9BL,GAAc,CAEtB,CAEA,MAAO,CACHO,MAAOZ,EACPa,MAAOV,EACPW,OAAQP,EACRQ,QAASV,EACTvD,MAAOwD,EAEf,CAsBO,SAAST,EAAQmB,EAAMC,GAA2D,IAAvD,OAAElF,EAAS,EAAC,OAAEmD,EAAS,OAAM,YAAEC,EAAc,GAAGpC,UAAA9B,OAAA,QAAAmE,IAAArC,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClF,GAAIkE,EAAGhG,OAAS+F,EAAK/F,OAASc,EAC1B,MAAM,IAAI4D,MAAM,yEAGpB,GAAIsB,EAAGrF,YAAY4D,MAAQwB,EAAKpF,YAAY4D,KAExC,YADAyB,EAAGjE,IAAIgE,EAAMjF,GAIjB,IAUImF,EAVAC,EAAWpB,EAAgBiB,GAC3BI,EAASrB,EAAgBkB,GAG7B,GAAIE,EAASP,OAASQ,EAAOR,OAASO,EAASN,OAASO,EAAOP,OAASM,EAASJ,SAAWK,EAAOL,SAAWI,EAASL,QAAUM,EAAON,SAAWK,EAASrE,MAExJ,YADAmE,EAAGjE,IAAIgE,EAAMjF,GAMjB,GAAc,QAAVmD,EACAgC,EAAOrE,GACIsC,MAER,CACH,IAAIkC,EAAM,UAAYL,EAAKpF,YAAY4D,KAAO,SAAWyB,EAAGrF,YAAY4D,KAExE,GAAc,QAAVN,EAAkB,CAClB,IAAIoC,GAAS,EACbJ,EAAOrE,IACEyE,IACDC,QAAQC,KAAK,yBAA2BC,OAAO5E,GAAK,KAAOwE,GAC3DC,GAAS,GAENnC,EAEf,KAAO,IAAc,SAAVD,EAKP,MAAM,IAAIS,MAAM,mBAAqBT,EAAS,iCAJ9CgC,EAAOrE,IACH,MAAM,IAAI8C,MAAM,yBAA2B8B,OAAO5E,GAAK,KAAOwE,GAItE,CACJ,CAEA,IAAIK,EAAkB7E,IAClB,GAAIsE,EAASJ,UAAYd,OAAO0B,SAAS9E,IACrC,IAAKuE,EAAOL,QACR,OAAOG,EAAKrE,QAEb,GAAIuE,EAAOR,MAAQ/D,GAAKuE,EAAOP,MAAQhE,EAC1C,OAAOqE,EAAKrE,GAEhB,OAAOA,GAIX,IAAIsE,EAASL,QAAWM,EAAON,OAA/B,CAWA,GAAIM,EAAON,OAAQ,CACf,IAAId,EACAG,EASJ,GARIc,EAAGrF,aAAegG,gBAClB5B,EAAc,GACdG,EAAc,IAAM,IAAM,KAE1BH,IAAgB,IAAM,KACtBG,EAAc,IAAM,IAAM,IAG1BgB,EAASL,OAAQ,CACjB,IAASjG,EAAI,EAAGA,EAAImG,EAAK/F,OAAQJ,IAAK,CAClC,IAAIgC,EAAImE,EAAKnG,IACTmF,EAAcnD,GAAKsD,EAActD,KACjCA,EAAIgF,OAAOX,EAAKrE,KAEpBoE,EAAGpG,EAAIkB,GAAUc,CACrB,CACA,MACJ,CAEA,GAAIsE,EAASrE,MAAO,CAChB,IAASjC,EAAI,EAAGA,EAAImG,EAAK/F,OAAQJ,IAAK,CAClC,IAAIgC,EAAImE,EAAKnG,GACG,iBAALgC,GACHmD,EAAcnD,GAAKsD,EAActD,KACjCA,EAAIgF,OAAOX,EAAKrE,KAGpBA,EADmB,iBAALA,EACVgF,OAAOH,EAAgB7E,IACR,kBAALA,EACVgF,OAAOhF,GAEPgF,OAAOX,EAAKrE,IAEpBoE,EAAGpG,EAAIkB,GAAUc,CACrB,CACA,MACJ,CAEA,IAAShC,EAAI,EAAGA,EAAImG,EAAK/F,OAAQJ,IAC7BoG,EAAGpG,EAAIkB,GAAU8F,OAAOH,EAAgBV,EAAKnG,KAEjD,MACJ,CAGA,GAAIsG,EAASrE,MACT,IAASjC,EAAI,EAAGA,EAAImG,EAAK/F,OAAQJ,IAAK,CAClC,IAAIgC,EAAImE,EAAKnG,GACI,kBAANgC,GAA8B,kBAALA,EAChCA,EAAIoD,OAAOpD,GACS,kBAANA,IACdA,EAAIqE,EAAKrE,IAEboE,EAAGpG,EAAIkB,GAAU2F,EAAgB7E,EACrC,MAKJ,IAAShC,EAAI,EAAGA,EAAImG,EAAK/F,OAAQJ,IAC7BoG,EAAGpG,EAAIkB,GAAU2F,EAAgBV,EAAKnG,GAjE1C,MARI,IAAK,IAAIA,EAAI,EAAGA,EAAImG,EAAK/F,OAAQJ,IAAK,CAClC,IAAIgC,EAAIoD,OAAOe,EAAKnG,KAChBuG,EAAOR,MAAQ/D,GAAKuE,EAAOP,MAAQhE,KACnCA,EAAIqE,EAAKrE,IAEboE,EAAGpG,EAAIkB,GAAUc,CACrB,CAuER,C,iBC7MA,SAASiF,EAAQnH,GAGf,OAAOmH,EAAU,mBAAqBnE,QAAU,iBAAmBA,OAAOC,SAAW,SAAUjD,GAC7F,cAAcA,CAChB,EAAI,SAAUA,GACZ,OAAOA,GAAK,mBAAqBgD,QAAUhD,EAAEiB,cAAgB+B,QAAUhD,IAAMgD,OAAOoE,UAAY,gBAAkBpH,CACpH,EAAGmH,EAAQnH,EACb,C,wECNA,MAAMqH,EAAW,CAAC,EAClB,IAAIC,EAAU,EAEP,SAASvE,EAAQ5B,GAChBA,KAAMkG,IACNA,EAASlG,GAAIoG,gBACNF,EAASlG,GAGxB,CAEA,MAAMqG,EAAY,IAAIC,qBAAqB1E,GAEpC,SAAStC,EAAKiH,EAAKzG,GACtB,IAMIuB,EANAmF,EAAMC,EAAAA,GAAUF,GAEhBvG,EAAKmG,EACTD,EAASlG,GAAMwG,EACfL,IAGA,IAAI,QAAAO,EAAAzF,UAAA9B,OARkCwH,EAAK,IAAAjC,MAAAgC,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAALD,EAAKC,EAAA,GAAA3F,UAAA2F,GASvCvF,EAAS,IAAIvB,EAAYE,EAAIwG,KAAQG,EACzC,CAAE,MAAOhI,GAEL,MADAiD,EAAQ5B,GACFrB,CACV,CAGA,OADA0H,EAAUQ,SAASxF,EAAQrB,GACpBqB,CACX,C,gDC/BA,SAASyF,EAAYlI,EAAGE,GACtB,GAAI,WAAY,OAAQF,KAAOA,EAAG,OAAOA,EACzC,IAAID,EAAIC,EAAEiD,OAAOiF,aACjB,QAAI,IAAWnI,EAAG,CAChB,IAAII,EAAIJ,EAAEW,KAAKV,EAAGE,GAAK,WACvB,GAAI,WAAY,OAAQC,GAAI,OAAOA,EACnC,MAAM,IAAIgI,UAAU,+CACtB,CACA,OAAQ,WAAajI,EAAI6G,OAASxB,QAAQvF,EAC5C,C,0KCVA,MAAMsH,EAAW,CAAC,EAEX,SAAStE,EAAQ7B,EAAOC,GAC3B,GAAID,KAASmG,EAAU,CACnB,IAAIc,EAAad,EAASnG,GACtBkH,EAAWD,EAAWE,KAC1B,GAAIlH,KAAMiH,EAAU,CACCD,EAAWG,OACjBC,MAAMH,EAASjH,WACnBiH,EAASjH,EACpB,CACJ,CACJ,CAEO,SAASsB,EAASvB,EAAOZ,EAAQgE,GACpC,IAKIlD,EACAW,EANAyG,EAAUnB,EAASnG,GAEnBuH,EAASD,EAAQF,OACjBI,EAAUF,EAAQH,KAItB,IACIjH,EAASqH,EAAOE,QAAQrE,EAAWzC,UAAYvB,GAC/CoI,EAAQF,EAAQI,KAAOxH,EACvBW,EAAI,IAAIuC,EAAWpD,EAAOsH,EAAQI,IAAKtI,EAAQc,EAAQ,MAEvDoG,EAAUQ,SAASjG,EAAG,CAAEb,MAAOA,EAAOC,GAAIqH,EAAQI,MAClDJ,EAAQI,KACZ,CAAE,MAAO9I,GAIL,KAHsB,qBAAXsB,GACPqH,EAAOF,MAAMnH,GAEXtB,CACV,CAEA,OAAOiC,CACX,CAEO,SAASJ,EAAOT,GAEnB,OADamG,EAASnG,GAAOoH,OACfO,MAAMlH,MACxB,CAEA,MAAM6F,EAAY,IAAIC,qBAAqBqB,IACvC/F,EAAQ+F,EAAK5H,MAAO4H,EAAK3H,MAG7B,IAAI4H,EAAS,EASN,SAASf,EAASM,GACrB,IAAIpH,EAAQ6H,EAOZ,OANA1B,EAASnG,GAAS,CACdoH,OAAQA,EACRD,KAAM,CAAC,EACPO,IAAK,GAETG,GAAU,EACH7H,CACX,C,gDCjEA,SAAS8H,EAAgBlJ,EAAGG,EAAGF,GAC7B,OAAQE,GAAI,OAAcA,MAAOH,EAAIK,OAAO8I,eAAenJ,EAAGG,EAAG,CAC/DiJ,MAAOnJ,EACPoJ,YAAY,EACZC,cAAc,EACdC,UAAU,IACPvJ,EAAEG,GAAKF,EAAGD,CACjB,C,gDCPA,SAASwJ,EAAuBC,EAAGC,EAAGvJ,GACpC,OAAOsJ,EAAElH,KAAI,OAAiBkH,EAAGC,GAAIvJ,GAAIA,CAC3C,C,gDCFA,SAASqB,EAA2BxB,EAAGC,EAAGyJ,IACxC,OAA0B1J,EAAGC,GAAIA,EAAEsC,IAAIvC,EAAG0J,EAC5C,C,yDCHA,SAASC,EAAkB3J,EAAGC,EAAGM,GAC/B,GAAI,mBAAqBP,EAAIA,IAAMC,EAAID,EAAE4J,IAAI3J,GAAI,OAAOqC,UAAU9B,OAAS,EAAIP,EAAIM,EACnF,MAAM,IAAI6H,UAAU,gDACtB,C,iCCHA,SAASyB,EAA2B7J,EAAGC,GACrC,GAAIA,EAAE2J,IAAI5J,GAAI,MAAM,IAAIoI,UAAU,iEACpC,C,gECDA,SAAS0B,EAAuBL,EAAGC,GACjC,OAAOD,EAAEM,KAAI,OAAiBN,EAAGC,GACnC,C,iBCHA,SAASM,EAA8B7J,EAAGH,GACxC,GAAI,MAAQG,EAAG,MAAO,CAAC,EACvB,IAAIF,EAAI,CAAC,EACT,IAAK,IAAIM,KAAKJ,EAAG,GAAI,CAAC,EAAE8J,eAAetJ,KAAKR,EAAGI,GAAI,CACjD,IAAK,IAAMP,EAAES,QAAQF,GAAI,SACzBN,EAAEM,GAAKJ,EAAEI,EACX,CACA,OAAON,CACT,C,gECPA,SAASiK,EAAQlK,EAAGG,GAClB,IAAIF,EAAII,OAAOgD,KAAKrD,GACpB,GAAIK,OAAOC,sBAAuB,CAChC,IAAIJ,EAAIG,OAAOC,sBAAsBN,GACrCG,IAAMD,EAAIA,EAAEyD,OAAO,SAAUxD,GAC3B,OAAOE,OAAO8J,yBAAyBnK,EAAGG,GAAGkJ,UAC/C,IAAKpJ,EAAEmK,KAAKC,MAAMpK,EAAGC,EACvB,CACA,OAAOD,CACT,CACA,SAASqK,EAAetK,GACtB,IAAK,IAAIG,EAAI,EAAGA,EAAImC,UAAU9B,OAAQL,IAAK,CACzC,IAAIF,EAAI,MAAQqC,UAAUnC,GAAKmC,UAAUnC,GAAK,CAAC,EAC/CA,EAAI,EAAI+J,EAAQ7J,OAAOJ,IAAI,GAAIuD,QAAQ,SAAUrD,IAC/C,OAAeH,EAAGG,EAAGF,EAAEE,GACzB,GAAKE,OAAOkK,0BAA4BlK,OAAOmK,iBAAiBxK,EAAGK,OAAOkK,0BAA0BtK,IAAMiK,EAAQ7J,OAAOJ,IAAIuD,QAAQ,SAAUrD,GAC7IE,OAAO8I,eAAenJ,EAAGG,EAAGE,OAAO8J,yBAAyBlK,EAAGE,GACjE,EACF,CACA,OAAOH,CACT,C,gDCpBA,SAASyK,EAA4BzK,EAAG0J,IACtC,OAA0B1J,EAAG0J,GAAIA,EAAEgB,IAAI1K,EACzC,C,0DCDA,SAAS2K,EAAc1K,GACrB,IAAIG,GAAI,OAAYH,EAAG,UACvB,MAAO,WAAY,OAAQG,GAAKA,EAAIA,EAAI,EAC1C,C","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/wasmarrays.js/src/base.js","../node_modules/wasmarrays.js/src/convert.js","../node_modules/wasmarrays.js/src/view.js","../node_modules/wasmarrays.js/src/safeSet.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/scran.js/browser/gc.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/wasmarrays.js/src/globals.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js","../node_modules/@babel/runtime/helpers/esm/assertClassBrand.js","../node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };","import { allocate, release, buffer } from \"./globals.js\";\n\n/** \n * Wrapper around an array allocated on the Wasm heap.\n * This handles the memory management so that users don't have to manually free allocations \n * (unless they want to, e.g., because they don't trust the timeliness of the Javascript engine's garbage collector).\n * Users should not construct WasmArray instances directly; use the {@linkcode createWasmArray} function instead.\n *\n * @hideconstructor\n */\nexport class WasmArray {\n    #space;\n    #id;\n    #length;\n    #offset;\n    #owner;\n\n    // See documentation below for details on each argument.\n    constructor(space, id, length, offset, owner) {\n        this.#space = space;\n        this.#id = id;\n        this.#length = length;\n        this.#offset = offset;\n        this.#owner = owner;\n    }\n\n    /**\n     * @member {number}\n     * @desc Identifier for the Wasm memory space.\n     */\n    get space() {\n        return this.#space;\n    }\n\n    /**\n     * @member {number}\n     * @desc Identifier for this array in the specified space.\n     * This may not have any meaningful value if this WasmArray instance is a view, see the {@linkcode WasmArray#owner owner} property for details.\n     */\n    get id() {\n        return this.#id;\n    }\n\n    /**\n     * @member {number}\n     * @desc Offset on the Wasm heap, in terms of the number of bytes.\n     */\n    get offset() {\n        return this.#offset;\n    }\n\n    /**\n     * @member {number}\n     * @desc Same as {@linkcode WasmArray#offset offset}, provided for consistency with the TypedArray interface.\n     */\n    get byteOffset() {\n        return this.#offset;\n    }\n\n    /**\n     * @member {ArrayBuffer}\n     * @desc The ArrayBuffer used to implement the Wasm heap, on which the current array is allocated.\n     */\n    get buffer() {\n        return buffer(this.#space);\n    }\n\n    /**\n     * @member {number}\n     * @desc Length of the heap allocation, in terms of the number of bytes.\n     */\n    get byteLength() {\n        return this.length * this.constructor.valueSize;\n    }\n\n    /**\n     * @member {number}\n     * @desc Length of the array, in terms of the number of elements.\n     */\n    get length() {\n        return this.#length;\n    }\n\n    /**\n     * @member {(object|WasmArray)}\n     *\n     * @desc\n     * This property contains information about the owner of the allocation on the Wasm heap.\n     * The most common value of this property will be `null`, indicating that the current WasmArray instance is the owner of the allocation on the Wasm heap.\n     * This is the only setting where {@linkcode WasmArray#free free} has any effect.\n     *\n     * Any non-`null` value indicates that the current instance is just a view into an allocation owned by another entity.\n     * If the value is a reference to another WasmArray, then the returned object is the actual owner of the allocation.\n     *\n     * In some cases, `owner` may be an empty (non-`null`) object.\n     * This indicates that the allocation is owned by some unknown entity, e.g., a view directly returned by Emscripten's bindings without involving a WasmArray instance.\n     */\n    get owner() {\n        return this.#owner;\n    }\n\n    /**\n     * Fill the array with a constant number.\n     *\n     * @param {number} x - Number to use to fill the array.\n     * @param {number} [start] Position on the array to start filling.\n     * Defaults to the start of the array.\n     * @param {number} [end] Position on the array to stop filling.\n     * Defaults to the end of the array.\n     * Only used if `start` is specified.\n     *\n     * @return {TypedArray} The array (or its specified subinterval) is filled with `x`.\n     * A TypedArray view of the current WasmArray is returned.\n     */\n    fill(x, start, end) {\n        let y = this.array();\n        y.fill(...arguments);\n        return y;\n    }\n\n    /**\n     * Set the array elements to the contents of an existing array.\n     *\n     * @param {(Array|TypedArray)} x - Source array containing the values to fill the current array.\n     * @param {number} [offset] - Position on this array to start setting to `x`.\n     * Defaults to the start of the array.\n     *\n     * @return Entries of this array (starting from `offset`, if specified) are set to `x`.\n     */\n    set(x, offset) {\n        this.array().set(...arguments);\n        return;\n    }\n\n    /**\n     * Create a TypedArray slice of the data in the allocated array.\n     *\n     * @param {number} [start] - Position on this array to start slicing.\n     * Defaults to the start of the array.\n     * @param {number} [end] - Position on the array to end slicing.\n     * Defaults to the end of the array.\n     * Only used if `start` is specified.\n     *\n     * @return {TypedArray} A TypedArray containing the specified subarray of this WasmArray.\n     * This is not a view on the Wasm heap and thus can be safely used after any further Wasm allocations.\n     */\n    slice(start, end) {\n        return this.array().slice(...arguments);\n    }\n\n    /**\n     * Create a WasmArray clone of this object.\n     *\n     * @param {number} space - Identifier for the Wasm memory space.\n     * If not specified, we use the memory space of this object.\n     *\n     * @return {WasmArray} A new WasmArray of the same type as this WasmArray, and filled with the same contents.\n     * This refers to a separate allocation on the requested space.\n     */\n    clone(space) {\n        if (typeof space === \"undefined\") {\n            space = this.#space;\n        }\n        let output = allocate(space, this.#length, this.constructor);\n        output.set(this.array());\n        return output;\n    }\n\n    /**\n     * Create a WasmArray \"view\" of the data in this object.\n     *\n     * @param {number} [start] - Position on this array to start the view.\n     * Defaults to the start of the array.\n     * @param {number} [end] - Position on the array to end the view.\n     * Defaults to the end of the array.\n     * Only used if `start` is specified.\n     *\n     * @return {WasmArray} A WasmArray containing a view on the specified subarray of this WasmArray.\n     *\n     * The returned object does not own the memory on the Wasm heap, so {@linkcode WasmArray#free free} will not have any effect.\n     * It does, however, hold a reference to its parent object, i.e., the current WasmArray instance on which `view` was called.\n     * This reference ensures that the parent is not prematurely garbage collected, which would invalidate the view when the Wasm allocation is freed.\n     * Of course, all views will be invalidated if the parent's {@linkcode WasmArray#free free} method is invoked manually.\n     */\n    view(start, end) {\n        if (typeof start === \"undefined\") {\n            start = 0;\n        }\n        if (typeof end === \"undefined\") {\n            end = this.#length;\n        }\n\n        let new_length = end - start;\n        let original_parent = this.#owner;\n        if (original_parent === null) {\n            original_parent = this;\n        }\n\n        let adjust = start * this.constructor.valueSize;\n        return new this.constructor(this.#space, -1, new_length, this.#offset + adjust, original_parent);\n    }\n\n    /**\n     * Free the allocated Wasm memory if this object owns that memory.\n     *\n     * @return If this object is the owner, memory is freed and this allocation is invalidated.\n     *\n     * If this object is a view, this function is a no-op.\n     * If this function was previously called, further calls will have no effect.\n     */\n    free() {\n        if (this.#owner === null && this.#offset !== null) {\n            release(this.#space, this.#id);\n            this.#offset = null;\n        }\n    }\n\n    /**\n     * Iterate across the values of the WasmArray.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur during iteration.\n     *\n     * @return {object} An array iterator object.\n     */\n    [Symbol.iterator]() {\n        return this.values();\n    }\n\n    /**\n     * Iterate across the values of the WasmArray.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur during iteration.\n     *\n     * @return {object} An array iterator object.\n     */\n    values() {\n        return this.array().values();\n    }\n\n    /**\n     * Iterate across the keys (i.e., indices) of the WasmArray.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur during iteration.\n     *\n     * @return {object} An array iterator object.\n     */\n    keys() {\n        return this.array().keys();\n    }\n\n    /**\n     * Obtain the value at the specified index.\n     *\n     * @param {number} index - Position of the array.\n     * This may be negative to indicate indexing from the end of the array.\n     *\n     * @return {number} The value of the array at the requested index.\n     */\n    at(index) {\n        return this.array().at(index);\n    }\n\n    /**\n     * Apply a callback function to each element in the array, equivalent to the counterpart for Arrays.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur in the callback.\n     *\n     * @param {function} callbackFn - Callback function to be applied to each array element, \n     * see the documentation for [`TypedArray.prototype.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach).\n     * @param {object} [thisArg] - Value to use as `this` when executing `callbackFn`.\n     *\n     * @return `callBack` is applied to each element of the array. \n     */\n    forEach(callbackFn, thisArg) {\n        this.array().forEach(...arguments);\n        return;\n    }\n\n    /**\n     * Create a new TypedArray containing all elements in the WasmArray that pass the filter.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur in the filter.\n     *\n     * @param {function} callbackFn - Callback function defining a filter,\n     * see the documentation for [`TypedArray.prototype.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter).\n     * @param {object} [thisArg] - Value to use as `this` when executing `callbackFn`.\n     *\n     * @return {TypedArray} A TypedArray that contains only the elements passing the filter.\n     * This is not a view on the Wasm heap and thus can be safely used after any further Wasm allocations.\n     */\n    filter(callbackFn, thisArg) {\n        return this.array().filter(...arguments);\n    }\n\n    /**\n     * Create a new TypedArray from evaluating the callback function on each element of the WasmArray.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur in the callback.\n     *\n     * @param {function} callbackFn - Callback function that defines the mapping, \n     * see the documentation for [`TypedArray.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map).\n     * @param {object} [thisArg] - Value to use as `this` when executing `callbackFn`.\n     *\n     * @return {TypedArray} A TypedArray containing the result of `callbackFn` on each element.\n     * This is not a view on the Wasm heap and thus can be safely used after any further Wasm allocations.\n     */\n    map(callbackFn, thisArg) { \n        return this.array().map(...arguments);\n    }\n\n    /**\n     * Create a TypedArray view for a range of the current WasmArray from `[begin, end)`.\n     *\n     * @param {number} [begin] - Index of the starting element, defaults to 0.\n     * @param {number} [end] - Index of the final element plus 1, defaults to the length of the current array.\n     *\n     * @return {TypedArray} A TypedArray view of the requested subarray.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur during iteration.\n     */\n    subarray(begin, end) {\n        return this.array().subarray(begin, end);\n    }\n\n    /**\n     * Test whether every element in the WasmArray passes the test implemented by the callback function.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur in the callback.\n     *\n     * @param {function} callbackFn - Callback function defining a condition for each array element, \n     * see the documentation for [`TypedArray.prototype.every`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every).\n     * @param {object} [thisArg] - Value to use as `this` when executing `callbackFn`.\n     *\n     * @return {boolean} Whether the callback is truthy for each element in the WasmArray.\n     */\n    every(callbackFn, thisArg) {\n        return this.array().every(...arguments);\n    }\n\n    /**\n     * Test whether any element in the WasmArray passes the test implemented by the callback function.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur in the callback.\n     *\n     * @param {function} callbackFn - Callback function defining a condition for each array element, \n     * see the documentation for [`TypedArray.prototype.some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some).\n     * @param {object} [thisArg] - Value to use as `this` when executing `callbackFn`.\n     *\n     * @return {boolean} Whether the callback is truthy for any element in the WasmArray.\n     */\n    some(callbackFn, thisArg) {\n        return this.array().some(...arguments);\n    }\n\n    /**\n     * Reduce the WasmArray into a single value by repeatedly applying a callback function from left to right.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur in the callback.\n     *\n     * @param {function} callbackFn - Callback function defining a reduction operation,\n     * see the documentation for [`TypedArray.prototype.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce).\n     * @param {*} [initialValue] - Initial value of the accumulator.\n     *\n     * @return {*} Result of the callback function.\n     */\n    reduce(callbackFn, initialValue) {\n        return this.array().reduce(...arguments);\n    }\n\n    /**\n     * Reduce the WasmArray into a single value by repeatedly applying a callback function from right to left.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur in the callback.\n     *\n     * @param {function} callbackFn - Callback function defining the reduction operation,\n     * see the documentation for [`TypedArray.prototype.reduceRight`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight).\n     * @param {*} [initialValue] - Initial value of the accumulator.\n     *\n     * @return {*} Result of the callback function.\n     */\n    reduceRight(callbackFn, initialValue) {\n        return this.array().reduceRight(...arguments);\n    }\n\n    /**\n     * Sort the contents of the WasmArray.\n     * Note that this relies on a TypedArray view and may not be valid if any Wasm heap allocations occur in the comparison function.\n     *\n     * @param {function} compareFn - Function to define the sort order, \n     * see the documentation for [`TypedArray.prototype.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort).\n     *\n     * @return {TypedArray} The contents of the WasmArray are sorted in-place, and a TypedArray view is returned.\n     */\n    sort(compareFn) {\n        return this.array().sort(compareFn);\n    }\n    \n    /**\n     * Reverse the contents of the WasmArray.\n     *\n     * @return {TypeArray} The contents of the WasmArray are reversed in-place, and a TypedArray view is returned.\n     */\n    reverse() {\n        return this.array().reverse();\n    }\n}\n","import { allocate } from \"./globals.js\";\nimport { safeSet } from \"./safeSet.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray,\n    stringToClass\n} from \"./derived.js\";\n\n/**\n * Convert a (Typed)Array into a new {@linkplain {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * @param {object} [options={}] - Optional parameters to be passed to {@linkcode safeSet}.\n * \n * @return {WasmArray} Instance of a {@linkplain WasmArray} subclass containing the same contents as `x`.\n *\n * If `arrayClass` is not provided, it defaults to an appropriate type based on `x`.\n * For TypedArray inputs, this is the {@linkplain WasmArray} corresponding to the TypedArray subclass,\n * while for Array inputs, this is the {@linkplain Float64WasmArray} subclass.\n */\nexport function convertToWasmArray(space, x, arrayClass, { action = \"warn\", placeholder = 0 } = {}) {\n    if (typeof arrayClass === \"undefined\") {\n        if (ArrayBuffer.isView(x)) {\n            let input = x.constructor.name;\n            try {\n                arrayClass = stringToClass(input.replace(\"Array\", \"WasmArray\"));\n            } catch (e) {\n                throw new Error(\"unsupported TypedArray type '\" + input + \"'\");\n            }\n        } else {\n            arrayClass = Float64WasmArray;\n        }\n    }\n\n    let y;\n    try {\n        y = allocate(space, x.length, arrayClass);\n        safeSet(x, y.array(), { action, placeholder }); // array is safe here, as there's no allocations inside safeSet.\n    } catch(e) {\n        // Setting might throw weird errors, so we need to \n        // catch and release the memory if the conversion fails.\n        if (typeof y !== \"undefined\") {\n            y.free();\n        }\n        throw e;\n    }\n\n    return y;\n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain Uint8WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {Uint8WasmArray} Instance of a {@linkplain Uint8WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToUint8WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, Uint8WasmArray, options);    \n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain Int8WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {Int8WasmArray} Instance of a {@linkplain Int8WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToInt8WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, Int8WasmArray, options);    \n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain Uint16WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {Uint16WasmArray} Instance of a {@linkplain Uint16WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToUint16WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, Uint16WasmArray, options);\n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain Int16WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {Int16WasmArray} Instance of a {@linkplain Int16WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToInt16WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, Int16WasmArray, options);\n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain Uint32WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {Uint32WasmArray} Instance of a {@linkplain Uint32WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToUint32WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, Uint32WasmArray, options);\n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain Int32WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {Int32WasmArray} Instance of a {@linkplain Int32WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToInt32WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, Int32WasmArray, options);\n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain BigUint64WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {BigUint64WasmArray} Instance of a {@linkplain BigUint64WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToBigUint64WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, BigUint64WasmArray, options);\n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain BigInt64WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {BigInt64WasmArray} Instance of a {@linkplain BigInt64WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToBigInt64WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, BigInt64WasmArray, options);\n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain Float32WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {Float32WasmArray} Instance of a {@linkplain Float32WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToFloat32WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, Float32WasmArray, options);\n}\n\n/**\n * Convert a (Typed)Array into a new {@linkplain Float64WasmArray}. \n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {(Array|TypedArray)} x - Array to be converted.\n * @param {object} [options={}] - Further options, see {@linkcode convertToWasmArray}.\n *\n * @return {Float64WasmArray} Instance of a {@linkplain Float64WasmArray} subclass containing the same contents as `x`.\n */\nexport function convertToFloat64WasmArray(space, x, options = {}) {\n    return convertToWasmArray(space, x, Float64WasmArray, options);\n}\n","import { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} view of the specified subclass.\n * It is assumed that some unknown entity owns the Wasm heap allocation;\n * for example, Emscripten-defined bindings on C++ classes that own array data,\n * where it may be of interest to wrap these arrays in WasmArray instances for downstream processing.\n * The caller is responsible for ensuring that the lifetime of the returned WasmArray view does not exceed that of the owner.\n * Note that this function differs from {@linkcode WasmArray#view WasmArray.view}, which creates a WasmArray view from an exising WasmArray.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * This may need to be a certain multiple of 2, 4 or 8, depending on `arrayClass`.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return {WasmArray} Instance of a {@linkplain WasmArray} subclass containing a view on the heap.\n */\nexport function createWasmArrayView(space, length, offset, arrayClass) {\n    return new arrayClass(space, -1, length, offset, {});\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint8WasmArray} Instance of a {@linkplain Uint8WasmArray} view.\n */\nexport function createUint8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint8WasmArray); \n}\n\n/**\n * Create an {@linkplain Int8WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int8WasmArray} Instance of an {@linkplain Int8WasmArray} view.\n */\nexport function createInt8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint16WasmArray} Instance of a {@linkplain Uint16WasmArray} view.\n */\nexport function createUint16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint16WasmArray); \n}\n\n/**\n * Create an {@linkplain Int16WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int16WasmArray} Instance of an {@linkplain Int16WasmArray} view.\n */\nexport function createInt16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Uint32WasmArray} Instance of a {@linkplain Uint32WasmArray} view.\n */\nexport function createUint32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint32WasmArray); \n}\n\n/**\n * Create an {@linkplain Int32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Int32WasmArray} Instance of an {@linkplain Int32WasmArray} view.\n */\nexport function createInt32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {BigUint64WasmArray} Instance of a {@linkplain BigUint64WasmArray} view.\n */\nexport function createBigUint64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigUint64WasmArray); \n}\n\n/**\n * Create an {@linkplain BigInt64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {BigInt64WasmArray} Instance of an {@linkplain BigInt64WasmArray} view.\n */\nexport function createBigInt64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigInt64WasmArray); \n}\n\n\n/**\n * Create a {@linkplain Float32WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Float32WasmArray} Instance of a {@linkplain Float32WasmArray} view.\n */\nexport function createFloat32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray} view on Wasm memory owned by some unknown entity (see {@linkcode createWasmArrayView} for details).\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return {Float64WasmArray} Instance of a {@linkplain Float64WasmArray} view.\n */\nexport function createFloat64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float64WasmArray); \n}\n","import { WasmArray } from \"./base.js\";\n\nfunction grab_properties(x) {\n    let lower_limit = Number.NEGATIVE_INFINITY;\n    let upper_limit = Number.POSITIVE_INFINITY;\n    let has_special = false;\n    let is_array = false;\n    let is_bigint = false;\n\n    if (x.constructor == Array) {\n        is_array = true;\n    } else {\n        let bits = null; \n        let signed;\n\n        if (x.constructor.name.startsWith(\"Uint\")) {\n            bits = Number(x.constructor.name.replace(/^Uint/, \"\").replace(/Array$/, \"\"))\n            signed = false;\n        } else if (x.constructor.name.startsWith(\"Int\")) {\n            bits = Number(x.constructor.name.replace(/^Int/, \"\").replace(/Array$/, \"\"))\n            signed = true;\n        } else if (x.constructor.name.startsWith(\"Big\")) {\n            bits = 64;\n            signed = x.constructor.name.startsWith(\"BigInt\");\n            is_bigint = true;\n        }\n\n        if (bits != null) {\n            if (!signed) {\n                lower_limit = 0;\n                upper_limit = 2 ** bits - 1;\n            } else {\n                lower_limit = - (2 ** (bits - 1));\n                upper_limit = 2 ** (bits - 1) - 1;\n            }\n        } else {\n            has_special = true\n        }\n    }\n\n    return { \n        lower: lower_limit,\n        upper: upper_limit,\n        bigint: is_bigint,\n        special: has_special,\n        array: is_array\n    };\n}\n\n/**\n * Safely set the contents of one array from another, triggering warnings or errors on overflow and other invalid insertions.\n * Note that loss of precision when copying to/from floating-point is considered to be acceptable.\n *\n * @param {Array|TypedArray|WasmArray} from - Array of values to copy from.\n * @param {TypedArray|WasmArray} to - Array of values to copy to.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.offset=0] - Offset in `to` to start copying to.\n * @param {string} [options.action=\"warn\"] - How to handle invalid entries in `from` (that cannot be represented in `to`).\n * This can be one of:\n *\n * - `\"none\"`: the invalid entry is silently replaced with the `placeholder` value.\n * - `\"warn\"`: emits a warning on the first invalid entry.\n *   The invalid entry is replaced with the `placeholder` value.\n * - `\"error\"`: an error is raised upon encountering an invalid entry.\n *\n * @param {number} [options.placeholder=0] - Placeholder value, used to replace invalid entries.\n *\n * @return `to` is filled with the contents of `from`, starting at the specified `offset`.\n */\nexport function safeSet(from, to, { offset = 0, action = \"warn\", placeholder = 0 } = {}) {\n    if (to.length < from.length + offset) {\n        throw new Error(\"length of 'from' exceeds the length of 'to' at the specified 'offset'\");\n    }\n\n    if (to.constructor.name == from.constructor.name) {\n        to.set(from, offset);\n        return;\n    }\n\n    let fromprop = grab_properties(from);\n    let toprop = grab_properties(to);\n\n    // If permissible, we can directly set the contents of the TypedArray.\n    if (fromprop.lower >= toprop.lower && fromprop.upper <= toprop.upper && fromprop.special <= toprop.special && fromprop.bigint == toprop.bigint && !fromprop.array) {\n        to.set(from, offset);\n        return;\n    }\n\n    // Defining the doer function.\n    let doer;\n    if (action == \"none\") {\n        doer = y => {\n            return placeholder;\n        };\n    } else {\n        let msg = \"from a \" + from.constructor.name + \" to a \" + to.constructor.name;\n\n        if (action == \"warn\") {\n            let warned = false;\n            doer = y => {\n                if (!warned) {\n                    console.warn(\"cannot safely insert '\" + String(y) + \"' \" + msg)\n                    warned = true;\n                }\n                return placeholder;\n            };\n        } else if (action == \"error\") {\n            doer = y => {\n                throw new Error(\"cannot safely insert '\" + String(y) + \"' \" + msg)\n            };\n        } else {\n            throw new Error(\"unknown action '\" + action + \"' for handling invalid values\");\n        }\n    }\n\n    let sanitize_number = y => {\n        if (fromprop.special && !Number.isFinite(y)) {\n            if (!toprop.special) {\n                return doer(y);\n            }\n        } else if (toprop.lower > y || toprop.upper < y) {\n            return doer(y);\n        }\n        return y;\n    };\n\n    // BigInts need special handling, as always.\n    if (fromprop.bigint && !toprop.bigint) {\n        for (var i = 0; i < from.length; i++) {\n            let y = Number(from[i]);\n            if (toprop.lower > y || toprop.upper < y) {\n                y = doer(y);\n            }\n            to[i + offset] = y;\n        }\n        return;\n    }\n\n    if (toprop.bigint) {\n        let lower_limit;\n        let upper_limit;\n        if (to.constructor == BigUint64Array) {\n            lower_limit = 0n;\n            upper_limit = 2n ** 64n - 1n;\n        } else {\n            lower_limit = -(2n ** 63n);\n            upper_limit = 2n ** 63n - 1n;\n        }\n\n        if (fromprop.bigint) {\n            for (var i = 0; i < from.length; i++) {\n                let y = from[i];\n                if (lower_limit > y || upper_limit < y) {\n                    y = BigInt(doer(y));\n                }\n                to[i + offset] = y;\n            }\n            return;\n        }\n\n        if (fromprop.array) {\n            for (var i = 0; i < from.length; i++) {\n                let y = from[i];\n                if (typeof y == \"bigint\") {\n                    if (lower_limit > y || upper_limit < y) {\n                        y = BigInt(doer(y));\n                    }\n                } else if (typeof y == \"number\") {\n                    y = BigInt(sanitize_number(y));\n                } else if (typeof y == \"boolean\") {\n                    y = BigInt(y);\n                } else {\n                    y = BigInt(doer(y))\n                }\n                to[i + offset] = y;\n            }\n            return;\n        }\n\n        for (var i = 0; i < from.length; i++) {\n            to[i + offset] = BigInt(sanitize_number(from[i]));\n        }\n        return;\n    }\n\n    // Arrays need special handling as well.\n    if (fromprop.array) {\n        for (var i = 0; i < from.length; i++) {\n            let y = from[i];\n            if (typeof y === \"bigint\" || typeof y == \"boolean\") {\n                y = Number(y);\n            } else if (typeof y !== \"number\") {\n                y = doer(y);\n            }\n            to[i + offset] = sanitize_number(y);\n        }\n        return;\n    }\n\n    // Okay, finally, non-bigint typedarray to another non-bigint typedarray.\n    for (var i = 0; i < from.length; i++) {\n        to[i + offset] = sanitize_number(from[i]);\n    }\n\n    return;\n}\n","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import * as wasm from \"./wasm.js\";\n\nconst memories = {};\nlet counter = 0;\n\nexport function release(id) {\n    if (id in memories) {\n        memories[id].delete();\n        delete memories[id];\n    }\n    return;\n}\n\nconst finalizer = new FinalizationRegistry(release);\n\nexport function call(fun, constructor, ...other) {\n    let raw = wasm.call(fun);\n\n    let id = counter;\n    memories[id] = raw; \n    counter++;\n    \n    let output;\n    try {\n        output = new constructor(id, raw, ...other);\n    } catch (e) {\n        release(id);\n        throw e;\n    }\n\n    finalizer.register(output, id);\n    return output;\n}\n\n\n","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","const memories = {};\n\nexport function release(space, id) {\n    if (space in memories) {\n        let cur_memory = memories[space];\n        let cur_live = cur_memory.live;\n        if (id in cur_live) {\n            let cur_module = cur_memory.module;\n            cur_module._free(cur_live[id]);\n            delete cur_live[id];\n        }\n    }\n}\n\nexport function allocate(space, length, arrayClass) {\n    let current = memories[space];\n\n    let curmod = current.module;\n    let curlive = current.live;\n\n    let offset;\n    let x;\n    try {\n        offset = curmod._malloc(arrayClass.valueSize * length);\n        curlive[current.ids] = offset;\n        x = new arrayClass(space, current.ids, length, offset, null);\n\n        finalizer.register(x, { space: space, id: current.ids });\n        current.ids++;\n    } catch (e) {\n        if (typeof offset !== \"undefined\") {\n            curmod._free(offset);\n        }\n        throw e;\n    }\n\n    return x\n}\n\nexport function buffer(space) {\n    let curmod = memories[space].module;\n    return curmod.HEAP8.buffer;\n}\n\nconst finalizer = new FinalizationRegistry(held => {\n    release(held.space, held.id);\n});\n\nvar spaces = 0;\n\n/**\n * Register a Wasm module for creation of {@linkplain WasmArray}s.\n *\n * @param {object} module - A Wasm module object, usually produced by Emscripten.\n *\n * @return {number} Integer containing the identifier for this module's memory space.\n */\nexport function register(module) {\n    let space = spaces;\n    memories[space] = {\n        module: module, \n        live: {}, \n        ids: 0\n    };\n    spaces += 1;\n    return space;\n}\n","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import assertClassBrand from \"./assertClassBrand.js\";\nfunction _classPrivateFieldSet2(s, a, r) {\n  return s.set(assertClassBrand(s, a), r), r;\n}\nexport { _classPrivateFieldSet2 as default };","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nexport { _classPrivateFieldInitSpec as default };","function _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nexport { _assertClassBrand as default };","function _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nexport { _checkPrivateRedeclaration as default };","import assertClassBrand from \"./assertClassBrand.js\";\nfunction _classPrivateFieldGet2(s, a) {\n  return s.get(assertClassBrand(s, a));\n}\nexport { _classPrivateFieldGet2 as default };","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nfunction _classPrivateMethodInitSpec(e, a) {\n  checkPrivateRedeclaration(e, a), a.add(e);\n}\nexport { _classPrivateMethodInitSpec as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };"],"names":["_objectWithoutProperties","e","t","o","r","i","Object","getOwnPropertySymbols","n","length","indexOf","propertyIsEnumerable","call","_space","WeakMap","_id","_length","_offset","_owner","WasmArray","constructor","space","id","offset","owner","_classPrivateFieldInitSpec","_classPrivateFieldSet","this","_classPrivateFieldGet","byteOffset","buffer","byteLength","valueSize","fill","x","start","end","y","array","arguments","set","slice","clone","output","allocate","view","new_length","original_parent","adjust","free","release","Symbol","iterator","values","keys","at","index","forEach","callbackFn","thisArg","filter","map","subarray","begin","every","some","reduce","initialValue","reduceRight","sort","compareFn","reverse","convertToWasmArray","arrayClass","action","placeholder","undefined","ArrayBuffer","isView","input","name","stringToClass","replace","Error","Float64WasmArray","safeSet","createWasmArrayView","grab_properties","lower_limit","Number","NEGATIVE_INFINITY","upper_limit","POSITIVE_INFINITY","has_special","is_array","is_bigint","Array","signed","bits","startsWith","lower","upper","bigint","special","from","to","doer","fromprop","toprop","msg","warned","console","warn","String","sanitize_number","isFinite","BigUint64Array","BigInt","_typeof","prototype","memories","counter","delete","finalizer","FinalizationRegistry","fun","raw","wasm","_len","other","_key","register","toPrimitive","TypeError","cur_memory","cur_live","live","module","_free","current","curmod","curlive","_malloc","ids","HEAP8","held","spaces","_defineProperty","defineProperty","value","enumerable","configurable","writable","_classPrivateFieldSet2","s","a","_assertClassBrand","has","_checkPrivateRedeclaration","_classPrivateFieldGet2","get","_objectWithoutPropertiesLoose","hasOwnProperty","ownKeys","getOwnPropertyDescriptor","push","apply","_objectSpread2","getOwnPropertyDescriptors","defineProperties","_classPrivateMethodInitSpec","add","toPropertyKey"],"sourceRoot":""}